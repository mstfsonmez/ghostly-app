{"dependencies":[{"name":"./commons.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":67,"index":67}}],"key":"glGFVKq6JnHqcEVNii1WndfU66Y=","exportNames":["*"],"imports":1}},{"name":"./contrib/base64-arraybuffer.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":68},"end":{"line":2,"column":57,"index":125}}],"key":"C+OlAsR2W474SMJWERSPa0EDsOg=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"decodePacket\", {\n    enumerable: true,\n    get: function () {\n      return decodePacket;\n    }\n  });\n  var _commonsJs = require(_dependencyMap[0], \"./commons.js\");\n  var _contribBase64ArraybufferJs = require(_dependencyMap[1], \"./contrib/base64-arraybuffer.js\");\n  const withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\n  const decodePacket = (encodedPacket, binaryType) => {\n    if (typeof encodedPacket !== \"string\") {\n      return {\n        type: \"message\",\n        data: mapBinary(encodedPacket, binaryType)\n      };\n    }\n    const type = encodedPacket.charAt(0);\n    if (type === \"b\") {\n      return {\n        type: \"message\",\n        data: decodeBase64Packet(encodedPacket.substring(1), binaryType)\n      };\n    }\n    const packetType = _commonsJs.PACKET_TYPES_REVERSE[type];\n    if (!packetType) {\n      return _commonsJs.ERROR_PACKET;\n    }\n    return encodedPacket.length > 1 ? {\n      type: _commonsJs.PACKET_TYPES_REVERSE[type],\n      data: encodedPacket.substring(1)\n    } : {\n      type: _commonsJs.PACKET_TYPES_REVERSE[type]\n    };\n  };\n  const decodeBase64Packet = (data, binaryType) => {\n    if (withNativeArrayBuffer) {\n      const decoded = (0, _contribBase64ArraybufferJs.decode)(data);\n      return mapBinary(decoded, binaryType);\n    } else {\n      return {\n        base64: true,\n        data\n      }; // fallback for old browsers\n    }\n  };\n  const mapBinary = (data, binaryType) => {\n    switch (binaryType) {\n      case \"blob\":\n        if (data instanceof Blob) {\n          // from WebSocket + binaryType \"blob\"\n          return data;\n        } else {\n          // from HTTP long-polling or WebTransport\n          return new Blob([data]);\n        }\n      case \"arraybuffer\":\n      default:\n        if (data instanceof ArrayBuffer) {\n          // from HTTP long-polling (base64) or WebSocket + binaryType \"arraybuffer\"\n          return data;\n        } else {\n          // from WebTransport (Uint8Array)\n          return data.buffer;\n        }\n    }\n  };\n});","lineCount":73,"map":[[7,2,4,0,"Object"],[7,8,4,0],[7,9,4,0,"defineProperty"],[7,23,4,0],[7,24,4,0,"exports"],[7,31,4,0],[8,4,4,0,"enumerable"],[8,14,4,0],[9,4,4,0,"get"],[9,7,4,0],[9,18,4,0,"get"],[9,19,4,0],[10,6,4,0],[10,13,4,0,"decodePacket"],[10,25,4,0],[11,4,4,0],[12,2,4,0],[13,2,1,0],[13,6,1,0,"_commonsJs"],[13,16,1,0],[13,19,1,0,"require"],[13,26,1,0],[13,27,1,0,"_dependencyMap"],[13,41,1,0],[14,2,2,0],[14,6,2,0,"_contribBase64ArraybufferJs"],[14,33,2,0],[14,36,2,0,"require"],[14,43,2,0],[14,44,2,0,"_dependencyMap"],[14,58,2,0],[15,2,3,0],[15,8,3,6,"withNativeArrayBuffer"],[15,29,3,27],[15,32,3,30],[15,39,3,37,"ArrayBuffer"],[15,50,3,48],[15,55,3,53],[15,65,3,63],[16,2,4,7],[16,8,4,13,"decodePacket"],[16,20,4,25],[16,23,4,28,"decodePacket"],[16,24,4,29,"encodedPacket"],[16,37,4,42],[16,39,4,44,"binaryType"],[16,49,4,54],[16,54,4,59],[17,4,5,4],[17,8,5,8],[17,15,5,15,"encodedPacket"],[17,28,5,28],[17,33,5,33],[17,41,5,41],[17,43,5,43],[18,6,6,8],[18,13,6,15],[19,8,7,12,"type"],[19,12,7,16],[19,14,7,18],[19,23,7,27],[20,8,8,12,"data"],[20,12,8,16],[20,14,8,18,"mapBinary"],[20,23,8,27],[20,24,8,28,"encodedPacket"],[20,37,8,41],[20,39,8,43,"binaryType"],[20,49,8,53],[21,6,9,8],[21,7,9,9],[22,4,10,4],[23,4,11,4],[23,10,11,10,"type"],[23,14,11,14],[23,17,11,17,"encodedPacket"],[23,30,11,30],[23,31,11,31,"charAt"],[23,37,11,37],[23,38,11,38],[23,39,11,39],[23,40,11,40],[24,4,12,4],[24,8,12,8,"type"],[24,12,12,12],[24,17,12,17],[24,20,12,20],[24,22,12,22],[25,6,13,8],[25,13,13,15],[26,8,14,12,"type"],[26,12,14,16],[26,14,14,18],[26,23,14,27],[27,8,15,12,"data"],[27,12,15,16],[27,14,15,18,"decodeBase64Packet"],[27,32,15,36],[27,33,15,37,"encodedPacket"],[27,46,15,50],[27,47,15,51,"substring"],[27,56,15,60],[27,57,15,61],[27,58,15,62],[27,59,15,63],[27,61,15,65,"binaryType"],[27,71,15,75],[28,6,16,8],[28,7,16,9],[29,4,17,4],[30,4,18,4],[30,10,18,10,"packetType"],[30,20,18,20],[30,23,18,23,"PACKET_TYPES_REVERSE"],[30,33,18,43],[30,34,18,43,"PACKET_TYPES_REVERSE"],[30,54,18,43],[30,55,18,44,"type"],[30,59,18,48],[30,60,18,49],[31,4,19,4],[31,8,19,8],[31,9,19,9,"packetType"],[31,19,19,19],[31,21,19,21],[32,6,20,8],[32,13,20,15,"ERROR_PACKET"],[32,23,20,27],[32,24,20,27,"ERROR_PACKET"],[32,36,20,27],[33,4,21,4],[34,4,22,4],[34,11,22,11,"encodedPacket"],[34,24,22,24],[34,25,22,25,"length"],[34,31,22,31],[34,34,22,34],[34,35,22,35],[34,38,23,10],[35,6,24,12,"type"],[35,10,24,16],[35,12,24,18,"PACKET_TYPES_REVERSE"],[35,22,24,38],[35,23,24,38,"PACKET_TYPES_REVERSE"],[35,43,24,38],[35,44,24,39,"type"],[35,48,24,43],[35,49,24,44],[36,6,25,12,"data"],[36,10,25,16],[36,12,25,18,"encodedPacket"],[36,25,25,31],[36,26,25,32,"substring"],[36,35,25,41],[36,36,25,42],[36,37,25,43],[37,4,26,8],[37,5,26,9],[37,8,27,10],[38,6,28,12,"type"],[38,10,28,16],[38,12,28,18,"PACKET_TYPES_REVERSE"],[38,22,28,38],[38,23,28,38,"PACKET_TYPES_REVERSE"],[38,43,28,38],[38,44,28,39,"type"],[38,48,28,43],[39,4,29,8],[39,5,29,9],[40,2,30,0],[40,3,30,1],[41,2,31,0],[41,8,31,6,"decodeBase64Packet"],[41,26,31,24],[41,29,31,27,"decodeBase64Packet"],[41,30,31,28,"data"],[41,34,31,32],[41,36,31,34,"binaryType"],[41,46,31,44],[41,51,31,49],[42,4,32,4],[42,8,32,8,"withNativeArrayBuffer"],[42,29,32,29],[42,31,32,31],[43,6,33,8],[43,12,33,14,"decoded"],[43,19,33,21],[43,22,33,24],[43,26,33,24,"decode"],[43,53,33,30],[43,54,33,30,"decode"],[43,60,33,30],[43,62,33,31,"data"],[43,66,33,35],[43,67,33,36],[44,6,34,8],[44,13,34,15,"mapBinary"],[44,22,34,24],[44,23,34,25,"decoded"],[44,30,34,32],[44,32,34,34,"binaryType"],[44,42,34,44],[44,43,34,45],[45,4,35,4],[45,5,35,5],[45,11,36,9],[46,6,37,8],[46,13,37,15],[47,8,37,17,"base64"],[47,14,37,23],[47,16,37,25],[47,20,37,29],[48,8,37,31,"data"],[49,6,37,36],[49,7,37,37],[49,8,37,38],[49,9,37,39],[50,4,38,4],[51,2,39,0],[51,3,39,1],[52,2,40,0],[52,8,40,6,"mapBinary"],[52,17,40,15],[52,20,40,18,"mapBinary"],[52,21,40,19,"data"],[52,25,40,23],[52,27,40,25,"binaryType"],[52,37,40,35],[52,42,40,40],[53,4,41,4],[53,12,41,12,"binaryType"],[53,22,41,22],[54,6,42,8],[54,11,42,13],[54,17,42,19],[55,8,43,12],[55,12,43,16,"data"],[55,16,43,20],[55,28,43,32,"Blob"],[55,32,43,36],[55,34,43,38],[56,10,44,16],[57,10,45,16],[57,17,45,23,"data"],[57,21,45,27],[58,8,46,12],[58,9,46,13],[58,15,47,17],[59,10,48,16],[60,10,49,16],[60,17,49,23],[60,21,49,27,"Blob"],[60,25,49,31],[60,26,49,32],[60,27,49,33,"data"],[60,31,49,37],[60,32,49,38],[60,33,49,39],[61,8,50,12],[62,6,51,8],[62,11,51,13],[62,24,51,26],[63,6,52,8],[64,8,53,12],[64,12,53,16,"data"],[64,16,53,20],[64,28,53,32,"ArrayBuffer"],[64,39,53,43],[64,41,53,45],[65,10,54,16],[66,10,55,16],[66,17,55,23,"data"],[66,21,55,27],[67,8,56,12],[67,9,56,13],[67,15,57,17],[68,10,58,16],[69,10,59,16],[69,17,59,23,"data"],[69,21,59,27],[69,22,59,28,"buffer"],[69,28,59,34],[70,8,60,12],[71,4,61,4],[72,2,62,0],[72,3,62,1],[73,0,62,2],[73,3]],"functionMap":{"names":["<global>","decodePacket","decodeBase64Packet","mapBinary"],"mappings":"AAA;4BCG;CD0B;2BEC;CFQ;kBGC;CHsB"},"hasCjsExports":false},"type":"js/module"}]}