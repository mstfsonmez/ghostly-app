{"dependencies":[{"name":"expo/virtual/env","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dgHc21cgR+buKc7O3/dChhD5JJk=","exportNames":["*"],"imports":1}},{"name":"socket.io-client","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":46,"index":46}}],"key":"LVgCyxgUdze/lYG0kA6DdCAztfM=","exportNames":["*"],"imports":1}},{"name":"expo-constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":117},"end":{"line":3,"column":39,"index":156}}],"key":"pPv5KzfRT0rL6NCr7G9k0o4d1W8=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  var _expoVirtualEnv = require(_dependencyMap[0], \"expo/virtual/env\");\n  var _socketIoClient = require(_dependencyMap[1], \"socket.io-client\");\n  var _expoConstants = require(_dependencyMap[2], \"expo-constants\");\n  var Constants = _interopDefault(_expoConstants);\n  const API_URL = Constants.default.expoConfig?.extra?.EXPO_PUBLIC_BACKEND_URL || _expoVirtualEnv.env.EXPO_PUBLIC_BACKEND_URL || 'http://localhost:8001';\n  class SocketService {\n    socket = null;\n    isConnected = false;\n    connectionListeners = [];\n    pendingListeners = [];\n    async connect() {\n      try {\n        console.log('🔵 Connecting to Socket.IO server:', API_URL);\n\n        // Force polling transport only (WebSocket blocked by Kubernetes proxy)\n        this.socket = (0, _socketIoClient.io)(API_URL, {\n          path: '/socket.io/',\n          transports: ['polling'],\n          // Only use polling, not websocket\n          reconnection: true,\n          reconnectionDelay: 1000,\n          reconnectionAttempts: 5,\n          timeout: 10000\n        });\n        this.socket.on('connect', () => {\n          console.log('✅ Socket connected:', this.socket?.id);\n          this.isConnected = true;\n          this.notifyConnectionListeners(true);\n\n          // Register all pending listeners now that socket is connected\n          console.log(`📝 Registering ${this.pendingListeners.length} pending listeners`);\n          this.pendingListeners.forEach(({\n            event,\n            callback\n          }) => {\n            if (this.socket) {\n              this.socket.on(event, callback);\n              console.log(`✅ Registered listener for: ${event}`);\n            }\n          });\n          this.pendingListeners = [];\n        });\n        this.socket.on('disconnect', reason => {\n          console.log('❌ Socket disconnected:', reason);\n          this.isConnected = false;\n          this.notifyConnectionListeners(false);\n        });\n        this.socket.on('connect_error', error => {\n          console.error('❌ Connection error:', error.message);\n          this.isConnected = false;\n          this.notifyConnectionListeners(false);\n        });\n        return true;\n      } catch (error) {\n        console.error('Socket connection error:', error);\n        return false;\n      }\n    }\n    disconnect() {\n      if (this.socket) {\n        this.socket.disconnect();\n        this.socket = null;\n        this.isConnected = false;\n      }\n    }\n    emit(event, data) {\n      if (this.socket && this.isConnected) {\n        console.log(`📤 Emitting: ${event}`, data);\n        this.socket.emit(event, data);\n      } else {\n        console.warn('⚠️ Socket not connected, cannot emit:', event);\n      }\n    }\n    on(event, callback) {\n      if (this.socket && this.isConnected) {\n        // Socket is already connected, register immediately\n        console.log(`✅ Registering listener immediately for: ${event}`);\n        this.socket.on(event, callback);\n      } else {\n        // Socket not connected yet, queue the listener\n        console.log(`⏳ Queuing listener for: ${event}`);\n        this.pendingListeners.push({\n          event,\n          callback\n        });\n      }\n    }\n    off(event, callback) {\n      if (this.socket) {\n        this.socket.off(event, callback);\n      }\n      // Also remove from pending listeners\n      this.pendingListeners = this.pendingListeners.filter(listener => listener.event !== event || callback && listener.callback !== callback);\n    }\n    addConnectionListener(callback) {\n      this.connectionListeners.push(callback);\n    }\n    removeConnectionListener(callback) {\n      this.connectionListeners = this.connectionListeners.filter(listener => listener !== callback);\n    }\n    notifyConnectionListeners(isConnected) {\n      this.connectionListeners.forEach(callback => {\n        callback(isConnected);\n      });\n    }\n  }\n  var _default = new SocketService();\n});","lineCount":125,"map":[[12,2,119,0,"Object"],[12,8,119,0],[12,9,119,0,"defineProperty"],[12,23,119,0],[12,24,119,0,"exports"],[12,31,119,0],[13,4,119,0,"enumerable"],[13,14,119,0],[14,4,119,0,"get"],[14,7,119,0],[14,18,119,0,"get"],[14,19,119,0],[15,6,119,0],[15,13,119,0,"_default"],[15,21,119,0],[16,4,119,0],[17,2,119,0],[18,2,119,35],[18,6,119,35,"_expoVirtualEnv"],[18,21,119,35],[18,24,119,35,"require"],[18,31,119,35],[18,32,119,35,"_dependencyMap"],[18,46,119,35],[19,2,1,0],[19,6,1,0,"_socketIoClient"],[19,21,1,0],[19,24,1,0,"require"],[19,31,1,0],[19,32,1,0,"_dependencyMap"],[19,46,1,0],[20,2,3,0],[20,6,3,0,"_expoConstants"],[20,20,3,0],[20,23,3,0,"require"],[20,30,3,0],[20,31,3,0,"_dependencyMap"],[20,45,3,0],[21,2,3,0],[21,6,3,0,"Constants"],[21,15,3,0],[21,18,3,0,"_interopDefault"],[21,33,3,0],[21,34,3,0,"_expoConstants"],[21,48,3,0],[22,2,5,0],[22,8,5,6,"API_URL"],[22,15,5,13],[22,18,5,16,"Constants"],[22,27,5,25],[22,28,5,25,"default"],[22,35,5,25],[22,36,5,26,"expoConfig"],[22,46,5,36],[22,48,5,38,"extra"],[22,53,5,43],[22,55,5,45,"EXPO_PUBLIC_BACKEND_URL"],[22,78,5,68],[22,82,5,68,"_expoVirtualEnv"],[22,97,5,68],[22,98,5,68,"env"],[22,101,5,68],[22,102,5,68,"EXPO_PUBLIC_BACKEND_URL"],[22,125,5,107],[22,129,5,111],[22,152,5,134],[23,2,7,0],[23,8,7,6,"SocketService"],[23,21,7,19],[23,22,7,20],[24,4,8,2,"socket"],[24,10,8,8],[24,13,8,26],[24,17,8,30],[25,4,9,2,"isConnected"],[25,15,9,13],[25,18,9,25],[25,23,9,30],[26,4,10,2,"connectionListeners"],[26,23,10,21],[26,26,10,60],[26,28,10,62],[27,4,11,2,"pendingListeners"],[27,20,11,18],[27,23,11,73],[27,25,11,75],[28,4,13,2],[28,10,13,8,"connect"],[28,17,13,15,"connect"],[28,18,13,15],[28,20,13,18],[29,6,14,4],[29,10,14,8],[30,8,15,6,"console"],[30,15,15,13],[30,16,15,14,"log"],[30,19,15,17],[30,20,15,18],[30,56,15,54],[30,58,15,56,"API_URL"],[30,65,15,63],[30,66,15,64],[32,8,17,6],[33,8,18,6],[33,12,18,10],[33,13,18,11,"socket"],[33,19,18,17],[33,22,18,20],[33,26,18,20,"io"],[33,41,18,22],[33,42,18,22,"io"],[33,44,18,22],[33,46,18,23,"API_URL"],[33,53,18,30],[33,55,18,32],[34,10,19,8,"path"],[34,14,19,12],[34,16,19,14],[34,29,19,27],[35,10,20,8,"transports"],[35,20,20,18],[35,22,20,20],[35,23,20,21],[35,32,20,30],[35,33,20,31],[36,10,20,33],[37,10,21,8,"reconnection"],[37,22,21,20],[37,24,21,22],[37,28,21,26],[38,10,22,8,"reconnectionDelay"],[38,27,22,25],[38,29,22,27],[38,33,22,31],[39,10,23,8,"reconnectionAttempts"],[39,30,23,28],[39,32,23,30],[39,33,23,31],[40,10,24,8,"timeout"],[40,17,24,15],[40,19,24,17],[41,8,25,6],[41,9,25,7],[41,10,25,8],[42,8,27,6],[42,12,27,10],[42,13,27,11,"socket"],[42,19,27,17],[42,20,27,18,"on"],[42,22,27,20],[42,23,27,21],[42,32,27,30],[42,34,27,32],[42,40,27,38],[43,10,28,8,"console"],[43,17,28,15],[43,18,28,16,"log"],[43,21,28,19],[43,22,28,20],[43,43,28,41],[43,45,28,43],[43,49,28,47],[43,50,28,48,"socket"],[43,56,28,54],[43,58,28,56,"id"],[43,60,28,58],[43,61,28,59],[44,10,29,8],[44,14,29,12],[44,15,29,13,"isConnected"],[44,26,29,24],[44,29,29,27],[44,33,29,31],[45,10,30,8],[45,14,30,12],[45,15,30,13,"notifyConnectionListeners"],[45,40,30,38],[45,41,30,39],[45,45,30,43],[45,46,30,44],[47,10,32,8],[48,10,33,8,"console"],[48,17,33,15],[48,18,33,16,"log"],[48,21,33,19],[48,22,33,20],[48,40,33,38],[48,44,33,42],[48,45,33,43,"pendingListeners"],[48,61,33,59],[48,62,33,60,"length"],[48,68,33,66],[48,88,33,86],[48,89,33,87],[49,10,34,8],[49,14,34,12],[49,15,34,13,"pendingListeners"],[49,31,34,29],[49,32,34,30,"forEach"],[49,39,34,37],[49,40,34,38],[49,41,34,39],[50,12,34,41,"event"],[50,17,34,46],[51,12,34,48,"callback"],[52,10,34,57],[52,11,34,58],[52,16,34,63],[53,12,35,10],[53,16,35,14],[53,20,35,18],[53,21,35,19,"socket"],[53,27,35,25],[53,29,35,27],[54,14,36,12],[54,18,36,16],[54,19,36,17,"socket"],[54,25,36,23],[54,26,36,24,"on"],[54,28,36,26],[54,29,36,27,"event"],[54,34,36,32],[54,36,36,34,"callback"],[54,44,36,42],[54,45,36,43],[55,14,37,12,"console"],[55,21,37,19],[55,22,37,20,"log"],[55,25,37,23],[55,26,37,24],[55,56,37,54,"event"],[55,61,37,59],[55,63,37,61],[55,64,37,62],[56,12,38,10],[57,10,39,8],[57,11,39,9],[57,12,39,10],[58,10,40,8],[58,14,40,12],[58,15,40,13,"pendingListeners"],[58,31,40,29],[58,34,40,32],[58,36,40,34],[59,8,41,6],[59,9,41,7],[59,10,41,8],[60,8,43,6],[60,12,43,10],[60,13,43,11,"socket"],[60,19,43,17],[60,20,43,18,"on"],[60,22,43,20],[60,23,43,21],[60,35,43,33],[60,37,43,36,"reason"],[60,43,43,50],[60,47,43,55],[61,10,44,8,"console"],[61,17,44,15],[61,18,44,16,"log"],[61,21,44,19],[61,22,44,20],[61,46,44,44],[61,48,44,46,"reason"],[61,54,44,52],[61,55,44,53],[62,10,45,8],[62,14,45,12],[62,15,45,13,"isConnected"],[62,26,45,24],[62,29,45,27],[62,34,45,32],[63,10,46,8],[63,14,46,12],[63,15,46,13,"notifyConnectionListeners"],[63,40,46,38],[63,41,46,39],[63,46,46,44],[63,47,46,45],[64,8,47,6],[64,9,47,7],[64,10,47,8],[65,8,49,6],[65,12,49,10],[65,13,49,11,"socket"],[65,19,49,17],[65,20,49,18,"on"],[65,22,49,20],[65,23,49,21],[65,38,49,36],[65,40,49,39,"error"],[65,45,49,51],[65,49,49,56],[66,10,50,8,"console"],[66,17,50,15],[66,18,50,16,"error"],[66,23,50,21],[66,24,50,22],[66,45,50,43],[66,47,50,45,"error"],[66,52,50,50],[66,53,50,51,"message"],[66,60,50,58],[66,61,50,59],[67,10,51,8],[67,14,51,12],[67,15,51,13,"isConnected"],[67,26,51,24],[67,29,51,27],[67,34,51,32],[68,10,52,8],[68,14,52,12],[68,15,52,13,"notifyConnectionListeners"],[68,40,52,38],[68,41,52,39],[68,46,52,44],[68,47,52,45],[69,8,53,6],[69,9,53,7],[69,10,53,8],[70,8,55,6],[70,15,55,13],[70,19,55,17],[71,6,57,4],[71,7,57,5],[71,8,57,6],[71,15,57,13,"error"],[71,20,57,18],[71,22,57,20],[72,8,58,6,"console"],[72,15,58,13],[72,16,58,14,"error"],[72,21,58,19],[72,22,58,20],[72,48,58,46],[72,50,58,48,"error"],[72,55,58,53],[72,56,58,54],[73,8,59,6],[73,15,59,13],[73,20,59,18],[74,6,60,4],[75,4,61,2],[76,4,63,2,"disconnect"],[76,14,63,12,"disconnect"],[76,15,63,12],[76,17,63,15],[77,6,64,4],[77,10,64,8],[77,14,64,12],[77,15,64,13,"socket"],[77,21,64,19],[77,23,64,21],[78,8,65,6],[78,12,65,10],[78,13,65,11,"socket"],[78,19,65,17],[78,20,65,18,"disconnect"],[78,30,65,28],[78,31,65,29],[78,32,65,30],[79,8,66,6],[79,12,66,10],[79,13,66,11,"socket"],[79,19,66,17],[79,22,66,20],[79,26,66,24],[80,8,67,6],[80,12,67,10],[80,13,67,11,"isConnected"],[80,24,67,22],[80,27,67,25],[80,32,67,30],[81,6,68,4],[82,4,69,2],[83,4,71,2,"emit"],[83,8,71,6,"emit"],[83,9,71,7,"event"],[83,14,71,20],[83,16,71,22,"data"],[83,20,71,31],[83,22,71,33],[84,6,72,4],[84,10,72,8],[84,14,72,12],[84,15,72,13,"socket"],[84,21,72,19],[84,25,72,23],[84,29,72,27],[84,30,72,28,"isConnected"],[84,41,72,39],[84,43,72,41],[85,8,73,6,"console"],[85,15,73,13],[85,16,73,14,"log"],[85,19,73,17],[85,20,73,18],[85,36,73,34,"event"],[85,41,73,39],[85,43,73,41],[85,45,73,43,"data"],[85,49,73,47],[85,50,73,48],[86,8,74,6],[86,12,74,10],[86,13,74,11,"socket"],[86,19,74,17],[86,20,74,18,"emit"],[86,24,74,22],[86,25,74,23,"event"],[86,30,74,28],[86,32,74,30,"data"],[86,36,74,34],[86,37,74,35],[87,6,75,4],[87,7,75,5],[87,13,75,11],[88,8,76,6,"console"],[88,15,76,13],[88,16,76,14,"warn"],[88,20,76,18],[88,21,76,19],[88,60,76,58],[88,62,76,60,"event"],[88,67,76,65],[88,68,76,66],[89,6,77,4],[90,4,78,2],[91,4,80,2,"on"],[91,6,80,4,"on"],[91,7,80,5,"event"],[91,12,80,18],[91,14,80,20,"callback"],[91,22,80,49],[91,24,80,51],[92,6,81,4],[92,10,81,8],[92,14,81,12],[92,15,81,13,"socket"],[92,21,81,19],[92,25,81,23],[92,29,81,27],[92,30,81,28,"isConnected"],[92,41,81,39],[92,43,81,41],[93,8,82,6],[94,8,83,6,"console"],[94,15,83,13],[94,16,83,14,"log"],[94,19,83,17],[94,20,83,18],[94,63,83,61,"event"],[94,68,83,66],[94,70,83,68],[94,71,83,69],[95,8,84,6],[95,12,84,10],[95,13,84,11,"socket"],[95,19,84,17],[95,20,84,18,"on"],[95,22,84,20],[95,23,84,21,"event"],[95,28,84,26],[95,30,84,28,"callback"],[95,38,84,36],[95,39,84,37],[96,6,85,4],[96,7,85,5],[96,13,85,11],[97,8,86,6],[98,8,87,6,"console"],[98,15,87,13],[98,16,87,14,"log"],[98,19,87,17],[98,20,87,18],[98,47,87,45,"event"],[98,52,87,50],[98,54,87,52],[98,55,87,53],[99,8,88,6],[99,12,88,10],[99,13,88,11,"pendingListeners"],[99,29,88,27],[99,30,88,28,"push"],[99,34,88,32],[99,35,88,33],[100,10,88,35,"event"],[100,15,88,40],[101,10,88,42,"callback"],[102,8,88,51],[102,9,88,52],[102,10,88,53],[103,6,89,4],[104,4,90,2],[105,4,92,2,"off"],[105,7,92,5,"off"],[105,8,92,6,"event"],[105,13,92,19],[105,15,92,21,"callback"],[105,23,92,51],[105,25,92,53],[106,6,93,4],[106,10,93,8],[106,14,93,12],[106,15,93,13,"socket"],[106,21,93,19],[106,23,93,21],[107,8,94,6],[107,12,94,10],[107,13,94,11,"socket"],[107,19,94,17],[107,20,94,18,"off"],[107,23,94,21],[107,24,94,22,"event"],[107,29,94,27],[107,31,94,29,"callback"],[107,39,94,37],[107,40,94,38],[108,6,95,4],[109,6,96,4],[110,6,97,4],[110,10,97,8],[110,11,97,9,"pendingListeners"],[110,27,97,25],[110,30,97,28],[110,34,97,32],[110,35,97,33,"pendingListeners"],[110,51,97,49],[110,52,97,50,"filter"],[110,58,97,56],[110,59,98,6,"listener"],[110,67,98,14],[110,71,98,18,"listener"],[110,79,98,26],[110,80,98,27,"event"],[110,85,98,32],[110,90,98,37,"event"],[110,95,98,42],[110,99,98,47,"callback"],[110,107,98,55],[110,111,98,59,"listener"],[110,119,98,67],[110,120,98,68,"callback"],[110,128,98,76],[110,133,98,81,"callback"],[110,141,99,4],[110,142,99,5],[111,4,100,2],[112,4,102,2,"addConnectionListener"],[112,25,102,23,"addConnectionListener"],[112,26,102,24,"callback"],[112,34,102,64],[112,36,102,66],[113,6,103,4],[113,10,103,8],[113,11,103,9,"connectionListeners"],[113,30,103,28],[113,31,103,29,"push"],[113,35,103,33],[113,36,103,34,"callback"],[113,44,103,42],[113,45,103,43],[114,4,104,2],[115,4,106,2,"removeConnectionListener"],[115,28,106,26,"removeConnectionListener"],[115,29,106,27,"callback"],[115,37,106,67],[115,39,106,69],[116,6,107,4],[116,10,107,8],[116,11,107,9,"connectionListeners"],[116,30,107,28],[116,33,107,31],[116,37,107,35],[116,38,107,36,"connectionListeners"],[116,57,107,55],[116,58,107,56,"filter"],[116,64,107,62],[116,65,108,6,"listener"],[116,73,108,14],[116,77,108,18,"listener"],[116,85,108,26],[116,90,108,31,"callback"],[116,98,109,4],[116,99,109,5],[117,4,110,2],[118,4,112,2,"notifyConnectionListeners"],[118,29,112,27,"notifyConnectionListeners"],[118,30,112,28,"isConnected"],[118,41,112,48],[118,43,112,50],[119,6,113,4],[119,10,113,8],[119,11,113,9,"connectionListeners"],[119,30,113,28],[119,31,113,29,"forEach"],[119,38,113,36],[119,39,113,37,"callback"],[119,47,113,45],[119,51,113,49],[120,8,114,6,"callback"],[120,16,114,14],[120,17,114,15,"isConnected"],[120,28,114,26],[120,29,114,27],[121,6,115,4],[121,7,115,5],[121,8,115,6],[122,4,116,2],[123,2,117,0],[124,2,119,0],[124,6,119,0,"_default"],[124,14,119,0],[124,17,119,15],[124,21,119,19,"SocketService"],[124,34,119,32],[124,35,119,33],[124,36,119,34],[125,0,119,35],[125,3]],"functionMap":{"names":["<global>","SocketService","SocketService#connect","on$argument_1","pendingListeners.forEach$argument_0","SocketService#disconnect","SocketService#emit","SocketService#on","SocketService#off","pendingListeners.filter$argument_0","SocketService#addConnectionListener","SocketService#removeConnectionListener","connectionListeners.filter$argument_0","SocketService#notifyConnectionListeners","connectionListeners.forEach$argument_0"],"mappings":"AAA;ACM;ECM;gCCc;sCCO;SDK;ODE;mCCE;ODI;sCCE;ODI;GDQ;EIE;GJM;EKE;GLO;EME;GNU;EOE;MCM,oFD;GPE;ESE;GTE;EUE;MCE,iCD;GVE;EYE;qCCC;KDE;GZC;CDC"},"hasCjsExports":false},"type":"js/module"}]}