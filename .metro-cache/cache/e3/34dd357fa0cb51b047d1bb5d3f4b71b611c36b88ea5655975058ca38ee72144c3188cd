{"dependencies":[{"name":"expo/virtual/env","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dgHc21cgR+buKc7O3/dChhD5JJk=","exportNames":["*"],"imports":1}},{"name":"socket.io-client","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":46,"index":46}}],"key":"LVgCyxgUdze/lYG0kA6DdCAztfM=","exportNames":["*"],"imports":1}},{"name":"expo-constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":117},"end":{"line":3,"column":39,"index":156}}],"key":"pPv5KzfRT0rL6NCr7G9k0o4d1W8=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  var _expoVirtualEnv = require(_dependencyMap[0], \"expo/virtual/env\");\n  var _socketIoClient = require(_dependencyMap[1], \"socket.io-client\");\n  var _expoConstants = require(_dependencyMap[2], \"expo-constants\");\n  var Constants = _interopDefault(_expoConstants);\n  const API_URL = Constants.default.expoConfig?.extra?.EXPO_PUBLIC_BACKEND_URL || _expoVirtualEnv.env.EXPO_PUBLIC_BACKEND_URL || 'http://localhost:8001';\n  class SocketService {\n    socket = null;\n    isConnected = false;\n    connectionListeners = [];\n    pendingListeners = [];\n    async connect() {\n      try {\n        console.log('🔵 Connecting to Socket.IO server:', API_URL);\n\n        // Force polling transport only (WebSocket blocked by Kubernetes proxy)\n        // Socket.IO path must be under /api/ to work with Kubernetes ingress\n        this.socket = (0, _socketIoClient.io)(API_URL, {\n          path: '/api/socket.io/',\n          transports: ['polling'],\n          // Only use polling, not websocket\n          reconnection: true,\n          reconnectionDelay: 1000,\n          reconnectionAttempts: 5,\n          timeout: 10000\n        });\n        this.socket.on('connect', () => {\n          console.log('✅ Socket connected:', this.socket?.id);\n          this.isConnected = true;\n          this.notifyConnectionListeners(true);\n\n          // Register all pending listeners now that socket is connected\n          console.log(`📝 Registering ${this.pendingListeners.length} pending listeners`);\n          this.pendingListeners.forEach(({\n            event,\n            callback\n          }) => {\n            if (this.socket) {\n              this.socket.on(event, callback);\n              console.log(`✅ Registered listener for: ${event}`);\n            }\n          });\n          this.pendingListeners = [];\n        });\n        this.socket.on('disconnect', reason => {\n          console.log('❌ Socket disconnected:', reason);\n          this.isConnected = false;\n          this.notifyConnectionListeners(false);\n        });\n        this.socket.on('connect_error', error => {\n          console.error('❌ Connection error:', error.message);\n          this.isConnected = false;\n          this.notifyConnectionListeners(false);\n        });\n        return true;\n      } catch (error) {\n        console.error('Socket connection error:', error);\n        return false;\n      }\n    }\n    disconnect() {\n      if (this.socket) {\n        this.socket.disconnect();\n        this.socket = null;\n        this.isConnected = false;\n      }\n    }\n    emit(event, data) {\n      if (this.socket && this.isConnected) {\n        console.log(`📤 Emitting: ${event}`, data);\n        this.socket.emit(event, data);\n      } else {\n        console.warn('⚠️ Socket not connected, cannot emit:', event);\n      }\n    }\n    on(event, callback) {\n      if (this.socket && this.isConnected) {\n        // Socket is already connected, register immediately\n        console.log(`✅ Registering listener immediately for: ${event}`);\n        this.socket.on(event, callback);\n      } else {\n        // Socket not connected yet, queue the listener\n        console.log(`⏳ Queuing listener for: ${event}`);\n        this.pendingListeners.push({\n          event,\n          callback\n        });\n      }\n    }\n    off(event, callback) {\n      if (this.socket) {\n        this.socket.off(event, callback);\n      }\n      // Also remove from pending listeners\n      this.pendingListeners = this.pendingListeners.filter(listener => listener.event !== event || callback && listener.callback !== callback);\n    }\n    addConnectionListener(callback) {\n      this.connectionListeners.push(callback);\n    }\n    removeConnectionListener(callback) {\n      this.connectionListeners = this.connectionListeners.filter(listener => listener !== callback);\n    }\n    notifyConnectionListeners(isConnected) {\n      this.connectionListeners.forEach(callback => {\n        callback(isConnected);\n      });\n    }\n  }\n  var _default = new SocketService();\n});","lineCount":126,"map":[[12,2,120,0,"Object"],[12,8,120,0],[12,9,120,0,"defineProperty"],[12,23,120,0],[12,24,120,0,"exports"],[12,31,120,0],[13,4,120,0,"enumerable"],[13,14,120,0],[14,4,120,0,"get"],[14,7,120,0],[14,18,120,0,"get"],[14,19,120,0],[15,6,120,0],[15,13,120,0,"_default"],[15,21,120,0],[16,4,120,0],[17,2,120,0],[18,2,120,35],[18,6,120,35,"_expoVirtualEnv"],[18,21,120,35],[18,24,120,35,"require"],[18,31,120,35],[18,32,120,35,"_dependencyMap"],[18,46,120,35],[19,2,1,0],[19,6,1,0,"_socketIoClient"],[19,21,1,0],[19,24,1,0,"require"],[19,31,1,0],[19,32,1,0,"_dependencyMap"],[19,46,1,0],[20,2,3,0],[20,6,3,0,"_expoConstants"],[20,20,3,0],[20,23,3,0,"require"],[20,30,3,0],[20,31,3,0,"_dependencyMap"],[20,45,3,0],[21,2,3,0],[21,6,3,0,"Constants"],[21,15,3,0],[21,18,3,0,"_interopDefault"],[21,33,3,0],[21,34,3,0,"_expoConstants"],[21,48,3,0],[22,2,5,0],[22,8,5,6,"API_URL"],[22,15,5,13],[22,18,5,16,"Constants"],[22,27,5,25],[22,28,5,25,"default"],[22,35,5,25],[22,36,5,26,"expoConfig"],[22,46,5,36],[22,48,5,38,"extra"],[22,53,5,43],[22,55,5,45,"EXPO_PUBLIC_BACKEND_URL"],[22,78,5,68],[22,82,5,68,"_expoVirtualEnv"],[22,97,5,68],[22,98,5,68,"env"],[22,101,5,68],[22,102,5,68,"EXPO_PUBLIC_BACKEND_URL"],[22,125,5,107],[22,129,5,111],[22,152,5,134],[23,2,7,0],[23,8,7,6,"SocketService"],[23,21,7,19],[23,22,7,20],[24,4,8,2,"socket"],[24,10,8,8],[24,13,8,26],[24,17,8,30],[25,4,9,2,"isConnected"],[25,15,9,13],[25,18,9,25],[25,23,9,30],[26,4,10,2,"connectionListeners"],[26,23,10,21],[26,26,10,60],[26,28,10,62],[27,4,11,2,"pendingListeners"],[27,20,11,18],[27,23,11,73],[27,25,11,75],[28,4,13,2],[28,10,13,8,"connect"],[28,17,13,15,"connect"],[28,18,13,15],[28,20,13,18],[29,6,14,4],[29,10,14,8],[30,8,15,6,"console"],[30,15,15,13],[30,16,15,14,"log"],[30,19,15,17],[30,20,15,18],[30,56,15,54],[30,58,15,56,"API_URL"],[30,65,15,63],[30,66,15,64],[32,8,17,6],[33,8,18,6],[34,8,19,6],[34,12,19,10],[34,13,19,11,"socket"],[34,19,19,17],[34,22,19,20],[34,26,19,20,"io"],[34,41,19,22],[34,42,19,22,"io"],[34,44,19,22],[34,46,19,23,"API_URL"],[34,53,19,30],[34,55,19,32],[35,10,20,8,"path"],[35,14,20,12],[35,16,20,14],[35,33,20,31],[36,10,21,8,"transports"],[36,20,21,18],[36,22,21,20],[36,23,21,21],[36,32,21,30],[36,33,21,31],[37,10,21,33],[38,10,22,8,"reconnection"],[38,22,22,20],[38,24,22,22],[38,28,22,26],[39,10,23,8,"reconnectionDelay"],[39,27,23,25],[39,29,23,27],[39,33,23,31],[40,10,24,8,"reconnectionAttempts"],[40,30,24,28],[40,32,24,30],[40,33,24,31],[41,10,25,8,"timeout"],[41,17,25,15],[41,19,25,17],[42,8,26,6],[42,9,26,7],[42,10,26,8],[43,8,28,6],[43,12,28,10],[43,13,28,11,"socket"],[43,19,28,17],[43,20,28,18,"on"],[43,22,28,20],[43,23,28,21],[43,32,28,30],[43,34,28,32],[43,40,28,38],[44,10,29,8,"console"],[44,17,29,15],[44,18,29,16,"log"],[44,21,29,19],[44,22,29,20],[44,43,29,41],[44,45,29,43],[44,49,29,47],[44,50,29,48,"socket"],[44,56,29,54],[44,58,29,56,"id"],[44,60,29,58],[44,61,29,59],[45,10,30,8],[45,14,30,12],[45,15,30,13,"isConnected"],[45,26,30,24],[45,29,30,27],[45,33,30,31],[46,10,31,8],[46,14,31,12],[46,15,31,13,"notifyConnectionListeners"],[46,40,31,38],[46,41,31,39],[46,45,31,43],[46,46,31,44],[48,10,33,8],[49,10,34,8,"console"],[49,17,34,15],[49,18,34,16,"log"],[49,21,34,19],[49,22,34,20],[49,40,34,38],[49,44,34,42],[49,45,34,43,"pendingListeners"],[49,61,34,59],[49,62,34,60,"length"],[49,68,34,66],[49,88,34,86],[49,89,34,87],[50,10,35,8],[50,14,35,12],[50,15,35,13,"pendingListeners"],[50,31,35,29],[50,32,35,30,"forEach"],[50,39,35,37],[50,40,35,38],[50,41,35,39],[51,12,35,41,"event"],[51,17,35,46],[52,12,35,48,"callback"],[53,10,35,57],[53,11,35,58],[53,16,35,63],[54,12,36,10],[54,16,36,14],[54,20,36,18],[54,21,36,19,"socket"],[54,27,36,25],[54,29,36,27],[55,14,37,12],[55,18,37,16],[55,19,37,17,"socket"],[55,25,37,23],[55,26,37,24,"on"],[55,28,37,26],[55,29,37,27,"event"],[55,34,37,32],[55,36,37,34,"callback"],[55,44,37,42],[55,45,37,43],[56,14,38,12,"console"],[56,21,38,19],[56,22,38,20,"log"],[56,25,38,23],[56,26,38,24],[56,56,38,54,"event"],[56,61,38,59],[56,63,38,61],[56,64,38,62],[57,12,39,10],[58,10,40,8],[58,11,40,9],[58,12,40,10],[59,10,41,8],[59,14,41,12],[59,15,41,13,"pendingListeners"],[59,31,41,29],[59,34,41,32],[59,36,41,34],[60,8,42,6],[60,9,42,7],[60,10,42,8],[61,8,44,6],[61,12,44,10],[61,13,44,11,"socket"],[61,19,44,17],[61,20,44,18,"on"],[61,22,44,20],[61,23,44,21],[61,35,44,33],[61,37,44,36,"reason"],[61,43,44,50],[61,47,44,55],[62,10,45,8,"console"],[62,17,45,15],[62,18,45,16,"log"],[62,21,45,19],[62,22,45,20],[62,46,45,44],[62,48,45,46,"reason"],[62,54,45,52],[62,55,45,53],[63,10,46,8],[63,14,46,12],[63,15,46,13,"isConnected"],[63,26,46,24],[63,29,46,27],[63,34,46,32],[64,10,47,8],[64,14,47,12],[64,15,47,13,"notifyConnectionListeners"],[64,40,47,38],[64,41,47,39],[64,46,47,44],[64,47,47,45],[65,8,48,6],[65,9,48,7],[65,10,48,8],[66,8,50,6],[66,12,50,10],[66,13,50,11,"socket"],[66,19,50,17],[66,20,50,18,"on"],[66,22,50,20],[66,23,50,21],[66,38,50,36],[66,40,50,39,"error"],[66,45,50,51],[66,49,50,56],[67,10,51,8,"console"],[67,17,51,15],[67,18,51,16,"error"],[67,23,51,21],[67,24,51,22],[67,45,51,43],[67,47,51,45,"error"],[67,52,51,50],[67,53,51,51,"message"],[67,60,51,58],[67,61,51,59],[68,10,52,8],[68,14,52,12],[68,15,52,13,"isConnected"],[68,26,52,24],[68,29,52,27],[68,34,52,32],[69,10,53,8],[69,14,53,12],[69,15,53,13,"notifyConnectionListeners"],[69,40,53,38],[69,41,53,39],[69,46,53,44],[69,47,53,45],[70,8,54,6],[70,9,54,7],[70,10,54,8],[71,8,56,6],[71,15,56,13],[71,19,56,17],[72,6,58,4],[72,7,58,5],[72,8,58,6],[72,15,58,13,"error"],[72,20,58,18],[72,22,58,20],[73,8,59,6,"console"],[73,15,59,13],[73,16,59,14,"error"],[73,21,59,19],[73,22,59,20],[73,48,59,46],[73,50,59,48,"error"],[73,55,59,53],[73,56,59,54],[74,8,60,6],[74,15,60,13],[74,20,60,18],[75,6,61,4],[76,4,62,2],[77,4,64,2,"disconnect"],[77,14,64,12,"disconnect"],[77,15,64,12],[77,17,64,15],[78,6,65,4],[78,10,65,8],[78,14,65,12],[78,15,65,13,"socket"],[78,21,65,19],[78,23,65,21],[79,8,66,6],[79,12,66,10],[79,13,66,11,"socket"],[79,19,66,17],[79,20,66,18,"disconnect"],[79,30,66,28],[79,31,66,29],[79,32,66,30],[80,8,67,6],[80,12,67,10],[80,13,67,11,"socket"],[80,19,67,17],[80,22,67,20],[80,26,67,24],[81,8,68,6],[81,12,68,10],[81,13,68,11,"isConnected"],[81,24,68,22],[81,27,68,25],[81,32,68,30],[82,6,69,4],[83,4,70,2],[84,4,72,2,"emit"],[84,8,72,6,"emit"],[84,9,72,7,"event"],[84,14,72,20],[84,16,72,22,"data"],[84,20,72,31],[84,22,72,33],[85,6,73,4],[85,10,73,8],[85,14,73,12],[85,15,73,13,"socket"],[85,21,73,19],[85,25,73,23],[85,29,73,27],[85,30,73,28,"isConnected"],[85,41,73,39],[85,43,73,41],[86,8,74,6,"console"],[86,15,74,13],[86,16,74,14,"log"],[86,19,74,17],[86,20,74,18],[86,36,74,34,"event"],[86,41,74,39],[86,43,74,41],[86,45,74,43,"data"],[86,49,74,47],[86,50,74,48],[87,8,75,6],[87,12,75,10],[87,13,75,11,"socket"],[87,19,75,17],[87,20,75,18,"emit"],[87,24,75,22],[87,25,75,23,"event"],[87,30,75,28],[87,32,75,30,"data"],[87,36,75,34],[87,37,75,35],[88,6,76,4],[88,7,76,5],[88,13,76,11],[89,8,77,6,"console"],[89,15,77,13],[89,16,77,14,"warn"],[89,20,77,18],[89,21,77,19],[89,60,77,58],[89,62,77,60,"event"],[89,67,77,65],[89,68,77,66],[90,6,78,4],[91,4,79,2],[92,4,81,2,"on"],[92,6,81,4,"on"],[92,7,81,5,"event"],[92,12,81,18],[92,14,81,20,"callback"],[92,22,81,49],[92,24,81,51],[93,6,82,4],[93,10,82,8],[93,14,82,12],[93,15,82,13,"socket"],[93,21,82,19],[93,25,82,23],[93,29,82,27],[93,30,82,28,"isConnected"],[93,41,82,39],[93,43,82,41],[94,8,83,6],[95,8,84,6,"console"],[95,15,84,13],[95,16,84,14,"log"],[95,19,84,17],[95,20,84,18],[95,63,84,61,"event"],[95,68,84,66],[95,70,84,68],[95,71,84,69],[96,8,85,6],[96,12,85,10],[96,13,85,11,"socket"],[96,19,85,17],[96,20,85,18,"on"],[96,22,85,20],[96,23,85,21,"event"],[96,28,85,26],[96,30,85,28,"callback"],[96,38,85,36],[96,39,85,37],[97,6,86,4],[97,7,86,5],[97,13,86,11],[98,8,87,6],[99,8,88,6,"console"],[99,15,88,13],[99,16,88,14,"log"],[99,19,88,17],[99,20,88,18],[99,47,88,45,"event"],[99,52,88,50],[99,54,88,52],[99,55,88,53],[100,8,89,6],[100,12,89,10],[100,13,89,11,"pendingListeners"],[100,29,89,27],[100,30,89,28,"push"],[100,34,89,32],[100,35,89,33],[101,10,89,35,"event"],[101,15,89,40],[102,10,89,42,"callback"],[103,8,89,51],[103,9,89,52],[103,10,89,53],[104,6,90,4],[105,4,91,2],[106,4,93,2,"off"],[106,7,93,5,"off"],[106,8,93,6,"event"],[106,13,93,19],[106,15,93,21,"callback"],[106,23,93,51],[106,25,93,53],[107,6,94,4],[107,10,94,8],[107,14,94,12],[107,15,94,13,"socket"],[107,21,94,19],[107,23,94,21],[108,8,95,6],[108,12,95,10],[108,13,95,11,"socket"],[108,19,95,17],[108,20,95,18,"off"],[108,23,95,21],[108,24,95,22,"event"],[108,29,95,27],[108,31,95,29,"callback"],[108,39,95,37],[108,40,95,38],[109,6,96,4],[110,6,97,4],[111,6,98,4],[111,10,98,8],[111,11,98,9,"pendingListeners"],[111,27,98,25],[111,30,98,28],[111,34,98,32],[111,35,98,33,"pendingListeners"],[111,51,98,49],[111,52,98,50,"filter"],[111,58,98,56],[111,59,99,6,"listener"],[111,67,99,14],[111,71,99,18,"listener"],[111,79,99,26],[111,80,99,27,"event"],[111,85,99,32],[111,90,99,37,"event"],[111,95,99,42],[111,99,99,47,"callback"],[111,107,99,55],[111,111,99,59,"listener"],[111,119,99,67],[111,120,99,68,"callback"],[111,128,99,76],[111,133,99,81,"callback"],[111,141,100,4],[111,142,100,5],[112,4,101,2],[113,4,103,2,"addConnectionListener"],[113,25,103,23,"addConnectionListener"],[113,26,103,24,"callback"],[113,34,103,64],[113,36,103,66],[114,6,104,4],[114,10,104,8],[114,11,104,9,"connectionListeners"],[114,30,104,28],[114,31,104,29,"push"],[114,35,104,33],[114,36,104,34,"callback"],[114,44,104,42],[114,45,104,43],[115,4,105,2],[116,4,107,2,"removeConnectionListener"],[116,28,107,26,"removeConnectionListener"],[116,29,107,27,"callback"],[116,37,107,67],[116,39,107,69],[117,6,108,4],[117,10,108,8],[117,11,108,9,"connectionListeners"],[117,30,108,28],[117,33,108,31],[117,37,108,35],[117,38,108,36,"connectionListeners"],[117,57,108,55],[117,58,108,56,"filter"],[117,64,108,62],[117,65,109,6,"listener"],[117,73,109,14],[117,77,109,18,"listener"],[117,85,109,26],[117,90,109,31,"callback"],[117,98,110,4],[117,99,110,5],[118,4,111,2],[119,4,113,2,"notifyConnectionListeners"],[119,29,113,27,"notifyConnectionListeners"],[119,30,113,28,"isConnected"],[119,41,113,48],[119,43,113,50],[120,6,114,4],[120,10,114,8],[120,11,114,9,"connectionListeners"],[120,30,114,28],[120,31,114,29,"forEach"],[120,38,114,36],[120,39,114,37,"callback"],[120,47,114,45],[120,51,114,49],[121,8,115,6,"callback"],[121,16,115,14],[121,17,115,15,"isConnected"],[121,28,115,26],[121,29,115,27],[122,6,116,4],[122,7,116,5],[122,8,116,6],[123,4,117,2],[124,2,118,0],[125,2,120,0],[125,6,120,0,"_default"],[125,14,120,0],[125,17,120,15],[125,21,120,19,"SocketService"],[125,34,120,32],[125,35,120,33],[125,36,120,34],[126,0,120,35],[126,3]],"functionMap":{"names":["<global>","SocketService","SocketService#connect","on$argument_1","pendingListeners.forEach$argument_0","SocketService#disconnect","SocketService#emit","SocketService#on","SocketService#off","pendingListeners.filter$argument_0","SocketService#addConnectionListener","SocketService#removeConnectionListener","connectionListeners.filter$argument_0","SocketService#notifyConnectionListeners","connectionListeners.forEach$argument_0"],"mappings":"AAA;ACM;ECM;gCCe;sCCO;SDK;ODE;mCCE;ODI;sCCE;ODI;GDQ;EIE;GJM;EKE;GLO;EME;GNU;EOE;MCM,oFD;GPE;ESE;GTE;EUE;MCE,iCD;GVE;EYE;qCCC;KDE;GZC;CDC"},"hasCjsExports":false},"type":"js/module"}]}