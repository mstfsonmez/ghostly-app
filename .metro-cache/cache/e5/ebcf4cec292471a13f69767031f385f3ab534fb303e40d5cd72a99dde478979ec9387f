{"dependencies":[{"name":"./encodePacket.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":71,"index":71}}],"key":"l0XJith170aiQBKbDxvaf5HJzjc=","exportNames":["*"],"imports":1}},{"name":"./decodePacket.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":72},"end":{"line":2,"column":49,"index":121}}],"key":"k2ePvc7PPyN9sm4h8mrZRv0s/Hg=","exportNames":["*"],"imports":1}},{"name":"./commons.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":122},"end":{"line":3,"column":45,"index":167}}],"key":"glGFVKq6JnHqcEVNii1WndfU66Y=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.createPacketEncoderStream = createPacketEncoderStream;\n  exports.createPacketDecoderStream = createPacketDecoderStream;\n  Object.defineProperty(exports, \"protocol\", {\n    enumerable: true,\n    get: function () {\n      return protocol;\n    }\n  });\n  Object.defineProperty(exports, \"encodePacket\", {\n    enumerable: true,\n    get: function () {\n      return _encodePacketJs.encodePacket;\n    }\n  });\n  Object.defineProperty(exports, \"encodePayload\", {\n    enumerable: true,\n    get: function () {\n      return encodePayload;\n    }\n  });\n  Object.defineProperty(exports, \"decodePacket\", {\n    enumerable: true,\n    get: function () {\n      return _decodePacketJs.decodePacket;\n    }\n  });\n  Object.defineProperty(exports, \"decodePayload\", {\n    enumerable: true,\n    get: function () {\n      return decodePayload;\n    }\n  });\n  var _encodePacketJs = require(_dependencyMap[0], \"./encodePacket.js\");\n  var _decodePacketJs = require(_dependencyMap[1], \"./decodePacket.js\");\n  var _commonsJs = require(_dependencyMap[2], \"./commons.js\");\n  const SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\n  const encodePayload = (packets, callback) => {\n    // some packets may be added to the array while encoding, so the initial length must be saved\n    const length = packets.length;\n    const encodedPackets = new Array(length);\n    let count = 0;\n    packets.forEach((packet, i) => {\n      // force base64 encoding for binary packets\n      (0, _encodePacketJs.encodePacket)(packet, false, encodedPacket => {\n        encodedPackets[i] = encodedPacket;\n        if (++count === length) {\n          callback(encodedPackets.join(SEPARATOR));\n        }\n      });\n    });\n  };\n  const decodePayload = (encodedPayload, binaryType) => {\n    const encodedPackets = encodedPayload.split(SEPARATOR);\n    const packets = [];\n    for (let i = 0; i < encodedPackets.length; i++) {\n      const decodedPacket = (0, _decodePacketJs.decodePacket)(encodedPackets[i], binaryType);\n      packets.push(decodedPacket);\n      if (decodedPacket.type === \"error\") {\n        break;\n      }\n    }\n    return packets;\n  };\n  function createPacketEncoderStream() {\n    return new TransformStream({\n      transform(packet, controller) {\n        (0, _encodePacketJs.encodePacketToBinary)(packet, encodedPacket => {\n          const payloadLength = encodedPacket.length;\n          let header;\n          // inspired by the WebSocket format: https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers#decoding_payload_length\n          if (payloadLength < 126) {\n            header = new Uint8Array(1);\n            new DataView(header.buffer).setUint8(0, payloadLength);\n          } else if (payloadLength < 65536) {\n            header = new Uint8Array(3);\n            const view = new DataView(header.buffer);\n            view.setUint8(0, 126);\n            view.setUint16(1, payloadLength);\n          } else {\n            header = new Uint8Array(9);\n            const view = new DataView(header.buffer);\n            view.setUint8(0, 127);\n            view.setBigUint64(1, BigInt(payloadLength));\n          }\n          // first bit indicates whether the payload is plain text (0) or binary (1)\n          if (packet.data && typeof packet.data !== \"string\") {\n            header[0] |= 0x80;\n          }\n          controller.enqueue(header);\n          controller.enqueue(encodedPacket);\n        });\n      }\n    });\n  }\n  let TEXT_DECODER;\n  function totalLength(chunks) {\n    return chunks.reduce((acc, chunk) => acc + chunk.length, 0);\n  }\n  function concatChunks(chunks, size) {\n    if (chunks[0].length === size) {\n      return chunks.shift();\n    }\n    const buffer = new Uint8Array(size);\n    let j = 0;\n    for (let i = 0; i < size; i++) {\n      buffer[i] = chunks[0][j++];\n      if (j === chunks[0].length) {\n        chunks.shift();\n        j = 0;\n      }\n    }\n    if (chunks.length && j < chunks[0].length) {\n      chunks[0] = chunks[0].slice(j);\n    }\n    return buffer;\n  }\n  function createPacketDecoderStream(maxPayload, binaryType) {\n    if (!TEXT_DECODER) {\n      TEXT_DECODER = new TextDecoder();\n    }\n    const chunks = [];\n    let state = 0 /* State.READ_HEADER */;\n    let expectedLength = -1;\n    let isBinary = false;\n    return new TransformStream({\n      transform(chunk, controller) {\n        chunks.push(chunk);\n        while (true) {\n          if (state === 0 /* State.READ_HEADER */) {\n            if (totalLength(chunks) < 1) {\n              break;\n            }\n            const header = concatChunks(chunks, 1);\n            isBinary = (header[0] & 0x80) === 0x80;\n            expectedLength = header[0] & 0x7f;\n            if (expectedLength < 126) {\n              state = 3 /* State.READ_PAYLOAD */;\n            } else if (expectedLength === 126) {\n              state = 1 /* State.READ_EXTENDED_LENGTH_16 */;\n            } else {\n              state = 2 /* State.READ_EXTENDED_LENGTH_64 */;\n            }\n          } else if (state === 1 /* State.READ_EXTENDED_LENGTH_16 */) {\n            if (totalLength(chunks) < 2) {\n              break;\n            }\n            const headerArray = concatChunks(chunks, 2);\n            expectedLength = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length).getUint16(0);\n            state = 3 /* State.READ_PAYLOAD */;\n          } else if (state === 2 /* State.READ_EXTENDED_LENGTH_64 */) {\n            if (totalLength(chunks) < 8) {\n              break;\n            }\n            const headerArray = concatChunks(chunks, 8);\n            const view = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length);\n            const n = view.getUint32(0);\n            if (n > Math.pow(2, 53 - 32) - 1) {\n              // the maximum safe integer in JavaScript is 2^53 - 1\n              controller.enqueue(_commonsJs.ERROR_PACKET);\n              break;\n            }\n            expectedLength = n * Math.pow(2, 32) + view.getUint32(4);\n            state = 3 /* State.READ_PAYLOAD */;\n          } else {\n            if (totalLength(chunks) < expectedLength) {\n              break;\n            }\n            const data = concatChunks(chunks, expectedLength);\n            controller.enqueue((0, _decodePacketJs.decodePacket)(isBinary ? data : TEXT_DECODER.decode(data), binaryType));\n            state = 0 /* State.READ_HEADER */;\n          }\n          if (expectedLength === 0 || expectedLength > maxPayload) {\n            controller.enqueue(_commonsJs.ERROR_PACKET);\n            break;\n          }\n        }\n      }\n    });\n  }\n  const protocol = 4;\n});","lineCount":187,"map":[[7,2,32,0,"exports"],[7,9,32,0],[7,10,32,0,"createPacketEncoderStream"],[7,35,32,0],[7,38,32,0,"createPacketEncoderStream"],[7,63,32,0],[8,2,87,0,"exports"],[8,9,87,0],[8,10,87,0,"createPacketDecoderStream"],[8,35,87,0],[8,38,87,0,"createPacketDecoderStream"],[8,63,87,0],[9,2,155,0,"Object"],[9,8,155,0],[9,9,155,0,"defineProperty"],[9,23,155,0],[9,24,155,0,"exports"],[9,31,155,0],[10,4,155,0,"enumerable"],[10,14,155,0],[11,4,155,0,"get"],[11,7,155,0],[11,18,155,0,"get"],[11,19,155,0],[12,6,155,0],[12,13,155,0,"protocol"],[12,21,155,0],[13,4,155,0],[14,2,155,0],[15,2,156,0,"Object"],[15,8,156,0],[15,9,156,0,"defineProperty"],[15,23,156,0],[15,24,156,0,"exports"],[15,31,156,0],[16,4,156,0,"enumerable"],[16,14,156,0],[17,4,156,0,"get"],[17,7,156,0],[17,18,156,0,"get"],[17,19,156,0],[18,6,156,0],[18,13,156,9,"encodePacket"],[18,28,156,21],[18,29,156,21,"encodePacket"],[18,41,156,21],[19,4,156,21],[20,2,156,21],[21,2,156,0,"Object"],[21,8,156,0],[21,9,156,0,"defineProperty"],[21,23,156,0],[21,24,156,0,"exports"],[21,31,156,0],[22,4,156,0,"enumerable"],[22,14,156,0],[23,4,156,0,"get"],[23,7,156,0],[23,18,156,0,"get"],[23,19,156,0],[24,6,156,0],[24,13,156,23,"encodePayload"],[24,26,156,36],[25,4,156,36],[26,2,156,36],[27,2,156,0,"Object"],[27,8,156,0],[27,9,156,0,"defineProperty"],[27,23,156,0],[27,24,156,0,"exports"],[27,31,156,0],[28,4,156,0,"enumerable"],[28,14,156,0],[29,4,156,0,"get"],[29,7,156,0],[29,18,156,0,"get"],[29,19,156,0],[30,6,156,0],[30,13,156,38,"decodePacket"],[30,28,156,50],[30,29,156,50,"decodePacket"],[30,41,156,50],[31,4,156,50],[32,2,156,50],[33,2,156,0,"Object"],[33,8,156,0],[33,9,156,0,"defineProperty"],[33,23,156,0],[33,24,156,0,"exports"],[33,31,156,0],[34,4,156,0,"enumerable"],[34,14,156,0],[35,4,156,0,"get"],[35,7,156,0],[35,18,156,0,"get"],[35,19,156,0],[36,6,156,0],[36,13,156,52,"decodePayload"],[36,26,156,65],[37,4,156,65],[38,2,156,65],[39,2,1,0],[39,6,1,0,"_encodePacketJs"],[39,21,1,0],[39,24,1,0,"require"],[39,31,1,0],[39,32,1,0,"_dependencyMap"],[39,46,1,0],[40,2,2,0],[40,6,2,0,"_decodePacketJs"],[40,21,2,0],[40,24,2,0,"require"],[40,31,2,0],[40,32,2,0,"_dependencyMap"],[40,46,2,0],[41,2,3,0],[41,6,3,0,"_commonsJs"],[41,16,3,0],[41,19,3,0,"require"],[41,26,3,0],[41,27,3,0,"_dependencyMap"],[41,41,3,0],[42,2,4,0],[42,8,4,6,"SEPARATOR"],[42,17,4,15],[42,20,4,18,"String"],[42,26,4,24],[42,27,4,25,"fromCharCode"],[42,39,4,37],[42,40,4,38],[42,42,4,40],[42,43,4,41],[42,44,4,42],[42,45,4,43],[43,2,5,0],[43,8,5,6,"encodePayload"],[43,21,5,19],[43,24,5,22,"encodePayload"],[43,25,5,23,"packets"],[43,32,5,30],[43,34,5,32,"callback"],[43,42,5,40],[43,47,5,45],[44,4,6,4],[45,4,7,4],[45,10,7,10,"length"],[45,16,7,16],[45,19,7,19,"packets"],[45,26,7,26],[45,27,7,27,"length"],[45,33,7,33],[46,4,8,4],[46,10,8,10,"encodedPackets"],[46,24,8,24],[46,27,8,27],[46,31,8,31,"Array"],[46,36,8,36],[46,37,8,37,"length"],[46,43,8,43],[46,44,8,44],[47,4,9,4],[47,8,9,8,"count"],[47,13,9,13],[47,16,9,16],[47,17,9,17],[48,4,10,4,"packets"],[48,11,10,11],[48,12,10,12,"forEach"],[48,19,10,19],[48,20,10,20],[48,21,10,21,"packet"],[48,27,10,27],[48,29,10,29,"i"],[48,30,10,30],[48,35,10,35],[49,6,11,8],[50,6,12,8],[50,10,12,8,"encodePacket"],[50,25,12,20],[50,26,12,20,"encodePacket"],[50,38,12,20],[50,40,12,21,"packet"],[50,46,12,27],[50,48,12,29],[50,53,12,34],[50,55,12,37,"encodedPacket"],[50,68,12,50],[50,72,12,55],[51,8,13,12,"encodedPackets"],[51,22,13,26],[51,23,13,27,"i"],[51,24,13,28],[51,25,13,29],[51,28,13,32,"encodedPacket"],[51,41,13,45],[52,8,14,12],[52,12,14,16],[52,14,14,18,"count"],[52,19,14,23],[52,24,14,28,"length"],[52,30,14,34],[52,32,14,36],[53,10,15,16,"callback"],[53,18,15,24],[53,19,15,25,"encodedPackets"],[53,33,15,39],[53,34,15,40,"join"],[53,38,15,44],[53,39,15,45,"SEPARATOR"],[53,48,15,54],[53,49,15,55],[53,50,15,56],[54,8,16,12],[55,6,17,8],[55,7,17,9],[55,8,17,10],[56,4,18,4],[56,5,18,5],[56,6,18,6],[57,2,19,0],[57,3,19,1],[58,2,20,0],[58,8,20,6,"decodePayload"],[58,21,20,19],[58,24,20,22,"decodePayload"],[58,25,20,23,"encodedPayload"],[58,39,20,37],[58,41,20,39,"binaryType"],[58,51,20,49],[58,56,20,54],[59,4,21,4],[59,10,21,10,"encodedPackets"],[59,24,21,24],[59,27,21,27,"encodedPayload"],[59,41,21,41],[59,42,21,42,"split"],[59,47,21,47],[59,48,21,48,"SEPARATOR"],[59,57,21,57],[59,58,21,58],[60,4,22,4],[60,10,22,10,"packets"],[60,17,22,17],[60,20,22,20],[60,22,22,22],[61,4,23,4],[61,9,23,9],[61,13,23,13,"i"],[61,14,23,14],[61,17,23,17],[61,18,23,18],[61,20,23,20,"i"],[61,21,23,21],[61,24,23,24,"encodedPackets"],[61,38,23,38],[61,39,23,39,"length"],[61,45,23,45],[61,47,23,47,"i"],[61,48,23,48],[61,50,23,50],[61,52,23,52],[62,6,24,8],[62,12,24,14,"decodedPacket"],[62,25,24,27],[62,28,24,30],[62,32,24,30,"decodePacket"],[62,47,24,42],[62,48,24,42,"decodePacket"],[62,60,24,42],[62,62,24,43,"encodedPackets"],[62,76,24,57],[62,77,24,58,"i"],[62,78,24,59],[62,79,24,60],[62,81,24,62,"binaryType"],[62,91,24,72],[62,92,24,73],[63,6,25,8,"packets"],[63,13,25,15],[63,14,25,16,"push"],[63,18,25,20],[63,19,25,21,"decodedPacket"],[63,32,25,34],[63,33,25,35],[64,6,26,8],[64,10,26,12,"decodedPacket"],[64,23,26,25],[64,24,26,26,"type"],[64,28,26,30],[64,33,26,35],[64,40,26,42],[64,42,26,44],[65,8,27,12],[66,6,28,8],[67,4,29,4],[68,4,30,4],[68,11,30,11,"packets"],[68,18,30,18],[69,2,31,0],[69,3,31,1],[70,2,32,7],[70,11,32,16,"createPacketEncoderStream"],[70,36,32,41,"createPacketEncoderStream"],[70,37,32,41],[70,39,32,44],[71,4,33,4],[71,11,33,11],[71,15,33,15,"TransformStream"],[71,30,33,30],[71,31,33,31],[72,6,34,8,"transform"],[72,15,34,17,"transform"],[72,16,34,18,"packet"],[72,22,34,24],[72,24,34,26,"controller"],[72,34,34,36],[72,36,34,38],[73,8,35,12],[73,12,35,12,"encodePacketToBinary"],[73,27,35,32],[73,28,35,32,"encodePacketToBinary"],[73,48,35,32],[73,50,35,33,"packet"],[73,56,35,39],[73,58,35,42,"encodedPacket"],[73,71,35,55],[73,75,35,60],[74,10,36,16],[74,16,36,22,"payloadLength"],[74,29,36,35],[74,32,36,38,"encodedPacket"],[74,45,36,51],[74,46,36,52,"length"],[74,52,36,58],[75,10,37,16],[75,14,37,20,"header"],[75,20,37,26],[76,10,38,16],[77,10,39,16],[77,14,39,20,"payloadLength"],[77,27,39,33],[77,30,39,36],[77,33,39,39],[77,35,39,41],[78,12,40,20,"header"],[78,18,40,26],[78,21,40,29],[78,25,40,33,"Uint8Array"],[78,35,40,43],[78,36,40,44],[78,37,40,45],[78,38,40,46],[79,12,41,20],[79,16,41,24,"DataView"],[79,24,41,32],[79,25,41,33,"header"],[79,31,41,39],[79,32,41,40,"buffer"],[79,38,41,46],[79,39,41,47],[79,40,41,48,"setUint8"],[79,48,41,56],[79,49,41,57],[79,50,41,58],[79,52,41,60,"payloadLength"],[79,65,41,73],[79,66,41,74],[80,10,42,16],[80,11,42,17],[80,17,43,21],[80,21,43,25,"payloadLength"],[80,34,43,38],[80,37,43,41],[80,42,43,46],[80,44,43,48],[81,12,44,20,"header"],[81,18,44,26],[81,21,44,29],[81,25,44,33,"Uint8Array"],[81,35,44,43],[81,36,44,44],[81,37,44,45],[81,38,44,46],[82,12,45,20],[82,18,45,26,"view"],[82,22,45,30],[82,25,45,33],[82,29,45,37,"DataView"],[82,37,45,45],[82,38,45,46,"header"],[82,44,45,52],[82,45,45,53,"buffer"],[82,51,45,59],[82,52,45,60],[83,12,46,20,"view"],[83,16,46,24],[83,17,46,25,"setUint8"],[83,25,46,33],[83,26,46,34],[83,27,46,35],[83,29,46,37],[83,32,46,40],[83,33,46,41],[84,12,47,20,"view"],[84,16,47,24],[84,17,47,25,"setUint16"],[84,26,47,34],[84,27,47,35],[84,28,47,36],[84,30,47,38,"payloadLength"],[84,43,47,51],[84,44,47,52],[85,10,48,16],[85,11,48,17],[85,17,49,21],[86,12,50,20,"header"],[86,18,50,26],[86,21,50,29],[86,25,50,33,"Uint8Array"],[86,35,50,43],[86,36,50,44],[86,37,50,45],[86,38,50,46],[87,12,51,20],[87,18,51,26,"view"],[87,22,51,30],[87,25,51,33],[87,29,51,37,"DataView"],[87,37,51,45],[87,38,51,46,"header"],[87,44,51,52],[87,45,51,53,"buffer"],[87,51,51,59],[87,52,51,60],[88,12,52,20,"view"],[88,16,52,24],[88,17,52,25,"setUint8"],[88,25,52,33],[88,26,52,34],[88,27,52,35],[88,29,52,37],[88,32,52,40],[88,33,52,41],[89,12,53,20,"view"],[89,16,53,24],[89,17,53,25,"setBigUint64"],[89,29,53,37],[89,30,53,38],[89,31,53,39],[89,33,53,41,"BigInt"],[89,39,53,47],[89,40,53,48,"payloadLength"],[89,53,53,61],[89,54,53,62],[89,55,53,63],[90,10,54,16],[91,10,55,16],[92,10,56,16],[92,14,56,20,"packet"],[92,20,56,26],[92,21,56,27,"data"],[92,25,56,31],[92,29,56,35],[92,36,56,42,"packet"],[92,42,56,48],[92,43,56,49,"data"],[92,47,56,53],[92,52,56,58],[92,60,56,66],[92,62,56,68],[93,12,57,20,"header"],[93,18,57,26],[93,19,57,27],[93,20,57,28],[93,21,57,29],[93,25,57,33],[93,29,57,37],[94,10,58,16],[95,10,59,16,"controller"],[95,20,59,26],[95,21,59,27,"enqueue"],[95,28,59,34],[95,29,59,35,"header"],[95,35,59,41],[95,36,59,42],[96,10,60,16,"controller"],[96,20,60,26],[96,21,60,27,"enqueue"],[96,28,60,34],[96,29,60,35,"encodedPacket"],[96,42,60,48],[96,43,60,49],[97,8,61,12],[97,9,61,13],[97,10,61,14],[98,6,62,8],[99,4,63,4],[99,5,63,5],[99,6,63,6],[100,2,64,0],[101,2,65,0],[101,6,65,4,"TEXT_DECODER"],[101,18,65,16],[102,2,66,0],[102,11,66,9,"totalLength"],[102,22,66,20,"totalLength"],[102,23,66,21,"chunks"],[102,29,66,27],[102,31,66,29],[103,4,67,4],[103,11,67,11,"chunks"],[103,17,67,17],[103,18,67,18,"reduce"],[103,24,67,24],[103,25,67,25],[103,26,67,26,"acc"],[103,29,67,29],[103,31,67,31,"chunk"],[103,36,67,36],[103,41,67,41,"acc"],[103,44,67,44],[103,47,67,47,"chunk"],[103,52,67,52],[103,53,67,53,"length"],[103,59,67,59],[103,61,67,61],[103,62,67,62],[103,63,67,63],[104,2,68,0],[105,2,69,0],[105,11,69,9,"concatChunks"],[105,23,69,21,"concatChunks"],[105,24,69,22,"chunks"],[105,30,69,28],[105,32,69,30,"size"],[105,36,69,34],[105,38,69,36],[106,4,70,4],[106,8,70,8,"chunks"],[106,14,70,14],[106,15,70,15],[106,16,70,16],[106,17,70,17],[106,18,70,18,"length"],[106,24,70,24],[106,29,70,29,"size"],[106,33,70,33],[106,35,70,35],[107,6,71,8],[107,13,71,15,"chunks"],[107,19,71,21],[107,20,71,22,"shift"],[107,25,71,27],[107,26,71,28],[107,27,71,29],[108,4,72,4],[109,4,73,4],[109,10,73,10,"buffer"],[109,16,73,16],[109,19,73,19],[109,23,73,23,"Uint8Array"],[109,33,73,33],[109,34,73,34,"size"],[109,38,73,38],[109,39,73,39],[110,4,74,4],[110,8,74,8,"j"],[110,9,74,9],[110,12,74,12],[110,13,74,13],[111,4,75,4],[111,9,75,9],[111,13,75,13,"i"],[111,14,75,14],[111,17,75,17],[111,18,75,18],[111,20,75,20,"i"],[111,21,75,21],[111,24,75,24,"size"],[111,28,75,28],[111,30,75,30,"i"],[111,31,75,31],[111,33,75,33],[111,35,75,35],[112,6,76,8,"buffer"],[112,12,76,14],[112,13,76,15,"i"],[112,14,76,16],[112,15,76,17],[112,18,76,20,"chunks"],[112,24,76,26],[112,25,76,27],[112,26,76,28],[112,27,76,29],[112,28,76,30,"j"],[112,29,76,31],[112,31,76,33],[112,32,76,34],[113,6,77,8],[113,10,77,12,"j"],[113,11,77,13],[113,16,77,18,"chunks"],[113,22,77,24],[113,23,77,25],[113,24,77,26],[113,25,77,27],[113,26,77,28,"length"],[113,32,77,34],[113,34,77,36],[114,8,78,12,"chunks"],[114,14,78,18],[114,15,78,19,"shift"],[114,20,78,24],[114,21,78,25],[114,22,78,26],[115,8,79,12,"j"],[115,9,79,13],[115,12,79,16],[115,13,79,17],[116,6,80,8],[117,4,81,4],[118,4,82,4],[118,8,82,8,"chunks"],[118,14,82,14],[118,15,82,15,"length"],[118,21,82,21],[118,25,82,25,"j"],[118,26,82,26],[118,29,82,29,"chunks"],[118,35,82,35],[118,36,82,36],[118,37,82,37],[118,38,82,38],[118,39,82,39,"length"],[118,45,82,45],[118,47,82,47],[119,6,83,8,"chunks"],[119,12,83,14],[119,13,83,15],[119,14,83,16],[119,15,83,17],[119,18,83,20,"chunks"],[119,24,83,26],[119,25,83,27],[119,26,83,28],[119,27,83,29],[119,28,83,30,"slice"],[119,33,83,35],[119,34,83,36,"j"],[119,35,83,37],[119,36,83,38],[120,4,84,4],[121,4,85,4],[121,11,85,11,"buffer"],[121,17,85,17],[122,2,86,0],[123,2,87,7],[123,11,87,16,"createPacketDecoderStream"],[123,36,87,41,"createPacketDecoderStream"],[123,37,87,42,"maxPayload"],[123,47,87,52],[123,49,87,54,"binaryType"],[123,59,87,64],[123,61,87,66],[124,4,88,4],[124,8,88,8],[124,9,88,9,"TEXT_DECODER"],[124,21,88,21],[124,23,88,23],[125,6,89,8,"TEXT_DECODER"],[125,18,89,20],[125,21,89,23],[125,25,89,27,"TextDecoder"],[125,36,89,38],[125,37,89,39],[125,38,89,40],[126,4,90,4],[127,4,91,4],[127,10,91,10,"chunks"],[127,16,91,16],[127,19,91,19],[127,21,91,21],[128,4,92,4],[128,8,92,8,"state"],[128,13,92,13],[128,16,92,16],[128,17,92,17],[128,18,92,18],[129,4,93,4],[129,8,93,8,"expectedLength"],[129,22,93,22],[129,25,93,25],[129,26,93,26],[129,27,93,27],[130,4,94,4],[130,8,94,8,"isBinary"],[130,16,94,16],[130,19,94,19],[130,24,94,24],[131,4,95,4],[131,11,95,11],[131,15,95,15,"TransformStream"],[131,30,95,30],[131,31,95,31],[132,6,96,8,"transform"],[132,15,96,17,"transform"],[132,16,96,18,"chunk"],[132,21,96,23],[132,23,96,25,"controller"],[132,33,96,35],[132,35,96,37],[133,8,97,12,"chunks"],[133,14,97,18],[133,15,97,19,"push"],[133,19,97,23],[133,20,97,24,"chunk"],[133,25,97,29],[133,26,97,30],[134,8,98,12],[134,15,98,19],[134,19,98,23],[134,21,98,25],[135,10,99,16],[135,14,99,20,"state"],[135,19,99,25],[135,24,99,30],[135,25,99,31],[135,26,99,32],[135,51,99,57],[136,12,100,20],[136,16,100,24,"totalLength"],[136,27,100,35],[136,28,100,36,"chunks"],[136,34,100,42],[136,35,100,43],[136,38,100,46],[136,39,100,47],[136,41,100,49],[137,14,101,24],[138,12,102,20],[139,12,103,20],[139,18,103,26,"header"],[139,24,103,32],[139,27,103,35,"concatChunks"],[139,39,103,47],[139,40,103,48,"chunks"],[139,46,103,54],[139,48,103,56],[139,49,103,57],[139,50,103,58],[140,12,104,20,"isBinary"],[140,20,104,28],[140,23,104,31],[140,24,104,32,"header"],[140,30,104,38],[140,31,104,39],[140,32,104,40],[140,33,104,41],[140,36,104,44],[140,40,104,48],[140,46,104,54],[140,50,104,58],[141,12,105,20,"expectedLength"],[141,26,105,34],[141,29,105,37,"header"],[141,35,105,43],[141,36,105,44],[141,37,105,45],[141,38,105,46],[141,41,105,49],[141,45,105,53],[142,12,106,20],[142,16,106,24,"expectedLength"],[142,30,106,38],[142,33,106,41],[142,36,106,44],[142,38,106,46],[143,14,107,24,"state"],[143,19,107,29],[143,22,107,32],[143,23,107,33],[143,24,107,34],[144,12,108,20],[144,13,108,21],[144,19,109,25],[144,23,109,29,"expectedLength"],[144,37,109,43],[144,42,109,48],[144,45,109,51],[144,47,109,53],[145,14,110,24,"state"],[145,19,110,29],[145,22,110,32],[145,23,110,33],[145,24,110,34],[146,12,111,20],[146,13,111,21],[146,19,112,25],[147,14,113,24,"state"],[147,19,113,29],[147,22,113,32],[147,23,113,33],[147,24,113,34],[148,12,114,20],[149,10,115,16],[149,11,115,17],[149,17,116,21],[149,21,116,25,"state"],[149,26,116,30],[149,31,116,35],[149,32,116,36],[149,33,116,37],[149,70,116,74],[150,12,117,20],[150,16,117,24,"totalLength"],[150,27,117,35],[150,28,117,36,"chunks"],[150,34,117,42],[150,35,117,43],[150,38,117,46],[150,39,117,47],[150,41,117,49],[151,14,118,24],[152,12,119,20],[153,12,120,20],[153,18,120,26,"headerArray"],[153,29,120,37],[153,32,120,40,"concatChunks"],[153,44,120,52],[153,45,120,53,"chunks"],[153,51,120,59],[153,53,120,61],[153,54,120,62],[153,55,120,63],[154,12,121,20,"expectedLength"],[154,26,121,34],[154,29,121,37],[154,33,121,41,"DataView"],[154,41,121,49],[154,42,121,50,"headerArray"],[154,53,121,61],[154,54,121,62,"buffer"],[154,60,121,68],[154,62,121,70,"headerArray"],[154,73,121,81],[154,74,121,82,"byteOffset"],[154,84,121,92],[154,86,121,94,"headerArray"],[154,97,121,105],[154,98,121,106,"length"],[154,104,121,112],[154,105,121,113],[154,106,121,114,"getUint16"],[154,115,121,123],[154,116,121,124],[154,117,121,125],[154,118,121,126],[155,12,122,20,"state"],[155,17,122,25],[155,20,122,28],[155,21,122,29],[155,22,122,30],[156,10,123,16],[156,11,123,17],[156,17,124,21],[156,21,124,25,"state"],[156,26,124,30],[156,31,124,35],[156,32,124,36],[156,33,124,37],[156,70,124,74],[157,12,125,20],[157,16,125,24,"totalLength"],[157,27,125,35],[157,28,125,36,"chunks"],[157,34,125,42],[157,35,125,43],[157,38,125,46],[157,39,125,47],[157,41,125,49],[158,14,126,24],[159,12,127,20],[160,12,128,20],[160,18,128,26,"headerArray"],[160,29,128,37],[160,32,128,40,"concatChunks"],[160,44,128,52],[160,45,128,53,"chunks"],[160,51,128,59],[160,53,128,61],[160,54,128,62],[160,55,128,63],[161,12,129,20],[161,18,129,26,"view"],[161,22,129,30],[161,25,129,33],[161,29,129,37,"DataView"],[161,37,129,45],[161,38,129,46,"headerArray"],[161,49,129,57],[161,50,129,58,"buffer"],[161,56,129,64],[161,58,129,66,"headerArray"],[161,69,129,77],[161,70,129,78,"byteOffset"],[161,80,129,88],[161,82,129,90,"headerArray"],[161,93,129,101],[161,94,129,102,"length"],[161,100,129,108],[161,101,129,109],[162,12,130,20],[162,18,130,26,"n"],[162,19,130,27],[162,22,130,30,"view"],[162,26,130,34],[162,27,130,35,"getUint32"],[162,36,130,44],[162,37,130,45],[162,38,130,46],[162,39,130,47],[163,12,131,20],[163,16,131,24,"n"],[163,17,131,25],[163,20,131,28,"Math"],[163,24,131,32],[163,25,131,33,"pow"],[163,28,131,36],[163,29,131,37],[163,30,131,38],[163,32,131,40],[163,34,131,42],[163,37,131,45],[163,39,131,47],[163,40,131,48],[163,43,131,51],[163,44,131,52],[163,46,131,54],[164,14,132,24],[165,14,133,24,"controller"],[165,24,133,34],[165,25,133,35,"enqueue"],[165,32,133,42],[165,33,133,43,"ERROR_PACKET"],[165,43,133,55],[165,44,133,55,"ERROR_PACKET"],[165,56,133,55],[165,57,133,56],[166,14,134,24],[167,12,135,20],[168,12,136,20,"expectedLength"],[168,26,136,34],[168,29,136,37,"n"],[168,30,136,38],[168,33,136,41,"Math"],[168,37,136,45],[168,38,136,46,"pow"],[168,41,136,49],[168,42,136,50],[168,43,136,51],[168,45,136,53],[168,47,136,55],[168,48,136,56],[168,51,136,59,"view"],[168,55,136,63],[168,56,136,64,"getUint32"],[168,65,136,73],[168,66,136,74],[168,67,136,75],[168,68,136,76],[169,12,137,20,"state"],[169,17,137,25],[169,20,137,28],[169,21,137,29],[169,22,137,30],[170,10,138,16],[170,11,138,17],[170,17,139,21],[171,12,140,20],[171,16,140,24,"totalLength"],[171,27,140,35],[171,28,140,36,"chunks"],[171,34,140,42],[171,35,140,43],[171,38,140,46,"expectedLength"],[171,52,140,60],[171,54,140,62],[172,14,141,24],[173,12,142,20],[174,12,143,20],[174,18,143,26,"data"],[174,22,143,30],[174,25,143,33,"concatChunks"],[174,37,143,45],[174,38,143,46,"chunks"],[174,44,143,52],[174,46,143,54,"expectedLength"],[174,60,143,68],[174,61,143,69],[175,12,144,20,"controller"],[175,22,144,30],[175,23,144,31,"enqueue"],[175,30,144,38],[175,31,144,39],[175,35,144,39,"decodePacket"],[175,50,144,51],[175,51,144,51,"decodePacket"],[175,63,144,51],[175,65,144,52,"isBinary"],[175,73,144,60],[175,76,144,63,"data"],[175,80,144,67],[175,83,144,70,"TEXT_DECODER"],[175,95,144,82],[175,96,144,83,"decode"],[175,102,144,89],[175,103,144,90,"data"],[175,107,144,94],[175,108,144,95],[175,110,144,97,"binaryType"],[175,120,144,107],[175,121,144,108],[175,122,144,109],[176,12,145,20,"state"],[176,17,145,25],[176,20,145,28],[176,21,145,29],[176,22,145,30],[177,10,146,16],[178,10,147,16],[178,14,147,20,"expectedLength"],[178,28,147,34],[178,33,147,39],[178,34,147,40],[178,38,147,44,"expectedLength"],[178,52,147,58],[178,55,147,61,"maxPayload"],[178,65,147,71],[178,67,147,73],[179,12,148,20,"controller"],[179,22,148,30],[179,23,148,31,"enqueue"],[179,30,148,38],[179,31,148,39,"ERROR_PACKET"],[179,41,148,51],[179,42,148,51,"ERROR_PACKET"],[179,54,148,51],[179,55,148,52],[180,12,149,20],[181,10,150,16],[182,8,151,12],[183,6,152,8],[184,4,153,4],[184,5,153,5],[184,6,153,6],[185,2,154,0],[186,2,155,7],[186,8,155,13,"protocol"],[186,16,155,21],[186,19,155,24],[186,20,155,25],[187,0,155,26],[187,3]],"functionMap":{"names":["<global>","encodePayload","packets.forEach$argument_0","encodePacket$argument_2","decodePayload","createPacketEncoderStream","TransformStream$argument_0.transform","encodePacketToBinary$argument_1","totalLength","chunks.reduce$argument_0","concatChunks","createPacketDecoderStream"],"mappings":"AAA;sBCI;oBCK;oCCE;SDK;KDC;CDC;sBIC;CJW;OKC;QCE;yCCC;aD0B;SDC;CLE;AQE;yBCC,kCD;CRC;AUC;CViB;OWC;QLS;SKwD;CXE"},"hasCjsExports":false},"type":"js/module"}]}