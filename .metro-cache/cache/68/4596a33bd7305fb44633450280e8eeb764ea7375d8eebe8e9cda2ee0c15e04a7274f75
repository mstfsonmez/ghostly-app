{"dependencies":[{"name":"engine.io-client","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":86,"index":86}}],"key":"47uBFHNKf+pJCWjWFCflLVQYGvc=","exportNames":["*"],"imports":1}},{"name":"./socket.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":87},"end":{"line":2,"column":37,"index":124}}],"key":"eFXiJ3xGWi9z9IR2MpLa1oE6lVc=","exportNames":["*"],"imports":1}},{"name":"socket.io-parser","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":125},"end":{"line":3,"column":43,"index":168}}],"key":"cQaAU0lT2O9qXW5QPLAeCm8S6Aw=","exportNames":["*"],"imports":1}},{"name":"./on.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":169},"end":{"line":4,"column":29,"index":198}}],"key":"XRT79/HgjpzwYcEtMdKPNGwAAJA=","exportNames":["*"],"imports":1}},{"name":"./contrib/backo2.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":199},"end":{"line":5,"column":46,"index":245}}],"key":"+xoCajj5ZHxeBmv1nKLJe2m7TC8=","exportNames":["*"],"imports":1}},{"name":"@socket.io/component-emitter","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":246},"end":{"line":6,"column":56,"index":302}}],"key":"nWmouVdWEVSQD2UwM6teY1JyKBM=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  Object.defineProperty(exports, \"Manager\", {\n    enumerable: true,\n    get: function () {\n      return Manager;\n    }\n  });\n  var _engineIoClient = require(_dependencyMap[0], \"engine.io-client\");\n  var _socketJs = require(_dependencyMap[1], \"./socket.js\");\n  var _socketIoParser = require(_dependencyMap[2], \"socket.io-parser\");\n  var parser = _interopNamespace(_socketIoParser);\n  var _onJs = require(_dependencyMap[3], \"./on.js\");\n  var _contribBacko2Js = require(_dependencyMap[4], \"./contrib/backo2.js\");\n  var _socketIoComponentEmitter = require(_dependencyMap[5], \"@socket.io/component-emitter\");\n  class Manager extends _socketIoComponentEmitter.Emitter {\n    constructor(uri, opts) {\n      var _a;\n      super();\n      this.nsps = {};\n      this.subs = [];\n      if (uri && \"object\" === typeof uri) {\n        opts = uri;\n        uri = undefined;\n      }\n      opts = opts || {};\n      opts.path = opts.path || \"/socket.io\";\n      this.opts = opts;\n      (0, _engineIoClient.installTimerFunctions)(this, opts);\n      this.reconnection(opts.reconnection !== false);\n      this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n      this.reconnectionDelay(opts.reconnectionDelay || 1000);\n      this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n      this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n      this.backoff = new _contribBacko2Js.Backoff({\n        min: this.reconnectionDelay(),\n        max: this.reconnectionDelayMax(),\n        jitter: this.randomizationFactor()\n      });\n      this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n      this._readyState = \"closed\";\n      this.uri = uri;\n      const _parser = opts.parser || parser;\n      this.encoder = new _parser.Encoder();\n      this.decoder = new _parser.Decoder();\n      this._autoConnect = opts.autoConnect !== false;\n      if (this._autoConnect) this.open();\n    }\n    reconnection(v) {\n      if (!arguments.length) return this._reconnection;\n      this._reconnection = !!v;\n      if (!v) {\n        this.skipReconnect = true;\n      }\n      return this;\n    }\n    reconnectionAttempts(v) {\n      if (v === undefined) return this._reconnectionAttempts;\n      this._reconnectionAttempts = v;\n      return this;\n    }\n    reconnectionDelay(v) {\n      var _a;\n      if (v === undefined) return this._reconnectionDelay;\n      this._reconnectionDelay = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n      return this;\n    }\n    randomizationFactor(v) {\n      var _a;\n      if (v === undefined) return this._randomizationFactor;\n      this._randomizationFactor = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n      return this;\n    }\n    reconnectionDelayMax(v) {\n      var _a;\n      if (v === undefined) return this._reconnectionDelayMax;\n      this._reconnectionDelayMax = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n      return this;\n    }\n    timeout(v) {\n      if (!arguments.length) return this._timeout;\n      this._timeout = v;\n      return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    maybeReconnectOnOpen() {\n      // Only try to reconnect if it's the first time we're connecting\n      if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {\n        // keeps reconnection from firing twice for the same reconnection loop\n        this.reconnect();\n      }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn) {\n      if (~this._readyState.indexOf(\"open\")) return this;\n      this.engine = new _engineIoClient.Socket(this.uri, this.opts);\n      const socket = this.engine;\n      const self = this;\n      this._readyState = \"opening\";\n      this.skipReconnect = false;\n      // emit `open`\n      const openSubDestroy = (0, _onJs.on)(socket, \"open\", function () {\n        self.onopen();\n        fn && fn();\n      });\n      const onError = err => {\n        this.cleanup();\n        this._readyState = \"closed\";\n        this.emitReserved(\"error\", err);\n        if (fn) {\n          fn(err);\n        } else {\n          // Only do this if there is no fn to handle the error\n          this.maybeReconnectOnOpen();\n        }\n      };\n      // emit `error`\n      const errorSub = (0, _onJs.on)(socket, \"error\", onError);\n      if (false !== this._timeout) {\n        const timeout = this._timeout;\n        // set timer\n        const timer = this.setTimeoutFn(() => {\n          openSubDestroy();\n          onError(new Error(\"timeout\"));\n          socket.close();\n        }, timeout);\n        if (this.opts.autoUnref) {\n          timer.unref();\n        }\n        this.subs.push(() => {\n          this.clearTimeoutFn(timer);\n        });\n      }\n      this.subs.push(openSubDestroy);\n      this.subs.push(errorSub);\n      return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn) {\n      return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    onopen() {\n      // clear old subs\n      this.cleanup();\n      // mark as open\n      this._readyState = \"open\";\n      this.emitReserved(\"open\");\n      // add new subs\n      const socket = this.engine;\n      this.subs.push((0, _onJs.on)(socket, \"ping\", this.onping.bind(this)), (0, _onJs.on)(socket, \"data\", this.ondata.bind(this)), (0, _onJs.on)(socket, \"error\", this.onerror.bind(this)), (0, _onJs.on)(socket, \"close\", this.onclose.bind(this)),\n      // @ts-ignore\n      (0, _onJs.on)(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    onping() {\n      this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    ondata(data) {\n      try {\n        this.decoder.add(data);\n      } catch (e) {\n        this.onclose(\"parse error\", e);\n      }\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n      // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\n      (0, _engineIoClient.nextTick)(() => {\n        this.emitReserved(\"packet\", packet);\n      }, this.setTimeoutFn);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    onerror(err) {\n      this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp, opts) {\n      let socket = this.nsps[nsp];\n      if (!socket) {\n        socket = new _socketJs.Socket(this, nsp, opts);\n        this.nsps[nsp] = socket;\n      } else if (this._autoConnect && !socket.active) {\n        socket.connect();\n      }\n      return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket) {\n      const nsps = Object.keys(this.nsps);\n      for (const nsp of nsps) {\n        const socket = this.nsps[nsp];\n        if (socket.active) {\n          return;\n        }\n      }\n      this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet) {\n      const encodedPackets = this.encoder.encode(packet);\n      for (let i = 0; i < encodedPackets.length; i++) {\n        this.engine.write(encodedPackets[i], packet.options);\n      }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    cleanup() {\n      this.subs.forEach(subDestroy => subDestroy());\n      this.subs.length = 0;\n      this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close() {\n      this.skipReconnect = true;\n      this._reconnecting = false;\n      this.onclose(\"forced close\");\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    disconnect() {\n      return this._close();\n    }\n    /**\n     * Called when:\n     *\n     * - the low-level engine is closed\n     * - the parser encountered a badly formatted packet\n     * - all sockets are disconnected\n     *\n     * @private\n     */\n    onclose(reason, description) {\n      var _a;\n      this.cleanup();\n      (_a = this.engine) === null || _a === void 0 ? void 0 : _a.close();\n      this.backoff.reset();\n      this._readyState = \"closed\";\n      this.emitReserved(\"close\", reason, description);\n      if (this._reconnection && !this.skipReconnect) {\n        this.reconnect();\n      }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    reconnect() {\n      if (this._reconnecting || this.skipReconnect) return this;\n      const self = this;\n      if (this.backoff.attempts >= this._reconnectionAttempts) {\n        this.backoff.reset();\n        this.emitReserved(\"reconnect_failed\");\n        this._reconnecting = false;\n      } else {\n        const delay = this.backoff.duration();\n        this._reconnecting = true;\n        const timer = this.setTimeoutFn(() => {\n          if (self.skipReconnect) return;\n          this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n          // check again for the case socket closed in above events\n          if (self.skipReconnect) return;\n          self.open(err => {\n            if (err) {\n              self._reconnecting = false;\n              self.reconnect();\n              this.emitReserved(\"reconnect_error\", err);\n            } else {\n              self.onreconnect();\n            }\n          });\n        }, delay);\n        if (this.opts.autoUnref) {\n          timer.unref();\n        }\n        this.subs.push(() => {\n          this.clearTimeoutFn(timer);\n        });\n      }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    onreconnect() {\n      const attempt = this.backoff.attempts;\n      this._reconnecting = false;\n      this.backoff.reset();\n      this.emitReserved(\"reconnect\", attempt);\n    }\n  }\n});","lineCount":378,"map":[[22,2,7,0,"Object"],[22,8,7,0],[22,9,7,0,"defineProperty"],[22,23,7,0],[22,24,7,0,"exports"],[22,31,7,0],[23,4,7,0,"enumerable"],[23,14,7,0],[24,4,7,0,"get"],[24,7,7,0],[24,18,7,0,"get"],[24,19,7,0],[25,6,7,0],[25,13,7,0,"Manager"],[25,20,7,0],[26,4,7,0],[27,2,7,0],[28,2,1,0],[28,6,1,0,"_engineIoClient"],[28,21,1,0],[28,24,1,0,"require"],[28,31,1,0],[28,32,1,0,"_dependencyMap"],[28,46,1,0],[29,2,2,0],[29,6,2,0,"_socketJs"],[29,15,2,0],[29,18,2,0,"require"],[29,25,2,0],[29,26,2,0,"_dependencyMap"],[29,40,2,0],[30,2,3,0],[30,6,3,0,"_socketIoParser"],[30,21,3,0],[30,24,3,0,"require"],[30,31,3,0],[30,32,3,0,"_dependencyMap"],[30,46,3,0],[31,2,3,0],[31,6,3,0,"parser"],[31,12,3,0],[31,15,3,0,"_interopNamespace"],[31,32,3,0],[31,33,3,0,"_socketIoParser"],[31,48,3,0],[32,2,4,0],[32,6,4,0,"_onJs"],[32,11,4,0],[32,14,4,0,"require"],[32,21,4,0],[32,22,4,0,"_dependencyMap"],[32,36,4,0],[33,2,5,0],[33,6,5,0,"_contribBacko2Js"],[33,22,5,0],[33,25,5,0,"require"],[33,32,5,0],[33,33,5,0,"_dependencyMap"],[33,47,5,0],[34,2,6,0],[34,6,6,0,"_socketIoComponentEmitter"],[34,31,6,0],[34,34,6,0,"require"],[34,41,6,0],[34,42,6,0,"_dependencyMap"],[34,56,6,0],[35,2,7,7],[35,8,7,13,"Manager"],[35,15,7,20],[35,24,7,29,"Emitter"],[35,49,7,36],[35,50,7,36,"Emitter"],[35,57,7,36],[35,58,7,37],[36,4,8,4,"constructor"],[36,15,8,15,"constructor"],[36,16,8,16,"uri"],[36,19,8,19],[36,21,8,21,"opts"],[36,25,8,25],[36,27,8,27],[37,6,9,8],[37,10,9,12,"_a"],[37,12,9,14],[38,6,10,8],[38,11,10,13],[38,12,10,14],[38,13,10,15],[39,6,11,8],[39,10,11,12],[39,11,11,13,"nsps"],[39,15,11,17],[39,18,11,20],[39,19,11,21],[39,20,11,22],[40,6,12,8],[40,10,12,12],[40,11,12,13,"subs"],[40,15,12,17],[40,18,12,20],[40,20,12,22],[41,6,13,8],[41,10,13,12,"uri"],[41,13,13,15],[41,17,13,19],[41,25,13,27],[41,30,13,32],[41,37,13,39,"uri"],[41,40,13,42],[41,42,13,44],[42,8,14,12,"opts"],[42,12,14,16],[42,15,14,19,"uri"],[42,18,14,22],[43,8,15,12,"uri"],[43,11,15,15],[43,14,15,18,"undefined"],[43,23,15,27],[44,6,16,8],[45,6,17,8,"opts"],[45,10,17,12],[45,13,17,15,"opts"],[45,17,17,19],[45,21,17,23],[45,22,17,24],[45,23,17,25],[46,6,18,8,"opts"],[46,10,18,12],[46,11,18,13,"path"],[46,15,18,17],[46,18,18,20,"opts"],[46,22,18,24],[46,23,18,25,"path"],[46,27,18,29],[46,31,18,33],[46,43,18,45],[47,6,19,8],[47,10,19,12],[47,11,19,13,"opts"],[47,15,19,17],[47,18,19,20,"opts"],[47,22,19,24],[48,6,20,8],[48,10,20,8,"installTimerFunctions"],[48,25,20,29],[48,26,20,29,"installTimerFunctions"],[48,47,20,29],[48,49,20,30],[48,53,20,34],[48,55,20,36,"opts"],[48,59,20,40],[48,60,20,41],[49,6,21,8],[49,10,21,12],[49,11,21,13,"reconnection"],[49,23,21,25],[49,24,21,26,"opts"],[49,28,21,30],[49,29,21,31,"reconnection"],[49,41,21,43],[49,46,21,48],[49,51,21,53],[49,52,21,54],[50,6,22,8],[50,10,22,12],[50,11,22,13,"reconnectionAttempts"],[50,31,22,33],[50,32,22,34,"opts"],[50,36,22,38],[50,37,22,39,"reconnectionAttempts"],[50,57,22,59],[50,61,22,63,"Infinity"],[50,69,22,71],[50,70,22,72],[51,6,23,8],[51,10,23,12],[51,11,23,13,"reconnectionDelay"],[51,28,23,30],[51,29,23,31,"opts"],[51,33,23,35],[51,34,23,36,"reconnectionDelay"],[51,51,23,53],[51,55,23,57],[51,59,23,61],[51,60,23,62],[52,6,24,8],[52,10,24,12],[52,11,24,13,"reconnectionDelayMax"],[52,31,24,33],[52,32,24,34,"opts"],[52,36,24,38],[52,37,24,39,"reconnectionDelayMax"],[52,57,24,59],[52,61,24,63],[52,65,24,67],[52,66,24,68],[53,6,25,8],[53,10,25,12],[53,11,25,13,"randomizationFactor"],[53,30,25,32],[53,31,25,33],[53,32,25,34,"_a"],[53,34,25,36],[53,37,25,39,"opts"],[53,41,25,43],[53,42,25,44,"randomizationFactor"],[53,61,25,63],[53,67,25,69],[53,71,25,73],[53,75,25,77,"_a"],[53,77,25,79],[53,82,25,84],[53,87,25,89],[53,88,25,90],[53,91,25,93,"_a"],[53,93,25,95],[53,96,25,98],[53,99,25,101],[53,100,25,102],[54,6,26,8],[54,10,26,12],[54,11,26,13,"backoff"],[54,18,26,20],[54,21,26,23],[54,25,26,27,"Backoff"],[54,41,26,34],[54,42,26,34,"Backoff"],[54,49,26,34],[54,50,26,35],[55,8,27,12,"min"],[55,11,27,15],[55,13,27,17],[55,17,27,21],[55,18,27,22,"reconnectionDelay"],[55,35,27,39],[55,36,27,40],[55,37,27,41],[56,8,28,12,"max"],[56,11,28,15],[56,13,28,17],[56,17,28,21],[56,18,28,22,"reconnectionDelayMax"],[56,38,28,42],[56,39,28,43],[56,40,28,44],[57,8,29,12,"jitter"],[57,14,29,18],[57,16,29,20],[57,20,29,24],[57,21,29,25,"randomizationFactor"],[57,40,29,44],[57,41,29,45],[58,6,30,8],[58,7,30,9],[58,8,30,10],[59,6,31,8],[59,10,31,12],[59,11,31,13,"timeout"],[59,18,31,20],[59,19,31,21],[59,23,31,25],[59,27,31,29,"opts"],[59,31,31,33],[59,32,31,34,"timeout"],[59,39,31,41],[59,42,31,44],[59,47,31,49],[59,50,31,52,"opts"],[59,54,31,56],[59,55,31,57,"timeout"],[59,62,31,64],[59,63,31,65],[60,6,32,8],[60,10,32,12],[60,11,32,13,"_readyState"],[60,22,32,24],[60,25,32,27],[60,33,32,35],[61,6,33,8],[61,10,33,12],[61,11,33,13,"uri"],[61,14,33,16],[61,17,33,19,"uri"],[61,20,33,22],[62,6,34,8],[62,12,34,14,"_parser"],[62,19,34,21],[62,22,34,24,"opts"],[62,26,34,28],[62,27,34,29,"parser"],[62,33,34,35],[62,37,34,39,"parser"],[62,43,34,45],[63,6,35,8],[63,10,35,12],[63,11,35,13,"encoder"],[63,18,35,20],[63,21,35,23],[63,25,35,27,"_parser"],[63,32,35,34],[63,33,35,35,"Encoder"],[63,40,35,42],[63,41,35,43],[63,42,35,44],[64,6,36,8],[64,10,36,12],[64,11,36,13,"decoder"],[64,18,36,20],[64,21,36,23],[64,25,36,27,"_parser"],[64,32,36,34],[64,33,36,35,"Decoder"],[64,40,36,42],[64,41,36,43],[64,42,36,44],[65,6,37,8],[65,10,37,12],[65,11,37,13,"_autoConnect"],[65,23,37,25],[65,26,37,28,"opts"],[65,30,37,32],[65,31,37,33,"autoConnect"],[65,42,37,44],[65,47,37,49],[65,52,37,54],[66,6,38,8],[66,10,38,12],[66,14,38,16],[66,15,38,17,"_autoConnect"],[66,27,38,29],[66,29,39,12],[66,33,39,16],[66,34,39,17,"open"],[66,38,39,21],[66,39,39,22],[66,40,39,23],[67,4,40,4],[68,4,41,4,"reconnection"],[68,16,41,16,"reconnection"],[68,17,41,17,"v"],[68,18,41,18],[68,20,41,20],[69,6,42,8],[69,10,42,12],[69,11,42,13,"arguments"],[69,20,42,22],[69,21,42,23,"length"],[69,27,42,29],[69,29,43,12],[69,36,43,19],[69,40,43,23],[69,41,43,24,"_reconnection"],[69,54,43,37],[70,6,44,8],[70,10,44,12],[70,11,44,13,"_reconnection"],[70,24,44,26],[70,27,44,29],[70,28,44,30],[70,29,44,31,"v"],[70,30,44,32],[71,6,45,8],[71,10,45,12],[71,11,45,13,"v"],[71,12,45,14],[71,14,45,16],[72,8,46,12],[72,12,46,16],[72,13,46,17,"skipReconnect"],[72,26,46,30],[72,29,46,33],[72,33,46,37],[73,6,47,8],[74,6,48,8],[74,13,48,15],[74,17,48,19],[75,4,49,4],[76,4,50,4,"reconnectionAttempts"],[76,24,50,24,"reconnectionAttempts"],[76,25,50,25,"v"],[76,26,50,26],[76,28,50,28],[77,6,51,8],[77,10,51,12,"v"],[77,11,51,13],[77,16,51,18,"undefined"],[77,25,51,27],[77,27,52,12],[77,34,52,19],[77,38,52,23],[77,39,52,24,"_reconnectionAttempts"],[77,60,52,45],[78,6,53,8],[78,10,53,12],[78,11,53,13,"_reconnectionAttempts"],[78,32,53,34],[78,35,53,37,"v"],[78,36,53,38],[79,6,54,8],[79,13,54,15],[79,17,54,19],[80,4,55,4],[81,4,56,4,"reconnectionDelay"],[81,21,56,21,"reconnectionDelay"],[81,22,56,22,"v"],[81,23,56,23],[81,25,56,25],[82,6,57,8],[82,10,57,12,"_a"],[82,12,57,14],[83,6,58,8],[83,10,58,12,"v"],[83,11,58,13],[83,16,58,18,"undefined"],[83,25,58,27],[83,27,59,12],[83,34,59,19],[83,38,59,23],[83,39,59,24,"_reconnectionDelay"],[83,57,59,42],[84,6,60,8],[84,10,60,12],[84,11,60,13,"_reconnectionDelay"],[84,29,60,31],[84,32,60,34,"v"],[84,33,60,35],[85,6,61,8],[85,7,61,9,"_a"],[85,9,61,11],[85,12,61,14],[85,16,61,18],[85,17,61,19,"backoff"],[85,24,61,26],[85,30,61,32],[85,34,61,36],[85,38,61,40,"_a"],[85,40,61,42],[85,45,61,47],[85,50,61,52],[85,51,61,53],[85,54,61,56],[85,59,61,61],[85,60,61,62],[85,63,61,65,"_a"],[85,65,61,67],[85,66,61,68,"setMin"],[85,72,61,74],[85,73,61,75,"v"],[85,74,61,76],[85,75,61,77],[86,6,62,8],[86,13,62,15],[86,17,62,19],[87,4,63,4],[88,4,64,4,"randomizationFactor"],[88,23,64,23,"randomizationFactor"],[88,24,64,24,"v"],[88,25,64,25],[88,27,64,27],[89,6,65,8],[89,10,65,12,"_a"],[89,12,65,14],[90,6,66,8],[90,10,66,12,"v"],[90,11,66,13],[90,16,66,18,"undefined"],[90,25,66,27],[90,27,67,12],[90,34,67,19],[90,38,67,23],[90,39,67,24,"_randomizationFactor"],[90,59,67,44],[91,6,68,8],[91,10,68,12],[91,11,68,13,"_randomizationFactor"],[91,31,68,33],[91,34,68,36,"v"],[91,35,68,37],[92,6,69,8],[92,7,69,9,"_a"],[92,9,69,11],[92,12,69,14],[92,16,69,18],[92,17,69,19,"backoff"],[92,24,69,26],[92,30,69,32],[92,34,69,36],[92,38,69,40,"_a"],[92,40,69,42],[92,45,69,47],[92,50,69,52],[92,51,69,53],[92,54,69,56],[92,59,69,61],[92,60,69,62],[92,63,69,65,"_a"],[92,65,69,67],[92,66,69,68,"setJitter"],[92,75,69,77],[92,76,69,78,"v"],[92,77,69,79],[92,78,69,80],[93,6,70,8],[93,13,70,15],[93,17,70,19],[94,4,71,4],[95,4,72,4,"reconnectionDelayMax"],[95,24,72,24,"reconnectionDelayMax"],[95,25,72,25,"v"],[95,26,72,26],[95,28,72,28],[96,6,73,8],[96,10,73,12,"_a"],[96,12,73,14],[97,6,74,8],[97,10,74,12,"v"],[97,11,74,13],[97,16,74,18,"undefined"],[97,25,74,27],[97,27,75,12],[97,34,75,19],[97,38,75,23],[97,39,75,24,"_reconnectionDelayMax"],[97,60,75,45],[98,6,76,8],[98,10,76,12],[98,11,76,13,"_reconnectionDelayMax"],[98,32,76,34],[98,35,76,37,"v"],[98,36,76,38],[99,6,77,8],[99,7,77,9,"_a"],[99,9,77,11],[99,12,77,14],[99,16,77,18],[99,17,77,19,"backoff"],[99,24,77,26],[99,30,77,32],[99,34,77,36],[99,38,77,40,"_a"],[99,40,77,42],[99,45,77,47],[99,50,77,52],[99,51,77,53],[99,54,77,56],[99,59,77,61],[99,60,77,62],[99,63,77,65,"_a"],[99,65,77,67],[99,66,77,68,"setMax"],[99,72,77,74],[99,73,77,75,"v"],[99,74,77,76],[99,75,77,77],[100,6,78,8],[100,13,78,15],[100,17,78,19],[101,4,79,4],[102,4,80,4,"timeout"],[102,11,80,11,"timeout"],[102,12,80,12,"v"],[102,13,80,13],[102,15,80,15],[103,6,81,8],[103,10,81,12],[103,11,81,13,"arguments"],[103,20,81,22],[103,21,81,23,"length"],[103,27,81,29],[103,29,82,12],[103,36,82,19],[103,40,82,23],[103,41,82,24,"_timeout"],[103,49,82,32],[104,6,83,8],[104,10,83,12],[104,11,83,13,"_timeout"],[104,19,83,21],[104,22,83,24,"v"],[104,23,83,25],[105,6,84,8],[105,13,84,15],[105,17,84,19],[106,4,85,4],[107,4,86,4],[108,0,87,0],[109,0,88,0],[110,0,89,0],[111,0,90,0],[112,0,91,0],[113,4,92,4,"maybeReconnectOnOpen"],[113,24,92,24,"maybeReconnectOnOpen"],[113,25,92,24],[113,27,92,27],[114,6,93,8],[115,6,94,8],[115,10,94,12],[115,11,94,13],[115,15,94,17],[115,16,94,18,"_reconnecting"],[115,29,94,31],[115,33,95,12],[115,37,95,16],[115,38,95,17,"_reconnection"],[115,51,95,30],[115,55,96,12],[115,59,96,16],[115,60,96,17,"backoff"],[115,67,96,24],[115,68,96,25,"attempts"],[115,76,96,33],[115,81,96,38],[115,82,96,39],[115,84,96,41],[116,8,97,12],[117,8,98,12],[117,12,98,16],[117,13,98,17,"reconnect"],[117,22,98,26],[117,23,98,27],[117,24,98,28],[118,6,99,8],[119,4,100,4],[120,4,101,4],[121,0,102,0],[122,0,103,0],[123,0,104,0],[124,0,105,0],[125,0,106,0],[126,0,107,0],[127,4,108,4,"open"],[127,8,108,8,"open"],[127,9,108,9,"fn"],[127,11,108,11],[127,13,108,13],[128,6,109,8],[128,10,109,12],[128,11,109,13],[128,15,109,17],[128,16,109,18,"_readyState"],[128,27,109,29],[128,28,109,30,"indexOf"],[128,35,109,37],[128,36,109,38],[128,42,109,44],[128,43,109,45],[128,45,110,12],[128,52,110,19],[128,56,110,23],[129,6,111,8],[129,10,111,12],[129,11,111,13,"engine"],[129,17,111,19],[129,20,111,22],[129,24,111,26,"Engine"],[129,39,111,32],[129,40,111,32,"Socket"],[129,46,111,32],[129,47,111,33],[129,51,111,37],[129,52,111,38,"uri"],[129,55,111,41],[129,57,111,43],[129,61,111,47],[129,62,111,48,"opts"],[129,66,111,52],[129,67,111,53],[130,6,112,8],[130,12,112,14,"socket"],[130,18,112,20],[130,21,112,23],[130,25,112,27],[130,26,112,28,"engine"],[130,32,112,34],[131,6,113,8],[131,12,113,14,"self"],[131,16,113,18],[131,19,113,21],[131,23,113,25],[132,6,114,8],[132,10,114,12],[132,11,114,13,"_readyState"],[132,22,114,24],[132,25,114,27],[132,34,114,36],[133,6,115,8],[133,10,115,12],[133,11,115,13,"skipReconnect"],[133,24,115,26],[133,27,115,29],[133,32,115,34],[134,6,116,8],[135,6,117,8],[135,12,117,14,"openSubDestroy"],[135,26,117,28],[135,29,117,31],[135,33,117,31,"on"],[135,38,117,33],[135,39,117,33,"on"],[135,41,117,33],[135,43,117,34,"socket"],[135,49,117,40],[135,51,117,42],[135,57,117,48],[135,59,117,50],[135,71,117,62],[136,8,118,12,"self"],[136,12,118,16],[136,13,118,17,"onopen"],[136,19,118,23],[136,20,118,24],[136,21,118,25],[137,8,119,12,"fn"],[137,10,119,14],[137,14,119,18,"fn"],[137,16,119,20],[137,17,119,21],[137,18,119,22],[138,6,120,8],[138,7,120,9],[138,8,120,10],[139,6,121,8],[139,12,121,14,"onError"],[139,19,121,21],[139,22,121,25,"err"],[139,25,121,28],[139,29,121,33],[140,8,122,12],[140,12,122,16],[140,13,122,17,"cleanup"],[140,20,122,24],[140,21,122,25],[140,22,122,26],[141,8,123,12],[141,12,123,16],[141,13,123,17,"_readyState"],[141,24,123,28],[141,27,123,31],[141,35,123,39],[142,8,124,12],[142,12,124,16],[142,13,124,17,"emitReserved"],[142,25,124,29],[142,26,124,30],[142,33,124,37],[142,35,124,39,"err"],[142,38,124,42],[142,39,124,43],[143,8,125,12],[143,12,125,16,"fn"],[143,14,125,18],[143,16,125,20],[144,10,126,16,"fn"],[144,12,126,18],[144,13,126,19,"err"],[144,16,126,22],[144,17,126,23],[145,8,127,12],[145,9,127,13],[145,15,128,17],[146,10,129,16],[147,10,130,16],[147,14,130,20],[147,15,130,21,"maybeReconnectOnOpen"],[147,35,130,41],[147,36,130,42],[147,37,130,43],[148,8,131,12],[149,6,132,8],[149,7,132,9],[150,6,133,8],[151,6,134,8],[151,12,134,14,"errorSub"],[151,20,134,22],[151,23,134,25],[151,27,134,25,"on"],[151,32,134,27],[151,33,134,27,"on"],[151,35,134,27],[151,37,134,28,"socket"],[151,43,134,34],[151,45,134,36],[151,52,134,43],[151,54,134,45,"onError"],[151,61,134,52],[151,62,134,53],[152,6,135,8],[152,10,135,12],[152,15,135,17],[152,20,135,22],[152,24,135,26],[152,25,135,27,"_timeout"],[152,33,135,35],[152,35,135,37],[153,8,136,12],[153,14,136,18,"timeout"],[153,21,136,25],[153,24,136,28],[153,28,136,32],[153,29,136,33,"_timeout"],[153,37,136,41],[154,8,137,12],[155,8,138,12],[155,14,138,18,"timer"],[155,19,138,23],[155,22,138,26],[155,26,138,30],[155,27,138,31,"setTimeoutFn"],[155,39,138,43],[155,40,138,44],[155,46,138,50],[156,10,139,16,"openSubDestroy"],[156,24,139,30],[156,25,139,31],[156,26,139,32],[157,10,140,16,"onError"],[157,17,140,23],[157,18,140,24],[157,22,140,28,"Error"],[157,27,140,33],[157,28,140,34],[157,37,140,43],[157,38,140,44],[157,39,140,45],[158,10,141,16,"socket"],[158,16,141,22],[158,17,141,23,"close"],[158,22,141,28],[158,23,141,29],[158,24,141,30],[159,8,142,12],[159,9,142,13],[159,11,142,15,"timeout"],[159,18,142,22],[159,19,142,23],[160,8,143,12],[160,12,143,16],[160,16,143,20],[160,17,143,21,"opts"],[160,21,143,25],[160,22,143,26,"autoUnref"],[160,31,143,35],[160,33,143,37],[161,10,144,16,"timer"],[161,15,144,21],[161,16,144,22,"unref"],[161,21,144,27],[161,22,144,28],[161,23,144,29],[162,8,145,12],[163,8,146,12],[163,12,146,16],[163,13,146,17,"subs"],[163,17,146,21],[163,18,146,22,"push"],[163,22,146,26],[163,23,146,27],[163,29,146,33],[164,10,147,16],[164,14,147,20],[164,15,147,21,"clearTimeoutFn"],[164,29,147,35],[164,30,147,36,"timer"],[164,35,147,41],[164,36,147,42],[165,8,148,12],[165,9,148,13],[165,10,148,14],[166,6,149,8],[167,6,150,8],[167,10,150,12],[167,11,150,13,"subs"],[167,15,150,17],[167,16,150,18,"push"],[167,20,150,22],[167,21,150,23,"openSubDestroy"],[167,35,150,37],[167,36,150,38],[168,6,151,8],[168,10,151,12],[168,11,151,13,"subs"],[168,15,151,17],[168,16,151,18,"push"],[168,20,151,22],[168,21,151,23,"errorSub"],[168,29,151,31],[168,30,151,32],[169,6,152,8],[169,13,152,15],[169,17,152,19],[170,4,153,4],[171,4,154,4],[172,0,155,0],[173,0,156,0],[174,0,157,0],[175,0,158,0],[176,0,159,0],[177,4,160,4,"connect"],[177,11,160,11,"connect"],[177,12,160,12,"fn"],[177,14,160,14],[177,16,160,16],[178,6,161,8],[178,13,161,15],[178,17,161,19],[178,18,161,20,"open"],[178,22,161,24],[178,23,161,25,"fn"],[178,25,161,27],[178,26,161,28],[179,4,162,4],[180,4,163,4],[181,0,164,0],[182,0,165,0],[183,0,166,0],[184,0,167,0],[185,4,168,4,"onopen"],[185,10,168,10,"onopen"],[185,11,168,10],[185,13,168,13],[186,6,169,8],[187,6,170,8],[187,10,170,12],[187,11,170,13,"cleanup"],[187,18,170,20],[187,19,170,21],[187,20,170,22],[188,6,171,8],[189,6,172,8],[189,10,172,12],[189,11,172,13,"_readyState"],[189,22,172,24],[189,25,172,27],[189,31,172,33],[190,6,173,8],[190,10,173,12],[190,11,173,13,"emitReserved"],[190,23,173,25],[190,24,173,26],[190,30,173,32],[190,31,173,33],[191,6,174,8],[192,6,175,8],[192,12,175,14,"socket"],[192,18,175,20],[192,21,175,23],[192,25,175,27],[192,26,175,28,"engine"],[192,32,175,34],[193,6,176,8],[193,10,176,12],[193,11,176,13,"subs"],[193,15,176,17],[193,16,176,18,"push"],[193,20,176,22],[193,21,176,23],[193,25,176,23,"on"],[193,30,176,25],[193,31,176,25,"on"],[193,33,176,25],[193,35,176,26,"socket"],[193,41,176,32],[193,43,176,34],[193,49,176,40],[193,51,176,42],[193,55,176,46],[193,56,176,47,"onping"],[193,62,176,53],[193,63,176,54,"bind"],[193,67,176,58],[193,68,176,59],[193,72,176,63],[193,73,176,64],[193,74,176,65],[193,76,176,67],[193,80,176,67,"on"],[193,85,176,69],[193,86,176,69,"on"],[193,88,176,69],[193,90,176,70,"socket"],[193,96,176,76],[193,98,176,78],[193,104,176,84],[193,106,176,86],[193,110,176,90],[193,111,176,91,"ondata"],[193,117,176,97],[193,118,176,98,"bind"],[193,122,176,102],[193,123,176,103],[193,127,176,107],[193,128,176,108],[193,129,176,109],[193,131,176,111],[193,135,176,111,"on"],[193,140,176,113],[193,141,176,113,"on"],[193,143,176,113],[193,145,176,114,"socket"],[193,151,176,120],[193,153,176,122],[193,160,176,129],[193,162,176,131],[193,166,176,135],[193,167,176,136,"onerror"],[193,174,176,143],[193,175,176,144,"bind"],[193,179,176,148],[193,180,176,149],[193,184,176,153],[193,185,176,154],[193,186,176,155],[193,188,176,157],[193,192,176,157,"on"],[193,197,176,159],[193,198,176,159,"on"],[193,200,176,159],[193,202,176,160,"socket"],[193,208,176,166],[193,210,176,168],[193,217,176,175],[193,219,176,177],[193,223,176,181],[193,224,176,182,"onclose"],[193,231,176,189],[193,232,176,190,"bind"],[193,236,176,194],[193,237,176,195],[193,241,176,199],[193,242,176,200],[193,243,176,201],[194,6,177,8],[195,6,178,8],[195,10,178,8,"on"],[195,15,178,10],[195,16,178,10,"on"],[195,18,178,10],[195,20,178,11],[195,24,178,15],[195,25,178,16,"decoder"],[195,32,178,23],[195,34,178,25],[195,43,178,34],[195,45,178,36],[195,49,178,40],[195,50,178,41,"ondecoded"],[195,59,178,50],[195,60,178,51,"bind"],[195,64,178,55],[195,65,178,56],[195,69,178,60],[195,70,178,61],[195,71,178,62],[195,72,178,63],[196,4,179,4],[197,4,180,4],[198,0,181,0],[199,0,182,0],[200,0,183,0],[201,0,184,0],[202,4,185,4,"onping"],[202,10,185,10,"onping"],[202,11,185,10],[202,13,185,13],[203,6,186,8],[203,10,186,12],[203,11,186,13,"emitReserved"],[203,23,186,25],[203,24,186,26],[203,30,186,32],[203,31,186,33],[204,4,187,4],[205,4,188,4],[206,0,189,0],[207,0,190,0],[208,0,191,0],[209,0,192,0],[210,4,193,4,"ondata"],[210,10,193,10,"ondata"],[210,11,193,11,"data"],[210,15,193,15],[210,17,193,17],[211,6,194,8],[211,10,194,12],[212,8,195,12],[212,12,195,16],[212,13,195,17,"decoder"],[212,20,195,24],[212,21,195,25,"add"],[212,24,195,28],[212,25,195,29,"data"],[212,29,195,33],[212,30,195,34],[213,6,196,8],[213,7,196,9],[213,8,197,8],[213,15,197,15,"e"],[213,16,197,16],[213,18,197,18],[214,8,198,12],[214,12,198,16],[214,13,198,17,"onclose"],[214,20,198,24],[214,21,198,25],[214,34,198,38],[214,36,198,40,"e"],[214,37,198,41],[214,38,198,42],[215,6,199,8],[216,4,200,4],[217,4,201,4],[218,0,202,0],[219,0,203,0],[220,0,204,0],[221,0,205,0],[222,4,206,4,"ondecoded"],[222,13,206,13,"ondecoded"],[222,14,206,14,"packet"],[222,20,206,20],[222,22,206,22],[223,6,207,8],[224,6,208,8],[224,10,208,8,"nextTick"],[224,25,208,16],[224,26,208,16,"nextTick"],[224,34,208,16],[224,36,208,17],[224,42,208,23],[225,8,209,12],[225,12,209,16],[225,13,209,17,"emitReserved"],[225,25,209,29],[225,26,209,30],[225,34,209,38],[225,36,209,40,"packet"],[225,42,209,46],[225,43,209,47],[226,6,210,8],[226,7,210,9],[226,9,210,11],[226,13,210,15],[226,14,210,16,"setTimeoutFn"],[226,26,210,28],[226,27,210,29],[227,4,211,4],[228,4,212,4],[229,0,213,0],[230,0,214,0],[231,0,215,0],[232,0,216,0],[233,4,217,4,"onerror"],[233,11,217,11,"onerror"],[233,12,217,12,"err"],[233,15,217,15],[233,17,217,17],[234,6,218,8],[234,10,218,12],[234,11,218,13,"emitReserved"],[234,23,218,25],[234,24,218,26],[234,31,218,33],[234,33,218,35,"err"],[234,36,218,38],[234,37,218,39],[235,4,219,4],[236,4,220,4],[237,0,221,0],[238,0,222,0],[239,0,223,0],[240,0,224,0],[241,0,225,0],[242,4,226,4,"socket"],[242,10,226,10,"socket"],[242,11,226,11,"nsp"],[242,14,226,14],[242,16,226,16,"opts"],[242,20,226,20],[242,22,226,22],[243,6,227,8],[243,10,227,12,"socket"],[243,16,227,18],[243,19,227,21],[243,23,227,25],[243,24,227,26,"nsps"],[243,28,227,30],[243,29,227,31,"nsp"],[243,32,227,34],[243,33,227,35],[244,6,228,8],[244,10,228,12],[244,11,228,13,"socket"],[244,17,228,19],[244,19,228,21],[245,8,229,12,"socket"],[245,14,229,18],[245,17,229,21],[245,21,229,25,"Socket"],[245,30,229,31],[245,31,229,31,"Socket"],[245,37,229,31],[245,38,229,32],[245,42,229,36],[245,44,229,38,"nsp"],[245,47,229,41],[245,49,229,43,"opts"],[245,53,229,47],[245,54,229,48],[246,8,230,12],[246,12,230,16],[246,13,230,17,"nsps"],[246,17,230,21],[246,18,230,22,"nsp"],[246,21,230,25],[246,22,230,26],[246,25,230,29,"socket"],[246,31,230,35],[247,6,231,8],[247,7,231,9],[247,13,232,13],[247,17,232,17],[247,21,232,21],[247,22,232,22,"_autoConnect"],[247,34,232,34],[247,38,232,38],[247,39,232,39,"socket"],[247,45,232,45],[247,46,232,46,"active"],[247,52,232,52],[247,54,232,54],[248,8,233,12,"socket"],[248,14,233,18],[248,15,233,19,"connect"],[248,22,233,26],[248,23,233,27],[248,24,233,28],[249,6,234,8],[250,6,235,8],[250,13,235,15,"socket"],[250,19,235,21],[251,4,236,4],[252,4,237,4],[253,0,238,0],[254,0,239,0],[255,0,240,0],[256,0,241,0],[257,0,242,0],[258,4,243,4,"_destroy"],[258,12,243,12,"_destroy"],[258,13,243,13,"socket"],[258,19,243,19],[258,21,243,21],[259,6,244,8],[259,12,244,14,"nsps"],[259,16,244,18],[259,19,244,21,"Object"],[259,25,244,27],[259,26,244,28,"keys"],[259,30,244,32],[259,31,244,33],[259,35,244,37],[259,36,244,38,"nsps"],[259,40,244,42],[259,41,244,43],[260,6,245,8],[260,11,245,13],[260,17,245,19,"nsp"],[260,20,245,22],[260,24,245,26,"nsps"],[260,28,245,30],[260,30,245,32],[261,8,246,12],[261,14,246,18,"socket"],[261,20,246,24],[261,23,246,27],[261,27,246,31],[261,28,246,32,"nsps"],[261,32,246,36],[261,33,246,37,"nsp"],[261,36,246,40],[261,37,246,41],[262,8,247,12],[262,12,247,16,"socket"],[262,18,247,22],[262,19,247,23,"active"],[262,25,247,29],[262,27,247,31],[263,10,248,16],[264,8,249,12],[265,6,250,8],[266,6,251,8],[266,10,251,12],[266,11,251,13,"_close"],[266,17,251,19],[266,18,251,20],[266,19,251,21],[267,4,252,4],[268,4,253,4],[269,0,254,0],[270,0,255,0],[271,0,256,0],[272,0,257,0],[273,0,258,0],[274,4,259,4,"_packet"],[274,11,259,11,"_packet"],[274,12,259,12,"packet"],[274,18,259,18],[274,20,259,20],[275,6,260,8],[275,12,260,14,"encodedPackets"],[275,26,260,28],[275,29,260,31],[275,33,260,35],[275,34,260,36,"encoder"],[275,41,260,43],[275,42,260,44,"encode"],[275,48,260,50],[275,49,260,51,"packet"],[275,55,260,57],[275,56,260,58],[276,6,261,8],[276,11,261,13],[276,15,261,17,"i"],[276,16,261,18],[276,19,261,21],[276,20,261,22],[276,22,261,24,"i"],[276,23,261,25],[276,26,261,28,"encodedPackets"],[276,40,261,42],[276,41,261,43,"length"],[276,47,261,49],[276,49,261,51,"i"],[276,50,261,52],[276,52,261,54],[276,54,261,56],[277,8,262,12],[277,12,262,16],[277,13,262,17,"engine"],[277,19,262,23],[277,20,262,24,"write"],[277,25,262,29],[277,26,262,30,"encodedPackets"],[277,40,262,44],[277,41,262,45,"i"],[277,42,262,46],[277,43,262,47],[277,45,262,49,"packet"],[277,51,262,55],[277,52,262,56,"options"],[277,59,262,63],[277,60,262,64],[278,6,263,8],[279,4,264,4],[280,4,265,4],[281,0,266,0],[282,0,267,0],[283,0,268,0],[284,0,269,0],[285,4,270,4,"cleanup"],[285,11,270,11,"cleanup"],[285,12,270,11],[285,14,270,14],[286,6,271,8],[286,10,271,12],[286,11,271,13,"subs"],[286,15,271,17],[286,16,271,18,"forEach"],[286,23,271,25],[286,24,271,27,"subDestroy"],[286,34,271,37],[286,38,271,42,"subDestroy"],[286,48,271,52],[286,49,271,53],[286,50,271,54],[286,51,271,55],[287,6,272,8],[287,10,272,12],[287,11,272,13,"subs"],[287,15,272,17],[287,16,272,18,"length"],[287,22,272,24],[287,25,272,27],[287,26,272,28],[288,6,273,8],[288,10,273,12],[288,11,273,13,"decoder"],[288,18,273,20],[288,19,273,21,"destroy"],[288,26,273,28],[288,27,273,29],[288,28,273,30],[289,4,274,4],[290,4,275,4],[291,0,276,0],[292,0,277,0],[293,0,278,0],[294,0,279,0],[295,4,280,4,"_close"],[295,10,280,10,"_close"],[295,11,280,10],[295,13,280,13],[296,6,281,8],[296,10,281,12],[296,11,281,13,"skipReconnect"],[296,24,281,26],[296,27,281,29],[296,31,281,33],[297,6,282,8],[297,10,282,12],[297,11,282,13,"_reconnecting"],[297,24,282,26],[297,27,282,29],[297,32,282,34],[298,6,283,8],[298,10,283,12],[298,11,283,13,"onclose"],[298,18,283,20],[298,19,283,21],[298,33,283,35],[298,34,283,36],[299,4,284,4],[300,4,285,4],[301,0,286,0],[302,0,287,0],[303,0,288,0],[304,0,289,0],[305,4,290,4,"disconnect"],[305,14,290,14,"disconnect"],[305,15,290,14],[305,17,290,17],[306,6,291,8],[306,13,291,15],[306,17,291,19],[306,18,291,20,"_close"],[306,24,291,26],[306,25,291,27],[306,26,291,28],[307,4,292,4],[308,4,293,4],[309,0,294,0],[310,0,295,0],[311,0,296,0],[312,0,297,0],[313,0,298,0],[314,0,299,0],[315,0,300,0],[316,0,301,0],[317,4,302,4,"onclose"],[317,11,302,11,"onclose"],[317,12,302,12,"reason"],[317,18,302,18],[317,20,302,20,"description"],[317,31,302,31],[317,33,302,33],[318,6,303,8],[318,10,303,12,"_a"],[318,12,303,14],[319,6,304,8],[319,10,304,12],[319,11,304,13,"cleanup"],[319,18,304,20],[319,19,304,21],[319,20,304,22],[320,6,305,8],[320,7,305,9,"_a"],[320,9,305,11],[320,12,305,14],[320,16,305,18],[320,17,305,19,"engine"],[320,23,305,25],[320,29,305,31],[320,33,305,35],[320,37,305,39,"_a"],[320,39,305,41],[320,44,305,46],[320,49,305,51],[320,50,305,52],[320,53,305,55],[320,58,305,60],[320,59,305,61],[320,62,305,64,"_a"],[320,64,305,66],[320,65,305,67,"close"],[320,70,305,72],[320,71,305,73],[320,72,305,74],[321,6,306,8],[321,10,306,12],[321,11,306,13,"backoff"],[321,18,306,20],[321,19,306,21,"reset"],[321,24,306,26],[321,25,306,27],[321,26,306,28],[322,6,307,8],[322,10,307,12],[322,11,307,13,"_readyState"],[322,22,307,24],[322,25,307,27],[322,33,307,35],[323,6,308,8],[323,10,308,12],[323,11,308,13,"emitReserved"],[323,23,308,25],[323,24,308,26],[323,31,308,33],[323,33,308,35,"reason"],[323,39,308,41],[323,41,308,43,"description"],[323,52,308,54],[323,53,308,55],[324,6,309,8],[324,10,309,12],[324,14,309,16],[324,15,309,17,"_reconnection"],[324,28,309,30],[324,32,309,34],[324,33,309,35],[324,37,309,39],[324,38,309,40,"skipReconnect"],[324,51,309,53],[324,53,309,55],[325,8,310,12],[325,12,310,16],[325,13,310,17,"reconnect"],[325,22,310,26],[325,23,310,27],[325,24,310,28],[326,6,311,8],[327,4,312,4],[328,4,313,4],[329,0,314,0],[330,0,315,0],[331,0,316,0],[332,0,317,0],[333,4,318,4,"reconnect"],[333,13,318,13,"reconnect"],[333,14,318,13],[333,16,318,16],[334,6,319,8],[334,10,319,12],[334,14,319,16],[334,15,319,17,"_reconnecting"],[334,28,319,30],[334,32,319,34],[334,36,319,38],[334,37,319,39,"skipReconnect"],[334,50,319,52],[334,52,320,12],[334,59,320,19],[334,63,320,23],[335,6,321,8],[335,12,321,14,"self"],[335,16,321,18],[335,19,321,21],[335,23,321,25],[336,6,322,8],[336,10,322,12],[336,14,322,16],[336,15,322,17,"backoff"],[336,22,322,24],[336,23,322,25,"attempts"],[336,31,322,33],[336,35,322,37],[336,39,322,41],[336,40,322,42,"_reconnectionAttempts"],[336,61,322,63],[336,63,322,65],[337,8,323,12],[337,12,323,16],[337,13,323,17,"backoff"],[337,20,323,24],[337,21,323,25,"reset"],[337,26,323,30],[337,27,323,31],[337,28,323,32],[338,8,324,12],[338,12,324,16],[338,13,324,17,"emitReserved"],[338,25,324,29],[338,26,324,30],[338,44,324,48],[338,45,324,49],[339,8,325,12],[339,12,325,16],[339,13,325,17,"_reconnecting"],[339,26,325,30],[339,29,325,33],[339,34,325,38],[340,6,326,8],[340,7,326,9],[340,13,327,13],[341,8,328,12],[341,14,328,18,"delay"],[341,19,328,23],[341,22,328,26],[341,26,328,30],[341,27,328,31,"backoff"],[341,34,328,38],[341,35,328,39,"duration"],[341,43,328,47],[341,44,328,48],[341,45,328,49],[342,8,329,12],[342,12,329,16],[342,13,329,17,"_reconnecting"],[342,26,329,30],[342,29,329,33],[342,33,329,37],[343,8,330,12],[343,14,330,18,"timer"],[343,19,330,23],[343,22,330,26],[343,26,330,30],[343,27,330,31,"setTimeoutFn"],[343,39,330,43],[343,40,330,44],[343,46,330,50],[344,10,331,16],[344,14,331,20,"self"],[344,18,331,24],[344,19,331,25,"skipReconnect"],[344,32,331,38],[344,34,332,20],[345,10,333,16],[345,14,333,20],[345,15,333,21,"emitReserved"],[345,27,333,33],[345,28,333,34],[345,47,333,53],[345,49,333,55,"self"],[345,53,333,59],[345,54,333,60,"backoff"],[345,61,333,67],[345,62,333,68,"attempts"],[345,70,333,76],[345,71,333,77],[346,10,334,16],[347,10,335,16],[347,14,335,20,"self"],[347,18,335,24],[347,19,335,25,"skipReconnect"],[347,32,335,38],[347,34,336,20],[348,10,337,16,"self"],[348,14,337,20],[348,15,337,21,"open"],[348,19,337,25],[348,20,337,27,"err"],[348,23,337,30],[348,27,337,35],[349,12,338,20],[349,16,338,24,"err"],[349,19,338,27],[349,21,338,29],[350,14,339,24,"self"],[350,18,339,28],[350,19,339,29,"_reconnecting"],[350,32,339,42],[350,35,339,45],[350,40,339,50],[351,14,340,24,"self"],[351,18,340,28],[351,19,340,29,"reconnect"],[351,28,340,38],[351,29,340,39],[351,30,340,40],[352,14,341,24],[352,18,341,28],[352,19,341,29,"emitReserved"],[352,31,341,41],[352,32,341,42],[352,49,341,59],[352,51,341,61,"err"],[352,54,341,64],[352,55,341,65],[353,12,342,20],[353,13,342,21],[353,19,343,25],[354,14,344,24,"self"],[354,18,344,28],[354,19,344,29,"onreconnect"],[354,30,344,40],[354,31,344,41],[354,32,344,42],[355,12,345,20],[356,10,346,16],[356,11,346,17],[356,12,346,18],[357,8,347,12],[357,9,347,13],[357,11,347,15,"delay"],[357,16,347,20],[357,17,347,21],[358,8,348,12],[358,12,348,16],[358,16,348,20],[358,17,348,21,"opts"],[358,21,348,25],[358,22,348,26,"autoUnref"],[358,31,348,35],[358,33,348,37],[359,10,349,16,"timer"],[359,15,349,21],[359,16,349,22,"unref"],[359,21,349,27],[359,22,349,28],[359,23,349,29],[360,8,350,12],[361,8,351,12],[361,12,351,16],[361,13,351,17,"subs"],[361,17,351,21],[361,18,351,22,"push"],[361,22,351,26],[361,23,351,27],[361,29,351,33],[362,10,352,16],[362,14,352,20],[362,15,352,21,"clearTimeoutFn"],[362,29,352,35],[362,30,352,36,"timer"],[362,35,352,41],[362,36,352,42],[363,8,353,12],[363,9,353,13],[363,10,353,14],[364,6,354,8],[365,4,355,4],[366,4,356,4],[367,0,357,0],[368,0,358,0],[369,0,359,0],[370,0,360,0],[371,4,361,4,"onreconnect"],[371,15,361,15,"onreconnect"],[371,16,361,15],[371,18,361,18],[372,6,362,8],[372,12,362,14,"attempt"],[372,19,362,21],[372,22,362,24],[372,26,362,28],[372,27,362,29,"backoff"],[372,34,362,36],[372,35,362,37,"attempts"],[372,43,362,45],[373,6,363,8],[373,10,363,12],[373,11,363,13,"_reconnecting"],[373,24,363,26],[373,27,363,29],[373,32,363,34],[374,6,364,8],[374,10,364,12],[374,11,364,13,"backoff"],[374,18,364,20],[374,19,364,21,"reset"],[374,24,364,26],[374,25,364,27],[374,26,364,28],[375,6,365,8],[375,10,365,12],[375,11,365,13,"emitReserved"],[375,23,365,25],[375,24,365,26],[375,35,365,37],[375,37,365,39,"attempt"],[375,44,365,46],[375,45,365,47],[376,4,366,4],[377,2,367,0],[378,0,367,1],[378,3]],"functionMap":{"names":["<global>","Manager","Manager#constructor","Manager#reconnection","Manager#reconnectionAttempts","Manager#reconnectionDelay","Manager#randomizationFactor","Manager#reconnectionDelayMax","Manager#timeout","Manager#maybeReconnectOnOpen","Manager#open","on$argument_2","onError","setTimeoutFn$argument_0","subs.push$argument_0","Manager#connect","Manager#onopen","Manager#onping","Manager#ondata","Manager#ondecoded","nextTick$argument_0","Manager#onerror","Manager#socket","Manager#_destroy","Manager#_packet","Manager#cleanup","subs.forEach$argument_0","Manager#_close","Manager#disconnect","Manager#onclose","Manager#reconnect","self.open$argument_0","Manager#onreconnect"],"mappings":"AAA;OCM;ICC;KDgC;IEC;KFQ;IGC;KHK;IIC;KJO;IKC;KLO;IMC;KNO;IOC;KPK;IQO;KRQ;ISQ;kDCS;SDG;wBEC;SFW;4CGM;aHI;2BII;aJE;KTK;IcO;KdE;IeM;KfW;IgBM;KhBE;IiBM;KjBO;IkBM;iBCE;SDE;KlBC;IoBM;KpBE;IqBO;KrBU;IsBO;KtBS;IuBO;KvBK;IwBM;0BCC,4BD;KxBG;I0BM;K1BI;I2BM;K3BE;I4BU;K5BU;I6BM;4CjBY;0BkBO;iBlBS;aiBC;2BhBI;agBE;K7BE;I+BM;K/BK;CDC"},"hasCjsExports":false},"type":"js/module"}]}