{"dependencies":[{"name":"./commons.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":44,"index":44}}],"key":"glGFVKq6JnHqcEVNii1WndfU66Y=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"encodePacket\", {\n    enumerable: true,\n    get: function () {\n      return encodePacket;\n    }\n  });\n  exports.encodePacketToBinary = encodePacketToBinary;\n  var _commonsJs = require(_dependencyMap[0], \"./commons.js\");\n  const encodePacket = ({\n    type,\n    data\n  }, supportsBinary, callback) => {\n    if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n      return callback(supportsBinary ? data : \"b\" + toBuffer(data, true).toString(\"base64\"));\n    }\n    // plain string\n    return callback(_commonsJs.PACKET_TYPES[type] + (data || \"\"));\n  };\n  const toBuffer = (data, forceBufferConversion) => {\n    if (Buffer.isBuffer(data) || data instanceof Uint8Array && !forceBufferConversion) {\n      return data;\n    } else if (data instanceof ArrayBuffer) {\n      return Buffer.from(data);\n    } else {\n      return Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n    }\n  };\n  let TEXT_ENCODER;\n  function encodePacketToBinary(packet, callback) {\n    if (packet.data instanceof ArrayBuffer || ArrayBuffer.isView(packet.data)) {\n      return callback(toBuffer(packet.data, false));\n    }\n    encodePacket(packet, true, encoded => {\n      if (!TEXT_ENCODER) {\n        // lazily created for compatibility with Node.js 10\n        TEXT_ENCODER = new TextEncoder();\n      }\n      callback(TEXT_ENCODER.encode(encoded));\n    });\n  }\n});","lineCount":47,"map":[[7,2,2,0,"Object"],[7,8,2,0],[7,9,2,0,"defineProperty"],[7,23,2,0],[7,24,2,0,"exports"],[7,31,2,0],[8,4,2,0,"enumerable"],[8,14,2,0],[9,4,2,0,"get"],[9,7,2,0],[9,18,2,0,"get"],[9,19,2,0],[10,6,2,0],[10,13,2,0,"encodePacket"],[10,25,2,0],[11,4,2,0],[12,2,2,0],[13,2,22,0,"exports"],[13,9,22,0],[13,10,22,0,"encodePacketToBinary"],[13,30,22,0],[13,33,22,0,"encodePacketToBinary"],[13,53,22,0],[14,2,1,0],[14,6,1,0,"_commonsJs"],[14,16,1,0],[14,19,1,0,"require"],[14,26,1,0],[14,27,1,0,"_dependencyMap"],[14,41,1,0],[15,2,2,7],[15,8,2,13,"encodePacket"],[15,20,2,25],[15,23,2,28,"encodePacket"],[15,24,2,29],[16,4,2,31,"type"],[16,8,2,35],[17,4,2,37,"data"],[18,2,2,42],[18,3,2,43],[18,5,2,45,"supportsBinary"],[18,19,2,59],[18,21,2,61,"callback"],[18,29,2,69],[18,34,2,74],[19,4,3,4],[19,8,3,8,"data"],[19,12,3,12],[19,24,3,24,"ArrayBuffer"],[19,35,3,35],[19,39,3,39,"ArrayBuffer"],[19,50,3,50],[19,51,3,51,"isView"],[19,57,3,57],[19,58,3,58,"data"],[19,62,3,62],[19,63,3,63],[19,65,3,65],[20,6,4,8],[20,13,4,15,"callback"],[20,21,4,23],[20,22,4,24,"supportsBinary"],[20,36,4,38],[20,39,4,41,"data"],[20,43,4,45],[20,46,4,48],[20,49,4,51],[20,52,4,54,"toBuffer"],[20,60,4,62],[20,61,4,63,"data"],[20,65,4,67],[20,67,4,69],[20,71,4,73],[20,72,4,74],[20,73,4,75,"toString"],[20,81,4,83],[20,82,4,84],[20,90,4,92],[20,91,4,93],[20,92,4,94],[21,4,5,4],[22,4,6,4],[23,4,7,4],[23,11,7,11,"callback"],[23,19,7,19],[23,20,7,20,"PACKET_TYPES"],[23,30,7,32],[23,31,7,32,"PACKET_TYPES"],[23,43,7,32],[23,44,7,33,"type"],[23,48,7,37],[23,49,7,38],[23,53,7,42,"data"],[23,57,7,46],[23,61,7,50],[23,63,7,52],[23,64,7,53],[23,65,7,54],[24,2,8,0],[24,3,8,1],[25,2,9,0],[25,8,9,6,"toBuffer"],[25,16,9,14],[25,19,9,17,"toBuffer"],[25,20,9,18,"data"],[25,24,9,22],[25,26,9,24,"forceBufferConversion"],[25,47,9,45],[25,52,9,50],[26,4,10,4],[26,8,10,8,"Buffer"],[26,14,10,14],[26,15,10,15,"isBuffer"],[26,23,10,23],[26,24,10,24,"data"],[26,28,10,28],[26,29,10,29],[26,33,11,9,"data"],[26,37,11,13],[26,49,11,25,"Uint8Array"],[26,59,11,35],[26,63,11,39],[26,64,11,40,"forceBufferConversion"],[26,85,11,62],[26,87,11,64],[27,6,12,8],[27,13,12,15,"data"],[27,17,12,19],[28,4,13,4],[28,5,13,5],[28,11,14,9],[28,15,14,13,"data"],[28,19,14,17],[28,31,14,29,"ArrayBuffer"],[28,42,14,40],[28,44,14,42],[29,6,15,8],[29,13,15,15,"Buffer"],[29,19,15,21],[29,20,15,22,"from"],[29,24,15,26],[29,25,15,27,"data"],[29,29,15,31],[29,30,15,32],[30,4,16,4],[30,5,16,5],[30,11,17,9],[31,6,18,8],[31,13,18,15,"Buffer"],[31,19,18,21],[31,20,18,22,"from"],[31,24,18,26],[31,25,18,27,"data"],[31,29,18,31],[31,30,18,32,"buffer"],[31,36,18,38],[31,38,18,40,"data"],[31,42,18,44],[31,43,18,45,"byteOffset"],[31,53,18,55],[31,55,18,57,"data"],[31,59,18,61],[31,60,18,62,"byteLength"],[31,70,18,72],[31,71,18,73],[32,4,19,4],[33,2,20,0],[33,3,20,1],[34,2,21,0],[34,6,21,4,"TEXT_ENCODER"],[34,18,21,16],[35,2,22,7],[35,11,22,16,"encodePacketToBinary"],[35,31,22,36,"encodePacketToBinary"],[35,32,22,37,"packet"],[35,38,22,43],[35,40,22,45,"callback"],[35,48,22,53],[35,50,22,55],[36,4,23,4],[36,8,23,8,"packet"],[36,14,23,14],[36,15,23,15,"data"],[36,19,23,19],[36,31,23,31,"ArrayBuffer"],[36,42,23,42],[36,46,23,46,"ArrayBuffer"],[36,57,23,57],[36,58,23,58,"isView"],[36,64,23,64],[36,65,23,65,"packet"],[36,71,23,71],[36,72,23,72,"data"],[36,76,23,76],[36,77,23,77],[36,79,23,79],[37,6,24,8],[37,13,24,15,"callback"],[37,21,24,23],[37,22,24,24,"toBuffer"],[37,30,24,32],[37,31,24,33,"packet"],[37,37,24,39],[37,38,24,40,"data"],[37,42,24,44],[37,44,24,46],[37,49,24,51],[37,50,24,52],[37,51,24,53],[38,4,25,4],[39,4,26,4,"encodePacket"],[39,16,26,16],[39,17,26,17,"packet"],[39,23,26,23],[39,25,26,25],[39,29,26,29],[39,31,26,32,"encoded"],[39,38,26,39],[39,42,26,44],[40,6,27,8],[40,10,27,12],[40,11,27,13,"TEXT_ENCODER"],[40,23,27,25],[40,25,27,27],[41,8,28,12],[42,8,29,12,"TEXT_ENCODER"],[42,20,29,24],[42,23,29,27],[42,27,29,31,"TextEncoder"],[42,38,29,42],[42,39,29,43],[42,40,29,44],[43,6,30,8],[44,6,31,8,"callback"],[44,14,31,16],[44,15,31,17,"TEXT_ENCODER"],[44,27,31,29],[44,28,31,30,"encode"],[44,34,31,36],[44,35,31,37,"encoded"],[44,42,31,44],[44,43,31,45],[44,44,31,46],[45,4,32,4],[45,5,32,5],[45,6,32,6],[46,2,33,0],[47,0,33,1],[47,3]],"functionMap":{"names":["<global>","encodePacket","toBuffer","encodePacketToBinary","encodePacket$argument_2"],"mappings":"AAA;4BCC;CDM;iBEC;CFW;OGE;+BCI;KDM;CHC"},"hasCjsExports":false},"type":"js/module"}]}