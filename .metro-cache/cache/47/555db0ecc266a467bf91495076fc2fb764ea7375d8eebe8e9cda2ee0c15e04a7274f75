{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/callSuper","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"378KbBHdmndC3iMXZ2Ix8oB3LeE=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"y0uNg4LxF1CLscQChxzgo5dfjvA=","exportNames":["*"],"imports":1}},{"name":"engine.io-client","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":86,"index":86}}],"key":"47uBFHNKf+pJCWjWFCflLVQYGvc=","exportNames":["*"],"imports":1}},{"name":"./socket.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":87},"end":{"line":2,"column":37,"index":124}}],"key":"eFXiJ3xGWi9z9IR2MpLa1oE6lVc=","exportNames":["*"],"imports":1}},{"name":"socket.io-parser","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":125},"end":{"line":3,"column":43,"index":168}}],"key":"cQaAU0lT2O9qXW5QPLAeCm8S6Aw=","exportNames":["*"],"imports":1}},{"name":"./on.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":169},"end":{"line":4,"column":29,"index":198}}],"key":"XRT79/HgjpzwYcEtMdKPNGwAAJA=","exportNames":["*"],"imports":1}},{"name":"./contrib/backo2.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":199},"end":{"line":5,"column":46,"index":245}}],"key":"+xoCajj5ZHxeBmv1nKLJe2m7TC8=","exportNames":["*"],"imports":1}},{"name":"@socket.io/component-emitter","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":246},"end":{"line":6,"column":56,"index":302}}],"key":"nWmouVdWEVSQD2UwM6teY1JyKBM=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  Object.defineProperty(exports, \"Manager\", {\n    enumerable: true,\n    get: function () {\n      return Manager;\n    }\n  });\n  var _babelRuntimeHelpersClassCallCheck = require(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _classCallCheck = _interopDefault(_babelRuntimeHelpersClassCallCheck);\n  var _babelRuntimeHelpersCreateClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  var _createClass = _interopDefault(_babelRuntimeHelpersCreateClass);\n  var _babelRuntimeHelpersCallSuper = require(_dependencyMap[2], \"@babel/runtime/helpers/callSuper\");\n  var _callSuper = _interopDefault(_babelRuntimeHelpersCallSuper);\n  var _babelRuntimeHelpersInherits = require(_dependencyMap[3], \"@babel/runtime/helpers/inherits\");\n  var _inherits = _interopDefault(_babelRuntimeHelpersInherits);\n  var _engineIoClient = require(_dependencyMap[4], \"engine.io-client\");\n  var _socketJs = require(_dependencyMap[5], \"./socket.js\");\n  var _socketIoParser = require(_dependencyMap[6], \"socket.io-parser\");\n  var parser = _interopNamespace(_socketIoParser);\n  var _onJs = require(_dependencyMap[7], \"./on.js\");\n  var _contribBacko2Js = require(_dependencyMap[8], \"./contrib/backo2.js\");\n  var _socketIoComponentEmitter = require(_dependencyMap[9], \"@socket.io/component-emitter\");\n  var Manager = /*#__PURE__*/function (_Emitter) {\n    function Manager(uri, opts) {\n      var _this;\n      (0, _classCallCheck.default)(this, Manager);\n      var _a;\n      _this = (0, _callSuper.default)(this, Manager);\n      _this.nsps = {};\n      _this.subs = [];\n      if (uri && \"object\" === typeof uri) {\n        opts = uri;\n        uri = undefined;\n      }\n      opts = opts || {};\n      opts.path = opts.path || \"/socket.io\";\n      _this.opts = opts;\n      (0, _engineIoClient.installTimerFunctions)(_this, opts);\n      _this.reconnection(opts.reconnection !== false);\n      _this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n      _this.reconnectionDelay(opts.reconnectionDelay || 1000);\n      _this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n      _this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n      _this.backoff = new _contribBacko2Js.Backoff({\n        min: _this.reconnectionDelay(),\n        max: _this.reconnectionDelayMax(),\n        jitter: _this.randomizationFactor()\n      });\n      _this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n      _this._readyState = \"closed\";\n      _this.uri = uri;\n      var _parser = opts.parser || parser;\n      _this.encoder = new _parser.Encoder();\n      _this.decoder = new _parser.Decoder();\n      _this._autoConnect = opts.autoConnect !== false;\n      if (_this._autoConnect) _this.open();\n      return _this;\n    }\n    (0, _inherits.default)(Manager, _Emitter);\n    return (0, _createClass.default)(Manager, [{\n      key: \"reconnection\",\n      value: function reconnection(v) {\n        if (!arguments.length) return this._reconnection;\n        this._reconnection = !!v;\n        if (!v) {\n          this.skipReconnect = true;\n        }\n        return this;\n      }\n    }, {\n      key: \"reconnectionAttempts\",\n      value: function reconnectionAttempts(v) {\n        if (v === undefined) return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n      }\n    }, {\n      key: \"reconnectionDelay\",\n      value: function reconnectionDelay(v) {\n        var _a;\n        if (v === undefined) return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n        return this;\n      }\n    }, {\n      key: \"randomizationFactor\",\n      value: function randomizationFactor(v) {\n        var _a;\n        if (v === undefined) return this._randomizationFactor;\n        this._randomizationFactor = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n        return this;\n      }\n    }, {\n      key: \"reconnectionDelayMax\",\n      value: function reconnectionDelayMax(v) {\n        var _a;\n        if (v === undefined) return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n        return this;\n      }\n    }, {\n      key: \"timeout\",\n      value: function timeout(v) {\n        if (!arguments.length) return this._timeout;\n        this._timeout = v;\n        return this;\n      }\n      /**\n       * Starts trying to reconnect if reconnection is enabled and we have not\n       * started reconnecting yet\n       *\n       * @private\n       */\n    }, {\n      key: \"maybeReconnectOnOpen\",\n      value: function maybeReconnectOnOpen() {\n        // Only try to reconnect if it's the first time we're connecting\n        if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {\n          // keeps reconnection from firing twice for the same reconnection loop\n          this.reconnect();\n        }\n      }\n      /**\n       * Sets the current transport `socket`.\n       *\n       * @param {Function} fn - optional, callback\n       * @return self\n       * @public\n       */\n    }, {\n      key: \"open\",\n      value: function open(fn) {\n        if (~this._readyState.indexOf(\"open\")) return this;\n        this.engine = new _engineIoClient.Socket(this.uri, this.opts);\n        var socket = this.engine;\n        var self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false;\n        // emit `open`\n        var openSubDestroy = (0, _onJs.on)(socket, \"open\", function () {\n          self.onopen();\n          fn && fn();\n        });\n        var onError = err => {\n          this.cleanup();\n          this._readyState = \"closed\";\n          this.emitReserved(\"error\", err);\n          if (fn) {\n            fn(err);\n          } else {\n            // Only do this if there is no fn to handle the error\n            this.maybeReconnectOnOpen();\n          }\n        };\n        // emit `error`\n        var errorSub = (0, _onJs.on)(socket, \"error\", onError);\n        if (false !== this._timeout) {\n          var timeout = this._timeout;\n          // set timer\n          var timer = this.setTimeoutFn(() => {\n            openSubDestroy();\n            onError(new Error(\"timeout\"));\n            socket.close();\n          }, timeout);\n          if (this.opts.autoUnref) {\n            timer.unref();\n          }\n          this.subs.push(() => {\n            this.clearTimeoutFn(timer);\n          });\n        }\n        this.subs.push(openSubDestroy);\n        this.subs.push(errorSub);\n        return this;\n      }\n      /**\n       * Alias for open()\n       *\n       * @return self\n       * @public\n       */\n    }, {\n      key: \"connect\",\n      value: function connect(fn) {\n        return this.open(fn);\n      }\n      /**\n       * Called upon transport open.\n       *\n       * @private\n       */\n    }, {\n      key: \"onopen\",\n      value: function onopen() {\n        // clear old subs\n        this.cleanup();\n        // mark as open\n        this._readyState = \"open\";\n        this.emitReserved(\"open\");\n        // add new subs\n        var socket = this.engine;\n        this.subs.push((0, _onJs.on)(socket, \"ping\", this.onping.bind(this)), (0, _onJs.on)(socket, \"data\", this.ondata.bind(this)), (0, _onJs.on)(socket, \"error\", this.onerror.bind(this)), (0, _onJs.on)(socket, \"close\", this.onclose.bind(this)),\n        // @ts-ignore\n        (0, _onJs.on)(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n      }\n      /**\n       * Called upon a ping.\n       *\n       * @private\n       */\n    }, {\n      key: \"onping\",\n      value: function onping() {\n        this.emitReserved(\"ping\");\n      }\n      /**\n       * Called with data.\n       *\n       * @private\n       */\n    }, {\n      key: \"ondata\",\n      value: function ondata(data) {\n        try {\n          this.decoder.add(data);\n        } catch (e) {\n          this.onclose(\"parse error\", e);\n        }\n      }\n      /**\n       * Called when parser fully decodes a packet.\n       *\n       * @private\n       */\n    }, {\n      key: \"ondecoded\",\n      value: function ondecoded(packet) {\n        // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\n        (0, _engineIoClient.nextTick)(() => {\n          this.emitReserved(\"packet\", packet);\n        }, this.setTimeoutFn);\n      }\n      /**\n       * Called upon socket error.\n       *\n       * @private\n       */\n    }, {\n      key: \"onerror\",\n      value: function onerror(err) {\n        this.emitReserved(\"error\", err);\n      }\n      /**\n       * Creates a new socket for the given `nsp`.\n       *\n       * @return {Socket}\n       * @public\n       */\n    }, {\n      key: \"socket\",\n      value: function socket(nsp, opts) {\n        var socket = this.nsps[nsp];\n        if (!socket) {\n          socket = new _socketJs.Socket(this, nsp, opts);\n          this.nsps[nsp] = socket;\n        } else if (this._autoConnect && !socket.active) {\n          socket.connect();\n        }\n        return socket;\n      }\n      /**\n       * Called upon a socket close.\n       *\n       * @param socket\n       * @private\n       */\n    }, {\n      key: \"_destroy\",\n      value: function _destroy(socket) {\n        var nsps = Object.keys(this.nsps);\n        for (var nsp of nsps) {\n          var _socket = this.nsps[nsp];\n          if (_socket.active) {\n            return;\n          }\n        }\n        this._close();\n      }\n      /**\n       * Writes a packet.\n       *\n       * @param packet\n       * @private\n       */\n    }, {\n      key: \"_packet\",\n      value: function _packet(packet) {\n        var encodedPackets = this.encoder.encode(packet);\n        for (var i = 0; i < encodedPackets.length; i++) {\n          this.engine.write(encodedPackets[i], packet.options);\n        }\n      }\n      /**\n       * Clean up transport subscriptions and packet buffer.\n       *\n       * @private\n       */\n    }, {\n      key: \"cleanup\",\n      value: function cleanup() {\n        this.subs.forEach(subDestroy => subDestroy());\n        this.subs.length = 0;\n        this.decoder.destroy();\n      }\n      /**\n       * Close the current socket.\n       *\n       * @private\n       */\n    }, {\n      key: \"_close\",\n      value: function _close() {\n        this.skipReconnect = true;\n        this._reconnecting = false;\n        this.onclose(\"forced close\");\n      }\n      /**\n       * Alias for close()\n       *\n       * @private\n       */\n    }, {\n      key: \"disconnect\",\n      value: function disconnect() {\n        return this._close();\n      }\n      /**\n       * Called when:\n       *\n       * - the low-level engine is closed\n       * - the parser encountered a badly formatted packet\n       * - all sockets are disconnected\n       *\n       * @private\n       */\n    }, {\n      key: \"onclose\",\n      value: function onclose(reason, description) {\n        var _a;\n        this.cleanup();\n        (_a = this.engine) === null || _a === void 0 ? void 0 : _a.close();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        this.emitReserved(\"close\", reason, description);\n        if (this._reconnection && !this.skipReconnect) {\n          this.reconnect();\n        }\n      }\n      /**\n       * Attempt a reconnection.\n       *\n       * @private\n       */\n    }, {\n      key: \"reconnect\",\n      value: function reconnect() {\n        if (this._reconnecting || this.skipReconnect) return this;\n        var self = this;\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n          this.backoff.reset();\n          this.emitReserved(\"reconnect_failed\");\n          this._reconnecting = false;\n        } else {\n          var delay = this.backoff.duration();\n          this._reconnecting = true;\n          var timer = this.setTimeoutFn(() => {\n            if (self.skipReconnect) return;\n            this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n            // check again for the case socket closed in above events\n            if (self.skipReconnect) return;\n            self.open(err => {\n              if (err) {\n                self._reconnecting = false;\n                self.reconnect();\n                this.emitReserved(\"reconnect_error\", err);\n              } else {\n                self.onreconnect();\n              }\n            });\n          }, delay);\n          if (this.opts.autoUnref) {\n            timer.unref();\n          }\n          this.subs.push(() => {\n            this.clearTimeoutFn(timer);\n          });\n        }\n      }\n      /**\n       * Called upon successful reconnect.\n       *\n       * @private\n       */\n    }, {\n      key: \"onreconnect\",\n      value: function onreconnect() {\n        var attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n        this.emitReserved(\"reconnect\", attempt);\n      }\n    }]);\n  }(_socketIoComponentEmitter.Emitter);\n});","lineCount":442,"map":[[27,2,7,0,"Object"],[27,8,7,0],[27,9,7,0,"defineProperty"],[27,23,7,0],[27,24,7,0,"exports"],[27,31,7,0],[28,4,7,0,"enumerable"],[28,14,7,0],[29,4,7,0,"get"],[29,7,7,0],[29,18,7,0,"get"],[29,19,7,0],[30,6,7,0],[30,13,7,0,"Manager"],[30,20,7,0],[31,4,7,0],[32,2,7,0],[33,2,367,1],[33,6,367,1,"_babelRuntimeHelpersClassCallCheck"],[33,40,367,1],[33,43,367,1,"require"],[33,50,367,1],[33,51,367,1,"_dependencyMap"],[33,65,367,1],[34,2,367,1],[34,6,367,1,"_classCallCheck"],[34,21,367,1],[34,24,367,1,"_interopDefault"],[34,39,367,1],[34,40,367,1,"_babelRuntimeHelpersClassCallCheck"],[34,74,367,1],[35,2,367,1],[35,6,367,1,"_babelRuntimeHelpersCreateClass"],[35,37,367,1],[35,40,367,1,"require"],[35,47,367,1],[35,48,367,1,"_dependencyMap"],[35,62,367,1],[36,2,367,1],[36,6,367,1,"_createClass"],[36,18,367,1],[36,21,367,1,"_interopDefault"],[36,36,367,1],[36,37,367,1,"_babelRuntimeHelpersCreateClass"],[36,68,367,1],[37,2,367,1],[37,6,367,1,"_babelRuntimeHelpersCallSuper"],[37,35,367,1],[37,38,367,1,"require"],[37,45,367,1],[37,46,367,1,"_dependencyMap"],[37,60,367,1],[38,2,367,1],[38,6,367,1,"_callSuper"],[38,16,367,1],[38,19,367,1,"_interopDefault"],[38,34,367,1],[38,35,367,1,"_babelRuntimeHelpersCallSuper"],[38,64,367,1],[39,2,367,1],[39,6,367,1,"_babelRuntimeHelpersInherits"],[39,34,367,1],[39,37,367,1,"require"],[39,44,367,1],[39,45,367,1,"_dependencyMap"],[39,59,367,1],[40,2,367,1],[40,6,367,1,"_inherits"],[40,15,367,1],[40,18,367,1,"_interopDefault"],[40,33,367,1],[40,34,367,1,"_babelRuntimeHelpersInherits"],[40,62,367,1],[41,2,1,0],[41,6,1,0,"_engineIoClient"],[41,21,1,0],[41,24,1,0,"require"],[41,31,1,0],[41,32,1,0,"_dependencyMap"],[41,46,1,0],[42,2,2,0],[42,6,2,0,"_socketJs"],[42,15,2,0],[42,18,2,0,"require"],[42,25,2,0],[42,26,2,0,"_dependencyMap"],[42,40,2,0],[43,2,3,0],[43,6,3,0,"_socketIoParser"],[43,21,3,0],[43,24,3,0,"require"],[43,31,3,0],[43,32,3,0,"_dependencyMap"],[43,46,3,0],[44,2,3,0],[44,6,3,0,"parser"],[44,12,3,0],[44,15,3,0,"_interopNamespace"],[44,32,3,0],[44,33,3,0,"_socketIoParser"],[44,48,3,0],[45,2,4,0],[45,6,4,0,"_onJs"],[45,11,4,0],[45,14,4,0,"require"],[45,21,4,0],[45,22,4,0,"_dependencyMap"],[45,36,4,0],[46,2,5,0],[46,6,5,0,"_contribBacko2Js"],[46,22,5,0],[46,25,5,0,"require"],[46,32,5,0],[46,33,5,0,"_dependencyMap"],[46,47,5,0],[47,2,6,0],[47,6,6,0,"_socketIoComponentEmitter"],[47,31,6,0],[47,34,6,0,"require"],[47,41,6,0],[47,42,6,0,"_dependencyMap"],[47,56,6,0],[48,2,6,56],[48,6,7,13,"Manager"],[48,13,7,20],[48,39,7,20,"_Emitter"],[48,47,7,20],[49,4,8,4],[49,13,8,4,"Manager"],[49,21,8,16,"uri"],[49,24,8,19],[49,26,8,21,"opts"],[49,30,8,25],[49,32,8,27],[50,6,8,27],[50,10,8,27,"_this"],[50,15,8,27],[51,6,8,27],[51,10,8,27,"_classCallCheck"],[51,25,8,27],[51,26,8,27,"default"],[51,33,8,27],[51,41,8,27,"Manager"],[51,48,8,27],[52,6,9,8],[52,10,9,12,"_a"],[52,12,9,14],[53,6,10,8,"_this"],[53,11,10,8],[53,18,10,8,"_callSuper"],[53,28,10,8],[53,29,10,8,"default"],[53,36,10,8],[53,44,10,8,"Manager"],[53,51,10,8],[54,6,11,8,"_this"],[54,11,11,8],[54,12,11,13,"nsps"],[54,16,11,17],[54,19,11,20],[54,20,11,21],[54,21,11,22],[55,6,12,8,"_this"],[55,11,12,8],[55,12,12,13,"subs"],[55,16,12,17],[55,19,12,20],[55,21,12,22],[56,6,13,8],[56,10,13,12,"uri"],[56,13,13,15],[56,17,13,19],[56,25,13,27],[56,30,13,32],[56,37,13,39,"uri"],[56,40,13,42],[56,42,13,44],[57,8,14,12,"opts"],[57,12,14,16],[57,15,14,19,"uri"],[57,18,14,22],[58,8,15,12,"uri"],[58,11,15,15],[58,14,15,18,"undefined"],[58,23,15,27],[59,6,16,8],[60,6,17,8,"opts"],[60,10,17,12],[60,13,17,15,"opts"],[60,17,17,19],[60,21,17,23],[60,22,17,24],[60,23,17,25],[61,6,18,8,"opts"],[61,10,18,12],[61,11,18,13,"path"],[61,15,18,17],[61,18,18,20,"opts"],[61,22,18,24],[61,23,18,25,"path"],[61,27,18,29],[61,31,18,33],[61,43,18,45],[62,6,19,8,"_this"],[62,11,19,8],[62,12,19,13,"opts"],[62,16,19,17],[62,19,19,20,"opts"],[62,23,19,24],[63,6,20,8],[63,10,20,8,"installTimerFunctions"],[63,25,20,29],[63,26,20,29,"installTimerFunctions"],[63,47,20,29],[63,49,20,29,"_this"],[63,54,20,29],[63,56,20,36,"opts"],[63,60,20,40],[63,61,20,41],[64,6,21,8,"_this"],[64,11,21,8],[64,12,21,13,"reconnection"],[64,24,21,25],[64,25,21,26,"opts"],[64,29,21,30],[64,30,21,31,"reconnection"],[64,42,21,43],[64,47,21,48],[64,52,21,53],[64,53,21,54],[65,6,22,8,"_this"],[65,11,22,8],[65,12,22,13,"reconnectionAttempts"],[65,32,22,33],[65,33,22,34,"opts"],[65,37,22,38],[65,38,22,39,"reconnectionAttempts"],[65,58,22,59],[65,62,22,63,"Infinity"],[65,70,22,71],[65,71,22,72],[66,6,23,8,"_this"],[66,11,23,8],[66,12,23,13,"reconnectionDelay"],[66,29,23,30],[66,30,23,31,"opts"],[66,34,23,35],[66,35,23,36,"reconnectionDelay"],[66,52,23,53],[66,56,23,57],[66,60,23,61],[66,61,23,62],[67,6,24,8,"_this"],[67,11,24,8],[67,12,24,13,"reconnectionDelayMax"],[67,32,24,33],[67,33,24,34,"opts"],[67,37,24,38],[67,38,24,39,"reconnectionDelayMax"],[67,58,24,59],[67,62,24,63],[67,66,24,67],[67,67,24,68],[68,6,25,8,"_this"],[68,11,25,8],[68,12,25,13,"randomizationFactor"],[68,31,25,32],[68,32,25,33],[68,33,25,34,"_a"],[68,35,25,36],[68,38,25,39,"opts"],[68,42,25,43],[68,43,25,44,"randomizationFactor"],[68,62,25,63],[68,68,25,69],[68,72,25,73],[68,76,25,77,"_a"],[68,78,25,79],[68,83,25,84],[68,88,25,89],[68,89,25,90],[68,92,25,93,"_a"],[68,94,25,95],[68,97,25,98],[68,100,25,101],[68,101,25,102],[69,6,26,8,"_this"],[69,11,26,8],[69,12,26,13,"backoff"],[69,19,26,20],[69,22,26,23],[69,26,26,27,"Backoff"],[69,42,26,34],[69,43,26,34,"Backoff"],[69,50,26,34],[69,51,26,35],[70,8,27,12,"min"],[70,11,27,15],[70,13,27,17,"_this"],[70,18,27,17],[70,19,27,22,"reconnectionDelay"],[70,36,27,39],[70,37,27,40],[70,38,27,41],[71,8,28,12,"max"],[71,11,28,15],[71,13,28,17,"_this"],[71,18,28,17],[71,19,28,22,"reconnectionDelayMax"],[71,39,28,42],[71,40,28,43],[71,41,28,44],[72,8,29,12,"jitter"],[72,14,29,18],[72,16,29,20,"_this"],[72,21,29,20],[72,22,29,25,"randomizationFactor"],[72,41,29,44],[72,42,29,45],[73,6,30,8],[73,7,30,9],[73,8,30,10],[74,6,31,8,"_this"],[74,11,31,8],[74,12,31,13,"timeout"],[74,19,31,20],[74,20,31,21],[74,24,31,25],[74,28,31,29,"opts"],[74,32,31,33],[74,33,31,34,"timeout"],[74,40,31,41],[74,43,31,44],[74,48,31,49],[74,51,31,52,"opts"],[74,55,31,56],[74,56,31,57,"timeout"],[74,63,31,64],[74,64,31,65],[75,6,32,8,"_this"],[75,11,32,8],[75,12,32,13,"_readyState"],[75,23,32,24],[75,26,32,27],[75,34,32,35],[76,6,33,8,"_this"],[76,11,33,8],[76,12,33,13,"uri"],[76,15,33,16],[76,18,33,19,"uri"],[76,21,33,22],[77,6,34,8],[77,10,34,14,"_parser"],[77,17,34,21],[77,20,34,24,"opts"],[77,24,34,28],[77,25,34,29,"parser"],[77,31,34,35],[77,35,34,39,"parser"],[77,41,34,45],[78,6,35,8,"_this"],[78,11,35,8],[78,12,35,13,"encoder"],[78,19,35,20],[78,22,35,23],[78,26,35,27,"_parser"],[78,33,35,34],[78,34,35,35,"Encoder"],[78,41,35,42],[78,42,35,43],[78,43,35,44],[79,6,36,8,"_this"],[79,11,36,8],[79,12,36,13,"decoder"],[79,19,36,20],[79,22,36,23],[79,26,36,27,"_parser"],[79,33,36,34],[79,34,36,35,"Decoder"],[79,41,36,42],[79,42,36,43],[79,43,36,44],[80,6,37,8,"_this"],[80,11,37,8],[80,12,37,13,"_autoConnect"],[80,24,37,25],[80,27,37,28,"opts"],[80,31,37,32],[80,32,37,33,"autoConnect"],[80,43,37,44],[80,48,37,49],[80,53,37,54],[81,6,38,8],[81,10,38,12,"_this"],[81,15,38,12],[81,16,38,17,"_autoConnect"],[81,28,38,29],[81,30,39,12,"_this"],[81,35,39,12],[81,36,39,17,"open"],[81,40,39,21],[81,41,39,22],[81,42,39,23],[82,6,39,24],[82,13,39,24,"_this"],[82,18,39,24],[83,4,40,4],[84,4,40,5],[84,8,40,5,"_inherits"],[84,17,40,5],[84,18,40,5,"default"],[84,25,40,5],[84,27,40,5,"Manager"],[84,34,40,5],[84,36,40,5,"_Emitter"],[84,44,40,5],[85,4,40,5],[85,15,40,5,"_createClass"],[85,27,40,5],[85,28,40,5,"default"],[85,35,40,5],[85,37,40,5,"Manager"],[85,44,40,5],[86,6,40,5,"key"],[86,9,40,5],[87,6,40,5,"value"],[87,11,40,5],[87,13,41,4],[87,22,41,4,"reconnection"],[87,34,41,16,"reconnection"],[87,35,41,17,"v"],[87,36,41,18],[87,38,41,20],[88,8,42,8],[88,12,42,12],[88,13,42,13,"arguments"],[88,22,42,22],[88,23,42,23,"length"],[88,29,42,29],[88,31,43,12],[88,38,43,19],[88,42,43,23],[88,43,43,24,"_reconnection"],[88,56,43,37],[89,8,44,8],[89,12,44,12],[89,13,44,13,"_reconnection"],[89,26,44,26],[89,29,44,29],[89,30,44,30],[89,31,44,31,"v"],[89,32,44,32],[90,8,45,8],[90,12,45,12],[90,13,45,13,"v"],[90,14,45,14],[90,16,45,16],[91,10,46,12],[91,14,46,16],[91,15,46,17,"skipReconnect"],[91,28,46,30],[91,31,46,33],[91,35,46,37],[92,8,47,8],[93,8,48,8],[93,15,48,15],[93,19,48,19],[94,6,49,4],[95,4,49,5],[96,6,49,5,"key"],[96,9,49,5],[97,6,49,5,"value"],[97,11,49,5],[97,13,50,4],[97,22,50,4,"reconnectionAttempts"],[97,42,50,24,"reconnectionAttempts"],[97,43,50,25,"v"],[97,44,50,26],[97,46,50,28],[98,8,51,8],[98,12,51,12,"v"],[98,13,51,13],[98,18,51,18,"undefined"],[98,27,51,27],[98,29,52,12],[98,36,52,19],[98,40,52,23],[98,41,52,24,"_reconnectionAttempts"],[98,62,52,45],[99,8,53,8],[99,12,53,12],[99,13,53,13,"_reconnectionAttempts"],[99,34,53,34],[99,37,53,37,"v"],[99,38,53,38],[100,8,54,8],[100,15,54,15],[100,19,54,19],[101,6,55,4],[102,4,55,5],[103,6,55,5,"key"],[103,9,55,5],[104,6,55,5,"value"],[104,11,55,5],[104,13,56,4],[104,22,56,4,"reconnectionDelay"],[104,39,56,21,"reconnectionDelay"],[104,40,56,22,"v"],[104,41,56,23],[104,43,56,25],[105,8,57,8],[105,12,57,12,"_a"],[105,14,57,14],[106,8,58,8],[106,12,58,12,"v"],[106,13,58,13],[106,18,58,18,"undefined"],[106,27,58,27],[106,29,59,12],[106,36,59,19],[106,40,59,23],[106,41,59,24,"_reconnectionDelay"],[106,59,59,42],[107,8,60,8],[107,12,60,12],[107,13,60,13,"_reconnectionDelay"],[107,31,60,31],[107,34,60,34,"v"],[107,35,60,35],[108,8,61,8],[108,9,61,9,"_a"],[108,11,61,11],[108,14,61,14],[108,18,61,18],[108,19,61,19,"backoff"],[108,26,61,26],[108,32,61,32],[108,36,61,36],[108,40,61,40,"_a"],[108,42,61,42],[108,47,61,47],[108,52,61,52],[108,53,61,53],[108,56,61,56],[108,61,61,61],[108,62,61,62],[108,65,61,65,"_a"],[108,67,61,67],[108,68,61,68,"setMin"],[108,74,61,74],[108,75,61,75,"v"],[108,76,61,76],[108,77,61,77],[109,8,62,8],[109,15,62,15],[109,19,62,19],[110,6,63,4],[111,4,63,5],[112,6,63,5,"key"],[112,9,63,5],[113,6,63,5,"value"],[113,11,63,5],[113,13,64,4],[113,22,64,4,"randomizationFactor"],[113,41,64,23,"randomizationFactor"],[113,42,64,24,"v"],[113,43,64,25],[113,45,64,27],[114,8,65,8],[114,12,65,12,"_a"],[114,14,65,14],[115,8,66,8],[115,12,66,12,"v"],[115,13,66,13],[115,18,66,18,"undefined"],[115,27,66,27],[115,29,67,12],[115,36,67,19],[115,40,67,23],[115,41,67,24,"_randomizationFactor"],[115,61,67,44],[116,8,68,8],[116,12,68,12],[116,13,68,13,"_randomizationFactor"],[116,33,68,33],[116,36,68,36,"v"],[116,37,68,37],[117,8,69,8],[117,9,69,9,"_a"],[117,11,69,11],[117,14,69,14],[117,18,69,18],[117,19,69,19,"backoff"],[117,26,69,26],[117,32,69,32],[117,36,69,36],[117,40,69,40,"_a"],[117,42,69,42],[117,47,69,47],[117,52,69,52],[117,53,69,53],[117,56,69,56],[117,61,69,61],[117,62,69,62],[117,65,69,65,"_a"],[117,67,69,67],[117,68,69,68,"setJitter"],[117,77,69,77],[117,78,69,78,"v"],[117,79,69,79],[117,80,69,80],[118,8,70,8],[118,15,70,15],[118,19,70,19],[119,6,71,4],[120,4,71,5],[121,6,71,5,"key"],[121,9,71,5],[122,6,71,5,"value"],[122,11,71,5],[122,13,72,4],[122,22,72,4,"reconnectionDelayMax"],[122,42,72,24,"reconnectionDelayMax"],[122,43,72,25,"v"],[122,44,72,26],[122,46,72,28],[123,8,73,8],[123,12,73,12,"_a"],[123,14,73,14],[124,8,74,8],[124,12,74,12,"v"],[124,13,74,13],[124,18,74,18,"undefined"],[124,27,74,27],[124,29,75,12],[124,36,75,19],[124,40,75,23],[124,41,75,24,"_reconnectionDelayMax"],[124,62,75,45],[125,8,76,8],[125,12,76,12],[125,13,76,13,"_reconnectionDelayMax"],[125,34,76,34],[125,37,76,37,"v"],[125,38,76,38],[126,8,77,8],[126,9,77,9,"_a"],[126,11,77,11],[126,14,77,14],[126,18,77,18],[126,19,77,19,"backoff"],[126,26,77,26],[126,32,77,32],[126,36,77,36],[126,40,77,40,"_a"],[126,42,77,42],[126,47,77,47],[126,52,77,52],[126,53,77,53],[126,56,77,56],[126,61,77,61],[126,62,77,62],[126,65,77,65,"_a"],[126,67,77,67],[126,68,77,68,"setMax"],[126,74,77,74],[126,75,77,75,"v"],[126,76,77,76],[126,77,77,77],[127,8,78,8],[127,15,78,15],[127,19,78,19],[128,6,79,4],[129,4,79,5],[130,6,79,5,"key"],[130,9,79,5],[131,6,79,5,"value"],[131,11,79,5],[131,13,80,4],[131,22,80,4,"timeout"],[131,29,80,11,"timeout"],[131,30,80,12,"v"],[131,31,80,13],[131,33,80,15],[132,8,81,8],[132,12,81,12],[132,13,81,13,"arguments"],[132,22,81,22],[132,23,81,23,"length"],[132,29,81,29],[132,31,82,12],[132,38,82,19],[132,42,82,23],[132,43,82,24,"_timeout"],[132,51,82,32],[133,8,83,8],[133,12,83,12],[133,13,83,13,"_timeout"],[133,21,83,21],[133,24,83,24,"v"],[133,25,83,25],[134,8,84,8],[134,15,84,15],[134,19,84,19],[135,6,85,4],[136,6,86,4],[137,0,87,0],[138,0,88,0],[139,0,89,0],[140,0,90,0],[141,0,91,0],[142,4,86,4],[143,6,86,4,"key"],[143,9,86,4],[144,6,86,4,"value"],[144,11,86,4],[144,13,92,4],[144,22,92,4,"maybeReconnectOnOpen"],[144,42,92,24,"maybeReconnectOnOpen"],[144,43,92,24],[144,45,92,27],[145,8,93,8],[146,8,94,8],[146,12,94,12],[146,13,94,13],[146,17,94,17],[146,18,94,18,"_reconnecting"],[146,31,94,31],[146,35,95,12],[146,39,95,16],[146,40,95,17,"_reconnection"],[146,53,95,30],[146,57,96,12],[146,61,96,16],[146,62,96,17,"backoff"],[146,69,96,24],[146,70,96,25,"attempts"],[146,78,96,33],[146,83,96,38],[146,84,96,39],[146,86,96,41],[147,10,97,12],[148,10,98,12],[148,14,98,16],[148,15,98,17,"reconnect"],[148,24,98,26],[148,25,98,27],[148,26,98,28],[149,8,99,8],[150,6,100,4],[151,6,101,4],[152,0,102,0],[153,0,103,0],[154,0,104,0],[155,0,105,0],[156,0,106,0],[157,0,107,0],[158,4,101,4],[159,6,101,4,"key"],[159,9,101,4],[160,6,101,4,"value"],[160,11,101,4],[160,13,108,4],[160,22,108,4,"open"],[160,26,108,8,"open"],[160,27,108,9,"fn"],[160,29,108,11],[160,31,108,13],[161,8,109,8],[161,12,109,12],[161,13,109,13],[161,17,109,17],[161,18,109,18,"_readyState"],[161,29,109,29],[161,30,109,30,"indexOf"],[161,37,109,37],[161,38,109,38],[161,44,109,44],[161,45,109,45],[161,47,110,12],[161,54,110,19],[161,58,110,23],[162,8,111,8],[162,12,111,12],[162,13,111,13,"engine"],[162,19,111,19],[162,22,111,22],[162,26,111,26,"Engine"],[162,41,111,32],[162,42,111,32,"Socket"],[162,48,111,32],[162,49,111,33],[162,53,111,37],[162,54,111,38,"uri"],[162,57,111,41],[162,59,111,43],[162,63,111,47],[162,64,111,48,"opts"],[162,68,111,52],[162,69,111,53],[163,8,112,8],[163,12,112,14,"socket"],[163,18,112,20],[163,21,112,23],[163,25,112,27],[163,26,112,28,"engine"],[163,32,112,34],[164,8,113,8],[164,12,113,14,"self"],[164,16,113,18],[164,19,113,21],[164,23,113,25],[165,8,114,8],[165,12,114,12],[165,13,114,13,"_readyState"],[165,24,114,24],[165,27,114,27],[165,36,114,36],[166,8,115,8],[166,12,115,12],[166,13,115,13,"skipReconnect"],[166,26,115,26],[166,29,115,29],[166,34,115,34],[167,8,116,8],[168,8,117,8],[168,12,117,14,"openSubDestroy"],[168,26,117,28],[168,29,117,31],[168,33,117,31,"on"],[168,38,117,33],[168,39,117,33,"on"],[168,41,117,33],[168,43,117,34,"socket"],[168,49,117,40],[168,51,117,42],[168,57,117,48],[168,59,117,50],[168,71,117,62],[169,10,118,12,"self"],[169,14,118,16],[169,15,118,17,"onopen"],[169,21,118,23],[169,22,118,24],[169,23,118,25],[170,10,119,12,"fn"],[170,12,119,14],[170,16,119,18,"fn"],[170,18,119,20],[170,19,119,21],[170,20,119,22],[171,8,120,8],[171,9,120,9],[171,10,120,10],[172,8,121,8],[172,12,121,14,"onError"],[172,19,121,21],[172,22,121,25,"err"],[172,25,121,28],[172,29,121,33],[173,10,122,12],[173,14,122,16],[173,15,122,17,"cleanup"],[173,22,122,24],[173,23,122,25],[173,24,122,26],[174,10,123,12],[174,14,123,16],[174,15,123,17,"_readyState"],[174,26,123,28],[174,29,123,31],[174,37,123,39],[175,10,124,12],[175,14,124,16],[175,15,124,17,"emitReserved"],[175,27,124,29],[175,28,124,30],[175,35,124,37],[175,37,124,39,"err"],[175,40,124,42],[175,41,124,43],[176,10,125,12],[176,14,125,16,"fn"],[176,16,125,18],[176,18,125,20],[177,12,126,16,"fn"],[177,14,126,18],[177,15,126,19,"err"],[177,18,126,22],[177,19,126,23],[178,10,127,12],[178,11,127,13],[178,17,128,17],[179,12,129,16],[180,12,130,16],[180,16,130,20],[180,17,130,21,"maybeReconnectOnOpen"],[180,37,130,41],[180,38,130,42],[180,39,130,43],[181,10,131,12],[182,8,132,8],[182,9,132,9],[183,8,133,8],[184,8,134,8],[184,12,134,14,"errorSub"],[184,20,134,22],[184,23,134,25],[184,27,134,25,"on"],[184,32,134,27],[184,33,134,27,"on"],[184,35,134,27],[184,37,134,28,"socket"],[184,43,134,34],[184,45,134,36],[184,52,134,43],[184,54,134,45,"onError"],[184,61,134,52],[184,62,134,53],[185,8,135,8],[185,12,135,12],[185,17,135,17],[185,22,135,22],[185,26,135,26],[185,27,135,27,"_timeout"],[185,35,135,35],[185,37,135,37],[186,10,136,12],[186,14,136,18,"timeout"],[186,21,136,25],[186,24,136,28],[186,28,136,32],[186,29,136,33,"_timeout"],[186,37,136,41],[187,10,137,12],[188,10,138,12],[188,14,138,18,"timer"],[188,19,138,23],[188,22,138,26],[188,26,138,30],[188,27,138,31,"setTimeoutFn"],[188,39,138,43],[188,40,138,44],[188,46,138,50],[189,12,139,16,"openSubDestroy"],[189,26,139,30],[189,27,139,31],[189,28,139,32],[190,12,140,16,"onError"],[190,19,140,23],[190,20,140,24],[190,24,140,28,"Error"],[190,29,140,33],[190,30,140,34],[190,39,140,43],[190,40,140,44],[190,41,140,45],[191,12,141,16,"socket"],[191,18,141,22],[191,19,141,23,"close"],[191,24,141,28],[191,25,141,29],[191,26,141,30],[192,10,142,12],[192,11,142,13],[192,13,142,15,"timeout"],[192,20,142,22],[192,21,142,23],[193,10,143,12],[193,14,143,16],[193,18,143,20],[193,19,143,21,"opts"],[193,23,143,25],[193,24,143,26,"autoUnref"],[193,33,143,35],[193,35,143,37],[194,12,144,16,"timer"],[194,17,144,21],[194,18,144,22,"unref"],[194,23,144,27],[194,24,144,28],[194,25,144,29],[195,10,145,12],[196,10,146,12],[196,14,146,16],[196,15,146,17,"subs"],[196,19,146,21],[196,20,146,22,"push"],[196,24,146,26],[196,25,146,27],[196,31,146,33],[197,12,147,16],[197,16,147,20],[197,17,147,21,"clearTimeoutFn"],[197,31,147,35],[197,32,147,36,"timer"],[197,37,147,41],[197,38,147,42],[198,10,148,12],[198,11,148,13],[198,12,148,14],[199,8,149,8],[200,8,150,8],[200,12,150,12],[200,13,150,13,"subs"],[200,17,150,17],[200,18,150,18,"push"],[200,22,150,22],[200,23,150,23,"openSubDestroy"],[200,37,150,37],[200,38,150,38],[201,8,151,8],[201,12,151,12],[201,13,151,13,"subs"],[201,17,151,17],[201,18,151,18,"push"],[201,22,151,22],[201,23,151,23,"errorSub"],[201,31,151,31],[201,32,151,32],[202,8,152,8],[202,15,152,15],[202,19,152,19],[203,6,153,4],[204,6,154,4],[205,0,155,0],[206,0,156,0],[207,0,157,0],[208,0,158,0],[209,0,159,0],[210,4,154,4],[211,6,154,4,"key"],[211,9,154,4],[212,6,154,4,"value"],[212,11,154,4],[212,13,160,4],[212,22,160,4,"connect"],[212,29,160,11,"connect"],[212,30,160,12,"fn"],[212,32,160,14],[212,34,160,16],[213,8,161,8],[213,15,161,15],[213,19,161,19],[213,20,161,20,"open"],[213,24,161,24],[213,25,161,25,"fn"],[213,27,161,27],[213,28,161,28],[214,6,162,4],[215,6,163,4],[216,0,164,0],[217,0,165,0],[218,0,166,0],[219,0,167,0],[220,4,163,4],[221,6,163,4,"key"],[221,9,163,4],[222,6,163,4,"value"],[222,11,163,4],[222,13,168,4],[222,22,168,4,"onopen"],[222,28,168,10,"onopen"],[222,29,168,10],[222,31,168,13],[223,8,169,8],[224,8,170,8],[224,12,170,12],[224,13,170,13,"cleanup"],[224,20,170,20],[224,21,170,21],[224,22,170,22],[225,8,171,8],[226,8,172,8],[226,12,172,12],[226,13,172,13,"_readyState"],[226,24,172,24],[226,27,172,27],[226,33,172,33],[227,8,173,8],[227,12,173,12],[227,13,173,13,"emitReserved"],[227,25,173,25],[227,26,173,26],[227,32,173,32],[227,33,173,33],[228,8,174,8],[229,8,175,8],[229,12,175,14,"socket"],[229,18,175,20],[229,21,175,23],[229,25,175,27],[229,26,175,28,"engine"],[229,32,175,34],[230,8,176,8],[230,12,176,12],[230,13,176,13,"subs"],[230,17,176,17],[230,18,176,18,"push"],[230,22,176,22],[230,23,176,23],[230,27,176,23,"on"],[230,32,176,25],[230,33,176,25,"on"],[230,35,176,25],[230,37,176,26,"socket"],[230,43,176,32],[230,45,176,34],[230,51,176,40],[230,53,176,42],[230,57,176,46],[230,58,176,47,"onping"],[230,64,176,53],[230,65,176,54,"bind"],[230,69,176,58],[230,70,176,59],[230,74,176,63],[230,75,176,64],[230,76,176,65],[230,78,176,67],[230,82,176,67,"on"],[230,87,176,69],[230,88,176,69,"on"],[230,90,176,69],[230,92,176,70,"socket"],[230,98,176,76],[230,100,176,78],[230,106,176,84],[230,108,176,86],[230,112,176,90],[230,113,176,91,"ondata"],[230,119,176,97],[230,120,176,98,"bind"],[230,124,176,102],[230,125,176,103],[230,129,176,107],[230,130,176,108],[230,131,176,109],[230,133,176,111],[230,137,176,111,"on"],[230,142,176,113],[230,143,176,113,"on"],[230,145,176,113],[230,147,176,114,"socket"],[230,153,176,120],[230,155,176,122],[230,162,176,129],[230,164,176,131],[230,168,176,135],[230,169,176,136,"onerror"],[230,176,176,143],[230,177,176,144,"bind"],[230,181,176,148],[230,182,176,149],[230,186,176,153],[230,187,176,154],[230,188,176,155],[230,190,176,157],[230,194,176,157,"on"],[230,199,176,159],[230,200,176,159,"on"],[230,202,176,159],[230,204,176,160,"socket"],[230,210,176,166],[230,212,176,168],[230,219,176,175],[230,221,176,177],[230,225,176,181],[230,226,176,182,"onclose"],[230,233,176,189],[230,234,176,190,"bind"],[230,238,176,194],[230,239,176,195],[230,243,176,199],[230,244,176,200],[230,245,176,201],[231,8,177,8],[232,8,178,8],[232,12,178,8,"on"],[232,17,178,10],[232,18,178,10,"on"],[232,20,178,10],[232,22,178,11],[232,26,178,15],[232,27,178,16,"decoder"],[232,34,178,23],[232,36,178,25],[232,45,178,34],[232,47,178,36],[232,51,178,40],[232,52,178,41,"ondecoded"],[232,61,178,50],[232,62,178,51,"bind"],[232,66,178,55],[232,67,178,56],[232,71,178,60],[232,72,178,61],[232,73,178,62],[232,74,178,63],[233,6,179,4],[234,6,180,4],[235,0,181,0],[236,0,182,0],[237,0,183,0],[238,0,184,0],[239,4,180,4],[240,6,180,4,"key"],[240,9,180,4],[241,6,180,4,"value"],[241,11,180,4],[241,13,185,4],[241,22,185,4,"onping"],[241,28,185,10,"onping"],[241,29,185,10],[241,31,185,13],[242,8,186,8],[242,12,186,12],[242,13,186,13,"emitReserved"],[242,25,186,25],[242,26,186,26],[242,32,186,32],[242,33,186,33],[243,6,187,4],[244,6,188,4],[245,0,189,0],[246,0,190,0],[247,0,191,0],[248,0,192,0],[249,4,188,4],[250,6,188,4,"key"],[250,9,188,4],[251,6,188,4,"value"],[251,11,188,4],[251,13,193,4],[251,22,193,4,"ondata"],[251,28,193,10,"ondata"],[251,29,193,11,"data"],[251,33,193,15],[251,35,193,17],[252,8,194,8],[252,12,194,12],[253,10,195,12],[253,14,195,16],[253,15,195,17,"decoder"],[253,22,195,24],[253,23,195,25,"add"],[253,26,195,28],[253,27,195,29,"data"],[253,31,195,33],[253,32,195,34],[254,8,196,8],[254,9,196,9],[254,10,197,8],[254,17,197,15,"e"],[254,18,197,16],[254,20,197,18],[255,10,198,12],[255,14,198,16],[255,15,198,17,"onclose"],[255,22,198,24],[255,23,198,25],[255,36,198,38],[255,38,198,40,"e"],[255,39,198,41],[255,40,198,42],[256,8,199,8],[257,6,200,4],[258,6,201,4],[259,0,202,0],[260,0,203,0],[261,0,204,0],[262,0,205,0],[263,4,201,4],[264,6,201,4,"key"],[264,9,201,4],[265,6,201,4,"value"],[265,11,201,4],[265,13,206,4],[265,22,206,4,"ondecoded"],[265,31,206,13,"ondecoded"],[265,32,206,14,"packet"],[265,38,206,20],[265,40,206,22],[266,8,207,8],[267,8,208,8],[267,12,208,8,"nextTick"],[267,27,208,16],[267,28,208,16,"nextTick"],[267,36,208,16],[267,38,208,17],[267,44,208,23],[268,10,209,12],[268,14,209,16],[268,15,209,17,"emitReserved"],[268,27,209,29],[268,28,209,30],[268,36,209,38],[268,38,209,40,"packet"],[268,44,209,46],[268,45,209,47],[269,8,210,8],[269,9,210,9],[269,11,210,11],[269,15,210,15],[269,16,210,16,"setTimeoutFn"],[269,28,210,28],[269,29,210,29],[270,6,211,4],[271,6,212,4],[272,0,213,0],[273,0,214,0],[274,0,215,0],[275,0,216,0],[276,4,212,4],[277,6,212,4,"key"],[277,9,212,4],[278,6,212,4,"value"],[278,11,212,4],[278,13,217,4],[278,22,217,4,"onerror"],[278,29,217,11,"onerror"],[278,30,217,12,"err"],[278,33,217,15],[278,35,217,17],[279,8,218,8],[279,12,218,12],[279,13,218,13,"emitReserved"],[279,25,218,25],[279,26,218,26],[279,33,218,33],[279,35,218,35,"err"],[279,38,218,38],[279,39,218,39],[280,6,219,4],[281,6,220,4],[282,0,221,0],[283,0,222,0],[284,0,223,0],[285,0,224,0],[286,0,225,0],[287,4,220,4],[288,6,220,4,"key"],[288,9,220,4],[289,6,220,4,"value"],[289,11,220,4],[289,13,226,4],[289,22,226,4,"socket"],[289,28,226,10,"socket"],[289,29,226,11,"nsp"],[289,32,226,14],[289,34,226,16,"opts"],[289,38,226,20],[289,40,226,22],[290,8,227,8],[290,12,227,12,"socket"],[290,18,227,18],[290,21,227,21],[290,25,227,25],[290,26,227,26,"nsps"],[290,30,227,30],[290,31,227,31,"nsp"],[290,34,227,34],[290,35,227,35],[291,8,228,8],[291,12,228,12],[291,13,228,13,"socket"],[291,19,228,19],[291,21,228,21],[292,10,229,12,"socket"],[292,16,229,18],[292,19,229,21],[292,23,229,25,"Socket"],[292,32,229,31],[292,33,229,31,"Socket"],[292,39,229,31],[292,40,229,32],[292,44,229,36],[292,46,229,38,"nsp"],[292,49,229,41],[292,51,229,43,"opts"],[292,55,229,47],[292,56,229,48],[293,10,230,12],[293,14,230,16],[293,15,230,17,"nsps"],[293,19,230,21],[293,20,230,22,"nsp"],[293,23,230,25],[293,24,230,26],[293,27,230,29,"socket"],[293,33,230,35],[294,8,231,8],[294,9,231,9],[294,15,232,13],[294,19,232,17],[294,23,232,21],[294,24,232,22,"_autoConnect"],[294,36,232,34],[294,40,232,38],[294,41,232,39,"socket"],[294,47,232,45],[294,48,232,46,"active"],[294,54,232,52],[294,56,232,54],[295,10,233,12,"socket"],[295,16,233,18],[295,17,233,19,"connect"],[295,24,233,26],[295,25,233,27],[295,26,233,28],[296,8,234,8],[297,8,235,8],[297,15,235,15,"socket"],[297,21,235,21],[298,6,236,4],[299,6,237,4],[300,0,238,0],[301,0,239,0],[302,0,240,0],[303,0,241,0],[304,0,242,0],[305,4,237,4],[306,6,237,4,"key"],[306,9,237,4],[307,6,237,4,"value"],[307,11,237,4],[307,13,243,4],[307,22,243,4,"_destroy"],[307,30,243,12,"_destroy"],[307,31,243,13,"socket"],[307,37,243,19],[307,39,243,21],[308,8,244,8],[308,12,244,14,"nsps"],[308,16,244,18],[308,19,244,21,"Object"],[308,25,244,27],[308,26,244,28,"keys"],[308,30,244,32],[308,31,244,33],[308,35,244,37],[308,36,244,38,"nsps"],[308,40,244,42],[308,41,244,43],[309,8,245,8],[309,13,245,13],[309,17,245,19,"nsp"],[309,20,245,22],[309,24,245,26,"nsps"],[309,28,245,30],[309,30,245,32],[310,10,246,12],[310,14,246,18,"socket"],[310,21,246,24],[310,24,246,27],[310,28,246,31],[310,29,246,32,"nsps"],[310,33,246,36],[310,34,246,37,"nsp"],[310,37,246,40],[310,38,246,41],[311,10,247,12],[311,14,247,16,"socket"],[311,21,247,22],[311,22,247,23,"active"],[311,28,247,29],[311,30,247,31],[312,12,248,16],[313,10,249,12],[314,8,250,8],[315,8,251,8],[315,12,251,12],[315,13,251,13,"_close"],[315,19,251,19],[315,20,251,20],[315,21,251,21],[316,6,252,4],[317,6,253,4],[318,0,254,0],[319,0,255,0],[320,0,256,0],[321,0,257,0],[322,0,258,0],[323,4,253,4],[324,6,253,4,"key"],[324,9,253,4],[325,6,253,4,"value"],[325,11,253,4],[325,13,259,4],[325,22,259,4,"_packet"],[325,29,259,11,"_packet"],[325,30,259,12,"packet"],[325,36,259,18],[325,38,259,20],[326,8,260,8],[326,12,260,14,"encodedPackets"],[326,26,260,28],[326,29,260,31],[326,33,260,35],[326,34,260,36,"encoder"],[326,41,260,43],[326,42,260,44,"encode"],[326,48,260,50],[326,49,260,51,"packet"],[326,55,260,57],[326,56,260,58],[327,8,261,8],[327,13,261,13],[327,17,261,17,"i"],[327,18,261,18],[327,21,261,21],[327,22,261,22],[327,24,261,24,"i"],[327,25,261,25],[327,28,261,28,"encodedPackets"],[327,42,261,42],[327,43,261,43,"length"],[327,49,261,49],[327,51,261,51,"i"],[327,52,261,52],[327,54,261,54],[327,56,261,56],[328,10,262,12],[328,14,262,16],[328,15,262,17,"engine"],[328,21,262,23],[328,22,262,24,"write"],[328,27,262,29],[328,28,262,30,"encodedPackets"],[328,42,262,44],[328,43,262,45,"i"],[328,44,262,46],[328,45,262,47],[328,47,262,49,"packet"],[328,53,262,55],[328,54,262,56,"options"],[328,61,262,63],[328,62,262,64],[329,8,263,8],[330,6,264,4],[331,6,265,4],[332,0,266,0],[333,0,267,0],[334,0,268,0],[335,0,269,0],[336,4,265,4],[337,6,265,4,"key"],[337,9,265,4],[338,6,265,4,"value"],[338,11,265,4],[338,13,270,4],[338,22,270,4,"cleanup"],[338,29,270,11,"cleanup"],[338,30,270,11],[338,32,270,14],[339,8,271,8],[339,12,271,12],[339,13,271,13,"subs"],[339,17,271,17],[339,18,271,18,"forEach"],[339,25,271,25],[339,26,271,27,"subDestroy"],[339,36,271,37],[339,40,271,42,"subDestroy"],[339,50,271,52],[339,51,271,53],[339,52,271,54],[339,53,271,55],[340,8,272,8],[340,12,272,12],[340,13,272,13,"subs"],[340,17,272,17],[340,18,272,18,"length"],[340,24,272,24],[340,27,272,27],[340,28,272,28],[341,8,273,8],[341,12,273,12],[341,13,273,13,"decoder"],[341,20,273,20],[341,21,273,21,"destroy"],[341,28,273,28],[341,29,273,29],[341,30,273,30],[342,6,274,4],[343,6,275,4],[344,0,276,0],[345,0,277,0],[346,0,278,0],[347,0,279,0],[348,4,275,4],[349,6,275,4,"key"],[349,9,275,4],[350,6,275,4,"value"],[350,11,275,4],[350,13,280,4],[350,22,280,4,"_close"],[350,28,280,10,"_close"],[350,29,280,10],[350,31,280,13],[351,8,281,8],[351,12,281,12],[351,13,281,13,"skipReconnect"],[351,26,281,26],[351,29,281,29],[351,33,281,33],[352,8,282,8],[352,12,282,12],[352,13,282,13,"_reconnecting"],[352,26,282,26],[352,29,282,29],[352,34,282,34],[353,8,283,8],[353,12,283,12],[353,13,283,13,"onclose"],[353,20,283,20],[353,21,283,21],[353,35,283,35],[353,36,283,36],[354,6,284,4],[355,6,285,4],[356,0,286,0],[357,0,287,0],[358,0,288,0],[359,0,289,0],[360,4,285,4],[361,6,285,4,"key"],[361,9,285,4],[362,6,285,4,"value"],[362,11,285,4],[362,13,290,4],[362,22,290,4,"disconnect"],[362,32,290,14,"disconnect"],[362,33,290,14],[362,35,290,17],[363,8,291,8],[363,15,291,15],[363,19,291,19],[363,20,291,20,"_close"],[363,26,291,26],[363,27,291,27],[363,28,291,28],[364,6,292,4],[365,6,293,4],[366,0,294,0],[367,0,295,0],[368,0,296,0],[369,0,297,0],[370,0,298,0],[371,0,299,0],[372,0,300,0],[373,0,301,0],[374,4,293,4],[375,6,293,4,"key"],[375,9,293,4],[376,6,293,4,"value"],[376,11,293,4],[376,13,302,4],[376,22,302,4,"onclose"],[376,29,302,11,"onclose"],[376,30,302,12,"reason"],[376,36,302,18],[376,38,302,20,"description"],[376,49,302,31],[376,51,302,33],[377,8,303,8],[377,12,303,12,"_a"],[377,14,303,14],[378,8,304,8],[378,12,304,12],[378,13,304,13,"cleanup"],[378,20,304,20],[378,21,304,21],[378,22,304,22],[379,8,305,8],[379,9,305,9,"_a"],[379,11,305,11],[379,14,305,14],[379,18,305,18],[379,19,305,19,"engine"],[379,25,305,25],[379,31,305,31],[379,35,305,35],[379,39,305,39,"_a"],[379,41,305,41],[379,46,305,46],[379,51,305,51],[379,52,305,52],[379,55,305,55],[379,60,305,60],[379,61,305,61],[379,64,305,64,"_a"],[379,66,305,66],[379,67,305,67,"close"],[379,72,305,72],[379,73,305,73],[379,74,305,74],[380,8,306,8],[380,12,306,12],[380,13,306,13,"backoff"],[380,20,306,20],[380,21,306,21,"reset"],[380,26,306,26],[380,27,306,27],[380,28,306,28],[381,8,307,8],[381,12,307,12],[381,13,307,13,"_readyState"],[381,24,307,24],[381,27,307,27],[381,35,307,35],[382,8,308,8],[382,12,308,12],[382,13,308,13,"emitReserved"],[382,25,308,25],[382,26,308,26],[382,33,308,33],[382,35,308,35,"reason"],[382,41,308,41],[382,43,308,43,"description"],[382,54,308,54],[382,55,308,55],[383,8,309,8],[383,12,309,12],[383,16,309,16],[383,17,309,17,"_reconnection"],[383,30,309,30],[383,34,309,34],[383,35,309,35],[383,39,309,39],[383,40,309,40,"skipReconnect"],[383,53,309,53],[383,55,309,55],[384,10,310,12],[384,14,310,16],[384,15,310,17,"reconnect"],[384,24,310,26],[384,25,310,27],[384,26,310,28],[385,8,311,8],[386,6,312,4],[387,6,313,4],[388,0,314,0],[389,0,315,0],[390,0,316,0],[391,0,317,0],[392,4,313,4],[393,6,313,4,"key"],[393,9,313,4],[394,6,313,4,"value"],[394,11,313,4],[394,13,318,4],[394,22,318,4,"reconnect"],[394,31,318,13,"reconnect"],[394,32,318,13],[394,34,318,16],[395,8,319,8],[395,12,319,12],[395,16,319,16],[395,17,319,17,"_reconnecting"],[395,30,319,30],[395,34,319,34],[395,38,319,38],[395,39,319,39,"skipReconnect"],[395,52,319,52],[395,54,320,12],[395,61,320,19],[395,65,320,23],[396,8,321,8],[396,12,321,14,"self"],[396,16,321,18],[396,19,321,21],[396,23,321,25],[397,8,322,8],[397,12,322,12],[397,16,322,16],[397,17,322,17,"backoff"],[397,24,322,24],[397,25,322,25,"attempts"],[397,33,322,33],[397,37,322,37],[397,41,322,41],[397,42,322,42,"_reconnectionAttempts"],[397,63,322,63],[397,65,322,65],[398,10,323,12],[398,14,323,16],[398,15,323,17,"backoff"],[398,22,323,24],[398,23,323,25,"reset"],[398,28,323,30],[398,29,323,31],[398,30,323,32],[399,10,324,12],[399,14,324,16],[399,15,324,17,"emitReserved"],[399,27,324,29],[399,28,324,30],[399,46,324,48],[399,47,324,49],[400,10,325,12],[400,14,325,16],[400,15,325,17,"_reconnecting"],[400,28,325,30],[400,31,325,33],[400,36,325,38],[401,8,326,8],[401,9,326,9],[401,15,327,13],[402,10,328,12],[402,14,328,18,"delay"],[402,19,328,23],[402,22,328,26],[402,26,328,30],[402,27,328,31,"backoff"],[402,34,328,38],[402,35,328,39,"duration"],[402,43,328,47],[402,44,328,48],[402,45,328,49],[403,10,329,12],[403,14,329,16],[403,15,329,17,"_reconnecting"],[403,28,329,30],[403,31,329,33],[403,35,329,37],[404,10,330,12],[404,14,330,18,"timer"],[404,19,330,23],[404,22,330,26],[404,26,330,30],[404,27,330,31,"setTimeoutFn"],[404,39,330,43],[404,40,330,44],[404,46,330,50],[405,12,331,16],[405,16,331,20,"self"],[405,20,331,24],[405,21,331,25,"skipReconnect"],[405,34,331,38],[405,36,332,20],[406,12,333,16],[406,16,333,20],[406,17,333,21,"emitReserved"],[406,29,333,33],[406,30,333,34],[406,49,333,53],[406,51,333,55,"self"],[406,55,333,59],[406,56,333,60,"backoff"],[406,63,333,67],[406,64,333,68,"attempts"],[406,72,333,76],[406,73,333,77],[407,12,334,16],[408,12,335,16],[408,16,335,20,"self"],[408,20,335,24],[408,21,335,25,"skipReconnect"],[408,34,335,38],[408,36,336,20],[409,12,337,16,"self"],[409,16,337,20],[409,17,337,21,"open"],[409,21,337,25],[409,22,337,27,"err"],[409,25,337,30],[409,29,337,35],[410,14,338,20],[410,18,338,24,"err"],[410,21,338,27],[410,23,338,29],[411,16,339,24,"self"],[411,20,339,28],[411,21,339,29,"_reconnecting"],[411,34,339,42],[411,37,339,45],[411,42,339,50],[412,16,340,24,"self"],[412,20,340,28],[412,21,340,29,"reconnect"],[412,30,340,38],[412,31,340,39],[412,32,340,40],[413,16,341,24],[413,20,341,28],[413,21,341,29,"emitReserved"],[413,33,341,41],[413,34,341,42],[413,51,341,59],[413,53,341,61,"err"],[413,56,341,64],[413,57,341,65],[414,14,342,20],[414,15,342,21],[414,21,343,25],[415,16,344,24,"self"],[415,20,344,28],[415,21,344,29,"onreconnect"],[415,32,344,40],[415,33,344,41],[415,34,344,42],[416,14,345,20],[417,12,346,16],[417,13,346,17],[417,14,346,18],[418,10,347,12],[418,11,347,13],[418,13,347,15,"delay"],[418,18,347,20],[418,19,347,21],[419,10,348,12],[419,14,348,16],[419,18,348,20],[419,19,348,21,"opts"],[419,23,348,25],[419,24,348,26,"autoUnref"],[419,33,348,35],[419,35,348,37],[420,12,349,16,"timer"],[420,17,349,21],[420,18,349,22,"unref"],[420,23,349,27],[420,24,349,28],[420,25,349,29],[421,10,350,12],[422,10,351,12],[422,14,351,16],[422,15,351,17,"subs"],[422,19,351,21],[422,20,351,22,"push"],[422,24,351,26],[422,25,351,27],[422,31,351,33],[423,12,352,16],[423,16,352,20],[423,17,352,21,"clearTimeoutFn"],[423,31,352,35],[423,32,352,36,"timer"],[423,37,352,41],[423,38,352,42],[424,10,353,12],[424,11,353,13],[424,12,353,14],[425,8,354,8],[426,6,355,4],[427,6,356,4],[428,0,357,0],[429,0,358,0],[430,0,359,0],[431,0,360,0],[432,4,356,4],[433,6,356,4,"key"],[433,9,356,4],[434,6,356,4,"value"],[434,11,356,4],[434,13,361,4],[434,22,361,4,"onreconnect"],[434,33,361,15,"onreconnect"],[434,34,361,15],[434,36,361,18],[435,8,362,8],[435,12,362,14,"attempt"],[435,19,362,21],[435,22,362,24],[435,26,362,28],[435,27,362,29,"backoff"],[435,34,362,36],[435,35,362,37,"attempts"],[435,43,362,45],[436,8,363,8],[436,12,363,12],[436,13,363,13,"_reconnecting"],[436,26,363,26],[436,29,363,29],[436,34,363,34],[437,8,364,8],[437,12,364,12],[437,13,364,13,"backoff"],[437,20,364,20],[437,21,364,21,"reset"],[437,26,364,26],[437,27,364,27],[437,28,364,28],[438,8,365,8],[438,12,365,12],[438,13,365,13,"emitReserved"],[438,25,365,25],[438,26,365,26],[438,37,365,37],[438,39,365,39,"attempt"],[438,46,365,46],[438,47,365,47],[439,6,366,4],[440,4,366,5],[441,2,366,5],[441,4,7,29,"Emitter"],[441,29,7,36],[441,30,7,36,"Emitter"],[441,37,7,36],[442,0,7,36],[442,3]],"functionMap":{"names":["<global>","Manager","Manager#constructor","Manager#reconnection","Manager#reconnectionAttempts","Manager#reconnectionDelay","Manager#randomizationFactor","Manager#reconnectionDelayMax","Manager#timeout","Manager#maybeReconnectOnOpen","Manager#open","on$argument_2","onError","setTimeoutFn$argument_0","subs.push$argument_0","Manager#connect","Manager#onopen","Manager#onping","Manager#ondata","Manager#ondecoded","nextTick$argument_0","Manager#onerror","Manager#socket","Manager#_destroy","Manager#_packet","Manager#cleanup","subs.forEach$argument_0","Manager#_close","Manager#disconnect","Manager#onclose","Manager#reconnect","self.open$argument_0","Manager#onreconnect"],"mappings":"AAA;OCM;ICC;KDgC;IEC;KFQ;IGC;KHK;IIC;KJO;IKC;KLO;IMC;KNO;IOC;KPK;IQO;KRQ;ISQ;kDCS;SDG;wBEC;SFW;4CGM;aHI;2BII;aJE;KTK;IcO;KdE;IeM;KfW;IgBM;KhBE;IiBM;KjBO;IkBM;iBCE;SDE;KlBC;IoBM;KpBE;IqBO;KrBU;IsBO;KtBS;IuBO;KvBK;IwBM;0BCC,4BD;KxBG;I0BM;K1BI;I2BM;K3BE;I4BU;K5BU;I6BM;4CjBY;0BkBO;iBlBS;aiBC;2BhBI;agBE;K7BE;I+BM;K/BK;CDC"},"hasCjsExports":false},"type":"js/module"}]}