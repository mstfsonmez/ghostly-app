{"dependencies":[{"name":"zlib","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":13,"index":28},"end":{"line":3,"column":28,"index":43}}],"key":"7ZGzBJgs2mS8aYt35oOcBHDVVuM=","exportNames":["*"],"imports":1}},{"name":"./buffer-util","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":19,"index":65},"end":{"line":5,"column":43,"index":89}}],"key":"FKD7Yg4fnu7BzoYB+P98shiBLdA=","exportNames":["*"],"imports":1}},{"name":"./limiter","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":16,"index":107},"end":{"line":6,"column":36,"index":127}}],"key":"RbZxFdSOC/3cPrKXj8ftCjQpmbk=","exportNames":["*"],"imports":1}},{"name":"./constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":24,"index":153},"end":{"line":7,"column":46,"index":175}}],"key":"3z43bJyk/UB4EKjDCOXTFak09do=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  const zlib = require(_dependencyMap[0], \"zlib\");\n  const bufferUtil = require(_dependencyMap[1], \"./buffer-util\");\n  const Limiter = require(_dependencyMap[2], \"./limiter\");\n  const {\n    kStatusCode\n  } = require(_dependencyMap[3], \"./constants\");\n  const FastBuffer = Buffer[Symbol.species];\n  const TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);\n  const kPerMessageDeflate = Symbol('permessage-deflate');\n  const kTotalLength = Symbol('total-length');\n  const kCallback = Symbol('callback');\n  const kBuffers = Symbol('buffers');\n  const kError = Symbol('error');\n\n  //\n  // We limit zlib concurrency, which prevents severe memory fragmentation\n  // as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\n  // and https://github.com/websockets/ws/issues/1202\n  //\n  // Intentionally global; it's the global thread pool that's an issue.\n  //\n  let zlibLimiter;\n\n  /**\n   * permessage-deflate implementation.\n   */\n  class PerMessageDeflate {\n    /**\n     * Creates a PerMessageDeflate instance.\n     *\n     * @param {Object} [options] Configuration options\n     * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support\n     *     for, or request, a custom client window size\n     * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/\n     *     acknowledge disabling of client context takeover\n     * @param {Number} [options.concurrencyLimit=10] The number of concurrent\n     *     calls to zlib\n     * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the\n     *     use of a custom server window size\n     * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept\n     *     disabling of server context takeover\n     * @param {Number} [options.threshold=1024] Size (in bytes) below which\n     *     messages should not be compressed if context takeover is disabled\n     * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on\n     *     deflate\n     * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on\n     *     inflate\n     * @param {Boolean} [isServer=false] Create the instance in either server or\n     *     client mode\n     * @param {Number} [maxPayload=0] The maximum allowed message length\n     */\n    constructor(options, isServer, maxPayload) {\n      this._maxPayload = maxPayload | 0;\n      this._options = options || {};\n      this._threshold = this._options.threshold !== undefined ? this._options.threshold : 1024;\n      this._isServer = !!isServer;\n      this._deflate = null;\n      this._inflate = null;\n      this.params = null;\n      if (!zlibLimiter) {\n        const concurrency = this._options.concurrencyLimit !== undefined ? this._options.concurrencyLimit : 10;\n        zlibLimiter = new Limiter(concurrency);\n      }\n    }\n\n    /**\n     * @type {String}\n     */\n    static get extensionName() {\n      return 'permessage-deflate';\n    }\n\n    /**\n     * Create an extension negotiation offer.\n     *\n     * @return {Object} Extension parameters\n     * @public\n     */\n    offer() {\n      const params = {};\n      if (this._options.serverNoContextTakeover) {\n        params.server_no_context_takeover = true;\n      }\n      if (this._options.clientNoContextTakeover) {\n        params.client_no_context_takeover = true;\n      }\n      if (this._options.serverMaxWindowBits) {\n        params.server_max_window_bits = this._options.serverMaxWindowBits;\n      }\n      if (this._options.clientMaxWindowBits) {\n        params.client_max_window_bits = this._options.clientMaxWindowBits;\n      } else if (this._options.clientMaxWindowBits == null) {\n        params.client_max_window_bits = true;\n      }\n      return params;\n    }\n\n    /**\n     * Accept an extension negotiation offer/response.\n     *\n     * @param {Array} configurations The extension negotiation offers/reponse\n     * @return {Object} Accepted configuration\n     * @public\n     */\n    accept(configurations) {\n      configurations = this.normalizeParams(configurations);\n      this.params = this._isServer ? this.acceptAsServer(configurations) : this.acceptAsClient(configurations);\n      return this.params;\n    }\n\n    /**\n     * Releases all resources used by the extension.\n     *\n     * @public\n     */\n    cleanup() {\n      if (this._inflate) {\n        this._inflate.close();\n        this._inflate = null;\n      }\n      if (this._deflate) {\n        const callback = this._deflate[kCallback];\n        this._deflate.close();\n        this._deflate = null;\n        if (callback) {\n          callback(new Error('The deflate stream was closed while data was being processed'));\n        }\n      }\n    }\n\n    /**\n     *  Accept an extension negotiation offer.\n     *\n     * @param {Array} offers The extension negotiation offers\n     * @return {Object} Accepted configuration\n     * @private\n     */\n    acceptAsServer(offers) {\n      const opts = this._options;\n      const accepted = offers.find(params => {\n        if (opts.serverNoContextTakeover === false && params.server_no_context_takeover || params.server_max_window_bits && (opts.serverMaxWindowBits === false || typeof opts.serverMaxWindowBits === 'number' && opts.serverMaxWindowBits > params.server_max_window_bits) || typeof opts.clientMaxWindowBits === 'number' && !params.client_max_window_bits) {\n          return false;\n        }\n        return true;\n      });\n      if (!accepted) {\n        throw new Error('None of the extension offers can be accepted');\n      }\n      if (opts.serverNoContextTakeover) {\n        accepted.server_no_context_takeover = true;\n      }\n      if (opts.clientNoContextTakeover) {\n        accepted.client_no_context_takeover = true;\n      }\n      if (typeof opts.serverMaxWindowBits === 'number') {\n        accepted.server_max_window_bits = opts.serverMaxWindowBits;\n      }\n      if (typeof opts.clientMaxWindowBits === 'number') {\n        accepted.client_max_window_bits = opts.clientMaxWindowBits;\n      } else if (accepted.client_max_window_bits === true || opts.clientMaxWindowBits === false) {\n        delete accepted.client_max_window_bits;\n      }\n      return accepted;\n    }\n\n    /**\n     * Accept the extension negotiation response.\n     *\n     * @param {Array} response The extension negotiation response\n     * @return {Object} Accepted configuration\n     * @private\n     */\n    acceptAsClient(response) {\n      const params = response[0];\n      if (this._options.clientNoContextTakeover === false && params.client_no_context_takeover) {\n        throw new Error('Unexpected parameter \"client_no_context_takeover\"');\n      }\n      if (!params.client_max_window_bits) {\n        if (typeof this._options.clientMaxWindowBits === 'number') {\n          params.client_max_window_bits = this._options.clientMaxWindowBits;\n        }\n      } else if (this._options.clientMaxWindowBits === false || typeof this._options.clientMaxWindowBits === 'number' && params.client_max_window_bits > this._options.clientMaxWindowBits) {\n        throw new Error('Unexpected or invalid parameter \"client_max_window_bits\"');\n      }\n      return params;\n    }\n\n    /**\n     * Normalize parameters.\n     *\n     * @param {Array} configurations The extension negotiation offers/reponse\n     * @return {Array} The offers/response with normalized parameters\n     * @private\n     */\n    normalizeParams(configurations) {\n      configurations.forEach(params => {\n        Object.keys(params).forEach(key => {\n          let value = params[key];\n          if (value.length > 1) {\n            throw new Error(`Parameter \"${key}\" must have only a single value`);\n          }\n          value = value[0];\n          if (key === 'client_max_window_bits') {\n            if (value !== true) {\n              const num = +value;\n              if (!Number.isInteger(num) || num < 8 || num > 15) {\n                throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n              }\n              value = num;\n            } else if (!this._isServer) {\n              throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n            }\n          } else if (key === 'server_max_window_bits') {\n            const num = +value;\n            if (!Number.isInteger(num) || num < 8 || num > 15) {\n              throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n            }\n            value = num;\n          } else if (key === 'client_no_context_takeover' || key === 'server_no_context_takeover') {\n            if (value !== true) {\n              throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n            }\n          } else {\n            throw new Error(`Unknown parameter \"${key}\"`);\n          }\n          params[key] = value;\n        });\n      });\n      return configurations;\n    }\n\n    /**\n     * Decompress data. Concurrency limited.\n     *\n     * @param {Buffer} data Compressed data\n     * @param {Boolean} fin Specifies whether or not this is the last fragment\n     * @param {Function} callback Callback\n     * @public\n     */\n    decompress(data, fin, callback) {\n      zlibLimiter.add(done => {\n        this._decompress(data, fin, (err, result) => {\n          done();\n          callback(err, result);\n        });\n      });\n    }\n\n    /**\n     * Compress data. Concurrency limited.\n     *\n     * @param {(Buffer|String)} data Data to compress\n     * @param {Boolean} fin Specifies whether or not this is the last fragment\n     * @param {Function} callback Callback\n     * @public\n     */\n    compress(data, fin, callback) {\n      zlibLimiter.add(done => {\n        this._compress(data, fin, (err, result) => {\n          done();\n          callback(err, result);\n        });\n      });\n    }\n\n    /**\n     * Decompress data.\n     *\n     * @param {Buffer} data Compressed data\n     * @param {Boolean} fin Specifies whether or not this is the last fragment\n     * @param {Function} callback Callback\n     * @private\n     */\n    _decompress(data, fin, callback) {\n      const endpoint = this._isServer ? 'client' : 'server';\n      if (!this._inflate) {\n        const key = `${endpoint}_max_window_bits`;\n        const windowBits = typeof this.params[key] !== 'number' ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];\n        this._inflate = zlib.createInflateRaw({\n          ...this._options.zlibInflateOptions,\n          windowBits\n        });\n        this._inflate[kPerMessageDeflate] = this;\n        this._inflate[kTotalLength] = 0;\n        this._inflate[kBuffers] = [];\n        this._inflate.on('error', inflateOnError);\n        this._inflate.on('data', inflateOnData);\n      }\n      this._inflate[kCallback] = callback;\n      this._inflate.write(data);\n      if (fin) this._inflate.write(TRAILER);\n      this._inflate.flush(() => {\n        const err = this._inflate[kError];\n        if (err) {\n          this._inflate.close();\n          this._inflate = null;\n          callback(err);\n          return;\n        }\n        const data = bufferUtil.concat(this._inflate[kBuffers], this._inflate[kTotalLength]);\n        if (this._inflate._readableState.endEmitted) {\n          this._inflate.close();\n          this._inflate = null;\n        } else {\n          this._inflate[kTotalLength] = 0;\n          this._inflate[kBuffers] = [];\n          if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n            this._inflate.reset();\n          }\n        }\n        callback(null, data);\n      });\n    }\n\n    /**\n     * Compress data.\n     *\n     * @param {(Buffer|String)} data Data to compress\n     * @param {Boolean} fin Specifies whether or not this is the last fragment\n     * @param {Function} callback Callback\n     * @private\n     */\n    _compress(data, fin, callback) {\n      const endpoint = this._isServer ? 'server' : 'client';\n      if (!this._deflate) {\n        const key = `${endpoint}_max_window_bits`;\n        const windowBits = typeof this.params[key] !== 'number' ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];\n        this._deflate = zlib.createDeflateRaw({\n          ...this._options.zlibDeflateOptions,\n          windowBits\n        });\n        this._deflate[kTotalLength] = 0;\n        this._deflate[kBuffers] = [];\n        this._deflate.on('data', deflateOnData);\n      }\n      this._deflate[kCallback] = callback;\n      this._deflate.write(data);\n      this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {\n        if (!this._deflate) {\n          //\n          // The deflate stream was closed while data was being processed.\n          //\n          return;\n        }\n        let data = bufferUtil.concat(this._deflate[kBuffers], this._deflate[kTotalLength]);\n        if (fin) {\n          data = new FastBuffer(data.buffer, data.byteOffset, data.length - 4);\n        }\n\n        //\n        // Ensure that the callback will not be called again in\n        // `PerMessageDeflate#cleanup()`.\n        //\n        this._deflate[kCallback] = null;\n        this._deflate[kTotalLength] = 0;\n        this._deflate[kBuffers] = [];\n        if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n          this._deflate.reset();\n        }\n        callback(null, data);\n      });\n    }\n  }\n  module.exports = PerMessageDeflate;\n\n  /**\n   * The listener of the `zlib.DeflateRaw` stream `'data'` event.\n   *\n   * @param {Buffer} chunk A chunk of data\n   * @private\n   */\n  function deflateOnData(chunk) {\n    this[kBuffers].push(chunk);\n    this[kTotalLength] += chunk.length;\n  }\n\n  /**\n   * The listener of the `zlib.InflateRaw` stream `'data'` event.\n   *\n   * @param {Buffer} chunk A chunk of data\n   * @private\n   */\n  function inflateOnData(chunk) {\n    this[kTotalLength] += chunk.length;\n    if (this[kPerMessageDeflate]._maxPayload < 1 || this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload) {\n      this[kBuffers].push(chunk);\n      return;\n    }\n    this[kError] = new RangeError('Max payload size exceeded');\n    this[kError].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';\n    this[kError][kStatusCode] = 1009;\n    this.removeListener('data', inflateOnData);\n    this.reset();\n  }\n\n  /**\n   * The listener of the `zlib.InflateRaw` stream `'error'` event.\n   *\n   * @param {Error} err The emitted error\n   * @private\n   */\n  function inflateOnError(err) {\n    //\n    // There is no need to call `Zlib#close()` as the handle is automatically\n    // closed when an error is emitted.\n    //\n    this[kPerMessageDeflate]._inflate = null;\n    err[kStatusCode] = 1007;\n    this[kCallback](err);\n  }\n});","lineCount":414,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,8,3,6,"zlib"],[4,12,3,10],[4,15,3,13,"require"],[4,22,3,20],[4,23,3,20,"_dependencyMap"],[4,37,3,20],[4,48,3,27],[4,49,3,28],[5,2,5,0],[5,8,5,6,"bufferUtil"],[5,18,5,16],[5,21,5,19,"require"],[5,28,5,26],[5,29,5,26,"_dependencyMap"],[5,43,5,26],[5,63,5,42],[5,64,5,43],[6,2,6,0],[6,8,6,6,"Limiter"],[6,15,6,13],[6,18,6,16,"require"],[6,25,6,23],[6,26,6,23,"_dependencyMap"],[6,40,6,23],[6,56,6,35],[6,57,6,36],[7,2,7,0],[7,8,7,6],[8,4,7,8,"kStatusCode"],[9,2,7,20],[9,3,7,21],[9,6,7,24,"require"],[9,13,7,31],[9,14,7,31,"_dependencyMap"],[9,28,7,31],[9,46,7,45],[9,47,7,46],[10,2,9,0],[10,8,9,6,"FastBuffer"],[10,18,9,16],[10,21,9,19,"Buffer"],[10,27,9,25],[10,28,9,26,"Symbol"],[10,34,9,32],[10,35,9,33,"species"],[10,42,9,40],[10,43,9,41],[11,2,10,0],[11,8,10,6,"TRAILER"],[11,15,10,13],[11,18,10,16,"Buffer"],[11,24,10,22],[11,25,10,23,"from"],[11,29,10,27],[11,30,10,28],[11,31,10,29],[11,35,10,33],[11,37,10,35],[11,41,10,39],[11,43,10,41],[11,47,10,45],[11,49,10,47],[11,53,10,51],[11,54,10,52],[11,55,10,53],[12,2,11,0],[12,8,11,6,"kPerMessageDeflate"],[12,26,11,24],[12,29,11,27,"Symbol"],[12,35,11,33],[12,36,11,34],[12,56,11,54],[12,57,11,55],[13,2,12,0],[13,8,12,6,"kTotalLength"],[13,20,12,18],[13,23,12,21,"Symbol"],[13,29,12,27],[13,30,12,28],[13,44,12,42],[13,45,12,43],[14,2,13,0],[14,8,13,6,"kCallback"],[14,17,13,15],[14,20,13,18,"Symbol"],[14,26,13,24],[14,27,13,25],[14,37,13,35],[14,38,13,36],[15,2,14,0],[15,8,14,6,"kBuffers"],[15,16,14,14],[15,19,14,17,"Symbol"],[15,25,14,23],[15,26,14,24],[15,35,14,33],[15,36,14,34],[16,2,15,0],[16,8,15,6,"kError"],[16,14,15,12],[16,17,15,15,"Symbol"],[16,23,15,21],[16,24,15,22],[16,31,15,29],[16,32,15,30],[18,2,17,0],[19,2,18,0],[20,2,19,0],[21,2,20,0],[22,2,21,0],[23,2,22,0],[24,2,23,0],[25,2,24,0],[25,6,24,4,"zlibLimiter"],[25,17,24,15],[27,2,26,0],[28,0,27,0],[29,0,28,0],[30,2,29,0],[30,8,29,6,"PerMessageDeflate"],[30,25,29,23],[30,26,29,24],[31,4,30,2],[32,0,31,0],[33,0,32,0],[34,0,33,0],[35,0,34,0],[36,0,35,0],[37,0,36,0],[38,0,37,0],[39,0,38,0],[40,0,39,0],[41,0,40,0],[42,0,41,0],[43,0,42,0],[44,0,43,0],[45,0,44,0],[46,0,45,0],[47,0,46,0],[48,0,47,0],[49,0,48,0],[50,0,49,0],[51,0,50,0],[52,0,51,0],[53,0,52,0],[54,0,53,0],[55,4,54,2,"constructor"],[55,15,54,13,"constructor"],[55,16,54,14,"options"],[55,23,54,21],[55,25,54,23,"isServer"],[55,33,54,31],[55,35,54,33,"maxPayload"],[55,45,54,43],[55,47,54,45],[56,6,55,4],[56,10,55,8],[56,11,55,9,"_maxPayload"],[56,22,55,20],[56,25,55,23,"maxPayload"],[56,35,55,33],[56,38,55,36],[56,39,55,37],[57,6,56,4],[57,10,56,8],[57,11,56,9,"_options"],[57,19,56,17],[57,22,56,20,"options"],[57,29,56,27],[57,33,56,31],[57,34,56,32],[57,35,56,33],[58,6,57,4],[58,10,57,8],[58,11,57,9,"_threshold"],[58,21,57,19],[58,24,58,6],[58,28,58,10],[58,29,58,11,"_options"],[58,37,58,19],[58,38,58,20,"threshold"],[58,47,58,29],[58,52,58,34,"undefined"],[58,61,58,43],[58,64,58,46],[58,68,58,50],[58,69,58,51,"_options"],[58,77,58,59],[58,78,58,60,"threshold"],[58,87,58,69],[58,90,58,72],[58,94,58,76],[59,6,59,4],[59,10,59,8],[59,11,59,9,"_isServer"],[59,20,59,18],[59,23,59,21],[59,24,59,22],[59,25,59,23,"isServer"],[59,33,59,31],[60,6,60,4],[60,10,60,8],[60,11,60,9,"_deflate"],[60,19,60,17],[60,22,60,20],[60,26,60,24],[61,6,61,4],[61,10,61,8],[61,11,61,9,"_inflate"],[61,19,61,17],[61,22,61,20],[61,26,61,24],[62,6,63,4],[62,10,63,8],[62,11,63,9,"params"],[62,17,63,15],[62,20,63,18],[62,24,63,22],[63,6,65,4],[63,10,65,8],[63,11,65,9,"zlibLimiter"],[63,22,65,20],[63,24,65,22],[64,8,66,6],[64,14,66,12,"concurrency"],[64,25,66,23],[64,28,67,8],[64,32,67,12],[64,33,67,13,"_options"],[64,41,67,21],[64,42,67,22,"concurrencyLimit"],[64,58,67,38],[64,63,67,43,"undefined"],[64,72,67,52],[64,75,68,12],[64,79,68,16],[64,80,68,17,"_options"],[64,88,68,25],[64,89,68,26,"concurrencyLimit"],[64,105,68,42],[64,108,69,12],[64,110,69,14],[65,8,70,6,"zlibLimiter"],[65,19,70,17],[65,22,70,20],[65,26,70,24,"Limiter"],[65,33,70,31],[65,34,70,32,"concurrency"],[65,45,70,43],[65,46,70,44],[66,6,71,4],[67,4,72,2],[69,4,74,2],[70,0,75,0],[71,0,76,0],[72,4,77,2],[72,15,77,13,"extensionName"],[72,28,77,26,"extensionName"],[72,29,77,26],[72,31,77,29],[73,6,78,4],[73,13,78,11],[73,33,78,31],[74,4,79,2],[76,4,81,2],[77,0,82,0],[78,0,83,0],[79,0,84,0],[80,0,85,0],[81,0,86,0],[82,4,87,2,"offer"],[82,9,87,7,"offer"],[82,10,87,7],[82,12,87,10],[83,6,88,4],[83,12,88,10,"params"],[83,18,88,16],[83,21,88,19],[83,22,88,20],[83,23,88,21],[84,6,90,4],[84,10,90,8],[84,14,90,12],[84,15,90,13,"_options"],[84,23,90,21],[84,24,90,22,"serverNoContextTakeover"],[84,47,90,45],[84,49,90,47],[85,8,91,6,"params"],[85,14,91,12],[85,15,91,13,"server_no_context_takeover"],[85,41,91,39],[85,44,91,42],[85,48,91,46],[86,6,92,4],[87,6,93,4],[87,10,93,8],[87,14,93,12],[87,15,93,13,"_options"],[87,23,93,21],[87,24,93,22,"clientNoContextTakeover"],[87,47,93,45],[87,49,93,47],[88,8,94,6,"params"],[88,14,94,12],[88,15,94,13,"client_no_context_takeover"],[88,41,94,39],[88,44,94,42],[88,48,94,46],[89,6,95,4],[90,6,96,4],[90,10,96,8],[90,14,96,12],[90,15,96,13,"_options"],[90,23,96,21],[90,24,96,22,"serverMaxWindowBits"],[90,43,96,41],[90,45,96,43],[91,8,97,6,"params"],[91,14,97,12],[91,15,97,13,"server_max_window_bits"],[91,37,97,35],[91,40,97,38],[91,44,97,42],[91,45,97,43,"_options"],[91,53,97,51],[91,54,97,52,"serverMaxWindowBits"],[91,73,97,71],[92,6,98,4],[93,6,99,4],[93,10,99,8],[93,14,99,12],[93,15,99,13,"_options"],[93,23,99,21],[93,24,99,22,"clientMaxWindowBits"],[93,43,99,41],[93,45,99,43],[94,8,100,6,"params"],[94,14,100,12],[94,15,100,13,"client_max_window_bits"],[94,37,100,35],[94,40,100,38],[94,44,100,42],[94,45,100,43,"_options"],[94,53,100,51],[94,54,100,52,"clientMaxWindowBits"],[94,73,100,71],[95,6,101,4],[95,7,101,5],[95,13,101,11],[95,17,101,15],[95,21,101,19],[95,22,101,20,"_options"],[95,30,101,28],[95,31,101,29,"clientMaxWindowBits"],[95,50,101,48],[95,54,101,52],[95,58,101,56],[95,60,101,58],[96,8,102,6,"params"],[96,14,102,12],[96,15,102,13,"client_max_window_bits"],[96,37,102,35],[96,40,102,38],[96,44,102,42],[97,6,103,4],[98,6,105,4],[98,13,105,11,"params"],[98,19,105,17],[99,4,106,2],[101,4,108,2],[102,0,109,0],[103,0,110,0],[104,0,111,0],[105,0,112,0],[106,0,113,0],[107,0,114,0],[108,4,115,2,"accept"],[108,10,115,8,"accept"],[108,11,115,9,"configurations"],[108,25,115,23],[108,27,115,25],[109,6,116,4,"configurations"],[109,20,116,18],[109,23,116,21],[109,27,116,25],[109,28,116,26,"normalizeParams"],[109,43,116,41],[109,44,116,42,"configurations"],[109,58,116,56],[109,59,116,57],[110,6,118,4],[110,10,118,8],[110,11,118,9,"params"],[110,17,118,15],[110,20,118,18],[110,24,118,22],[110,25,118,23,"_isServer"],[110,34,118,32],[110,37,119,8],[110,41,119,12],[110,42,119,13,"acceptAsServer"],[110,56,119,27],[110,57,119,28,"configurations"],[110,71,119,42],[110,72,119,43],[110,75,120,8],[110,79,120,12],[110,80,120,13,"acceptAsClient"],[110,94,120,27],[110,95,120,28,"configurations"],[110,109,120,42],[110,110,120,43],[111,6,122,4],[111,13,122,11],[111,17,122,15],[111,18,122,16,"params"],[111,24,122,22],[112,4,123,2],[114,4,125,2],[115,0,126,0],[116,0,127,0],[117,0,128,0],[118,0,129,0],[119,4,130,2,"cleanup"],[119,11,130,9,"cleanup"],[119,12,130,9],[119,14,130,12],[120,6,131,4],[120,10,131,8],[120,14,131,12],[120,15,131,13,"_inflate"],[120,23,131,21],[120,25,131,23],[121,8,132,6],[121,12,132,10],[121,13,132,11,"_inflate"],[121,21,132,19],[121,22,132,20,"close"],[121,27,132,25],[121,28,132,26],[121,29,132,27],[122,8,133,6],[122,12,133,10],[122,13,133,11,"_inflate"],[122,21,133,19],[122,24,133,22],[122,28,133,26],[123,6,134,4],[124,6,136,4],[124,10,136,8],[124,14,136,12],[124,15,136,13,"_deflate"],[124,23,136,21],[124,25,136,23],[125,8,137,6],[125,14,137,12,"callback"],[125,22,137,20],[125,25,137,23],[125,29,137,27],[125,30,137,28,"_deflate"],[125,38,137,36],[125,39,137,37,"kCallback"],[125,48,137,46],[125,49,137,47],[126,8,139,6],[126,12,139,10],[126,13,139,11,"_deflate"],[126,21,139,19],[126,22,139,20,"close"],[126,27,139,25],[126,28,139,26],[126,29,139,27],[127,8,140,6],[127,12,140,10],[127,13,140,11,"_deflate"],[127,21,140,19],[127,24,140,22],[127,28,140,26],[128,8,142,6],[128,12,142,10,"callback"],[128,20,142,18],[128,22,142,20],[129,10,143,8,"callback"],[129,18,143,16],[129,19,144,10],[129,23,144,14,"Error"],[129,28,144,19],[129,29,145,12],[129,91,146,10],[129,92,147,8],[129,93,147,9],[130,8,148,6],[131,6,149,4],[132,4,150,2],[134,4,152,2],[135,0,153,0],[136,0,154,0],[137,0,155,0],[138,0,156,0],[139,0,157,0],[140,0,158,0],[141,4,159,2,"acceptAsServer"],[141,18,159,16,"acceptAsServer"],[141,19,159,17,"offers"],[141,25,159,23],[141,27,159,25],[142,6,160,4],[142,12,160,10,"opts"],[142,16,160,14],[142,19,160,17],[142,23,160,21],[142,24,160,22,"_options"],[142,32,160,30],[143,6,161,4],[143,12,161,10,"accepted"],[143,20,161,18],[143,23,161,21,"offers"],[143,29,161,27],[143,30,161,28,"find"],[143,34,161,32],[143,35,161,34,"params"],[143,41,161,40],[143,45,161,45],[144,8,162,6],[144,12,163,9,"opts"],[144,16,163,13],[144,17,163,14,"serverNoContextTakeover"],[144,40,163,37],[144,45,163,42],[144,50,163,47],[144,54,164,10,"params"],[144,60,164,16],[144,61,164,17,"server_no_context_takeover"],[144,87,164,43],[144,91,165,9,"params"],[144,97,165,15],[144,98,165,16,"server_max_window_bits"],[144,120,165,38],[144,125,166,11,"opts"],[144,129,166,15],[144,130,166,16,"serverMaxWindowBits"],[144,149,166,35],[144,154,166,40],[144,159,166,45],[144,163,167,13],[144,170,167,20,"opts"],[144,174,167,24],[144,175,167,25,"serverMaxWindowBits"],[144,194,167,44],[144,199,167,49],[144,207,167,57],[144,211,168,14,"opts"],[144,215,168,18],[144,216,168,19,"serverMaxWindowBits"],[144,235,168,38],[144,238,168,41,"params"],[144,244,168,47],[144,245,168,48,"server_max_window_bits"],[144,267,168,71],[144,268,168,73],[144,272,169,9],[144,279,169,16,"opts"],[144,283,169,20],[144,284,169,21,"clientMaxWindowBits"],[144,303,169,40],[144,308,169,45],[144,316,169,53],[144,320,170,10],[144,321,170,11,"params"],[144,327,170,17],[144,328,170,18,"client_max_window_bits"],[144,350,170,41],[144,352,171,8],[145,10,172,8],[145,17,172,15],[145,22,172,20],[146,8,173,6],[147,8,175,6],[147,15,175,13],[147,19,175,17],[148,6,176,4],[148,7,176,5],[148,8,176,6],[149,6,178,4],[149,10,178,8],[149,11,178,9,"accepted"],[149,19,178,17],[149,21,178,19],[150,8,179,6],[150,14,179,12],[150,18,179,16,"Error"],[150,23,179,21],[150,24,179,22],[150,70,179,68],[150,71,179,69],[151,6,180,4],[152,6,182,4],[152,10,182,8,"opts"],[152,14,182,12],[152,15,182,13,"serverNoContextTakeover"],[152,38,182,36],[152,40,182,38],[153,8,183,6,"accepted"],[153,16,183,14],[153,17,183,15,"server_no_context_takeover"],[153,43,183,41],[153,46,183,44],[153,50,183,48],[154,6,184,4],[155,6,185,4],[155,10,185,8,"opts"],[155,14,185,12],[155,15,185,13,"clientNoContextTakeover"],[155,38,185,36],[155,40,185,38],[156,8,186,6,"accepted"],[156,16,186,14],[156,17,186,15,"client_no_context_takeover"],[156,43,186,41],[156,46,186,44],[156,50,186,48],[157,6,187,4],[158,6,188,4],[158,10,188,8],[158,17,188,15,"opts"],[158,21,188,19],[158,22,188,20,"serverMaxWindowBits"],[158,41,188,39],[158,46,188,44],[158,54,188,52],[158,56,188,54],[159,8,189,6,"accepted"],[159,16,189,14],[159,17,189,15,"server_max_window_bits"],[159,39,189,37],[159,42,189,40,"opts"],[159,46,189,44],[159,47,189,45,"serverMaxWindowBits"],[159,66,189,64],[160,6,190,4],[161,6,191,4],[161,10,191,8],[161,17,191,15,"opts"],[161,21,191,19],[161,22,191,20,"clientMaxWindowBits"],[161,41,191,39],[161,46,191,44],[161,54,191,52],[161,56,191,54],[162,8,192,6,"accepted"],[162,16,192,14],[162,17,192,15,"client_max_window_bits"],[162,39,192,37],[162,42,192,40,"opts"],[162,46,192,44],[162,47,192,45,"clientMaxWindowBits"],[162,66,192,64],[163,6,193,4],[163,7,193,5],[163,13,193,11],[163,17,194,6,"accepted"],[163,25,194,14],[163,26,194,15,"client_max_window_bits"],[163,48,194,37],[163,53,194,42],[163,57,194,46],[163,61,195,6,"opts"],[163,65,195,10],[163,66,195,11,"clientMaxWindowBits"],[163,85,195,30],[163,90,195,35],[163,95,195,40],[163,97,196,6],[164,8,197,6],[164,15,197,13,"accepted"],[164,23,197,21],[164,24,197,22,"client_max_window_bits"],[164,46,197,44],[165,6,198,4],[166,6,200,4],[166,13,200,11,"accepted"],[166,21,200,19],[167,4,201,2],[169,4,203,2],[170,0,204,0],[171,0,205,0],[172,0,206,0],[173,0,207,0],[174,0,208,0],[175,0,209,0],[176,4,210,2,"acceptAsClient"],[176,18,210,16,"acceptAsClient"],[176,19,210,17,"response"],[176,27,210,25],[176,29,210,27],[177,6,211,4],[177,12,211,10,"params"],[177,18,211,16],[177,21,211,19,"response"],[177,29,211,27],[177,30,211,28],[177,31,211,29],[177,32,211,30],[178,6,213,4],[178,10,214,6],[178,14,214,10],[178,15,214,11,"_options"],[178,23,214,19],[178,24,214,20,"clientNoContextTakeover"],[178,47,214,43],[178,52,214,48],[178,57,214,53],[178,61,215,6,"params"],[178,67,215,12],[178,68,215,13,"client_no_context_takeover"],[178,94,215,39],[178,96,216,6],[179,8,217,6],[179,14,217,12],[179,18,217,16,"Error"],[179,23,217,21],[179,24,217,22],[179,75,217,73],[179,76,217,74],[180,6,218,4],[181,6,220,4],[181,10,220,8],[181,11,220,9,"params"],[181,17,220,15],[181,18,220,16,"client_max_window_bits"],[181,40,220,38],[181,42,220,40],[182,8,221,6],[182,12,221,10],[182,19,221,17],[182,23,221,21],[182,24,221,22,"_options"],[182,32,221,30],[182,33,221,31,"clientMaxWindowBits"],[182,52,221,50],[182,57,221,55],[182,65,221,63],[182,67,221,65],[183,10,222,8,"params"],[183,16,222,14],[183,17,222,15,"client_max_window_bits"],[183,39,222,37],[183,42,222,40],[183,46,222,44],[183,47,222,45,"_options"],[183,55,222,53],[183,56,222,54,"clientMaxWindowBits"],[183,75,222,73],[184,8,223,6],[185,6,224,4],[185,7,224,5],[185,13,224,11],[185,17,225,6],[185,21,225,10],[185,22,225,11,"_options"],[185,30,225,19],[185,31,225,20,"clientMaxWindowBits"],[185,50,225,39],[185,55,225,44],[185,60,225,49],[185,64,226,7],[185,71,226,14],[185,75,226,18],[185,76,226,19,"_options"],[185,84,226,27],[185,85,226,28,"clientMaxWindowBits"],[185,104,226,47],[185,109,226,52],[185,117,226,60],[185,121,227,8,"params"],[185,127,227,14],[185,128,227,15,"client_max_window_bits"],[185,150,227,37],[185,153,227,40],[185,157,227,44],[185,158,227,45,"_options"],[185,166,227,53],[185,167,227,54,"clientMaxWindowBits"],[185,186,227,74],[185,188,228,6],[186,8,229,6],[186,14,229,12],[186,18,229,16,"Error"],[186,23,229,21],[186,24,230,8],[186,82,231,6],[186,83,231,7],[187,6,232,4],[188,6,234,4],[188,13,234,11,"params"],[188,19,234,17],[189,4,235,2],[191,4,237,2],[192,0,238,0],[193,0,239,0],[194,0,240,0],[195,0,241,0],[196,0,242,0],[197,0,243,0],[198,4,244,2,"normalizeParams"],[198,19,244,17,"normalizeParams"],[198,20,244,18,"configurations"],[198,34,244,32],[198,36,244,34],[199,6,245,4,"configurations"],[199,20,245,18],[199,21,245,19,"forEach"],[199,28,245,26],[199,29,245,28,"params"],[199,35,245,34],[199,39,245,39],[200,8,246,6,"Object"],[200,14,246,12],[200,15,246,13,"keys"],[200,19,246,17],[200,20,246,18,"params"],[200,26,246,24],[200,27,246,25],[200,28,246,26,"forEach"],[200,35,246,33],[200,36,246,35,"key"],[200,39,246,38],[200,43,246,43],[201,10,247,8],[201,14,247,12,"value"],[201,19,247,17],[201,22,247,20,"params"],[201,28,247,26],[201,29,247,27,"key"],[201,32,247,30],[201,33,247,31],[202,10,249,8],[202,14,249,12,"value"],[202,19,249,17],[202,20,249,18,"length"],[202,26,249,24],[202,29,249,27],[202,30,249,28],[202,32,249,30],[203,12,250,10],[203,18,250,16],[203,22,250,20,"Error"],[203,27,250,25],[203,28,250,26],[203,42,250,40,"key"],[203,45,250,43],[203,78,250,76],[203,79,250,77],[204,10,251,8],[205,10,253,8,"value"],[205,15,253,13],[205,18,253,16,"value"],[205,23,253,21],[205,24,253,22],[205,25,253,23],[205,26,253,24],[206,10,255,8],[206,14,255,12,"key"],[206,17,255,15],[206,22,255,20],[206,46,255,44],[206,48,255,46],[207,12,256,10],[207,16,256,14,"value"],[207,21,256,19],[207,26,256,24],[207,30,256,28],[207,32,256,30],[208,14,257,12],[208,20,257,18,"num"],[208,23,257,21],[208,26,257,24],[208,27,257,25,"value"],[208,32,257,30],[209,14,258,12],[209,18,258,16],[209,19,258,17,"Number"],[209,25,258,23],[209,26,258,24,"isInteger"],[209,35,258,33],[209,36,258,34,"num"],[209,39,258,37],[209,40,258,38],[209,44,258,42,"num"],[209,47,258,45],[209,50,258,48],[209,51,258,49],[209,55,258,53,"num"],[209,58,258,56],[209,61,258,59],[209,63,258,61],[209,65,258,63],[210,16,259,14],[210,22,259,20],[210,26,259,24,"TypeError"],[210,35,259,33],[210,36,260,16],[210,68,260,48,"key"],[210,71,260,51],[210,77,260,57,"value"],[210,82,260,62],[210,84,261,14],[210,85,261,15],[211,14,262,12],[212,14,263,12,"value"],[212,19,263,17],[212,22,263,20,"num"],[212,25,263,23],[213,12,264,10],[213,13,264,11],[213,19,264,17],[213,23,264,21],[213,24,264,22],[213,28,264,26],[213,29,264,27,"_isServer"],[213,38,264,36],[213,40,264,38],[214,14,265,12],[214,20,265,18],[214,24,265,22,"TypeError"],[214,33,265,31],[214,34,266,14],[214,66,266,46,"key"],[214,69,266,49],[214,75,266,55,"value"],[214,80,266,60],[214,82,267,12],[214,83,267,13],[215,12,268,10],[216,10,269,8],[216,11,269,9],[216,17,269,15],[216,21,269,19,"key"],[216,24,269,22],[216,29,269,27],[216,53,269,51],[216,55,269,53],[217,12,270,10],[217,18,270,16,"num"],[217,21,270,19],[217,24,270,22],[217,25,270,23,"value"],[217,30,270,28],[218,12,271,10],[218,16,271,14],[218,17,271,15,"Number"],[218,23,271,21],[218,24,271,22,"isInteger"],[218,33,271,31],[218,34,271,32,"num"],[218,37,271,35],[218,38,271,36],[218,42,271,40,"num"],[218,45,271,43],[218,48,271,46],[218,49,271,47],[218,53,271,51,"num"],[218,56,271,54],[218,59,271,57],[218,61,271,59],[218,63,271,61],[219,14,272,12],[219,20,272,18],[219,24,272,22,"TypeError"],[219,33,272,31],[219,34,273,14],[219,66,273,46,"key"],[219,69,273,49],[219,75,273,55,"value"],[219,80,273,60],[219,82,274,12],[219,83,274,13],[220,12,275,10],[221,12,276,10,"value"],[221,17,276,15],[221,20,276,18,"num"],[221,23,276,21],[222,10,277,8],[222,11,277,9],[222,17,277,15],[222,21,278,10,"key"],[222,24,278,13],[222,29,278,18],[222,57,278,46],[222,61,279,10,"key"],[222,64,279,13],[222,69,279,18],[222,97,279,46],[222,99,280,10],[223,12,281,10],[223,16,281,14,"value"],[223,21,281,19],[223,26,281,24],[223,30,281,28],[223,32,281,30],[224,14,282,12],[224,20,282,18],[224,24,282,22,"TypeError"],[224,33,282,31],[224,34,283,14],[224,66,283,46,"key"],[224,69,283,49],[224,75,283,55,"value"],[224,80,283,60],[224,82,284,12],[224,83,284,13],[225,12,285,10],[226,10,286,8],[226,11,286,9],[226,17,286,15],[227,12,287,10],[227,18,287,16],[227,22,287,20,"Error"],[227,27,287,25],[227,28,287,26],[227,50,287,48,"key"],[227,53,287,51],[227,56,287,54],[227,57,287,55],[228,10,288,8],[229,10,290,8,"params"],[229,16,290,14],[229,17,290,15,"key"],[229,20,290,18],[229,21,290,19],[229,24,290,22,"value"],[229,29,290,27],[230,8,291,6],[230,9,291,7],[230,10,291,8],[231,6,292,4],[231,7,292,5],[231,8,292,6],[232,6,294,4],[232,13,294,11,"configurations"],[232,27,294,25],[233,4,295,2],[235,4,297,2],[236,0,298,0],[237,0,299,0],[238,0,300,0],[239,0,301,0],[240,0,302,0],[241,0,303,0],[242,0,304,0],[243,4,305,2,"decompress"],[243,14,305,12,"decompress"],[243,15,305,13,"data"],[243,19,305,17],[243,21,305,19,"fin"],[243,24,305,22],[243,26,305,24,"callback"],[243,34,305,32],[243,36,305,34],[244,6,306,4,"zlibLimiter"],[244,17,306,15],[244,18,306,16,"add"],[244,21,306,19],[244,22,306,21,"done"],[244,26,306,25],[244,30,306,30],[245,8,307,6],[245,12,307,10],[245,13,307,11,"_decompress"],[245,24,307,22],[245,25,307,23,"data"],[245,29,307,27],[245,31,307,29,"fin"],[245,34,307,32],[245,36,307,34],[245,37,307,35,"err"],[245,40,307,38],[245,42,307,40,"result"],[245,48,307,46],[245,53,307,51],[246,10,308,8,"done"],[246,14,308,12],[246,15,308,13],[246,16,308,14],[247,10,309,8,"callback"],[247,18,309,16],[247,19,309,17,"err"],[247,22,309,20],[247,24,309,22,"result"],[247,30,309,28],[247,31,309,29],[248,8,310,6],[248,9,310,7],[248,10,310,8],[249,6,311,4],[249,7,311,5],[249,8,311,6],[250,4,312,2],[252,4,314,2],[253,0,315,0],[254,0,316,0],[255,0,317,0],[256,0,318,0],[257,0,319,0],[258,0,320,0],[259,0,321,0],[260,4,322,2,"compress"],[260,12,322,10,"compress"],[260,13,322,11,"data"],[260,17,322,15],[260,19,322,17,"fin"],[260,22,322,20],[260,24,322,22,"callback"],[260,32,322,30],[260,34,322,32],[261,6,323,4,"zlibLimiter"],[261,17,323,15],[261,18,323,16,"add"],[261,21,323,19],[261,22,323,21,"done"],[261,26,323,25],[261,30,323,30],[262,8,324,6],[262,12,324,10],[262,13,324,11,"_compress"],[262,22,324,20],[262,23,324,21,"data"],[262,27,324,25],[262,29,324,27,"fin"],[262,32,324,30],[262,34,324,32],[262,35,324,33,"err"],[262,38,324,36],[262,40,324,38,"result"],[262,46,324,44],[262,51,324,49],[263,10,325,8,"done"],[263,14,325,12],[263,15,325,13],[263,16,325,14],[264,10,326,8,"callback"],[264,18,326,16],[264,19,326,17,"err"],[264,22,326,20],[264,24,326,22,"result"],[264,30,326,28],[264,31,326,29],[265,8,327,6],[265,9,327,7],[265,10,327,8],[266,6,328,4],[266,7,328,5],[266,8,328,6],[267,4,329,2],[269,4,331,2],[270,0,332,0],[271,0,333,0],[272,0,334,0],[273,0,335,0],[274,0,336,0],[275,0,337,0],[276,0,338,0],[277,4,339,2,"_decompress"],[277,15,339,13,"_decompress"],[277,16,339,14,"data"],[277,20,339,18],[277,22,339,20,"fin"],[277,25,339,23],[277,27,339,25,"callback"],[277,35,339,33],[277,37,339,35],[278,6,340,4],[278,12,340,10,"endpoint"],[278,20,340,18],[278,23,340,21],[278,27,340,25],[278,28,340,26,"_isServer"],[278,37,340,35],[278,40,340,38],[278,48,340,46],[278,51,340,49],[278,59,340,57],[279,6,342,4],[279,10,342,8],[279,11,342,9],[279,15,342,13],[279,16,342,14,"_inflate"],[279,24,342,22],[279,26,342,24],[280,8,343,6],[280,14,343,12,"key"],[280,17,343,15],[280,20,343,18],[280,23,343,21,"endpoint"],[280,31,343,29],[280,49,343,47],[281,8,344,6],[281,14,344,12,"windowBits"],[281,24,344,22],[281,27,345,8],[281,34,345,15],[281,38,345,19],[281,39,345,20,"params"],[281,45,345,26],[281,46,345,27,"key"],[281,49,345,30],[281,50,345,31],[281,55,345,36],[281,63,345,44],[281,66,346,12,"zlib"],[281,70,346,16],[281,71,346,17,"Z_DEFAULT_WINDOWBITS"],[281,91,346,37],[281,94,347,12],[281,98,347,16],[281,99,347,17,"params"],[281,105,347,23],[281,106,347,24,"key"],[281,109,347,27],[281,110,347,28],[282,8,349,6],[282,12,349,10],[282,13,349,11,"_inflate"],[282,21,349,19],[282,24,349,22,"zlib"],[282,28,349,26],[282,29,349,27,"createInflateRaw"],[282,45,349,43],[282,46,349,44],[283,10,350,8],[283,13,350,11],[283,17,350,15],[283,18,350,16,"_options"],[283,26,350,24],[283,27,350,25,"zlibInflateOptions"],[283,45,350,43],[284,10,351,8,"windowBits"],[285,8,352,6],[285,9,352,7],[285,10,352,8],[286,8,353,6],[286,12,353,10],[286,13,353,11,"_inflate"],[286,21,353,19],[286,22,353,20,"kPerMessageDeflate"],[286,40,353,38],[286,41,353,39],[286,44,353,42],[286,48,353,46],[287,8,354,6],[287,12,354,10],[287,13,354,11,"_inflate"],[287,21,354,19],[287,22,354,20,"kTotalLength"],[287,34,354,32],[287,35,354,33],[287,38,354,36],[287,39,354,37],[288,8,355,6],[288,12,355,10],[288,13,355,11,"_inflate"],[288,21,355,19],[288,22,355,20,"kBuffers"],[288,30,355,28],[288,31,355,29],[288,34,355,32],[288,36,355,34],[289,8,356,6],[289,12,356,10],[289,13,356,11,"_inflate"],[289,21,356,19],[289,22,356,20,"on"],[289,24,356,22],[289,25,356,23],[289,32,356,30],[289,34,356,32,"inflateOnError"],[289,48,356,46],[289,49,356,47],[290,8,357,6],[290,12,357,10],[290,13,357,11,"_inflate"],[290,21,357,19],[290,22,357,20,"on"],[290,24,357,22],[290,25,357,23],[290,31,357,29],[290,33,357,31,"inflateOnData"],[290,46,357,44],[290,47,357,45],[291,6,358,4],[292,6,360,4],[292,10,360,8],[292,11,360,9,"_inflate"],[292,19,360,17],[292,20,360,18,"kCallback"],[292,29,360,27],[292,30,360,28],[292,33,360,31,"callback"],[292,41,360,39],[293,6,362,4],[293,10,362,8],[293,11,362,9,"_inflate"],[293,19,362,17],[293,20,362,18,"write"],[293,25,362,23],[293,26,362,24,"data"],[293,30,362,28],[293,31,362,29],[294,6,363,4],[294,10,363,8,"fin"],[294,13,363,11],[294,15,363,13],[294,19,363,17],[294,20,363,18,"_inflate"],[294,28,363,26],[294,29,363,27,"write"],[294,34,363,32],[294,35,363,33,"TRAILER"],[294,42,363,40],[294,43,363,41],[295,6,365,4],[295,10,365,8],[295,11,365,9,"_inflate"],[295,19,365,17],[295,20,365,18,"flush"],[295,25,365,23],[295,26,365,24],[295,32,365,30],[296,8,366,6],[296,14,366,12,"err"],[296,17,366,15],[296,20,366,18],[296,24,366,22],[296,25,366,23,"_inflate"],[296,33,366,31],[296,34,366,32,"kError"],[296,40,366,38],[296,41,366,39],[297,8,368,6],[297,12,368,10,"err"],[297,15,368,13],[297,17,368,15],[298,10,369,8],[298,14,369,12],[298,15,369,13,"_inflate"],[298,23,369,21],[298,24,369,22,"close"],[298,29,369,27],[298,30,369,28],[298,31,369,29],[299,10,370,8],[299,14,370,12],[299,15,370,13,"_inflate"],[299,23,370,21],[299,26,370,24],[299,30,370,28],[300,10,371,8,"callback"],[300,18,371,16],[300,19,371,17,"err"],[300,22,371,20],[300,23,371,21],[301,10,372,8],[302,8,373,6],[303,8,375,6],[303,14,375,12,"data"],[303,18,375,16],[303,21,375,19,"bufferUtil"],[303,31,375,29],[303,32,375,30,"concat"],[303,38,375,36],[303,39,376,8],[303,43,376,12],[303,44,376,13,"_inflate"],[303,52,376,21],[303,53,376,22,"kBuffers"],[303,61,376,30],[303,62,376,31],[303,64,377,8],[303,68,377,12],[303,69,377,13,"_inflate"],[303,77,377,21],[303,78,377,22,"kTotalLength"],[303,90,377,34],[303,91,378,6],[303,92,378,7],[304,8,380,6],[304,12,380,10],[304,16,380,14],[304,17,380,15,"_inflate"],[304,25,380,23],[304,26,380,24,"_readableState"],[304,40,380,38],[304,41,380,39,"endEmitted"],[304,51,380,49],[304,53,380,51],[305,10,381,8],[305,14,381,12],[305,15,381,13,"_inflate"],[305,23,381,21],[305,24,381,22,"close"],[305,29,381,27],[305,30,381,28],[305,31,381,29],[306,10,382,8],[306,14,382,12],[306,15,382,13,"_inflate"],[306,23,382,21],[306,26,382,24],[306,30,382,28],[307,8,383,6],[307,9,383,7],[307,15,383,13],[308,10,384,8],[308,14,384,12],[308,15,384,13,"_inflate"],[308,23,384,21],[308,24,384,22,"kTotalLength"],[308,36,384,34],[308,37,384,35],[308,40,384,38],[308,41,384,39],[309,10,385,8],[309,14,385,12],[309,15,385,13,"_inflate"],[309,23,385,21],[309,24,385,22,"kBuffers"],[309,32,385,30],[309,33,385,31],[309,36,385,34],[309,38,385,36],[310,10,387,8],[310,14,387,12,"fin"],[310,17,387,15],[310,21,387,19],[310,25,387,23],[310,26,387,24,"params"],[310,32,387,30],[310,33,387,31],[310,36,387,34,"endpoint"],[310,44,387,42],[310,66,387,64],[310,67,387,65],[310,69,387,67],[311,12,388,10],[311,16,388,14],[311,17,388,15,"_inflate"],[311,25,388,23],[311,26,388,24,"reset"],[311,31,388,29],[311,32,388,30],[311,33,388,31],[312,10,389,8],[313,8,390,6],[314,8,392,6,"callback"],[314,16,392,14],[314,17,392,15],[314,21,392,19],[314,23,392,21,"data"],[314,27,392,25],[314,28,392,26],[315,6,393,4],[315,7,393,5],[315,8,393,6],[316,4,394,2],[318,4,396,2],[319,0,397,0],[320,0,398,0],[321,0,399,0],[322,0,400,0],[323,0,401,0],[324,0,402,0],[325,0,403,0],[326,4,404,2,"_compress"],[326,13,404,11,"_compress"],[326,14,404,12,"data"],[326,18,404,16],[326,20,404,18,"fin"],[326,23,404,21],[326,25,404,23,"callback"],[326,33,404,31],[326,35,404,33],[327,6,405,4],[327,12,405,10,"endpoint"],[327,20,405,18],[327,23,405,21],[327,27,405,25],[327,28,405,26,"_isServer"],[327,37,405,35],[327,40,405,38],[327,48,405,46],[327,51,405,49],[327,59,405,57],[328,6,407,4],[328,10,407,8],[328,11,407,9],[328,15,407,13],[328,16,407,14,"_deflate"],[328,24,407,22],[328,26,407,24],[329,8,408,6],[329,14,408,12,"key"],[329,17,408,15],[329,20,408,18],[329,23,408,21,"endpoint"],[329,31,408,29],[329,49,408,47],[330,8,409,6],[330,14,409,12,"windowBits"],[330,24,409,22],[330,27,410,8],[330,34,410,15],[330,38,410,19],[330,39,410,20,"params"],[330,45,410,26],[330,46,410,27,"key"],[330,49,410,30],[330,50,410,31],[330,55,410,36],[330,63,410,44],[330,66,411,12,"zlib"],[330,70,411,16],[330,71,411,17,"Z_DEFAULT_WINDOWBITS"],[330,91,411,37],[330,94,412,12],[330,98,412,16],[330,99,412,17,"params"],[330,105,412,23],[330,106,412,24,"key"],[330,109,412,27],[330,110,412,28],[331,8,414,6],[331,12,414,10],[331,13,414,11,"_deflate"],[331,21,414,19],[331,24,414,22,"zlib"],[331,28,414,26],[331,29,414,27,"createDeflateRaw"],[331,45,414,43],[331,46,414,44],[332,10,415,8],[332,13,415,11],[332,17,415,15],[332,18,415,16,"_options"],[332,26,415,24],[332,27,415,25,"zlibDeflateOptions"],[332,45,415,43],[333,10,416,8,"windowBits"],[334,8,417,6],[334,9,417,7],[334,10,417,8],[335,8,419,6],[335,12,419,10],[335,13,419,11,"_deflate"],[335,21,419,19],[335,22,419,20,"kTotalLength"],[335,34,419,32],[335,35,419,33],[335,38,419,36],[335,39,419,37],[336,8,420,6],[336,12,420,10],[336,13,420,11,"_deflate"],[336,21,420,19],[336,22,420,20,"kBuffers"],[336,30,420,28],[336,31,420,29],[336,34,420,32],[336,36,420,34],[337,8,422,6],[337,12,422,10],[337,13,422,11,"_deflate"],[337,21,422,19],[337,22,422,20,"on"],[337,24,422,22],[337,25,422,23],[337,31,422,29],[337,33,422,31,"deflateOnData"],[337,46,422,44],[337,47,422,45],[338,6,423,4],[339,6,425,4],[339,10,425,8],[339,11,425,9,"_deflate"],[339,19,425,17],[339,20,425,18,"kCallback"],[339,29,425,27],[339,30,425,28],[339,33,425,31,"callback"],[339,41,425,39],[340,6,427,4],[340,10,427,8],[340,11,427,9,"_deflate"],[340,19,427,17],[340,20,427,18,"write"],[340,25,427,23],[340,26,427,24,"data"],[340,30,427,28],[340,31,427,29],[341,6,428,4],[341,10,428,8],[341,11,428,9,"_deflate"],[341,19,428,17],[341,20,428,18,"flush"],[341,25,428,23],[341,26,428,24,"zlib"],[341,30,428,28],[341,31,428,29,"Z_SYNC_FLUSH"],[341,43,428,41],[341,45,428,43],[341,51,428,49],[342,8,429,6],[342,12,429,10],[342,13,429,11],[342,17,429,15],[342,18,429,16,"_deflate"],[342,26,429,24],[342,28,429,26],[343,10,430,8],[344,10,431,8],[345,10,432,8],[346,10,433,8],[347,8,434,6],[348,8,436,6],[348,12,436,10,"data"],[348,16,436,14],[348,19,436,17,"bufferUtil"],[348,29,436,27],[348,30,436,28,"concat"],[348,36,436,34],[348,37,437,8],[348,41,437,12],[348,42,437,13,"_deflate"],[348,50,437,21],[348,51,437,22,"kBuffers"],[348,59,437,30],[348,60,437,31],[348,62,438,8],[348,66,438,12],[348,67,438,13,"_deflate"],[348,75,438,21],[348,76,438,22,"kTotalLength"],[348,88,438,34],[348,89,439,6],[348,90,439,7],[349,8,441,6],[349,12,441,10,"fin"],[349,15,441,13],[349,17,441,15],[350,10,442,8,"data"],[350,14,442,12],[350,17,442,15],[350,21,442,19,"FastBuffer"],[350,31,442,29],[350,32,442,30,"data"],[350,36,442,34],[350,37,442,35,"buffer"],[350,43,442,41],[350,45,442,43,"data"],[350,49,442,47],[350,50,442,48,"byteOffset"],[350,60,442,58],[350,62,442,60,"data"],[350,66,442,64],[350,67,442,65,"length"],[350,73,442,71],[350,76,442,74],[350,77,442,75],[350,78,442,76],[351,8,443,6],[353,8,445,6],[354,8,446,6],[355,8,447,6],[356,8,448,6],[357,8,449,6],[357,12,449,10],[357,13,449,11,"_deflate"],[357,21,449,19],[357,22,449,20,"kCallback"],[357,31,449,29],[357,32,449,30],[357,35,449,33],[357,39,449,37],[358,8,451,6],[358,12,451,10],[358,13,451,11,"_deflate"],[358,21,451,19],[358,22,451,20,"kTotalLength"],[358,34,451,32],[358,35,451,33],[358,38,451,36],[358,39,451,37],[359,8,452,6],[359,12,452,10],[359,13,452,11,"_deflate"],[359,21,452,19],[359,22,452,20,"kBuffers"],[359,30,452,28],[359,31,452,29],[359,34,452,32],[359,36,452,34],[360,8,454,6],[360,12,454,10,"fin"],[360,15,454,13],[360,19,454,17],[360,23,454,21],[360,24,454,22,"params"],[360,30,454,28],[360,31,454,29],[360,34,454,32,"endpoint"],[360,42,454,40],[360,64,454,62],[360,65,454,63],[360,67,454,65],[361,10,455,8],[361,14,455,12],[361,15,455,13,"_deflate"],[361,23,455,21],[361,24,455,22,"reset"],[361,29,455,27],[361,30,455,28],[361,31,455,29],[362,8,456,6],[363,8,458,6,"callback"],[363,16,458,14],[363,17,458,15],[363,21,458,19],[363,23,458,21,"data"],[363,27,458,25],[363,28,458,26],[364,6,459,4],[364,7,459,5],[364,8,459,6],[365,4,460,2],[366,2,461,0],[367,2,463,0,"module"],[367,8,463,6],[367,9,463,7,"exports"],[367,16,463,14],[367,19,463,17,"PerMessageDeflate"],[367,36,463,34],[369,2,465,0],[370,0,466,0],[371,0,467,0],[372,0,468,0],[373,0,469,0],[374,0,470,0],[375,2,471,0],[375,11,471,9,"deflateOnData"],[375,24,471,22,"deflateOnData"],[375,25,471,23,"chunk"],[375,30,471,28],[375,32,471,30],[376,4,472,2],[376,8,472,6],[376,9,472,7,"kBuffers"],[376,17,472,15],[376,18,472,16],[376,19,472,17,"push"],[376,23,472,21],[376,24,472,22,"chunk"],[376,29,472,27],[376,30,472,28],[377,4,473,2],[377,8,473,6],[377,9,473,7,"kTotalLength"],[377,21,473,19],[377,22,473,20],[377,26,473,24,"chunk"],[377,31,473,29],[377,32,473,30,"length"],[377,38,473,36],[378,2,474,0],[380,2,476,0],[381,0,477,0],[382,0,478,0],[383,0,479,0],[384,0,480,0],[385,0,481,0],[386,2,482,0],[386,11,482,9,"inflateOnData"],[386,24,482,22,"inflateOnData"],[386,25,482,23,"chunk"],[386,30,482,28],[386,32,482,30],[387,4,483,2],[387,8,483,6],[387,9,483,7,"kTotalLength"],[387,21,483,19],[387,22,483,20],[387,26,483,24,"chunk"],[387,31,483,29],[387,32,483,30,"length"],[387,38,483,36],[388,4,485,2],[388,8,486,4],[388,12,486,8],[388,13,486,9,"kPerMessageDeflate"],[388,31,486,27],[388,32,486,28],[388,33,486,29,"_maxPayload"],[388,44,486,40],[388,47,486,43],[388,48,486,44],[388,52,487,4],[388,56,487,8],[388,57,487,9,"kTotalLength"],[388,69,487,21],[388,70,487,22],[388,74,487,26],[388,78,487,30],[388,79,487,31,"kPerMessageDeflate"],[388,97,487,49],[388,98,487,50],[388,99,487,51,"_maxPayload"],[388,110,487,62],[388,112,488,4],[389,6,489,4],[389,10,489,8],[389,11,489,9,"kBuffers"],[389,19,489,17],[389,20,489,18],[389,21,489,19,"push"],[389,25,489,23],[389,26,489,24,"chunk"],[389,31,489,29],[389,32,489,30],[390,6,490,4],[391,4,491,2],[392,4,493,2],[392,8,493,6],[392,9,493,7,"kError"],[392,15,493,13],[392,16,493,14],[392,19,493,17],[392,23,493,21,"RangeError"],[392,33,493,31],[392,34,493,32],[392,61,493,59],[392,62,493,60],[393,4,494,2],[393,8,494,6],[393,9,494,7,"kError"],[393,15,494,13],[393,16,494,14],[393,17,494,15,"code"],[393,21,494,19],[393,24,494,22],[393,59,494,57],[394,4,495,2],[394,8,495,6],[394,9,495,7,"kError"],[394,15,495,13],[394,16,495,14],[394,17,495,15,"kStatusCode"],[394,28,495,26],[394,29,495,27],[394,32,495,30],[394,36,495,34],[395,4,496,2],[395,8,496,6],[395,9,496,7,"removeListener"],[395,23,496,21],[395,24,496,22],[395,30,496,28],[395,32,496,30,"inflateOnData"],[395,45,496,43],[395,46,496,44],[396,4,497,2],[396,8,497,6],[396,9,497,7,"reset"],[396,14,497,12],[396,15,497,13],[396,16,497,14],[397,2,498,0],[399,2,500,0],[400,0,501,0],[401,0,502,0],[402,0,503,0],[403,0,504,0],[404,0,505,0],[405,2,506,0],[405,11,506,9,"inflateOnError"],[405,25,506,23,"inflateOnError"],[405,26,506,24,"err"],[405,29,506,27],[405,31,506,29],[406,4,507,2],[407,4,508,2],[408,4,509,2],[409,4,510,2],[410,4,511,2],[410,8,511,6],[410,9,511,7,"kPerMessageDeflate"],[410,27,511,25],[410,28,511,26],[410,29,511,27,"_inflate"],[410,37,511,35],[410,40,511,38],[410,44,511,42],[411,4,512,2,"err"],[411,7,512,5],[411,8,512,6,"kStatusCode"],[411,19,512,17],[411,20,512,18],[411,23,512,21],[411,27,512,25],[412,4,513,2],[412,8,513,6],[412,9,513,7,"kCallback"],[412,18,513,16],[412,19,513,17],[412,20,513,18,"err"],[412,23,513,21],[412,24,513,22],[413,2,514,0],[414,0,514,1],[414,3]],"functionMap":{"names":["<global>","PerMessageDeflate","PerMessageDeflate#constructor","PerMessageDeflate.get__extensionName","PerMessageDeflate#offer","PerMessageDeflate#accept","PerMessageDeflate#cleanup","PerMessageDeflate#acceptAsServer","offers.find$argument_0","PerMessageDeflate#acceptAsClient","PerMessageDeflate#normalizeParams","configurations.forEach$argument_0","Object.keys.forEach$argument_0","PerMessageDeflate#decompress","zlibLimiter.add$argument_0","_decompress$argument_2","PerMessageDeflate#compress","_compress$argument_2","PerMessageDeflate#_decompress","_inflate.flush$argument_0","PerMessageDeflate#_compress","_deflate.flush$argument_1","deflateOnData","inflateOnData","inflateOnError"],"mappings":"AAA;AC4B;ECyB;GDkB;EEK;GFE;EGQ;GHmB;EIS;GJQ;EKO;GLoB;EMS;iCCE;KDe;GNyB;EQS;GRyB;ESS;2BCC;kCCC;OD6C;KDC;GTG;EYU;oBCC;kCCC;ODG;KDC;GZC;EeU;oBFC;gCGC;OHG;KEC;GfC;EiBU;wBC0B;KD4B;GjBC;EmBU;2CCwB;KD+B;GnBC;CDC;AsBU;CtBG;AuBQ;CvBgB;AwBQ;CxBQ"},"hasCjsExports":true},"type":"js/module"}]}