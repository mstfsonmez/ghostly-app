{"dependencies":[{"name":"socket.io-parser","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":46,"index":46}}],"key":"cQaAU0lT2O9qXW5QPLAeCm8S6Aw=","exportNames":["*"],"imports":1}},{"name":"./on.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":47},"end":{"line":2,"column":29,"index":76}}],"key":"XRT79/HgjpzwYcEtMdKPNGwAAJA=","exportNames":["*"],"imports":1}},{"name":"@socket.io/component-emitter","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":77},"end":{"line":3,"column":56,"index":133}}],"key":"nWmouVdWEVSQD2UwM6teY1JyKBM=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"Socket\", {\n    enumerable: true,\n    get: function () {\n      return Socket;\n    }\n  });\n  var _socketIoParser = require(_dependencyMap[0], \"socket.io-parser\");\n  var _onJs = require(_dependencyMap[1], \"./on.js\");\n  var _socketIoComponentEmitter = require(_dependencyMap[2], \"@socket.io/component-emitter\");\n  /**\n   * Internal events.\n   * These events can't be emitted by the user.\n   */\n  const RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1\n  });\n  /**\n   * A Socket is the fundamental class for interacting with the server.\n   *\n   * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n   *\n   * @example\n   * const socket = io();\n   *\n   * socket.on(\"connect\", () => {\n   *   console.log(\"connected\");\n   * });\n   *\n   * // send an event to the server\n   * socket.emit(\"foo\", \"bar\");\n   *\n   * socket.on(\"foobar\", () => {\n   *   // an event was received from the server\n   * });\n   *\n   * // upon disconnection\n   * socket.on(\"disconnect\", (reason) => {\n   *   console.log(`disconnected due to ${reason}`);\n   * });\n   */\n  class Socket extends _socketIoComponentEmitter.Emitter {\n    /**\n     * `Socket` constructor.\n     */\n    constructor(io, nsp, opts) {\n      super();\n      /**\n       * Whether the socket is currently connected to the server.\n       *\n       * @example\n       * const socket = io();\n       *\n       * socket.on(\"connect\", () => {\n       *   console.log(socket.connected); // true\n       * });\n       *\n       * socket.on(\"disconnect\", () => {\n       *   console.log(socket.connected); // false\n       * });\n       */\n      this.connected = false;\n      /**\n       * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n       * be transmitted by the server.\n       */\n      this.recovered = false;\n      /**\n       * Buffer for packets received before the CONNECT packet\n       */\n      this.receiveBuffer = [];\n      /**\n       * Buffer for packets that will be sent once the socket is connected\n       */\n      this.sendBuffer = [];\n      /**\n       * The queue of packets to be sent with retry in case of failure.\n       *\n       * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n       * @private\n       */\n      this._queue = [];\n      /**\n       * A sequence to generate the ID of the {@link QueuedPacket}.\n       * @private\n       */\n      this._queueSeq = 0;\n      this.ids = 0;\n      /**\n       * A map containing acknowledgement handlers.\n       *\n       * The `withError` attribute is used to differentiate handlers that accept an error as first argument:\n       *\n       * - `socket.emit(\"test\", (err, value) => { ... })` with `ackTimeout` option\n       * - `socket.timeout(5000).emit(\"test\", (err, value) => { ... })`\n       * - `const value = await socket.emitWithAck(\"test\")`\n       *\n       * From those that don't:\n       *\n       * - `socket.emit(\"test\", (value) => { ... });`\n       *\n       * In the first case, the handlers will be called with an error when:\n       *\n       * - the timeout is reached\n       * - the socket gets disconnected\n       *\n       * In the second case, the handlers will be simply discarded upon disconnection, since the client will never receive\n       * an acknowledgement from the server.\n       *\n       * @private\n       */\n      this.acks = {};\n      this.flags = {};\n      this.io = io;\n      this.nsp = nsp;\n      if (opts && opts.auth) {\n        this.auth = opts.auth;\n      }\n      this._opts = Object.assign({}, opts);\n      if (this.io._autoConnect) this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.disconnected); // false\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.disconnected); // true\n     * });\n     */\n    get disconnected() {\n      return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n      if (this.subs) return;\n      const io = this.io;\n      this.subs = [(0, _onJs.on)(io, \"open\", this.onopen.bind(this)), (0, _onJs.on)(io, \"packet\", this.onpacket.bind(this)), (0, _onJs.on)(io, \"error\", this.onerror.bind(this)), (0, _onJs.on)(io, \"close\", this.onclose.bind(this))];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n     *\n     * @example\n     * const socket = io();\n     *\n     * console.log(socket.active); // true\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   if (reason === \"io server disconnect\") {\n     *     // the disconnection was initiated by the server, you need to manually reconnect\n     *     console.log(socket.active); // false\n     *   }\n     *   // else the socket will automatically try to reconnect\n     *   console.log(socket.active); // true\n     * });\n     */\n    get active() {\n      return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @example\n     * const socket = io({\n     *   autoConnect: false\n     * });\n     *\n     * socket.connect();\n     */\n    connect() {\n      if (this.connected) return this;\n      this.subEvents();\n      if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n      if (\"open\" === this.io._readyState) this.onopen();\n      return this;\n    }\n    /**\n     * Alias for {@link connect()}.\n     */\n    open() {\n      return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * socket.send(\"hello\");\n     *\n     * // this is equivalent to\n     * socket.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n    send(...args) {\n      args.unshift(\"message\");\n      this.emit.apply(this, args);\n      return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @example\n     * socket.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the server\n     * socket.emit(\"hello\", \"world\", (val) => {\n     *   // ...\n     * });\n     *\n     * @return self\n     */\n    emit(ev, ...args) {\n      var _a, _b, _c;\n      if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n        throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n      }\n      args.unshift(ev);\n      if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n        this._addToQueue(args);\n        return this;\n      }\n      const packet = {\n        type: _socketIoParser.PacketType.EVENT,\n        data: args\n      };\n      packet.options = {};\n      packet.options.compress = this.flags.compress !== false;\n      // event ack callback\n      if (\"function\" === typeof args[args.length - 1]) {\n        const id = this.ids++;\n        const ack = args.pop();\n        this._registerAckCallback(id, ack);\n        packet.id = id;\n      }\n      const isTransportWritable = (_b = (_a = this.io.engine) === null || _a === void 0 ? void 0 : _a.transport) === null || _b === void 0 ? void 0 : _b.writable;\n      const isConnected = this.connected && !((_c = this.io.engine) === null || _c === void 0 ? void 0 : _c._hasPingExpired());\n      const discardPacket = this.flags.volatile && !isTransportWritable;\n      if (discardPacket) {} else if (isConnected) {\n        this.notifyOutgoingListeners(packet);\n        this.packet(packet);\n      } else {\n        this.sendBuffer.push(packet);\n      }\n      this.flags = {};\n      return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n      var _a;\n      const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n      if (timeout === undefined) {\n        this.acks[id] = ack;\n        return;\n      }\n      // @ts-ignore\n      const timer = this.io.setTimeoutFn(() => {\n        delete this.acks[id];\n        for (let i = 0; i < this.sendBuffer.length; i++) {\n          if (this.sendBuffer[i].id === id) {\n            this.sendBuffer.splice(i, 1);\n          }\n        }\n        ack.call(this, new Error(\"operation has timed out\"));\n      }, timeout);\n      const fn = (...args) => {\n        // @ts-ignore\n        this.io.clearTimeoutFn(timer);\n        ack.apply(this, args);\n      };\n      fn.withError = true;\n      this.acks[id] = fn;\n    }\n    /**\n     * Emits an event and waits for an acknowledgement\n     *\n     * @example\n     * // without timeout\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\n     *\n     * // with a specific timeout\n     * try {\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n     * } catch (err) {\n     *   // the server did not acknowledge the event in the given delay\n     * }\n     *\n     * @return a Promise that will be fulfilled when the server acknowledges the event\n     */\n    emitWithAck(ev, ...args) {\n      return new Promise((resolve, reject) => {\n        const fn = (arg1, arg2) => {\n          return arg1 ? reject(arg1) : resolve(arg2);\n        };\n        fn.withError = true;\n        args.push(fn);\n        this.emit(ev, ...args);\n      });\n    }\n    /**\n     * Add the packet to the queue.\n     * @param args\n     * @private\n     */\n    _addToQueue(args) {\n      let ack;\n      if (typeof args[args.length - 1] === \"function\") {\n        ack = args.pop();\n      }\n      const packet = {\n        id: this._queueSeq++,\n        tryCount: 0,\n        pending: false,\n        args,\n        flags: Object.assign({\n          fromQueue: true\n        }, this.flags)\n      };\n      args.push((err, ...responseArgs) => {\n        if (packet !== this._queue[0]) {\n          // the packet has already been acknowledged\n          return;\n        }\n        const hasError = err !== null;\n        if (hasError) {\n          if (packet.tryCount > this._opts.retries) {\n            this._queue.shift();\n            if (ack) {\n              ack(err);\n            }\n          }\n        } else {\n          this._queue.shift();\n          if (ack) {\n            ack(null, ...responseArgs);\n          }\n        }\n        packet.pending = false;\n        return this._drainQueue();\n      });\n      this._queue.push(packet);\n      this._drainQueue();\n    }\n    /**\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\n     * @param force - whether to resend a packet that has not been acknowledged yet\n     *\n     * @private\n     */\n    _drainQueue(force = false) {\n      if (!this.connected || this._queue.length === 0) {\n        return;\n      }\n      const packet = this._queue[0];\n      if (packet.pending && !force) {\n        return;\n      }\n      packet.pending = true;\n      packet.tryCount++;\n      this.flags = packet.flags;\n      this.emit.apply(this, packet.args);\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n      packet.nsp = this.nsp;\n      this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n      if (typeof this.auth == \"function\") {\n        this.auth(data => {\n          this._sendConnectPacket(data);\n        });\n      } else {\n        this._sendConnectPacket(this.auth);\n      }\n    }\n    /**\n     * Sends a CONNECT packet to initiate the Socket.IO session.\n     *\n     * @param data\n     * @private\n     */\n    _sendConnectPacket(data) {\n      this.packet({\n        type: _socketIoParser.PacketType.CONNECT,\n        data: this._pid ? Object.assign({\n          pid: this._pid,\n          offset: this._lastOffset\n        }, data) : data\n      });\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n      if (!this.connected) {\n        this.emitReserved(\"connect_error\", err);\n      }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n      this.connected = false;\n      delete this.id;\n      this.emitReserved(\"disconnect\", reason, description);\n      this._clearAcks();\n    }\n    /**\n     * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from\n     * the server.\n     *\n     * @private\n     */\n    _clearAcks() {\n      Object.keys(this.acks).forEach(id => {\n        const isBuffered = this.sendBuffer.some(packet => String(packet.id) === id);\n        if (!isBuffered) {\n          // note: handlers that do not accept an error as first argument are ignored here\n          const ack = this.acks[id];\n          delete this.acks[id];\n          if (ack.withError) {\n            ack.call(this, new Error(\"socket has been disconnected\"));\n          }\n        }\n      });\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n      const sameNamespace = packet.nsp === this.nsp;\n      if (!sameNamespace) return;\n      switch (packet.type) {\n        case _socketIoParser.PacketType.CONNECT:\n          if (packet.data && packet.data.sid) {\n            this.onconnect(packet.data.sid, packet.data.pid);\n          } else {\n            this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n          }\n          break;\n        case _socketIoParser.PacketType.EVENT:\n        case _socketIoParser.PacketType.BINARY_EVENT:\n          this.onevent(packet);\n          break;\n        case _socketIoParser.PacketType.ACK:\n        case _socketIoParser.PacketType.BINARY_ACK:\n          this.onack(packet);\n          break;\n        case _socketIoParser.PacketType.DISCONNECT:\n          this.ondisconnect();\n          break;\n        case _socketIoParser.PacketType.CONNECT_ERROR:\n          this.destroy();\n          const err = new Error(packet.data.message);\n          // @ts-ignore\n          err.data = packet.data.data;\n          this.emitReserved(\"connect_error\", err);\n          break;\n      }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n      const args = packet.data || [];\n      if (null != packet.id) {\n        args.push(this.ack(packet.id));\n      }\n      if (this.connected) {\n        this.emitEvent(args);\n      } else {\n        this.receiveBuffer.push(Object.freeze(args));\n      }\n    }\n    emitEvent(args) {\n      if (this._anyListeners && this._anyListeners.length) {\n        const listeners = this._anyListeners.slice();\n        for (const listener of listeners) {\n          listener.apply(this, args);\n        }\n      }\n      super.emit.apply(this, args);\n      if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n        this._lastOffset = args[args.length - 1];\n      }\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n      const self = this;\n      let sent = false;\n      return function (...args) {\n        // prevent double callbacks\n        if (sent) return;\n        sent = true;\n        self.packet({\n          type: _socketIoParser.PacketType.ACK,\n          id: id,\n          data: args\n        });\n      };\n    }\n    /**\n     * Called upon a server acknowledgement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n      const ack = this.acks[packet.id];\n      if (typeof ack !== \"function\") {\n        return;\n      }\n      delete this.acks[packet.id];\n      // @ts-ignore FIXME ack is incorrectly inferred as 'never'\n      if (ack.withError) {\n        packet.data.unshift(null);\n      }\n      // @ts-ignore\n      ack.apply(this, packet.data);\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id, pid) {\n      this.id = id;\n      this.recovered = pid && this._pid === pid;\n      this._pid = pid; // defined only if connection state recovery is enabled\n      this.connected = true;\n      this.emitBuffered();\n      this.emitReserved(\"connect\");\n      this._drainQueue(true);\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n      this.receiveBuffer.forEach(args => this.emitEvent(args));\n      this.receiveBuffer = [];\n      this.sendBuffer.forEach(packet => {\n        this.notifyOutgoingListeners(packet);\n        this.packet(packet);\n      });\n      this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n      this.destroy();\n      this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n      if (this.subs) {\n        // clean subscriptions to avoid reconnections\n        this.subs.forEach(subDestroy => subDestroy());\n        this.subs = undefined;\n      }\n      this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n     *\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   // console.log(reason); prints \"io client disconnect\"\n     * });\n     *\n     * socket.disconnect();\n     *\n     * @return self\n     */\n    disconnect() {\n      if (this.connected) {\n        this.packet({\n          type: _socketIoParser.PacketType.DISCONNECT\n        });\n      }\n      // remove socket from pool\n      this.destroy();\n      if (this.connected) {\n        // fire events\n        this.onclose(\"io client disconnect\");\n      }\n      return this;\n    }\n    /**\n     * Alias for {@link disconnect()}.\n     *\n     * @return self\n     */\n    close() {\n      return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * socket.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n    compress(compress) {\n      this.flags.compress = compress;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @example\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n     *\n     * @returns self\n     */\n    get volatile() {\n      this.flags.volatile = true;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * @example\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     *\n     * @returns self\n     */\n    timeout(timeout) {\n      this.flags.timeout = timeout;\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @example\n     * socket.onAny((event, ...args) => {\n     *   console.log(`got ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n      this._anyListeners.push(listener);\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * socket.prependAny((event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n      this._anyListeners.unshift(listener);\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * }\n     *\n     * socket.onAny(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAny(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAny();\n     *\n     * @param listener\n     */\n    offAny(listener) {\n      if (!this._anyListeners) {\n        return this;\n      }\n      if (listener) {\n        const listeners = this._anyListeners;\n        for (let i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyListeners = [];\n      }\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAny() {\n      return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n      this._anyOutgoingListeners.push(listener);\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n      this._anyOutgoingListeners.unshift(listener);\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * }\n     *\n     * socket.onAnyOutgoing(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAnyOutgoing(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAnyOutgoing();\n     *\n     * @param [listener] - the catch-all listener (optional)\n     */\n    offAnyOutgoing(listener) {\n      if (!this._anyOutgoingListeners) {\n        return this;\n      }\n      if (listener) {\n        const listeners = this._anyOutgoingListeners;\n        for (let i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyOutgoingListeners = [];\n      }\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAnyOutgoing() {\n      return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n      if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n        const listeners = this._anyOutgoingListeners.slice();\n        for (const listener of listeners) {\n          listener.apply(this, packet.data);\n        }\n      }\n    }\n  }\n});","lineCount":879,"map":[[7,2,41,0,"Object"],[7,8,41,0],[7,9,41,0,"defineProperty"],[7,23,41,0],[7,24,41,0,"exports"],[7,31,41,0],[8,4,41,0,"enumerable"],[8,14,41,0],[9,4,41,0,"get"],[9,7,41,0],[9,18,41,0,"get"],[9,19,41,0],[10,6,41,0],[10,13,41,0,"Socket"],[10,19,41,0],[11,4,41,0],[12,2,41,0],[13,2,1,0],[13,6,1,0,"_socketIoParser"],[13,21,1,0],[13,24,1,0,"require"],[13,31,1,0],[13,32,1,0,"_dependencyMap"],[13,46,1,0],[14,2,2,0],[14,6,2,0,"_onJs"],[14,11,2,0],[14,14,2,0,"require"],[14,21,2,0],[14,22,2,0,"_dependencyMap"],[14,36,2,0],[15,2,3,0],[15,6,3,0,"_socketIoComponentEmitter"],[15,31,3,0],[15,34,3,0,"require"],[15,41,3,0],[15,42,3,0,"_dependencyMap"],[15,56,3,0],[16,2,4,0],[17,0,5,0],[18,0,6,0],[19,0,7,0],[20,2,8,0],[20,8,8,6,"RESERVED_EVENTS"],[20,23,8,21],[20,26,8,24,"Object"],[20,32,8,30],[20,33,8,31,"freeze"],[20,39,8,37],[20,40,8,38],[21,4,9,4,"connect"],[21,11,9,11],[21,13,9,13],[21,14,9,14],[22,4,10,4,"connect_error"],[22,17,10,17],[22,19,10,19],[22,20,10,20],[23,4,11,4,"disconnect"],[23,14,11,14],[23,16,11,16],[23,17,11,17],[24,4,12,4,"disconnecting"],[24,17,12,17],[24,19,12,19],[24,20,12,20],[25,4,13,4],[26,4,14,4,"newListener"],[26,15,14,15],[26,17,14,17],[26,18,14,18],[27,4,15,4,"removeListener"],[27,18,15,18],[27,20,15,20],[28,2,16,0],[28,3,16,1],[28,4,16,2],[29,2,17,0],[30,0,18,0],[31,0,19,0],[32,0,20,0],[33,0,21,0],[34,0,22,0],[35,0,23,0],[36,0,24,0],[37,0,25,0],[38,0,26,0],[39,0,27,0],[40,0,28,0],[41,0,29,0],[42,0,30,0],[43,0,31,0],[44,0,32,0],[45,0,33,0],[46,0,34,0],[47,0,35,0],[48,0,36,0],[49,0,37,0],[50,0,38,0],[51,0,39,0],[52,0,40,0],[53,2,41,7],[53,8,41,13,"Socket"],[53,14,41,19],[53,23,41,28,"Emitter"],[53,48,41,35],[53,49,41,35,"Emitter"],[53,56,41,35],[53,57,41,36],[54,4,42,4],[55,0,43,0],[56,0,44,0],[57,4,45,4,"constructor"],[57,15,45,15,"constructor"],[57,16,45,16,"io"],[57,18,45,18],[57,20,45,20,"nsp"],[57,23,45,23],[57,25,45,25,"opts"],[57,29,45,29],[57,31,45,31],[58,6,46,8],[58,11,46,13],[58,12,46,14],[58,13,46,15],[59,6,47,8],[60,0,48,0],[61,0,49,0],[62,0,50,0],[63,0,51,0],[64,0,52,0],[65,0,53,0],[66,0,54,0],[67,0,55,0],[68,0,56,0],[69,0,57,0],[70,0,58,0],[71,0,59,0],[72,0,60,0],[73,6,61,8],[73,10,61,12],[73,11,61,13,"connected"],[73,20,61,22],[73,23,61,25],[73,28,61,30],[74,6,62,8],[75,0,63,0],[76,0,64,0],[77,0,65,0],[78,6,66,8],[78,10,66,12],[78,11,66,13,"recovered"],[78,20,66,22],[78,23,66,25],[78,28,66,30],[79,6,67,8],[80,0,68,0],[81,0,69,0],[82,6,70,8],[82,10,70,12],[82,11,70,13,"receiveBuffer"],[82,24,70,26],[82,27,70,29],[82,29,70,31],[83,6,71,8],[84,0,72,0],[85,0,73,0],[86,6,74,8],[86,10,74,12],[86,11,74,13,"sendBuffer"],[86,21,74,23],[86,24,74,26],[86,26,74,28],[87,6,75,8],[88,0,76,0],[89,0,77,0],[90,0,78,0],[91,0,79,0],[92,0,80,0],[93,6,81,8],[93,10,81,12],[93,11,81,13,"_queue"],[93,17,81,19],[93,20,81,22],[93,22,81,24],[94,6,82,8],[95,0,83,0],[96,0,84,0],[97,0,85,0],[98,6,86,8],[98,10,86,12],[98,11,86,13,"_queueSeq"],[98,20,86,22],[98,23,86,25],[98,24,86,26],[99,6,87,8],[99,10,87,12],[99,11,87,13,"ids"],[99,14,87,16],[99,17,87,19],[99,18,87,20],[100,6,88,8],[101,0,89,0],[102,0,90,0],[103,0,91,0],[104,0,92,0],[105,0,93,0],[106,0,94,0],[107,0,95,0],[108,0,96,0],[109,0,97,0],[110,0,98,0],[111,0,99,0],[112,0,100,0],[113,0,101,0],[114,0,102,0],[115,0,103,0],[116,0,104,0],[117,0,105,0],[118,0,106,0],[119,0,107,0],[120,0,108,0],[121,0,109,0],[122,0,110,0],[123,6,111,8],[123,10,111,12],[123,11,111,13,"acks"],[123,15,111,17],[123,18,111,20],[123,19,111,21],[123,20,111,22],[124,6,112,8],[124,10,112,12],[124,11,112,13,"flags"],[124,16,112,18],[124,19,112,21],[124,20,112,22],[124,21,112,23],[125,6,113,8],[125,10,113,12],[125,11,113,13,"io"],[125,13,113,15],[125,16,113,18,"io"],[125,18,113,20],[126,6,114,8],[126,10,114,12],[126,11,114,13,"nsp"],[126,14,114,16],[126,17,114,19,"nsp"],[126,20,114,22],[127,6,115,8],[127,10,115,12,"opts"],[127,14,115,16],[127,18,115,20,"opts"],[127,22,115,24],[127,23,115,25,"auth"],[127,27,115,29],[127,29,115,31],[128,8,116,12],[128,12,116,16],[128,13,116,17,"auth"],[128,17,116,21],[128,20,116,24,"opts"],[128,24,116,28],[128,25,116,29,"auth"],[128,29,116,33],[129,6,117,8],[130,6,118,8],[130,10,118,12],[130,11,118,13,"_opts"],[130,16,118,18],[130,19,118,21,"Object"],[130,25,118,27],[130,26,118,28,"assign"],[130,32,118,34],[130,33,118,35],[130,34,118,36],[130,35,118,37],[130,37,118,39,"opts"],[130,41,118,43],[130,42,118,44],[131,6,119,8],[131,10,119,12],[131,14,119,16],[131,15,119,17,"io"],[131,17,119,19],[131,18,119,20,"_autoConnect"],[131,30,119,32],[131,32,120,12],[131,36,120,16],[131,37,120,17,"open"],[131,41,120,21],[131,42,120,22],[131,43,120,23],[132,4,121,4],[133,4,122,4],[134,0,123,0],[135,0,124,0],[136,0,125,0],[137,0,126,0],[138,0,127,0],[139,0,128,0],[140,0,129,0],[141,0,130,0],[142,0,131,0],[143,0,132,0],[144,0,133,0],[145,0,134,0],[146,0,135,0],[147,4,136,4],[147,8,136,8,"disconnected"],[147,20,136,20,"disconnected"],[147,21,136,20],[147,23,136,23],[148,6,137,8],[148,13,137,15],[148,14,137,16],[148,18,137,20],[148,19,137,21,"connected"],[148,28,137,30],[149,4,138,4],[150,4,139,4],[151,0,140,0],[152,0,141,0],[153,0,142,0],[154,0,143,0],[155,4,144,4,"subEvents"],[155,13,144,13,"subEvents"],[155,14,144,13],[155,16,144,16],[156,6,145,8],[156,10,145,12],[156,14,145,16],[156,15,145,17,"subs"],[156,19,145,21],[156,21,146,12],[157,6,147,8],[157,12,147,14,"io"],[157,14,147,16],[157,17,147,19],[157,21,147,23],[157,22,147,24,"io"],[157,24,147,26],[158,6,148,8],[158,10,148,12],[158,11,148,13,"subs"],[158,15,148,17],[158,18,148,20],[158,19,149,12],[158,23,149,12,"on"],[158,28,149,14],[158,29,149,14,"on"],[158,31,149,14],[158,33,149,15,"io"],[158,35,149,17],[158,37,149,19],[158,43,149,25],[158,45,149,27],[158,49,149,31],[158,50,149,32,"onopen"],[158,56,149,38],[158,57,149,39,"bind"],[158,61,149,43],[158,62,149,44],[158,66,149,48],[158,67,149,49],[158,68,149,50],[158,70,150,12],[158,74,150,12,"on"],[158,79,150,14],[158,80,150,14,"on"],[158,82,150,14],[158,84,150,15,"io"],[158,86,150,17],[158,88,150,19],[158,96,150,27],[158,98,150,29],[158,102,150,33],[158,103,150,34,"onpacket"],[158,111,150,42],[158,112,150,43,"bind"],[158,116,150,47],[158,117,150,48],[158,121,150,52],[158,122,150,53],[158,123,150,54],[158,125,151,12],[158,129,151,12,"on"],[158,134,151,14],[158,135,151,14,"on"],[158,137,151,14],[158,139,151,15,"io"],[158,141,151,17],[158,143,151,19],[158,150,151,26],[158,152,151,28],[158,156,151,32],[158,157,151,33,"onerror"],[158,164,151,40],[158,165,151,41,"bind"],[158,169,151,45],[158,170,151,46],[158,174,151,50],[158,175,151,51],[158,176,151,52],[158,178,152,12],[158,182,152,12,"on"],[158,187,152,14],[158,188,152,14,"on"],[158,190,152,14],[158,192,152,15,"io"],[158,194,152,17],[158,196,152,19],[158,203,152,26],[158,205,152,28],[158,209,152,32],[158,210,152,33,"onclose"],[158,217,152,40],[158,218,152,41,"bind"],[158,222,152,45],[158,223,152,46],[158,227,152,50],[158,228,152,51],[158,229,152,52],[158,230,153,9],[159,4,154,4],[160,4,155,4],[161,0,156,0],[162,0,157,0],[163,0,158,0],[164,0,159,0],[165,0,160,0],[166,0,161,0],[167,0,162,0],[168,0,163,0],[169,0,164,0],[170,0,165,0],[171,0,166,0],[172,0,167,0],[173,0,168,0],[174,0,169,0],[175,0,170,0],[176,0,171,0],[177,4,172,4],[177,8,172,8,"active"],[177,14,172,14,"active"],[177,15,172,14],[177,17,172,17],[178,6,173,8],[178,13,173,15],[178,14,173,16],[178,15,173,17],[178,19,173,21],[178,20,173,22,"subs"],[178,24,173,26],[179,4,174,4],[180,4,175,4],[181,0,176,0],[182,0,177,0],[183,0,178,0],[184,0,179,0],[185,0,180,0],[186,0,181,0],[187,0,182,0],[188,0,183,0],[189,0,184,0],[190,4,185,4,"connect"],[190,11,185,11,"connect"],[190,12,185,11],[190,14,185,14],[191,6,186,8],[191,10,186,12],[191,14,186,16],[191,15,186,17,"connected"],[191,24,186,26],[191,26,187,12],[191,33,187,19],[191,37,187,23],[192,6,188,8],[192,10,188,12],[192,11,188,13,"subEvents"],[192,20,188,22],[192,21,188,23],[192,22,188,24],[193,6,189,8],[193,10,189,12],[193,11,189,13],[193,15,189,17],[193,16,189,18,"io"],[193,18,189,20],[193,19,189,21],[193,34,189,36],[193,35,189,37],[193,37,190,12],[193,41,190,16],[193,42,190,17,"io"],[193,44,190,19],[193,45,190,20,"open"],[193,49,190,24],[193,50,190,25],[193,51,190,26],[193,52,190,27],[193,53,190,28],[194,6,191,8],[194,10,191,12],[194,16,191,18],[194,21,191,23],[194,25,191,27],[194,26,191,28,"io"],[194,28,191,30],[194,29,191,31,"_readyState"],[194,40,191,42],[194,42,192,12],[194,46,192,16],[194,47,192,17,"onopen"],[194,53,192,23],[194,54,192,24],[194,55,192,25],[195,6,193,8],[195,13,193,15],[195,17,193,19],[196,4,194,4],[197,4,195,4],[198,0,196,0],[199,0,197,0],[200,4,198,4,"open"],[200,8,198,8,"open"],[200,9,198,8],[200,11,198,11],[201,6,199,8],[201,13,199,15],[201,17,199,19],[201,18,199,20,"connect"],[201,25,199,27],[201,26,199,28],[201,27,199,29],[202,4,200,4],[203,4,201,4],[204,0,202,0],[205,0,203,0],[206,0,204,0],[207,0,205,0],[208,0,206,0],[209,0,207,0],[210,0,208,0],[211,0,209,0],[212,0,210,0],[213,0,211,0],[214,0,212,0],[215,0,213,0],[216,0,214,0],[217,0,215,0],[218,4,216,4,"send"],[218,8,216,8,"send"],[218,9,216,9],[218,12,216,12,"args"],[218,16,216,16],[218,18,216,18],[219,6,217,8,"args"],[219,10,217,12],[219,11,217,13,"unshift"],[219,18,217,20],[219,19,217,21],[219,28,217,30],[219,29,217,31],[220,6,218,8],[220,10,218,12],[220,11,218,13,"emit"],[220,15,218,17],[220,16,218,18,"apply"],[220,21,218,23],[220,22,218,24],[220,26,218,28],[220,28,218,30,"args"],[220,32,218,34],[220,33,218,35],[221,6,219,8],[221,13,219,15],[221,17,219,19],[222,4,220,4],[223,4,221,4],[224,0,222,0],[225,0,223,0],[226,0,224,0],[227,0,225,0],[228,0,226,0],[229,0,227,0],[230,0,228,0],[231,0,229,0],[232,0,230,0],[233,0,231,0],[234,0,232,0],[235,0,233,0],[236,0,234,0],[237,0,235,0],[238,0,236,0],[239,0,237,0],[240,4,238,4,"emit"],[240,8,238,8,"emit"],[240,9,238,9,"ev"],[240,11,238,11],[240,13,238,13],[240,16,238,16,"args"],[240,20,238,20],[240,22,238,22],[241,6,239,8],[241,10,239,12,"_a"],[241,12,239,14],[241,14,239,16,"_b"],[241,16,239,18],[241,18,239,20,"_c"],[241,20,239,22],[242,6,240,8],[242,10,240,12,"RESERVED_EVENTS"],[242,25,240,27],[242,26,240,28,"hasOwnProperty"],[242,40,240,42],[242,41,240,43,"ev"],[242,43,240,45],[242,44,240,46],[242,46,240,48],[243,8,241,12],[243,14,241,18],[243,18,241,22,"Error"],[243,23,241,27],[243,24,241,28],[243,27,241,31],[243,30,241,34,"ev"],[243,32,241,36],[243,33,241,37,"toString"],[243,41,241,45],[243,42,241,46],[243,43,241,47],[243,46,241,50],[243,74,241,78],[243,75,241,79],[244,6,242,8],[245,6,243,8,"args"],[245,10,243,12],[245,11,243,13,"unshift"],[245,18,243,20],[245,19,243,21,"ev"],[245,21,243,23],[245,22,243,24],[246,6,244,8],[246,10,244,12],[246,14,244,16],[246,15,244,17,"_opts"],[246,20,244,22],[246,21,244,23,"retries"],[246,28,244,30],[246,32,244,34],[246,33,244,35],[246,37,244,39],[246,38,244,40,"flags"],[246,43,244,45],[246,44,244,46,"fromQueue"],[246,53,244,55],[246,57,244,59],[246,58,244,60],[246,62,244,64],[246,63,244,65,"flags"],[246,68,244,70],[246,69,244,71,"volatile"],[246,77,244,79],[246,79,244,81],[247,8,245,12],[247,12,245,16],[247,13,245,17,"_addToQueue"],[247,24,245,28],[247,25,245,29,"args"],[247,29,245,33],[247,30,245,34],[248,8,246,12],[248,15,246,19],[248,19,246,23],[249,6,247,8],[250,6,248,8],[250,12,248,14,"packet"],[250,18,248,20],[250,21,248,23],[251,8,249,12,"type"],[251,12,249,16],[251,14,249,18,"PacketType"],[251,29,249,28],[251,30,249,28,"PacketType"],[251,40,249,28],[251,41,249,29,"EVENT"],[251,46,249,34],[252,8,250,12,"data"],[252,12,250,16],[252,14,250,18,"args"],[253,6,251,8],[253,7,251,9],[254,6,252,8,"packet"],[254,12,252,14],[254,13,252,15,"options"],[254,20,252,22],[254,23,252,25],[254,24,252,26],[254,25,252,27],[255,6,253,8,"packet"],[255,12,253,14],[255,13,253,15,"options"],[255,20,253,22],[255,21,253,23,"compress"],[255,29,253,31],[255,32,253,34],[255,36,253,38],[255,37,253,39,"flags"],[255,42,253,44],[255,43,253,45,"compress"],[255,51,253,53],[255,56,253,58],[255,61,253,63],[256,6,254,8],[257,6,255,8],[257,10,255,12],[257,20,255,22],[257,25,255,27],[257,32,255,34,"args"],[257,36,255,38],[257,37,255,39,"args"],[257,41,255,43],[257,42,255,44,"length"],[257,48,255,50],[257,51,255,53],[257,52,255,54],[257,53,255,55],[257,55,255,57],[258,8,256,12],[258,14,256,18,"id"],[258,16,256,20],[258,19,256,23],[258,23,256,27],[258,24,256,28,"ids"],[258,27,256,31],[258,29,256,33],[259,8,257,12],[259,14,257,18,"ack"],[259,17,257,21],[259,20,257,24,"args"],[259,24,257,28],[259,25,257,29,"pop"],[259,28,257,32],[259,29,257,33],[259,30,257,34],[260,8,258,12],[260,12,258,16],[260,13,258,17,"_registerAckCallback"],[260,33,258,37],[260,34,258,38,"id"],[260,36,258,40],[260,38,258,42,"ack"],[260,41,258,45],[260,42,258,46],[261,8,259,12,"packet"],[261,14,259,18],[261,15,259,19,"id"],[261,17,259,21],[261,20,259,24,"id"],[261,22,259,26],[262,6,260,8],[263,6,261,8],[263,12,261,14,"isTransportWritable"],[263,31,261,33],[263,34,261,36],[263,35,261,37,"_b"],[263,37,261,39],[263,40,261,42],[263,41,261,43,"_a"],[263,43,261,45],[263,46,261,48],[263,50,261,52],[263,51,261,53,"io"],[263,53,261,55],[263,54,261,56,"engine"],[263,60,261,62],[263,66,261,68],[263,70,261,72],[263,74,261,76,"_a"],[263,76,261,78],[263,81,261,83],[263,86,261,88],[263,87,261,89],[263,90,261,92],[263,95,261,97],[263,96,261,98],[263,99,261,101,"_a"],[263,101,261,103],[263,102,261,104,"transport"],[263,111,261,113],[263,117,261,119],[263,121,261,123],[263,125,261,127,"_b"],[263,127,261,129],[263,132,261,134],[263,137,261,139],[263,138,261,140],[263,141,261,143],[263,146,261,148],[263,147,261,149],[263,150,261,152,"_b"],[263,152,261,154],[263,153,261,155,"writable"],[263,161,261,163],[264,6,262,8],[264,12,262,14,"isConnected"],[264,23,262,25],[264,26,262,28],[264,30,262,32],[264,31,262,33,"connected"],[264,40,262,42],[264,44,262,46],[264,46,262,48],[264,47,262,49,"_c"],[264,49,262,51],[264,52,262,54],[264,56,262,58],[264,57,262,59,"io"],[264,59,262,61],[264,60,262,62,"engine"],[264,66,262,68],[264,72,262,74],[264,76,262,78],[264,80,262,82,"_c"],[264,82,262,84],[264,87,262,89],[264,92,262,94],[264,93,262,95],[264,96,262,98],[264,101,262,103],[264,102,262,104],[264,105,262,107,"_c"],[264,107,262,109],[264,108,262,110,"_hasPingExpired"],[264,123,262,125],[264,124,262,126],[264,125,262,127],[264,126,262,128],[265,6,263,8],[265,12,263,14,"discardPacket"],[265,25,263,27],[265,28,263,30],[265,32,263,34],[265,33,263,35,"flags"],[265,38,263,40],[265,39,263,41,"volatile"],[265,47,263,49],[265,51,263,53],[265,52,263,54,"isTransportWritable"],[265,71,263,73],[266,6,264,8],[266,10,264,12,"discardPacket"],[266,23,264,25],[266,25,264,27],[266,26,265,8],[266,27,265,9],[266,33,266,13],[266,37,266,17,"isConnected"],[266,48,266,28],[266,50,266,30],[267,8,267,12],[267,12,267,16],[267,13,267,17,"notifyOutgoingListeners"],[267,36,267,40],[267,37,267,41,"packet"],[267,43,267,47],[267,44,267,48],[268,8,268,12],[268,12,268,16],[268,13,268,17,"packet"],[268,19,268,23],[268,20,268,24,"packet"],[268,26,268,30],[268,27,268,31],[269,6,269,8],[269,7,269,9],[269,13,270,13],[270,8,271,12],[270,12,271,16],[270,13,271,17,"sendBuffer"],[270,23,271,27],[270,24,271,28,"push"],[270,28,271,32],[270,29,271,33,"packet"],[270,35,271,39],[270,36,271,40],[271,6,272,8],[272,6,273,8],[272,10,273,12],[272,11,273,13,"flags"],[272,16,273,18],[272,19,273,21],[272,20,273,22],[272,21,273,23],[273,6,274,8],[273,13,274,15],[273,17,274,19],[274,4,275,4],[275,4,276,4],[276,0,277,0],[277,0,278,0],[278,4,279,4,"_registerAckCallback"],[278,24,279,24,"_registerAckCallback"],[278,25,279,25,"id"],[278,27,279,27],[278,29,279,29,"ack"],[278,32,279,32],[278,34,279,34],[279,6,280,8],[279,10,280,12,"_a"],[279,12,280,14],[280,6,281,8],[280,12,281,14,"timeout"],[280,19,281,21],[280,22,281,24],[280,23,281,25,"_a"],[280,25,281,27],[280,28,281,30],[280,32,281,34],[280,33,281,35,"flags"],[280,38,281,40],[280,39,281,41,"timeout"],[280,46,281,48],[280,52,281,54],[280,56,281,58],[280,60,281,62,"_a"],[280,62,281,64],[280,67,281,69],[280,72,281,74],[280,73,281,75],[280,76,281,78,"_a"],[280,78,281,80],[280,81,281,83],[280,85,281,87],[280,86,281,88,"_opts"],[280,91,281,93],[280,92,281,94,"ackTimeout"],[280,102,281,104],[281,6,282,8],[281,10,282,12,"timeout"],[281,17,282,19],[281,22,282,24,"undefined"],[281,31,282,33],[281,33,282,35],[282,8,283,12],[282,12,283,16],[282,13,283,17,"acks"],[282,17,283,21],[282,18,283,22,"id"],[282,20,283,24],[282,21,283,25],[282,24,283,28,"ack"],[282,27,283,31],[283,8,284,12],[284,6,285,8],[285,6,286,8],[286,6,287,8],[286,12,287,14,"timer"],[286,17,287,19],[286,20,287,22],[286,24,287,26],[286,25,287,27,"io"],[286,27,287,29],[286,28,287,30,"setTimeoutFn"],[286,40,287,42],[286,41,287,43],[286,47,287,49],[287,8,288,12],[287,15,288,19],[287,19,288,23],[287,20,288,24,"acks"],[287,24,288,28],[287,25,288,29,"id"],[287,27,288,31],[287,28,288,32],[288,8,289,12],[288,13,289,17],[288,17,289,21,"i"],[288,18,289,22],[288,21,289,25],[288,22,289,26],[288,24,289,28,"i"],[288,25,289,29],[288,28,289,32],[288,32,289,36],[288,33,289,37,"sendBuffer"],[288,43,289,47],[288,44,289,48,"length"],[288,50,289,54],[288,52,289,56,"i"],[288,53,289,57],[288,55,289,59],[288,57,289,61],[289,10,290,16],[289,14,290,20],[289,18,290,24],[289,19,290,25,"sendBuffer"],[289,29,290,35],[289,30,290,36,"i"],[289,31,290,37],[289,32,290,38],[289,33,290,39,"id"],[289,35,290,41],[289,40,290,46,"id"],[289,42,290,48],[289,44,290,50],[290,12,291,20],[290,16,291,24],[290,17,291,25,"sendBuffer"],[290,27,291,35],[290,28,291,36,"splice"],[290,34,291,42],[290,35,291,43,"i"],[290,36,291,44],[290,38,291,46],[290,39,291,47],[290,40,291,48],[291,10,292,16],[292,8,293,12],[293,8,294,12,"ack"],[293,11,294,15],[293,12,294,16,"call"],[293,16,294,20],[293,17,294,21],[293,21,294,25],[293,23,294,27],[293,27,294,31,"Error"],[293,32,294,36],[293,33,294,37],[293,58,294,62],[293,59,294,63],[293,60,294,64],[294,6,295,8],[294,7,295,9],[294,9,295,11,"timeout"],[294,16,295,18],[294,17,295,19],[295,6,296,8],[295,12,296,14,"fn"],[295,14,296,16],[295,17,296,19,"fn"],[295,18,296,20],[295,21,296,23,"args"],[295,25,296,27],[295,30,296,32],[296,8,297,12],[297,8,298,12],[297,12,298,16],[297,13,298,17,"io"],[297,15,298,19],[297,16,298,20,"clearTimeoutFn"],[297,30,298,34],[297,31,298,35,"timer"],[297,36,298,40],[297,37,298,41],[298,8,299,12,"ack"],[298,11,299,15],[298,12,299,16,"apply"],[298,17,299,21],[298,18,299,22],[298,22,299,26],[298,24,299,28,"args"],[298,28,299,32],[298,29,299,33],[299,6,300,8],[299,7,300,9],[300,6,301,8,"fn"],[300,8,301,10],[300,9,301,11,"withError"],[300,18,301,20],[300,21,301,23],[300,25,301,27],[301,6,302,8],[301,10,302,12],[301,11,302,13,"acks"],[301,15,302,17],[301,16,302,18,"id"],[301,18,302,20],[301,19,302,21],[301,22,302,24,"fn"],[301,24,302,26],[302,4,303,4],[303,4,304,4],[304,0,305,0],[305,0,306,0],[306,0,307,0],[307,0,308,0],[308,0,309,0],[309,0,310,0],[310,0,311,0],[311,0,312,0],[312,0,313,0],[313,0,314,0],[314,0,315,0],[315,0,316,0],[316,0,317,0],[317,0,318,0],[318,0,319,0],[319,4,320,4,"emitWithAck"],[319,15,320,15,"emitWithAck"],[319,16,320,16,"ev"],[319,18,320,18],[319,20,320,20],[319,23,320,23,"args"],[319,27,320,27],[319,29,320,29],[320,6,321,8],[320,13,321,15],[320,17,321,19,"Promise"],[320,24,321,26],[320,25,321,27],[320,26,321,28,"resolve"],[320,33,321,35],[320,35,321,37,"reject"],[320,41,321,43],[320,46,321,48],[321,8,322,12],[321,14,322,18,"fn"],[321,16,322,20],[321,19,322,23,"fn"],[321,20,322,24,"arg1"],[321,24,322,28],[321,26,322,30,"arg2"],[321,30,322,34],[321,35,322,39],[322,10,323,16],[322,17,323,23,"arg1"],[322,21,323,27],[322,24,323,30,"reject"],[322,30,323,36],[322,31,323,37,"arg1"],[322,35,323,41],[322,36,323,42],[322,39,323,45,"resolve"],[322,46,323,52],[322,47,323,53,"arg2"],[322,51,323,57],[322,52,323,58],[323,8,324,12],[323,9,324,13],[324,8,325,12,"fn"],[324,10,325,14],[324,11,325,15,"withError"],[324,20,325,24],[324,23,325,27],[324,27,325,31],[325,8,326,12,"args"],[325,12,326,16],[325,13,326,17,"push"],[325,17,326,21],[325,18,326,22,"fn"],[325,20,326,24],[325,21,326,25],[326,8,327,12],[326,12,327,16],[326,13,327,17,"emit"],[326,17,327,21],[326,18,327,22,"ev"],[326,20,327,24],[326,22,327,26],[326,25,327,29,"args"],[326,29,327,33],[326,30,327,34],[327,6,328,8],[327,7,328,9],[327,8,328,10],[328,4,329,4],[329,4,330,4],[330,0,331,0],[331,0,332,0],[332,0,333,0],[333,0,334,0],[334,4,335,4,"_addToQueue"],[334,15,335,15,"_addToQueue"],[334,16,335,16,"args"],[334,20,335,20],[334,22,335,22],[335,6,336,8],[335,10,336,12,"ack"],[335,13,336,15],[336,6,337,8],[336,10,337,12],[336,17,337,19,"args"],[336,21,337,23],[336,22,337,24,"args"],[336,26,337,28],[336,27,337,29,"length"],[336,33,337,35],[336,36,337,38],[336,37,337,39],[336,38,337,40],[336,43,337,45],[336,53,337,55],[336,55,337,57],[337,8,338,12,"ack"],[337,11,338,15],[337,14,338,18,"args"],[337,18,338,22],[337,19,338,23,"pop"],[337,22,338,26],[337,23,338,27],[337,24,338,28],[338,6,339,8],[339,6,340,8],[339,12,340,14,"packet"],[339,18,340,20],[339,21,340,23],[340,8,341,12,"id"],[340,10,341,14],[340,12,341,16],[340,16,341,20],[340,17,341,21,"_queueSeq"],[340,26,341,30],[340,28,341,32],[341,8,342,12,"tryCount"],[341,16,342,20],[341,18,342,22],[341,19,342,23],[342,8,343,12,"pending"],[342,15,343,19],[342,17,343,21],[342,22,343,26],[343,8,344,12,"args"],[343,12,344,16],[344,8,345,12,"flags"],[344,13,345,17],[344,15,345,19,"Object"],[344,21,345,25],[344,22,345,26,"assign"],[344,28,345,32],[344,29,345,33],[345,10,345,35,"fromQueue"],[345,19,345,44],[345,21,345,46],[346,8,345,51],[346,9,345,52],[346,11,345,54],[346,15,345,58],[346,16,345,59,"flags"],[346,21,345,64],[347,6,346,8],[347,7,346,9],[348,6,347,8,"args"],[348,10,347,12],[348,11,347,13,"push"],[348,15,347,17],[348,16,347,18],[348,17,347,19,"err"],[348,20,347,22],[348,22,347,24],[348,25,347,27,"responseArgs"],[348,37,347,39],[348,42,347,44],[349,8,348,12],[349,12,348,16,"packet"],[349,18,348,22],[349,23,348,27],[349,27,348,31],[349,28,348,32,"_queue"],[349,34,348,38],[349,35,348,39],[349,36,348,40],[349,37,348,41],[349,39,348,43],[350,10,349,16],[351,10,350,16],[352,8,351,12],[353,8,352,12],[353,14,352,18,"hasError"],[353,22,352,26],[353,25,352,29,"err"],[353,28,352,32],[353,33,352,37],[353,37,352,41],[354,8,353,12],[354,12,353,16,"hasError"],[354,20,353,24],[354,22,353,26],[355,10,354,16],[355,14,354,20,"packet"],[355,20,354,26],[355,21,354,27,"tryCount"],[355,29,354,35],[355,32,354,38],[355,36,354,42],[355,37,354,43,"_opts"],[355,42,354,48],[355,43,354,49,"retries"],[355,50,354,56],[355,52,354,58],[356,12,355,20],[356,16,355,24],[356,17,355,25,"_queue"],[356,23,355,31],[356,24,355,32,"shift"],[356,29,355,37],[356,30,355,38],[356,31,355,39],[357,12,356,20],[357,16,356,24,"ack"],[357,19,356,27],[357,21,356,29],[358,14,357,24,"ack"],[358,17,357,27],[358,18,357,28,"err"],[358,21,357,31],[358,22,357,32],[359,12,358,20],[360,10,359,16],[361,8,360,12],[361,9,360,13],[361,15,361,17],[362,10,362,16],[362,14,362,20],[362,15,362,21,"_queue"],[362,21,362,27],[362,22,362,28,"shift"],[362,27,362,33],[362,28,362,34],[362,29,362,35],[363,10,363,16],[363,14,363,20,"ack"],[363,17,363,23],[363,19,363,25],[364,12,364,20,"ack"],[364,15,364,23],[364,16,364,24],[364,20,364,28],[364,22,364,30],[364,25,364,33,"responseArgs"],[364,37,364,45],[364,38,364,46],[365,10,365,16],[366,8,366,12],[367,8,367,12,"packet"],[367,14,367,18],[367,15,367,19,"pending"],[367,22,367,26],[367,25,367,29],[367,30,367,34],[368,8,368,12],[368,15,368,19],[368,19,368,23],[368,20,368,24,"_drainQueue"],[368,31,368,35],[368,32,368,36],[368,33,368,37],[369,6,369,8],[369,7,369,9],[369,8,369,10],[370,6,370,8],[370,10,370,12],[370,11,370,13,"_queue"],[370,17,370,19],[370,18,370,20,"push"],[370,22,370,24],[370,23,370,25,"packet"],[370,29,370,31],[370,30,370,32],[371,6,371,8],[371,10,371,12],[371,11,371,13,"_drainQueue"],[371,22,371,24],[371,23,371,25],[371,24,371,26],[372,4,372,4],[373,4,373,4],[374,0,374,0],[375,0,375,0],[376,0,376,0],[377,0,377,0],[378,0,378,0],[379,4,379,4,"_drainQueue"],[379,15,379,15,"_drainQueue"],[379,16,379,16,"force"],[379,21,379,21],[379,24,379,24],[379,29,379,29],[379,31,379,31],[380,6,380,8],[380,10,380,12],[380,11,380,13],[380,15,380,17],[380,16,380,18,"connected"],[380,25,380,27],[380,29,380,31],[380,33,380,35],[380,34,380,36,"_queue"],[380,40,380,42],[380,41,380,43,"length"],[380,47,380,49],[380,52,380,54],[380,53,380,55],[380,55,380,57],[381,8,381,12],[382,6,382,8],[383,6,383,8],[383,12,383,14,"packet"],[383,18,383,20],[383,21,383,23],[383,25,383,27],[383,26,383,28,"_queue"],[383,32,383,34],[383,33,383,35],[383,34,383,36],[383,35,383,37],[384,6,384,8],[384,10,384,12,"packet"],[384,16,384,18],[384,17,384,19,"pending"],[384,24,384,26],[384,28,384,30],[384,29,384,31,"force"],[384,34,384,36],[384,36,384,38],[385,8,385,12],[386,6,386,8],[387,6,387,8,"packet"],[387,12,387,14],[387,13,387,15,"pending"],[387,20,387,22],[387,23,387,25],[387,27,387,29],[388,6,388,8,"packet"],[388,12,388,14],[388,13,388,15,"tryCount"],[388,21,388,23],[388,23,388,25],[389,6,389,8],[389,10,389,12],[389,11,389,13,"flags"],[389,16,389,18],[389,19,389,21,"packet"],[389,25,389,27],[389,26,389,28,"flags"],[389,31,389,33],[390,6,390,8],[390,10,390,12],[390,11,390,13,"emit"],[390,15,390,17],[390,16,390,18,"apply"],[390,21,390,23],[390,22,390,24],[390,26,390,28],[390,28,390,30,"packet"],[390,34,390,36],[390,35,390,37,"args"],[390,39,390,41],[390,40,390,42],[391,4,391,4],[392,4,392,4],[393,0,393,0],[394,0,394,0],[395,0,395,0],[396,0,396,0],[397,0,397,0],[398,4,398,4,"packet"],[398,10,398,10,"packet"],[398,11,398,11,"packet"],[398,17,398,17],[398,19,398,19],[399,6,399,8,"packet"],[399,12,399,14],[399,13,399,15,"nsp"],[399,16,399,18],[399,19,399,21],[399,23,399,25],[399,24,399,26,"nsp"],[399,27,399,29],[400,6,400,8],[400,10,400,12],[400,11,400,13,"io"],[400,13,400,15],[400,14,400,16,"_packet"],[400,21,400,23],[400,22,400,24,"packet"],[400,28,400,30],[400,29,400,31],[401,4,401,4],[402,4,402,4],[403,0,403,0],[404,0,404,0],[405,0,405,0],[406,0,406,0],[407,4,407,4,"onopen"],[407,10,407,10,"onopen"],[407,11,407,10],[407,13,407,13],[408,6,408,8],[408,10,408,12],[408,17,408,19],[408,21,408,23],[408,22,408,24,"auth"],[408,26,408,28],[408,30,408,32],[408,40,408,42],[408,42,408,44],[409,8,409,12],[409,12,409,16],[409,13,409,17,"auth"],[409,17,409,21],[409,18,409,23,"data"],[409,22,409,27],[409,26,409,32],[410,10,410,16],[410,14,410,20],[410,15,410,21,"_sendConnectPacket"],[410,33,410,39],[410,34,410,40,"data"],[410,38,410,44],[410,39,410,45],[411,8,411,12],[411,9,411,13],[411,10,411,14],[412,6,412,8],[412,7,412,9],[412,13,413,13],[413,8,414,12],[413,12,414,16],[413,13,414,17,"_sendConnectPacket"],[413,31,414,35],[413,32,414,36],[413,36,414,40],[413,37,414,41,"auth"],[413,41,414,45],[413,42,414,46],[414,6,415,8],[415,4,416,4],[416,4,417,4],[417,0,418,0],[418,0,419,0],[419,0,420,0],[420,0,421,0],[421,0,422,0],[422,4,423,4,"_sendConnectPacket"],[422,22,423,22,"_sendConnectPacket"],[422,23,423,23,"data"],[422,27,423,27],[422,29,423,29],[423,6,424,8],[423,10,424,12],[423,11,424,13,"packet"],[423,17,424,19],[423,18,424,20],[424,8,425,12,"type"],[424,12,425,16],[424,14,425,18,"PacketType"],[424,29,425,28],[424,30,425,28,"PacketType"],[424,40,425,28],[424,41,425,29,"CONNECT"],[424,48,425,36],[425,8,426,12,"data"],[425,12,426,16],[425,14,426,18],[425,18,426,22],[425,19,426,23,"_pid"],[425,23,426,27],[425,26,427,18,"Object"],[425,32,427,24],[425,33,427,25,"assign"],[425,39,427,31],[425,40,427,32],[426,10,427,34,"pid"],[426,13,427,37],[426,15,427,39],[426,19,427,43],[426,20,427,44,"_pid"],[426,24,427,48],[427,10,427,50,"offset"],[427,16,427,56],[427,18,427,58],[427,22,427,62],[427,23,427,63,"_lastOffset"],[428,8,427,75],[428,9,427,76],[428,11,427,78,"data"],[428,15,427,82],[428,16,427,83],[428,19,428,18,"data"],[429,6,429,8],[429,7,429,9],[429,8,429,10],[430,4,430,4],[431,4,431,4],[432,0,432,0],[433,0,433,0],[434,0,434,0],[435,0,435,0],[436,0,436,0],[437,4,437,4,"onerror"],[437,11,437,11,"onerror"],[437,12,437,12,"err"],[437,15,437,15],[437,17,437,17],[438,6,438,8],[438,10,438,12],[438,11,438,13],[438,15,438,17],[438,16,438,18,"connected"],[438,25,438,27],[438,27,438,29],[439,8,439,12],[439,12,439,16],[439,13,439,17,"emitReserved"],[439,25,439,29],[439,26,439,30],[439,41,439,45],[439,43,439,47,"err"],[439,46,439,50],[439,47,439,51],[440,6,440,8],[441,4,441,4],[442,4,442,4],[443,0,443,0],[444,0,444,0],[445,0,445,0],[446,0,446,0],[447,0,447,0],[448,0,448,0],[449,4,449,4,"onclose"],[449,11,449,11,"onclose"],[449,12,449,12,"reason"],[449,18,449,18],[449,20,449,20,"description"],[449,31,449,31],[449,33,449,33],[450,6,450,8],[450,10,450,12],[450,11,450,13,"connected"],[450,20,450,22],[450,23,450,25],[450,28,450,30],[451,6,451,8],[451,13,451,15],[451,17,451,19],[451,18,451,20,"id"],[451,20,451,22],[452,6,452,8],[452,10,452,12],[452,11,452,13,"emitReserved"],[452,23,452,25],[452,24,452,26],[452,36,452,38],[452,38,452,40,"reason"],[452,44,452,46],[452,46,452,48,"description"],[452,57,452,59],[452,58,452,60],[453,6,453,8],[453,10,453,12],[453,11,453,13,"_clearAcks"],[453,21,453,23],[453,22,453,24],[453,23,453,25],[454,4,454,4],[455,4,455,4],[456,0,456,0],[457,0,457,0],[458,0,458,0],[459,0,459,0],[460,0,460,0],[461,4,461,4,"_clearAcks"],[461,14,461,14,"_clearAcks"],[461,15,461,14],[461,17,461,17],[462,6,462,8,"Object"],[462,12,462,14],[462,13,462,15,"keys"],[462,17,462,19],[462,18,462,20],[462,22,462,24],[462,23,462,25,"acks"],[462,27,462,29],[462,28,462,30],[462,29,462,31,"forEach"],[462,36,462,38],[462,37,462,40,"id"],[462,39,462,42],[462,43,462,47],[463,8,463,12],[463,14,463,18,"isBuffered"],[463,24,463,28],[463,27,463,31],[463,31,463,35],[463,32,463,36,"sendBuffer"],[463,42,463,46],[463,43,463,47,"some"],[463,47,463,51],[463,48,463,53,"packet"],[463,54,463,59],[463,58,463,64,"String"],[463,64,463,70],[463,65,463,71,"packet"],[463,71,463,77],[463,72,463,78,"id"],[463,74,463,80],[463,75,463,81],[463,80,463,86,"id"],[463,82,463,88],[463,83,463,89],[464,8,464,12],[464,12,464,16],[464,13,464,17,"isBuffered"],[464,23,464,27],[464,25,464,29],[465,10,465,16],[466,10,466,16],[466,16,466,22,"ack"],[466,19,466,25],[466,22,466,28],[466,26,466,32],[466,27,466,33,"acks"],[466,31,466,37],[466,32,466,38,"id"],[466,34,466,40],[466,35,466,41],[467,10,467,16],[467,17,467,23],[467,21,467,27],[467,22,467,28,"acks"],[467,26,467,32],[467,27,467,33,"id"],[467,29,467,35],[467,30,467,36],[468,10,468,16],[468,14,468,20,"ack"],[468,17,468,23],[468,18,468,24,"withError"],[468,27,468,33],[468,29,468,35],[469,12,469,20,"ack"],[469,15,469,23],[469,16,469,24,"call"],[469,20,469,28],[469,21,469,29],[469,25,469,33],[469,27,469,35],[469,31,469,39,"Error"],[469,36,469,44],[469,37,469,45],[469,67,469,75],[469,68,469,76],[469,69,469,77],[470,10,470,16],[471,8,471,12],[472,6,472,8],[472,7,472,9],[472,8,472,10],[473,4,473,4],[474,4,474,4],[475,0,475,0],[476,0,476,0],[477,0,477,0],[478,0,478,0],[479,0,479,0],[480,4,480,4,"onpacket"],[480,12,480,12,"onpacket"],[480,13,480,13,"packet"],[480,19,480,19],[480,21,480,21],[481,6,481,8],[481,12,481,14,"sameNamespace"],[481,25,481,27],[481,28,481,30,"packet"],[481,34,481,36],[481,35,481,37,"nsp"],[481,38,481,40],[481,43,481,45],[481,47,481,49],[481,48,481,50,"nsp"],[481,51,481,53],[482,6,482,8],[482,10,482,12],[482,11,482,13,"sameNamespace"],[482,24,482,26],[482,26,483,12],[483,6,484,8],[483,14,484,16,"packet"],[483,20,484,22],[483,21,484,23,"type"],[483,25,484,27],[484,8,485,12],[484,13,485,17,"PacketType"],[484,28,485,27],[484,29,485,27,"PacketType"],[484,39,485,27],[484,40,485,28,"CONNECT"],[484,47,485,35],[485,10,486,16],[485,14,486,20,"packet"],[485,20,486,26],[485,21,486,27,"data"],[485,25,486,31],[485,29,486,35,"packet"],[485,35,486,41],[485,36,486,42,"data"],[485,40,486,46],[485,41,486,47,"sid"],[485,44,486,50],[485,46,486,52],[486,12,487,20],[486,16,487,24],[486,17,487,25,"onconnect"],[486,26,487,34],[486,27,487,35,"packet"],[486,33,487,41],[486,34,487,42,"data"],[486,38,487,46],[486,39,487,47,"sid"],[486,42,487,50],[486,44,487,52,"packet"],[486,50,487,58],[486,51,487,59,"data"],[486,55,487,63],[486,56,487,64,"pid"],[486,59,487,67],[486,60,487,68],[487,10,488,16],[487,11,488,17],[487,17,489,21],[488,12,490,20],[488,16,490,24],[488,17,490,25,"emitReserved"],[488,29,490,37],[488,30,490,38],[488,45,490,53],[488,47,490,55],[488,51,490,59,"Error"],[488,56,490,64],[488,57,490,65],[488,244,490,252],[488,245,490,253],[488,246,490,254],[489,10,491,16],[490,10,492,16],[491,8,493,12],[491,13,493,17,"PacketType"],[491,28,493,27],[491,29,493,27,"PacketType"],[491,39,493,27],[491,40,493,28,"EVENT"],[491,45,493,33],[492,8,494,12],[492,13,494,17,"PacketType"],[492,28,494,27],[492,29,494,27,"PacketType"],[492,39,494,27],[492,40,494,28,"BINARY_EVENT"],[492,52,494,40],[493,10,495,16],[493,14,495,20],[493,15,495,21,"onevent"],[493,22,495,28],[493,23,495,29,"packet"],[493,29,495,35],[493,30,495,36],[494,10,496,16],[495,8,497,12],[495,13,497,17,"PacketType"],[495,28,497,27],[495,29,497,27,"PacketType"],[495,39,497,27],[495,40,497,28,"ACK"],[495,43,497,31],[496,8,498,12],[496,13,498,17,"PacketType"],[496,28,498,27],[496,29,498,27,"PacketType"],[496,39,498,27],[496,40,498,28,"BINARY_ACK"],[496,50,498,38],[497,10,499,16],[497,14,499,20],[497,15,499,21,"onack"],[497,20,499,26],[497,21,499,27,"packet"],[497,27,499,33],[497,28,499,34],[498,10,500,16],[499,8,501,12],[499,13,501,17,"PacketType"],[499,28,501,27],[499,29,501,27,"PacketType"],[499,39,501,27],[499,40,501,28,"DISCONNECT"],[499,50,501,38],[500,10,502,16],[500,14,502,20],[500,15,502,21,"ondisconnect"],[500,27,502,33],[500,28,502,34],[500,29,502,35],[501,10,503,16],[502,8,504,12],[502,13,504,17,"PacketType"],[502,28,504,27],[502,29,504,27,"PacketType"],[502,39,504,27],[502,40,504,28,"CONNECT_ERROR"],[502,53,504,41],[503,10,505,16],[503,14,505,20],[503,15,505,21,"destroy"],[503,22,505,28],[503,23,505,29],[503,24,505,30],[504,10,506,16],[504,16,506,22,"err"],[504,19,506,25],[504,22,506,28],[504,26,506,32,"Error"],[504,31,506,37],[504,32,506,38,"packet"],[504,38,506,44],[504,39,506,45,"data"],[504,43,506,49],[504,44,506,50,"message"],[504,51,506,57],[504,52,506,58],[505,10,507,16],[506,10,508,16,"err"],[506,13,508,19],[506,14,508,20,"data"],[506,18,508,24],[506,21,508,27,"packet"],[506,27,508,33],[506,28,508,34,"data"],[506,32,508,38],[506,33,508,39,"data"],[506,37,508,43],[507,10,509,16],[507,14,509,20],[507,15,509,21,"emitReserved"],[507,27,509,33],[507,28,509,34],[507,43,509,49],[507,45,509,51,"err"],[507,48,509,54],[507,49,509,55],[508,10,510,16],[509,6,511,8],[510,4,512,4],[511,4,513,4],[512,0,514,0],[513,0,515,0],[514,0,516,0],[515,0,517,0],[516,0,518,0],[517,4,519,4,"onevent"],[517,11,519,11,"onevent"],[517,12,519,12,"packet"],[517,18,519,18],[517,20,519,20],[518,6,520,8],[518,12,520,14,"args"],[518,16,520,18],[518,19,520,21,"packet"],[518,25,520,27],[518,26,520,28,"data"],[518,30,520,32],[518,34,520,36],[518,36,520,38],[519,6,521,8],[519,10,521,12],[519,14,521,16],[519,18,521,20,"packet"],[519,24,521,26],[519,25,521,27,"id"],[519,27,521,29],[519,29,521,31],[520,8,522,12,"args"],[520,12,522,16],[520,13,522,17,"push"],[520,17,522,21],[520,18,522,22],[520,22,522,26],[520,23,522,27,"ack"],[520,26,522,30],[520,27,522,31,"packet"],[520,33,522,37],[520,34,522,38,"id"],[520,36,522,40],[520,37,522,41],[520,38,522,42],[521,6,523,8],[522,6,524,8],[522,10,524,12],[522,14,524,16],[522,15,524,17,"connected"],[522,24,524,26],[522,26,524,28],[523,8,525,12],[523,12,525,16],[523,13,525,17,"emitEvent"],[523,22,525,26],[523,23,525,27,"args"],[523,27,525,31],[523,28,525,32],[524,6,526,8],[524,7,526,9],[524,13,527,13],[525,8,528,12],[525,12,528,16],[525,13,528,17,"receiveBuffer"],[525,26,528,30],[525,27,528,31,"push"],[525,31,528,35],[525,32,528,36,"Object"],[525,38,528,42],[525,39,528,43,"freeze"],[525,45,528,49],[525,46,528,50,"args"],[525,50,528,54],[525,51,528,55],[525,52,528,56],[526,6,529,8],[527,4,530,4],[528,4,531,4,"emitEvent"],[528,13,531,13,"emitEvent"],[528,14,531,14,"args"],[528,18,531,18],[528,20,531,20],[529,6,532,8],[529,10,532,12],[529,14,532,16],[529,15,532,17,"_anyListeners"],[529,28,532,30],[529,32,532,34],[529,36,532,38],[529,37,532,39,"_anyListeners"],[529,50,532,52],[529,51,532,53,"length"],[529,57,532,59],[529,59,532,61],[530,8,533,12],[530,14,533,18,"listeners"],[530,23,533,27],[530,26,533,30],[530,30,533,34],[530,31,533,35,"_anyListeners"],[530,44,533,48],[530,45,533,49,"slice"],[530,50,533,54],[530,51,533,55],[530,52,533,56],[531,8,534,12],[531,13,534,17],[531,19,534,23,"listener"],[531,27,534,31],[531,31,534,35,"listeners"],[531,40,534,44],[531,42,534,46],[532,10,535,16,"listener"],[532,18,535,24],[532,19,535,25,"apply"],[532,24,535,30],[532,25,535,31],[532,29,535,35],[532,31,535,37,"args"],[532,35,535,41],[532,36,535,42],[533,8,536,12],[534,6,537,8],[535,6,538,8],[535,11,538,13],[535,12,538,14,"emit"],[535,16,538,18],[535,17,538,19,"apply"],[535,22,538,24],[535,23,538,25],[535,27,538,29],[535,29,538,31,"args"],[535,33,538,35],[535,34,538,36],[536,6,539,8],[536,10,539,12],[536,14,539,16],[536,15,539,17,"_pid"],[536,19,539,21],[536,23,539,25,"args"],[536,27,539,29],[536,28,539,30,"length"],[536,34,539,36],[536,38,539,40],[536,45,539,47,"args"],[536,49,539,51],[536,50,539,52,"args"],[536,54,539,56],[536,55,539,57,"length"],[536,61,539,63],[536,64,539,66],[536,65,539,67],[536,66,539,68],[536,71,539,73],[536,79,539,81],[536,81,539,83],[537,8,540,12],[537,12,540,16],[537,13,540,17,"_lastOffset"],[537,24,540,28],[537,27,540,31,"args"],[537,31,540,35],[537,32,540,36,"args"],[537,36,540,40],[537,37,540,41,"length"],[537,43,540,47],[537,46,540,50],[537,47,540,51],[537,48,540,52],[538,6,541,8],[539,4,542,4],[540,4,543,4],[541,0,544,0],[542,0,545,0],[543,0,546,0],[544,0,547,0],[545,4,548,4,"ack"],[545,7,548,7,"ack"],[545,8,548,8,"id"],[545,10,548,10],[545,12,548,12],[546,6,549,8],[546,12,549,14,"self"],[546,16,549,18],[546,19,549,21],[546,23,549,25],[547,6,550,8],[547,10,550,12,"sent"],[547,14,550,16],[547,17,550,19],[547,22,550,24],[548,6,551,8],[548,13,551,15],[548,23,551,25],[548,26,551,28,"args"],[548,30,551,32],[548,32,551,34],[549,8,552,12],[550,8,553,12],[550,12,553,16,"sent"],[550,16,553,20],[550,18,554,16],[551,8,555,12,"sent"],[551,12,555,16],[551,15,555,19],[551,19,555,23],[552,8,556,12,"self"],[552,12,556,16],[552,13,556,17,"packet"],[552,19,556,23],[552,20,556,24],[553,10,557,16,"type"],[553,14,557,20],[553,16,557,22,"PacketType"],[553,31,557,32],[553,32,557,32,"PacketType"],[553,42,557,32],[553,43,557,33,"ACK"],[553,46,557,36],[554,10,558,16,"id"],[554,12,558,18],[554,14,558,20,"id"],[554,16,558,22],[555,10,559,16,"data"],[555,14,559,20],[555,16,559,22,"args"],[556,8,560,12],[556,9,560,13],[556,10,560,14],[557,6,561,8],[557,7,561,9],[558,4,562,4],[559,4,563,4],[560,0,564,0],[561,0,565,0],[562,0,566,0],[563,0,567,0],[564,0,568,0],[565,4,569,4,"onack"],[565,9,569,9,"onack"],[565,10,569,10,"packet"],[565,16,569,16],[565,18,569,18],[566,6,570,8],[566,12,570,14,"ack"],[566,15,570,17],[566,18,570,20],[566,22,570,24],[566,23,570,25,"acks"],[566,27,570,29],[566,28,570,30,"packet"],[566,34,570,36],[566,35,570,37,"id"],[566,37,570,39],[566,38,570,40],[567,6,571,8],[567,10,571,12],[567,17,571,19,"ack"],[567,20,571,22],[567,25,571,27],[567,35,571,37],[567,37,571,39],[568,8,572,12],[569,6,573,8],[570,6,574,8],[570,13,574,15],[570,17,574,19],[570,18,574,20,"acks"],[570,22,574,24],[570,23,574,25,"packet"],[570,29,574,31],[570,30,574,32,"id"],[570,32,574,34],[570,33,574,35],[571,6,575,8],[572,6,576,8],[572,10,576,12,"ack"],[572,13,576,15],[572,14,576,16,"withError"],[572,23,576,25],[572,25,576,27],[573,8,577,12,"packet"],[573,14,577,18],[573,15,577,19,"data"],[573,19,577,23],[573,20,577,24,"unshift"],[573,27,577,31],[573,28,577,32],[573,32,577,36],[573,33,577,37],[574,6,578,8],[575,6,579,8],[576,6,580,8,"ack"],[576,9,580,11],[576,10,580,12,"apply"],[576,15,580,17],[576,16,580,18],[576,20,580,22],[576,22,580,24,"packet"],[576,28,580,30],[576,29,580,31,"data"],[576,33,580,35],[576,34,580,36],[577,4,581,4],[578,4,582,4],[579,0,583,0],[580,0,584,0],[581,0,585,0],[582,0,586,0],[583,4,587,4,"onconnect"],[583,13,587,13,"onconnect"],[583,14,587,14,"id"],[583,16,587,16],[583,18,587,18,"pid"],[583,21,587,21],[583,23,587,23],[584,6,588,8],[584,10,588,12],[584,11,588,13,"id"],[584,13,588,15],[584,16,588,18,"id"],[584,18,588,20],[585,6,589,8],[585,10,589,12],[585,11,589,13,"recovered"],[585,20,589,22],[585,23,589,25,"pid"],[585,26,589,28],[585,30,589,32],[585,34,589,36],[585,35,589,37,"_pid"],[585,39,589,41],[585,44,589,46,"pid"],[585,47,589,49],[586,6,590,8],[586,10,590,12],[586,11,590,13,"_pid"],[586,15,590,17],[586,18,590,20,"pid"],[586,21,590,23],[586,22,590,24],[586,23,590,25],[587,6,591,8],[587,10,591,12],[587,11,591,13,"connected"],[587,20,591,22],[587,23,591,25],[587,27,591,29],[588,6,592,8],[588,10,592,12],[588,11,592,13,"emitBuffered"],[588,23,592,25],[588,24,592,26],[588,25,592,27],[589,6,593,8],[589,10,593,12],[589,11,593,13,"emitReserved"],[589,23,593,25],[589,24,593,26],[589,33,593,35],[589,34,593,36],[590,6,594,8],[590,10,594,12],[590,11,594,13,"_drainQueue"],[590,22,594,24],[590,23,594,25],[590,27,594,29],[590,28,594,30],[591,4,595,4],[592,4,596,4],[593,0,597,0],[594,0,598,0],[595,0,599,0],[596,0,600,0],[597,4,601,4,"emitBuffered"],[597,16,601,16,"emitBuffered"],[597,17,601,16],[597,19,601,19],[598,6,602,8],[598,10,602,12],[598,11,602,13,"receiveBuffer"],[598,24,602,26],[598,25,602,27,"forEach"],[598,32,602,34],[598,33,602,36,"args"],[598,37,602,40],[598,41,602,45],[598,45,602,49],[598,46,602,50,"emitEvent"],[598,55,602,59],[598,56,602,60,"args"],[598,60,602,64],[598,61,602,65],[598,62,602,66],[599,6,603,8],[599,10,603,12],[599,11,603,13,"receiveBuffer"],[599,24,603,26],[599,27,603,29],[599,29,603,31],[600,6,604,8],[600,10,604,12],[600,11,604,13,"sendBuffer"],[600,21,604,23],[600,22,604,24,"forEach"],[600,29,604,31],[600,30,604,33,"packet"],[600,36,604,39],[600,40,604,44],[601,8,605,12],[601,12,605,16],[601,13,605,17,"notifyOutgoingListeners"],[601,36,605,40],[601,37,605,41,"packet"],[601,43,605,47],[601,44,605,48],[602,8,606,12],[602,12,606,16],[602,13,606,17,"packet"],[602,19,606,23],[602,20,606,24,"packet"],[602,26,606,30],[602,27,606,31],[603,6,607,8],[603,7,607,9],[603,8,607,10],[604,6,608,8],[604,10,608,12],[604,11,608,13,"sendBuffer"],[604,21,608,23],[604,24,608,26],[604,26,608,28],[605,4,609,4],[606,4,610,4],[607,0,611,0],[608,0,612,0],[609,0,613,0],[610,0,614,0],[611,4,615,4,"ondisconnect"],[611,16,615,16,"ondisconnect"],[611,17,615,16],[611,19,615,19],[612,6,616,8],[612,10,616,12],[612,11,616,13,"destroy"],[612,18,616,20],[612,19,616,21],[612,20,616,22],[613,6,617,8],[613,10,617,12],[613,11,617,13,"onclose"],[613,18,617,20],[613,19,617,21],[613,41,617,43],[613,42,617,44],[614,4,618,4],[615,4,619,4],[616,0,620,0],[617,0,621,0],[618,0,622,0],[619,0,623,0],[620,0,624,0],[621,0,625,0],[622,4,626,4,"destroy"],[622,11,626,11,"destroy"],[622,12,626,11],[622,14,626,14],[623,6,627,8],[623,10,627,12],[623,14,627,16],[623,15,627,17,"subs"],[623,19,627,21],[623,21,627,23],[624,8,628,12],[625,8,629,12],[625,12,629,16],[625,13,629,17,"subs"],[625,17,629,21],[625,18,629,22,"forEach"],[625,25,629,29],[625,26,629,31,"subDestroy"],[625,36,629,41],[625,40,629,46,"subDestroy"],[625,50,629,56],[625,51,629,57],[625,52,629,58],[625,53,629,59],[626,8,630,12],[626,12,630,16],[626,13,630,17,"subs"],[626,17,630,21],[626,20,630,24,"undefined"],[626,29,630,33],[627,6,631,8],[628,6,632,8],[628,10,632,12],[628,11,632,13,"io"],[628,13,632,15],[628,14,632,16],[628,24,632,26],[628,25,632,27],[628,26,632,28],[628,30,632,32],[628,31,632,33],[629,4,633,4],[630,4,634,4],[631,0,635,0],[632,0,636,0],[633,0,637,0],[634,0,638,0],[635,0,639,0],[636,0,640,0],[637,0,641,0],[638,0,642,0],[639,0,643,0],[640,0,644,0],[641,0,645,0],[642,0,646,0],[643,0,647,0],[644,0,648,0],[645,0,649,0],[646,4,650,4,"disconnect"],[646,14,650,14,"disconnect"],[646,15,650,14],[646,17,650,17],[647,6,651,8],[647,10,651,12],[647,14,651,16],[647,15,651,17,"connected"],[647,24,651,26],[647,26,651,28],[648,8,652,12],[648,12,652,16],[648,13,652,17,"packet"],[648,19,652,23],[648,20,652,24],[649,10,652,26,"type"],[649,14,652,30],[649,16,652,32,"PacketType"],[649,31,652,42],[649,32,652,42,"PacketType"],[649,42,652,42],[649,43,652,43,"DISCONNECT"],[650,8,652,54],[650,9,652,55],[650,10,652,56],[651,6,653,8],[652,6,654,8],[653,6,655,8],[653,10,655,12],[653,11,655,13,"destroy"],[653,18,655,20],[653,19,655,21],[653,20,655,22],[654,6,656,8],[654,10,656,12],[654,14,656,16],[654,15,656,17,"connected"],[654,24,656,26],[654,26,656,28],[655,8,657,12],[656,8,658,12],[656,12,658,16],[656,13,658,17,"onclose"],[656,20,658,24],[656,21,658,25],[656,43,658,47],[656,44,658,48],[657,6,659,8],[658,6,660,8],[658,13,660,15],[658,17,660,19],[659,4,661,4],[660,4,662,4],[661,0,663,0],[662,0,664,0],[663,0,665,0],[664,0,666,0],[665,4,667,4,"close"],[665,9,667,9,"close"],[665,10,667,9],[665,12,667,12],[666,6,668,8],[666,13,668,15],[666,17,668,19],[666,18,668,20,"disconnect"],[666,28,668,30],[666,29,668,31],[666,30,668,32],[667,4,669,4],[668,4,670,4],[669,0,671,0],[670,0,672,0],[671,0,673,0],[672,0,674,0],[673,0,675,0],[674,0,676,0],[675,0,677,0],[676,0,678,0],[677,4,679,4,"compress"],[677,12,679,12,"compress"],[677,13,679,13,"compress"],[677,21,679,21],[677,23,679,23],[678,6,680,8],[678,10,680,12],[678,11,680,13,"flags"],[678,16,680,18],[678,17,680,19,"compress"],[678,25,680,27],[678,28,680,30,"compress"],[678,36,680,38],[679,6,681,8],[679,13,681,15],[679,17,681,19],[680,4,682,4],[681,4,683,4],[682,0,684,0],[683,0,685,0],[684,0,686,0],[685,0,687,0],[686,0,688,0],[687,0,689,0],[688,0,690,0],[689,0,691,0],[690,4,692,4],[690,8,692,8,"volatile"],[690,16,692,16,"volatile"],[690,17,692,16],[690,19,692,19],[691,6,693,8],[691,10,693,12],[691,11,693,13,"flags"],[691,16,693,18],[691,17,693,19,"volatile"],[691,25,693,27],[691,28,693,30],[691,32,693,34],[692,6,694,8],[692,13,694,15],[692,17,694,19],[693,4,695,4],[694,4,696,4],[695,0,697,0],[696,0,698,0],[697,0,699,0],[698,0,700,0],[699,0,701,0],[700,0,702,0],[701,0,703,0],[702,0,704,0],[703,0,705,0],[704,0,706,0],[705,0,707,0],[706,0,708,0],[707,4,709,4,"timeout"],[707,11,709,11,"timeout"],[707,12,709,12,"timeout"],[707,19,709,19],[707,21,709,21],[708,6,710,8],[708,10,710,12],[708,11,710,13,"flags"],[708,16,710,18],[708,17,710,19,"timeout"],[708,24,710,26],[708,27,710,29,"timeout"],[708,34,710,36],[709,6,711,8],[709,13,711,15],[709,17,711,19],[710,4,712,4],[711,4,713,4],[712,0,714,0],[713,0,715,0],[714,0,716,0],[715,0,717,0],[716,0,718,0],[717,0,719,0],[718,0,720,0],[719,0,721,0],[720,0,722,0],[721,0,723,0],[722,4,724,4,"onAny"],[722,9,724,9,"onAny"],[722,10,724,10,"listener"],[722,18,724,18],[722,20,724,20],[723,6,725,8],[723,10,725,12],[723,11,725,13,"_anyListeners"],[723,24,725,26],[723,27,725,29],[723,31,725,33],[723,32,725,34,"_anyListeners"],[723,45,725,47],[723,49,725,51],[723,51,725,53],[724,6,726,8],[724,10,726,12],[724,11,726,13,"_anyListeners"],[724,24,726,26],[724,25,726,27,"push"],[724,29,726,31],[724,30,726,32,"listener"],[724,38,726,40],[724,39,726,41],[725,6,727,8],[725,13,727,15],[725,17,727,19],[726,4,728,4],[727,4,729,4],[728,0,730,0],[729,0,731,0],[730,0,732,0],[731,0,733,0],[732,0,734,0],[733,0,735,0],[734,0,736,0],[735,0,737,0],[736,0,738,0],[737,0,739,0],[738,4,740,4,"prependAny"],[738,14,740,14,"prependAny"],[738,15,740,15,"listener"],[738,23,740,23],[738,25,740,25],[739,6,741,8],[739,10,741,12],[739,11,741,13,"_anyListeners"],[739,24,741,26],[739,27,741,29],[739,31,741,33],[739,32,741,34,"_anyListeners"],[739,45,741,47],[739,49,741,51],[739,51,741,53],[740,6,742,8],[740,10,742,12],[740,11,742,13,"_anyListeners"],[740,24,742,26],[740,25,742,27,"unshift"],[740,32,742,34],[740,33,742,35,"listener"],[740,41,742,43],[740,42,742,44],[741,6,743,8],[741,13,743,15],[741,17,743,19],[742,4,744,4],[743,4,745,4],[744,0,746,0],[745,0,747,0],[746,0,748,0],[747,0,749,0],[748,0,750,0],[749,0,751,0],[750,0,752,0],[751,0,753,0],[752,0,754,0],[753,0,755,0],[754,0,756,0],[755,0,757,0],[756,0,758,0],[757,0,759,0],[758,0,760,0],[759,0,761,0],[760,0,762,0],[761,4,763,4,"offAny"],[761,10,763,10,"offAny"],[761,11,763,11,"listener"],[761,19,763,19],[761,21,763,21],[762,6,764,8],[762,10,764,12],[762,11,764,13],[762,15,764,17],[762,16,764,18,"_anyListeners"],[762,29,764,31],[762,31,764,33],[763,8,765,12],[763,15,765,19],[763,19,765,23],[764,6,766,8],[765,6,767,8],[765,10,767,12,"listener"],[765,18,767,20],[765,20,767,22],[766,8,768,12],[766,14,768,18,"listeners"],[766,23,768,27],[766,26,768,30],[766,30,768,34],[766,31,768,35,"_anyListeners"],[766,44,768,48],[767,8,769,12],[767,13,769,17],[767,17,769,21,"i"],[767,18,769,22],[767,21,769,25],[767,22,769,26],[767,24,769,28,"i"],[767,25,769,29],[767,28,769,32,"listeners"],[767,37,769,41],[767,38,769,42,"length"],[767,44,769,48],[767,46,769,50,"i"],[767,47,769,51],[767,49,769,53],[767,51,769,55],[768,10,770,16],[768,14,770,20,"listener"],[768,22,770,28],[768,27,770,33,"listeners"],[768,36,770,42],[768,37,770,43,"i"],[768,38,770,44],[768,39,770,45],[768,41,770,47],[769,12,771,20,"listeners"],[769,21,771,29],[769,22,771,30,"splice"],[769,28,771,36],[769,29,771,37,"i"],[769,30,771,38],[769,32,771,40],[769,33,771,41],[769,34,771,42],[770,12,772,20],[770,19,772,27],[770,23,772,31],[771,10,773,16],[772,8,774,12],[773,6,775,8],[773,7,775,9],[773,13,776,13],[774,8,777,12],[774,12,777,16],[774,13,777,17,"_anyListeners"],[774,26,777,30],[774,29,777,33],[774,31,777,35],[775,6,778,8],[776,6,779,8],[776,13,779,15],[776,17,779,19],[777,4,780,4],[778,4,781,4],[779,0,782,0],[780,0,783,0],[781,0,784,0],[782,4,785,4,"listenersAny"],[782,16,785,16,"listenersAny"],[782,17,785,16],[782,19,785,19],[783,6,786,8],[783,13,786,15],[783,17,786,19],[783,18,786,20,"_anyListeners"],[783,31,786,33],[783,35,786,37],[783,37,786,39],[784,4,787,4],[785,4,788,4],[786,0,789,0],[787,0,790,0],[788,0,791,0],[789,0,792,0],[790,0,793,0],[791,0,794,0],[792,0,795,0],[793,0,796,0],[794,0,797,0],[795,0,798,0],[796,0,799,0],[797,0,800,0],[798,4,801,4,"onAnyOutgoing"],[798,17,801,17,"onAnyOutgoing"],[798,18,801,18,"listener"],[798,26,801,26],[798,28,801,28],[799,6,802,8],[799,10,802,12],[799,11,802,13,"_anyOutgoingListeners"],[799,32,802,34],[799,35,802,37],[799,39,802,41],[799,40,802,42,"_anyOutgoingListeners"],[799,61,802,63],[799,65,802,67],[799,67,802,69],[800,6,803,8],[800,10,803,12],[800,11,803,13,"_anyOutgoingListeners"],[800,32,803,34],[800,33,803,35,"push"],[800,37,803,39],[800,38,803,40,"listener"],[800,46,803,48],[800,47,803,49],[801,6,804,8],[801,13,804,15],[801,17,804,19],[802,4,805,4],[803,4,806,4],[804,0,807,0],[805,0,808,0],[806,0,809,0],[807,0,810,0],[808,0,811,0],[809,0,812,0],[810,0,813,0],[811,0,814,0],[812,0,815,0],[813,0,816,0],[814,0,817,0],[815,0,818,0],[816,4,819,4,"prependAnyOutgoing"],[816,22,819,22,"prependAnyOutgoing"],[816,23,819,23,"listener"],[816,31,819,31],[816,33,819,33],[817,6,820,8],[817,10,820,12],[817,11,820,13,"_anyOutgoingListeners"],[817,32,820,34],[817,35,820,37],[817,39,820,41],[817,40,820,42,"_anyOutgoingListeners"],[817,61,820,63],[817,65,820,67],[817,67,820,69],[818,6,821,8],[818,10,821,12],[818,11,821,13,"_anyOutgoingListeners"],[818,32,821,34],[818,33,821,35,"unshift"],[818,40,821,42],[818,41,821,43,"listener"],[818,49,821,51],[818,50,821,52],[819,6,822,8],[819,13,822,15],[819,17,822,19],[820,4,823,4],[821,4,824,4],[822,0,825,0],[823,0,826,0],[824,0,827,0],[825,0,828,0],[826,0,829,0],[827,0,830,0],[828,0,831,0],[829,0,832,0],[830,0,833,0],[831,0,834,0],[832,0,835,0],[833,0,836,0],[834,0,837,0],[835,0,838,0],[836,0,839,0],[837,0,840,0],[838,0,841,0],[839,4,842,4,"offAnyOutgoing"],[839,18,842,18,"offAnyOutgoing"],[839,19,842,19,"listener"],[839,27,842,27],[839,29,842,29],[840,6,843,8],[840,10,843,12],[840,11,843,13],[840,15,843,17],[840,16,843,18,"_anyOutgoingListeners"],[840,37,843,39],[840,39,843,41],[841,8,844,12],[841,15,844,19],[841,19,844,23],[842,6,845,8],[843,6,846,8],[843,10,846,12,"listener"],[843,18,846,20],[843,20,846,22],[844,8,847,12],[844,14,847,18,"listeners"],[844,23,847,27],[844,26,847,30],[844,30,847,34],[844,31,847,35,"_anyOutgoingListeners"],[844,52,847,56],[845,8,848,12],[845,13,848,17],[845,17,848,21,"i"],[845,18,848,22],[845,21,848,25],[845,22,848,26],[845,24,848,28,"i"],[845,25,848,29],[845,28,848,32,"listeners"],[845,37,848,41],[845,38,848,42,"length"],[845,44,848,48],[845,46,848,50,"i"],[845,47,848,51],[845,49,848,53],[845,51,848,55],[846,10,849,16],[846,14,849,20,"listener"],[846,22,849,28],[846,27,849,33,"listeners"],[846,36,849,42],[846,37,849,43,"i"],[846,38,849,44],[846,39,849,45],[846,41,849,47],[847,12,850,20,"listeners"],[847,21,850,29],[847,22,850,30,"splice"],[847,28,850,36],[847,29,850,37,"i"],[847,30,850,38],[847,32,850,40],[847,33,850,41],[847,34,850,42],[848,12,851,20],[848,19,851,27],[848,23,851,31],[849,10,852,16],[850,8,853,12],[851,6,854,8],[851,7,854,9],[851,13,855,13],[852,8,856,12],[852,12,856,16],[852,13,856,17,"_anyOutgoingListeners"],[852,34,856,38],[852,37,856,41],[852,39,856,43],[853,6,857,8],[854,6,858,8],[854,13,858,15],[854,17,858,19],[855,4,859,4],[856,4,860,4],[857,0,861,0],[858,0,862,0],[859,0,863,0],[860,4,864,4,"listenersAnyOutgoing"],[860,24,864,24,"listenersAnyOutgoing"],[860,25,864,24],[860,27,864,27],[861,6,865,8],[861,13,865,15],[861,17,865,19],[861,18,865,20,"_anyOutgoingListeners"],[861,39,865,41],[861,43,865,45],[861,45,865,47],[862,4,866,4],[863,4,867,4],[864,0,868,0],[865,0,869,0],[866,0,870,0],[867,0,871,0],[868,0,872,0],[869,0,873,0],[870,4,874,4,"notifyOutgoingListeners"],[870,27,874,27,"notifyOutgoingListeners"],[870,28,874,28,"packet"],[870,34,874,34],[870,36,874,36],[871,6,875,8],[871,10,875,12],[871,14,875,16],[871,15,875,17,"_anyOutgoingListeners"],[871,36,875,38],[871,40,875,42],[871,44,875,46],[871,45,875,47,"_anyOutgoingListeners"],[871,66,875,68],[871,67,875,69,"length"],[871,73,875,75],[871,75,875,77],[872,8,876,12],[872,14,876,18,"listeners"],[872,23,876,27],[872,26,876,30],[872,30,876,34],[872,31,876,35,"_anyOutgoingListeners"],[872,52,876,56],[872,53,876,57,"slice"],[872,58,876,62],[872,59,876,63],[872,60,876,64],[873,8,877,12],[873,13,877,17],[873,19,877,23,"listener"],[873,27,877,31],[873,31,877,35,"listeners"],[873,40,877,44],[873,42,877,46],[874,10,878,16,"listener"],[874,18,878,24],[874,19,878,25,"apply"],[874,24,878,30],[874,25,878,31],[874,29,878,35],[874,31,878,37,"packet"],[874,37,878,43],[874,38,878,44,"data"],[874,42,878,48],[874,43,878,49],[875,8,879,12],[876,6,880,8],[877,4,881,4],[878,2,882,0],[879,0,882,1],[879,3]],"functionMap":{"names":["<global>","Socket","Socket#constructor","Socket#get__disconnected","Socket#subEvents","Socket#get__active","Socket#connect","Socket#open","Socket#send","Socket#emit","Socket#_registerAckCallback","io.setTimeoutFn$argument_0","fn","Socket#emitWithAck","Promise$argument_0","Socket#_addToQueue","args.push$argument_0","Socket#_drainQueue","Socket#packet","Socket#onopen","auth$argument_0","Socket#_sendConnectPacket","Socket#onerror","Socket#onclose","Socket#_clearAcks","Object.keys.forEach$argument_0","sendBuffer.some$argument_0","Socket#onpacket","Socket#onevent","Socket#emitEvent","Socket#ack","<anonymous>","Socket#onack","Socket#onconnect","Socket#emitBuffered","receiveBuffer.forEach$argument_0","sendBuffer.forEach$argument_0","Socket#ondisconnect","Socket#destroy","subs.forEach$argument_0","Socket#disconnect","Socket#close","Socket#compress","Socket#get__volatile","Socket#timeout","Socket#onAny","Socket#prependAny","Socket#offAny","Socket#listenersAny","Socket#onAnyOutgoing","Socket#prependAnyOutgoing","Socket#offAnyOutgoing","Socket#listenersAnyOutgoing","Socket#notifyOutgoingListeners"],"mappings":"AAA;OCwC;ICI;KD4E;IEe;KFE;IGM;KHU;IIkB;KJE;IKW;KLS;IMI;KNE;IOgB;KPI;IQkB;KRqC;ISI;2CCQ;SDQ;mBEC;SFI;KTG;IYiB;2BCC;uBFC;aEE;SDI;KZC;IcM;kBCY;SDsB;KdG;IgBO;KhBY;IiBO;KjBG;IkBM;sBCE;aDE;KlBK;IoBO;KpBO;IqBO;KrBI;IsBQ;KtBK;IuBO;uCCC;oDCC,oCD;SDS;KvBC;I0BO;K1BgC;I2BO;K3BW;I4BC;K5BW;I6BM;eCG;SDU;K7BC;I+BO;K/BY;IgCM;KhCQ;IiCM;mCCC,8BD;gCEE;SFG;KjCE;IoCM;KpCG;IqCQ;8BCG,4BD;KrCI;IuCiB;KvCW;IwCM;KxCE;IyCU;KzCG;I0CU;K1CG;I2Cc;K3CG;I4CY;K5CI;I6CY;K7CI;I8CmB;K9CiB;I+CK;K/CE;IgDc;KhDI;IiDc;KjDI;IkDmB;KlDiB;ImDK;KnDE;IoDQ;KpDO;CDC"},"hasCjsExports":false},"type":"js/module"}]}