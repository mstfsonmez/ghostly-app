{"dependencies":[{"name":"engine.io-client","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":86,"index":86}}],"key":"47uBFHNKf+pJCWjWFCflLVQYGvc=","exportNames":["*"],"imports":1}},{"name":"./socket.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":87},"end":{"line":2,"column":37,"index":124}}],"key":"eFXiJ3xGWi9z9IR2MpLa1oE6lVc=","exportNames":["*"],"imports":1}},{"name":"socket.io-parser","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":125},"end":{"line":3,"column":43,"index":168}}],"key":"cQaAU0lT2O9qXW5QPLAeCm8S6Aw=","exportNames":["*"],"imports":1}},{"name":"./on.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":169},"end":{"line":4,"column":29,"index":198}}],"key":"XRT79/HgjpzwYcEtMdKPNGwAAJA=","exportNames":["*"],"imports":1}},{"name":"./contrib/backo2.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":199},"end":{"line":5,"column":46,"index":245}}],"key":"+xoCajj5ZHxeBmv1nKLJe2m7TC8=","exportNames":["*"],"imports":1}},{"name":"@socket.io/component-emitter","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":246},"end":{"line":6,"column":56,"index":302}}],"key":"nWmouVdWEVSQD2UwM6teY1JyKBM=","exportNames":["*"],"imports":1}},{"name":"debug","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":303},"end":{"line":7,"column":32,"index":335}}],"key":"Nx7LMnUOZdRc8E6QIb5nvmtJE+4=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"Manager\", {\n    enumerable: true,\n    get: function () {\n      return Manager;\n    }\n  });\n  var _engineIoClient = require(_dependencyMap[0], \"engine.io-client\");\n  var _socketJs = require(_dependencyMap[1], \"./socket.js\");\n  var _socketIoParser = require(_dependencyMap[2], \"socket.io-parser\");\n  var parser = _interopNamespace(_socketIoParser);\n  var _onJs = require(_dependencyMap[3], \"./on.js\");\n  var _contribBacko2Js = require(_dependencyMap[4], \"./contrib/backo2.js\");\n  var _socketIoComponentEmitter = require(_dependencyMap[5], \"@socket.io/component-emitter\");\n  var _debug = require(_dependencyMap[6], \"debug\");\n  var debugModule = _interopDefault(_debug);\n  // debug()\n  const debug = (0, debugModule.default)(\"socket.io-client:manager\"); // debug()\n  class Manager extends _socketIoComponentEmitter.Emitter {\n    constructor(uri, opts) {\n      var _a;\n      super();\n      this.nsps = {};\n      this.subs = [];\n      if (uri && \"object\" === typeof uri) {\n        opts = uri;\n        uri = undefined;\n      }\n      opts = opts || {};\n      opts.path = opts.path || \"/socket.io\";\n      this.opts = opts;\n      (0, _engineIoClient.installTimerFunctions)(this, opts);\n      this.reconnection(opts.reconnection !== false);\n      this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n      this.reconnectionDelay(opts.reconnectionDelay || 1000);\n      this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n      this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n      this.backoff = new _contribBacko2Js.Backoff({\n        min: this.reconnectionDelay(),\n        max: this.reconnectionDelayMax(),\n        jitter: this.randomizationFactor()\n      });\n      this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n      this._readyState = \"closed\";\n      this.uri = uri;\n      const _parser = opts.parser || parser;\n      this.encoder = new _parser.Encoder();\n      this.decoder = new _parser.Decoder();\n      this._autoConnect = opts.autoConnect !== false;\n      if (this._autoConnect) this.open();\n    }\n    reconnection(v) {\n      if (!arguments.length) return this._reconnection;\n      this._reconnection = !!v;\n      if (!v) {\n        this.skipReconnect = true;\n      }\n      return this;\n    }\n    reconnectionAttempts(v) {\n      if (v === undefined) return this._reconnectionAttempts;\n      this._reconnectionAttempts = v;\n      return this;\n    }\n    reconnectionDelay(v) {\n      var _a;\n      if (v === undefined) return this._reconnectionDelay;\n      this._reconnectionDelay = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n      return this;\n    }\n    randomizationFactor(v) {\n      var _a;\n      if (v === undefined) return this._randomizationFactor;\n      this._randomizationFactor = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n      return this;\n    }\n    reconnectionDelayMax(v) {\n      var _a;\n      if (v === undefined) return this._reconnectionDelayMax;\n      this._reconnectionDelayMax = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n      return this;\n    }\n    timeout(v) {\n      if (!arguments.length) return this._timeout;\n      this._timeout = v;\n      return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    maybeReconnectOnOpen() {\n      // Only try to reconnect if it's the first time we're connecting\n      if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {\n        // keeps reconnection from firing twice for the same reconnection loop\n        this.reconnect();\n      }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn) {\n      debug(\"readyState %s\", this._readyState);\n      if (~this._readyState.indexOf(\"open\")) return this;\n      debug(\"opening %s\", this.uri);\n      this.engine = new _engineIoClient.Socket(this.uri, this.opts);\n      const socket = this.engine;\n      const self = this;\n      this._readyState = \"opening\";\n      this.skipReconnect = false;\n      // emit `open`\n      const openSubDestroy = (0, _onJs.on)(socket, \"open\", function () {\n        self.onopen();\n        fn && fn();\n      });\n      const onError = err => {\n        debug(\"error\");\n        this.cleanup();\n        this._readyState = \"closed\";\n        this.emitReserved(\"error\", err);\n        if (fn) {\n          fn(err);\n        } else {\n          // Only do this if there is no fn to handle the error\n          this.maybeReconnectOnOpen();\n        }\n      };\n      // emit `error`\n      const errorSub = (0, _onJs.on)(socket, \"error\", onError);\n      if (false !== this._timeout) {\n        const timeout = this._timeout;\n        debug(\"connect attempt will timeout after %d\", timeout);\n        // set timer\n        const timer = this.setTimeoutFn(() => {\n          debug(\"connect attempt timed out after %d\", timeout);\n          openSubDestroy();\n          onError(new Error(\"timeout\"));\n          socket.close();\n        }, timeout);\n        if (this.opts.autoUnref) {\n          timer.unref();\n        }\n        this.subs.push(() => {\n          this.clearTimeoutFn(timer);\n        });\n      }\n      this.subs.push(openSubDestroy);\n      this.subs.push(errorSub);\n      return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn) {\n      return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    onopen() {\n      debug(\"open\");\n      // clear old subs\n      this.cleanup();\n      // mark as open\n      this._readyState = \"open\";\n      this.emitReserved(\"open\");\n      // add new subs\n      const socket = this.engine;\n      this.subs.push((0, _onJs.on)(socket, \"ping\", this.onping.bind(this)), (0, _onJs.on)(socket, \"data\", this.ondata.bind(this)), (0, _onJs.on)(socket, \"error\", this.onerror.bind(this)), (0, _onJs.on)(socket, \"close\", this.onclose.bind(this)),\n      // @ts-ignore\n      (0, _onJs.on)(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    onping() {\n      this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    ondata(data) {\n      try {\n        this.decoder.add(data);\n      } catch (e) {\n        this.onclose(\"parse error\", e);\n      }\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n      // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\n      (0, _engineIoClient.nextTick)(() => {\n        this.emitReserved(\"packet\", packet);\n      }, this.setTimeoutFn);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    onerror(err) {\n      debug(\"error\", err);\n      this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp, opts) {\n      let socket = this.nsps[nsp];\n      if (!socket) {\n        socket = new _socketJs.Socket(this, nsp, opts);\n        this.nsps[nsp] = socket;\n      } else if (this._autoConnect && !socket.active) {\n        socket.connect();\n      }\n      return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket) {\n      const nsps = Object.keys(this.nsps);\n      for (const nsp of nsps) {\n        const socket = this.nsps[nsp];\n        if (socket.active) {\n          debug(\"socket %s is still active, skipping close\", nsp);\n          return;\n        }\n      }\n      this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet) {\n      debug(\"writing packet %j\", packet);\n      const encodedPackets = this.encoder.encode(packet);\n      for (let i = 0; i < encodedPackets.length; i++) {\n        this.engine.write(encodedPackets[i], packet.options);\n      }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    cleanup() {\n      debug(\"cleanup\");\n      this.subs.forEach(subDestroy => subDestroy());\n      this.subs.length = 0;\n      this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close() {\n      debug(\"disconnect\");\n      this.skipReconnect = true;\n      this._reconnecting = false;\n      this.onclose(\"forced close\");\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    disconnect() {\n      return this._close();\n    }\n    /**\n     * Called when:\n     *\n     * - the low-level engine is closed\n     * - the parser encountered a badly formatted packet\n     * - all sockets are disconnected\n     *\n     * @private\n     */\n    onclose(reason, description) {\n      var _a;\n      debug(\"closed due to %s\", reason);\n      this.cleanup();\n      (_a = this.engine) === null || _a === void 0 ? void 0 : _a.close();\n      this.backoff.reset();\n      this._readyState = \"closed\";\n      this.emitReserved(\"close\", reason, description);\n      if (this._reconnection && !this.skipReconnect) {\n        this.reconnect();\n      }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    reconnect() {\n      if (this._reconnecting || this.skipReconnect) return this;\n      const self = this;\n      if (this.backoff.attempts >= this._reconnectionAttempts) {\n        debug(\"reconnect failed\");\n        this.backoff.reset();\n        this.emitReserved(\"reconnect_failed\");\n        this._reconnecting = false;\n      } else {\n        const delay = this.backoff.duration();\n        debug(\"will wait %dms before reconnect attempt\", delay);\n        this._reconnecting = true;\n        const timer = this.setTimeoutFn(() => {\n          if (self.skipReconnect) return;\n          debug(\"attempting reconnect\");\n          this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n          // check again for the case socket closed in above events\n          if (self.skipReconnect) return;\n          self.open(err => {\n            if (err) {\n              debug(\"reconnect attempt error\");\n              self._reconnecting = false;\n              self.reconnect();\n              this.emitReserved(\"reconnect_error\", err);\n            } else {\n              debug(\"reconnect success\");\n              self.onreconnect();\n            }\n          });\n        }, delay);\n        if (this.opts.autoUnref) {\n          timer.unref();\n        }\n        this.subs.push(() => {\n          this.clearTimeoutFn(timer);\n        });\n      }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    onreconnect() {\n      const attempt = this.backoff.attempts;\n      this._reconnecting = false;\n      this.backoff.reset();\n      this.emitReserved(\"reconnect\", attempt);\n    }\n  }\n});","lineCount":404,"map":[[27,2,9,0,"Object"],[27,8,9,0],[27,9,9,0,"defineProperty"],[27,23,9,0],[27,24,9,0,"exports"],[27,31,9,0],[28,4,9,0,"enumerable"],[28,14,9,0],[29,4,9,0,"get"],[29,7,9,0],[29,18,9,0,"get"],[29,19,9,0],[30,6,9,0],[30,13,9,0,"Manager"],[30,20,9,0],[31,4,9,0],[32,2,9,0],[33,2,1,0],[33,6,1,0,"_engineIoClient"],[33,21,1,0],[33,24,1,0,"require"],[33,31,1,0],[33,32,1,0,"_dependencyMap"],[33,46,1,0],[34,2,2,0],[34,6,2,0,"_socketJs"],[34,15,2,0],[34,18,2,0,"require"],[34,25,2,0],[34,26,2,0,"_dependencyMap"],[34,40,2,0],[35,2,3,0],[35,6,3,0,"_socketIoParser"],[35,21,3,0],[35,24,3,0,"require"],[35,31,3,0],[35,32,3,0,"_dependencyMap"],[35,46,3,0],[36,2,3,0],[36,6,3,0,"parser"],[36,12,3,0],[36,15,3,0,"_interopNamespace"],[36,32,3,0],[36,33,3,0,"_socketIoParser"],[36,48,3,0],[37,2,4,0],[37,6,4,0,"_onJs"],[37,11,4,0],[37,14,4,0,"require"],[37,21,4,0],[37,22,4,0,"_dependencyMap"],[37,36,4,0],[38,2,5,0],[38,6,5,0,"_contribBacko2Js"],[38,22,5,0],[38,25,5,0,"require"],[38,32,5,0],[38,33,5,0,"_dependencyMap"],[38,47,5,0],[39,2,6,0],[39,6,6,0,"_socketIoComponentEmitter"],[39,31,6,0],[39,34,6,0,"require"],[39,41,6,0],[39,42,6,0,"_dependencyMap"],[39,56,6,0],[40,2,7,0],[40,6,7,0,"_debug"],[40,12,7,0],[40,15,7,0,"require"],[40,22,7,0],[40,23,7,0,"_dependencyMap"],[40,37,7,0],[41,2,7,0],[41,6,7,0,"debugModule"],[41,17,7,0],[41,20,7,0,"_interopDefault"],[41,35,7,0],[41,36,7,0,"_debug"],[41,42,7,0],[42,2,7,33],[43,2,8,0],[43,8,8,6,"debug"],[43,13,8,11],[43,16,8,14],[43,20,8,14,"debugModule"],[43,31,8,25],[43,32,8,25,"default"],[43,39,8,25],[43,41,8,26],[43,67,8,52],[43,68,8,53],[43,69,8,54],[43,70,8,55],[44,2,9,7],[44,8,9,13,"Manager"],[44,15,9,20],[44,24,9,29,"Emitter"],[44,49,9,36],[44,50,9,36,"Emitter"],[44,57,9,36],[44,58,9,37],[45,4,10,4,"constructor"],[45,15,10,15,"constructor"],[45,16,10,16,"uri"],[45,19,10,19],[45,21,10,21,"opts"],[45,25,10,25],[45,27,10,27],[46,6,11,8],[46,10,11,12,"_a"],[46,12,11,14],[47,6,12,8],[47,11,12,13],[47,12,12,14],[47,13,12,15],[48,6,13,8],[48,10,13,12],[48,11,13,13,"nsps"],[48,15,13,17],[48,18,13,20],[48,19,13,21],[48,20,13,22],[49,6,14,8],[49,10,14,12],[49,11,14,13,"subs"],[49,15,14,17],[49,18,14,20],[49,20,14,22],[50,6,15,8],[50,10,15,12,"uri"],[50,13,15,15],[50,17,15,19],[50,25,15,27],[50,30,15,32],[50,37,15,39,"uri"],[50,40,15,42],[50,42,15,44],[51,8,16,12,"opts"],[51,12,16,16],[51,15,16,19,"uri"],[51,18,16,22],[52,8,17,12,"uri"],[52,11,17,15],[52,14,17,18,"undefined"],[52,23,17,27],[53,6,18,8],[54,6,19,8,"opts"],[54,10,19,12],[54,13,19,15,"opts"],[54,17,19,19],[54,21,19,23],[54,22,19,24],[54,23,19,25],[55,6,20,8,"opts"],[55,10,20,12],[55,11,20,13,"path"],[55,15,20,17],[55,18,20,20,"opts"],[55,22,20,24],[55,23,20,25,"path"],[55,27,20,29],[55,31,20,33],[55,43,20,45],[56,6,21,8],[56,10,21,12],[56,11,21,13,"opts"],[56,15,21,17],[56,18,21,20,"opts"],[56,22,21,24],[57,6,22,8],[57,10,22,8,"installTimerFunctions"],[57,25,22,29],[57,26,22,29,"installTimerFunctions"],[57,47,22,29],[57,49,22,30],[57,53,22,34],[57,55,22,36,"opts"],[57,59,22,40],[57,60,22,41],[58,6,23,8],[58,10,23,12],[58,11,23,13,"reconnection"],[58,23,23,25],[58,24,23,26,"opts"],[58,28,23,30],[58,29,23,31,"reconnection"],[58,41,23,43],[58,46,23,48],[58,51,23,53],[58,52,23,54],[59,6,24,8],[59,10,24,12],[59,11,24,13,"reconnectionAttempts"],[59,31,24,33],[59,32,24,34,"opts"],[59,36,24,38],[59,37,24,39,"reconnectionAttempts"],[59,57,24,59],[59,61,24,63,"Infinity"],[59,69,24,71],[59,70,24,72],[60,6,25,8],[60,10,25,12],[60,11,25,13,"reconnectionDelay"],[60,28,25,30],[60,29,25,31,"opts"],[60,33,25,35],[60,34,25,36,"reconnectionDelay"],[60,51,25,53],[60,55,25,57],[60,59,25,61],[60,60,25,62],[61,6,26,8],[61,10,26,12],[61,11,26,13,"reconnectionDelayMax"],[61,31,26,33],[61,32,26,34,"opts"],[61,36,26,38],[61,37,26,39,"reconnectionDelayMax"],[61,57,26,59],[61,61,26,63],[61,65,26,67],[61,66,26,68],[62,6,27,8],[62,10,27,12],[62,11,27,13,"randomizationFactor"],[62,30,27,32],[62,31,27,33],[62,32,27,34,"_a"],[62,34,27,36],[62,37,27,39,"opts"],[62,41,27,43],[62,42,27,44,"randomizationFactor"],[62,61,27,63],[62,67,27,69],[62,71,27,73],[62,75,27,77,"_a"],[62,77,27,79],[62,82,27,84],[62,87,27,89],[62,88,27,90],[62,91,27,93,"_a"],[62,93,27,95],[62,96,27,98],[62,99,27,101],[62,100,27,102],[63,6,28,8],[63,10,28,12],[63,11,28,13,"backoff"],[63,18,28,20],[63,21,28,23],[63,25,28,27,"Backoff"],[63,41,28,34],[63,42,28,34,"Backoff"],[63,49,28,34],[63,50,28,35],[64,8,29,12,"min"],[64,11,29,15],[64,13,29,17],[64,17,29,21],[64,18,29,22,"reconnectionDelay"],[64,35,29,39],[64,36,29,40],[64,37,29,41],[65,8,30,12,"max"],[65,11,30,15],[65,13,30,17],[65,17,30,21],[65,18,30,22,"reconnectionDelayMax"],[65,38,30,42],[65,39,30,43],[65,40,30,44],[66,8,31,12,"jitter"],[66,14,31,18],[66,16,31,20],[66,20,31,24],[66,21,31,25,"randomizationFactor"],[66,40,31,44],[66,41,31,45],[67,6,32,8],[67,7,32,9],[67,8,32,10],[68,6,33,8],[68,10,33,12],[68,11,33,13,"timeout"],[68,18,33,20],[68,19,33,21],[68,23,33,25],[68,27,33,29,"opts"],[68,31,33,33],[68,32,33,34,"timeout"],[68,39,33,41],[68,42,33,44],[68,47,33,49],[68,50,33,52,"opts"],[68,54,33,56],[68,55,33,57,"timeout"],[68,62,33,64],[68,63,33,65],[69,6,34,8],[69,10,34,12],[69,11,34,13,"_readyState"],[69,22,34,24],[69,25,34,27],[69,33,34,35],[70,6,35,8],[70,10,35,12],[70,11,35,13,"uri"],[70,14,35,16],[70,17,35,19,"uri"],[70,20,35,22],[71,6,36,8],[71,12,36,14,"_parser"],[71,19,36,21],[71,22,36,24,"opts"],[71,26,36,28],[71,27,36,29,"parser"],[71,33,36,35],[71,37,36,39,"parser"],[71,43,36,45],[72,6,37,8],[72,10,37,12],[72,11,37,13,"encoder"],[72,18,37,20],[72,21,37,23],[72,25,37,27,"_parser"],[72,32,37,34],[72,33,37,35,"Encoder"],[72,40,37,42],[72,41,37,43],[72,42,37,44],[73,6,38,8],[73,10,38,12],[73,11,38,13,"decoder"],[73,18,38,20],[73,21,38,23],[73,25,38,27,"_parser"],[73,32,38,34],[73,33,38,35,"Decoder"],[73,40,38,42],[73,41,38,43],[73,42,38,44],[74,6,39,8],[74,10,39,12],[74,11,39,13,"_autoConnect"],[74,23,39,25],[74,26,39,28,"opts"],[74,30,39,32],[74,31,39,33,"autoConnect"],[74,42,39,44],[74,47,39,49],[74,52,39,54],[75,6,40,8],[75,10,40,12],[75,14,40,16],[75,15,40,17,"_autoConnect"],[75,27,40,29],[75,29,41,12],[75,33,41,16],[75,34,41,17,"open"],[75,38,41,21],[75,39,41,22],[75,40,41,23],[76,4,42,4],[77,4,43,4,"reconnection"],[77,16,43,16,"reconnection"],[77,17,43,17,"v"],[77,18,43,18],[77,20,43,20],[78,6,44,8],[78,10,44,12],[78,11,44,13,"arguments"],[78,20,44,22],[78,21,44,23,"length"],[78,27,44,29],[78,29,45,12],[78,36,45,19],[78,40,45,23],[78,41,45,24,"_reconnection"],[78,54,45,37],[79,6,46,8],[79,10,46,12],[79,11,46,13,"_reconnection"],[79,24,46,26],[79,27,46,29],[79,28,46,30],[79,29,46,31,"v"],[79,30,46,32],[80,6,47,8],[80,10,47,12],[80,11,47,13,"v"],[80,12,47,14],[80,14,47,16],[81,8,48,12],[81,12,48,16],[81,13,48,17,"skipReconnect"],[81,26,48,30],[81,29,48,33],[81,33,48,37],[82,6,49,8],[83,6,50,8],[83,13,50,15],[83,17,50,19],[84,4,51,4],[85,4,52,4,"reconnectionAttempts"],[85,24,52,24,"reconnectionAttempts"],[85,25,52,25,"v"],[85,26,52,26],[85,28,52,28],[86,6,53,8],[86,10,53,12,"v"],[86,11,53,13],[86,16,53,18,"undefined"],[86,25,53,27],[86,27,54,12],[86,34,54,19],[86,38,54,23],[86,39,54,24,"_reconnectionAttempts"],[86,60,54,45],[87,6,55,8],[87,10,55,12],[87,11,55,13,"_reconnectionAttempts"],[87,32,55,34],[87,35,55,37,"v"],[87,36,55,38],[88,6,56,8],[88,13,56,15],[88,17,56,19],[89,4,57,4],[90,4,58,4,"reconnectionDelay"],[90,21,58,21,"reconnectionDelay"],[90,22,58,22,"v"],[90,23,58,23],[90,25,58,25],[91,6,59,8],[91,10,59,12,"_a"],[91,12,59,14],[92,6,60,8],[92,10,60,12,"v"],[92,11,60,13],[92,16,60,18,"undefined"],[92,25,60,27],[92,27,61,12],[92,34,61,19],[92,38,61,23],[92,39,61,24,"_reconnectionDelay"],[92,57,61,42],[93,6,62,8],[93,10,62,12],[93,11,62,13,"_reconnectionDelay"],[93,29,62,31],[93,32,62,34,"v"],[93,33,62,35],[94,6,63,8],[94,7,63,9,"_a"],[94,9,63,11],[94,12,63,14],[94,16,63,18],[94,17,63,19,"backoff"],[94,24,63,26],[94,30,63,32],[94,34,63,36],[94,38,63,40,"_a"],[94,40,63,42],[94,45,63,47],[94,50,63,52],[94,51,63,53],[94,54,63,56],[94,59,63,61],[94,60,63,62],[94,63,63,65,"_a"],[94,65,63,67],[94,66,63,68,"setMin"],[94,72,63,74],[94,73,63,75,"v"],[94,74,63,76],[94,75,63,77],[95,6,64,8],[95,13,64,15],[95,17,64,19],[96,4,65,4],[97,4,66,4,"randomizationFactor"],[97,23,66,23,"randomizationFactor"],[97,24,66,24,"v"],[97,25,66,25],[97,27,66,27],[98,6,67,8],[98,10,67,12,"_a"],[98,12,67,14],[99,6,68,8],[99,10,68,12,"v"],[99,11,68,13],[99,16,68,18,"undefined"],[99,25,68,27],[99,27,69,12],[99,34,69,19],[99,38,69,23],[99,39,69,24,"_randomizationFactor"],[99,59,69,44],[100,6,70,8],[100,10,70,12],[100,11,70,13,"_randomizationFactor"],[100,31,70,33],[100,34,70,36,"v"],[100,35,70,37],[101,6,71,8],[101,7,71,9,"_a"],[101,9,71,11],[101,12,71,14],[101,16,71,18],[101,17,71,19,"backoff"],[101,24,71,26],[101,30,71,32],[101,34,71,36],[101,38,71,40,"_a"],[101,40,71,42],[101,45,71,47],[101,50,71,52],[101,51,71,53],[101,54,71,56],[101,59,71,61],[101,60,71,62],[101,63,71,65,"_a"],[101,65,71,67],[101,66,71,68,"setJitter"],[101,75,71,77],[101,76,71,78,"v"],[101,77,71,79],[101,78,71,80],[102,6,72,8],[102,13,72,15],[102,17,72,19],[103,4,73,4],[104,4,74,4,"reconnectionDelayMax"],[104,24,74,24,"reconnectionDelayMax"],[104,25,74,25,"v"],[104,26,74,26],[104,28,74,28],[105,6,75,8],[105,10,75,12,"_a"],[105,12,75,14],[106,6,76,8],[106,10,76,12,"v"],[106,11,76,13],[106,16,76,18,"undefined"],[106,25,76,27],[106,27,77,12],[106,34,77,19],[106,38,77,23],[106,39,77,24,"_reconnectionDelayMax"],[106,60,77,45],[107,6,78,8],[107,10,78,12],[107,11,78,13,"_reconnectionDelayMax"],[107,32,78,34],[107,35,78,37,"v"],[107,36,78,38],[108,6,79,8],[108,7,79,9,"_a"],[108,9,79,11],[108,12,79,14],[108,16,79,18],[108,17,79,19,"backoff"],[108,24,79,26],[108,30,79,32],[108,34,79,36],[108,38,79,40,"_a"],[108,40,79,42],[108,45,79,47],[108,50,79,52],[108,51,79,53],[108,54,79,56],[108,59,79,61],[108,60,79,62],[108,63,79,65,"_a"],[108,65,79,67],[108,66,79,68,"setMax"],[108,72,79,74],[108,73,79,75,"v"],[108,74,79,76],[108,75,79,77],[109,6,80,8],[109,13,80,15],[109,17,80,19],[110,4,81,4],[111,4,82,4,"timeout"],[111,11,82,11,"timeout"],[111,12,82,12,"v"],[111,13,82,13],[111,15,82,15],[112,6,83,8],[112,10,83,12],[112,11,83,13,"arguments"],[112,20,83,22],[112,21,83,23,"length"],[112,27,83,29],[112,29,84,12],[112,36,84,19],[112,40,84,23],[112,41,84,24,"_timeout"],[112,49,84,32],[113,6,85,8],[113,10,85,12],[113,11,85,13,"_timeout"],[113,19,85,21],[113,22,85,24,"v"],[113,23,85,25],[114,6,86,8],[114,13,86,15],[114,17,86,19],[115,4,87,4],[116,4,88,4],[117,0,89,0],[118,0,90,0],[119,0,91,0],[120,0,92,0],[121,0,93,0],[122,4,94,4,"maybeReconnectOnOpen"],[122,24,94,24,"maybeReconnectOnOpen"],[122,25,94,24],[122,27,94,27],[123,6,95,8],[124,6,96,8],[124,10,96,12],[124,11,96,13],[124,15,96,17],[124,16,96,18,"_reconnecting"],[124,29,96,31],[124,33,97,12],[124,37,97,16],[124,38,97,17,"_reconnection"],[124,51,97,30],[124,55,98,12],[124,59,98,16],[124,60,98,17,"backoff"],[124,67,98,24],[124,68,98,25,"attempts"],[124,76,98,33],[124,81,98,38],[124,82,98,39],[124,84,98,41],[125,8,99,12],[126,8,100,12],[126,12,100,16],[126,13,100,17,"reconnect"],[126,22,100,26],[126,23,100,27],[126,24,100,28],[127,6,101,8],[128,4,102,4],[129,4,103,4],[130,0,104,0],[131,0,105,0],[132,0,106,0],[133,0,107,0],[134,0,108,0],[135,0,109,0],[136,4,110,4,"open"],[136,8,110,8,"open"],[136,9,110,9,"fn"],[136,11,110,11],[136,13,110,13],[137,6,111,8,"debug"],[137,11,111,13],[137,12,111,14],[137,27,111,29],[137,29,111,31],[137,33,111,35],[137,34,111,36,"_readyState"],[137,45,111,47],[137,46,111,48],[138,6,112,8],[138,10,112,12],[138,11,112,13],[138,15,112,17],[138,16,112,18,"_readyState"],[138,27,112,29],[138,28,112,30,"indexOf"],[138,35,112,37],[138,36,112,38],[138,42,112,44],[138,43,112,45],[138,45,113,12],[138,52,113,19],[138,56,113,23],[139,6,114,8,"debug"],[139,11,114,13],[139,12,114,14],[139,24,114,26],[139,26,114,28],[139,30,114,32],[139,31,114,33,"uri"],[139,34,114,36],[139,35,114,37],[140,6,115,8],[140,10,115,12],[140,11,115,13,"engine"],[140,17,115,19],[140,20,115,22],[140,24,115,26,"Engine"],[140,39,115,32],[140,40,115,32,"Socket"],[140,46,115,32],[140,47,115,33],[140,51,115,37],[140,52,115,38,"uri"],[140,55,115,41],[140,57,115,43],[140,61,115,47],[140,62,115,48,"opts"],[140,66,115,52],[140,67,115,53],[141,6,116,8],[141,12,116,14,"socket"],[141,18,116,20],[141,21,116,23],[141,25,116,27],[141,26,116,28,"engine"],[141,32,116,34],[142,6,117,8],[142,12,117,14,"self"],[142,16,117,18],[142,19,117,21],[142,23,117,25],[143,6,118,8],[143,10,118,12],[143,11,118,13,"_readyState"],[143,22,118,24],[143,25,118,27],[143,34,118,36],[144,6,119,8],[144,10,119,12],[144,11,119,13,"skipReconnect"],[144,24,119,26],[144,27,119,29],[144,32,119,34],[145,6,120,8],[146,6,121,8],[146,12,121,14,"openSubDestroy"],[146,26,121,28],[146,29,121,31],[146,33,121,31,"on"],[146,38,121,33],[146,39,121,33,"on"],[146,41,121,33],[146,43,121,34,"socket"],[146,49,121,40],[146,51,121,42],[146,57,121,48],[146,59,121,50],[146,71,121,62],[147,8,122,12,"self"],[147,12,122,16],[147,13,122,17,"onopen"],[147,19,122,23],[147,20,122,24],[147,21,122,25],[148,8,123,12,"fn"],[148,10,123,14],[148,14,123,18,"fn"],[148,16,123,20],[148,17,123,21],[148,18,123,22],[149,6,124,8],[149,7,124,9],[149,8,124,10],[150,6,125,8],[150,12,125,14,"onError"],[150,19,125,21],[150,22,125,25,"err"],[150,25,125,28],[150,29,125,33],[151,8,126,12,"debug"],[151,13,126,17],[151,14,126,18],[151,21,126,25],[151,22,126,26],[152,8,127,12],[152,12,127,16],[152,13,127,17,"cleanup"],[152,20,127,24],[152,21,127,25],[152,22,127,26],[153,8,128,12],[153,12,128,16],[153,13,128,17,"_readyState"],[153,24,128,28],[153,27,128,31],[153,35,128,39],[154,8,129,12],[154,12,129,16],[154,13,129,17,"emitReserved"],[154,25,129,29],[154,26,129,30],[154,33,129,37],[154,35,129,39,"err"],[154,38,129,42],[154,39,129,43],[155,8,130,12],[155,12,130,16,"fn"],[155,14,130,18],[155,16,130,20],[156,10,131,16,"fn"],[156,12,131,18],[156,13,131,19,"err"],[156,16,131,22],[156,17,131,23],[157,8,132,12],[157,9,132,13],[157,15,133,17],[158,10,134,16],[159,10,135,16],[159,14,135,20],[159,15,135,21,"maybeReconnectOnOpen"],[159,35,135,41],[159,36,135,42],[159,37,135,43],[160,8,136,12],[161,6,137,8],[161,7,137,9],[162,6,138,8],[163,6,139,8],[163,12,139,14,"errorSub"],[163,20,139,22],[163,23,139,25],[163,27,139,25,"on"],[163,32,139,27],[163,33,139,27,"on"],[163,35,139,27],[163,37,139,28,"socket"],[163,43,139,34],[163,45,139,36],[163,52,139,43],[163,54,139,45,"onError"],[163,61,139,52],[163,62,139,53],[164,6,140,8],[164,10,140,12],[164,15,140,17],[164,20,140,22],[164,24,140,26],[164,25,140,27,"_timeout"],[164,33,140,35],[164,35,140,37],[165,8,141,12],[165,14,141,18,"timeout"],[165,21,141,25],[165,24,141,28],[165,28,141,32],[165,29,141,33,"_timeout"],[165,37,141,41],[166,8,142,12,"debug"],[166,13,142,17],[166,14,142,18],[166,53,142,57],[166,55,142,59,"timeout"],[166,62,142,66],[166,63,142,67],[167,8,143,12],[168,8,144,12],[168,14,144,18,"timer"],[168,19,144,23],[168,22,144,26],[168,26,144,30],[168,27,144,31,"setTimeoutFn"],[168,39,144,43],[168,40,144,44],[168,46,144,50],[169,10,145,16,"debug"],[169,15,145,21],[169,16,145,22],[169,52,145,58],[169,54,145,60,"timeout"],[169,61,145,67],[169,62,145,68],[170,10,146,16,"openSubDestroy"],[170,24,146,30],[170,25,146,31],[170,26,146,32],[171,10,147,16,"onError"],[171,17,147,23],[171,18,147,24],[171,22,147,28,"Error"],[171,27,147,33],[171,28,147,34],[171,37,147,43],[171,38,147,44],[171,39,147,45],[172,10,148,16,"socket"],[172,16,148,22],[172,17,148,23,"close"],[172,22,148,28],[172,23,148,29],[172,24,148,30],[173,8,149,12],[173,9,149,13],[173,11,149,15,"timeout"],[173,18,149,22],[173,19,149,23],[174,8,150,12],[174,12,150,16],[174,16,150,20],[174,17,150,21,"opts"],[174,21,150,25],[174,22,150,26,"autoUnref"],[174,31,150,35],[174,33,150,37],[175,10,151,16,"timer"],[175,15,151,21],[175,16,151,22,"unref"],[175,21,151,27],[175,22,151,28],[175,23,151,29],[176,8,152,12],[177,8,153,12],[177,12,153,16],[177,13,153,17,"subs"],[177,17,153,21],[177,18,153,22,"push"],[177,22,153,26],[177,23,153,27],[177,29,153,33],[178,10,154,16],[178,14,154,20],[178,15,154,21,"clearTimeoutFn"],[178,29,154,35],[178,30,154,36,"timer"],[178,35,154,41],[178,36,154,42],[179,8,155,12],[179,9,155,13],[179,10,155,14],[180,6,156,8],[181,6,157,8],[181,10,157,12],[181,11,157,13,"subs"],[181,15,157,17],[181,16,157,18,"push"],[181,20,157,22],[181,21,157,23,"openSubDestroy"],[181,35,157,37],[181,36,157,38],[182,6,158,8],[182,10,158,12],[182,11,158,13,"subs"],[182,15,158,17],[182,16,158,18,"push"],[182,20,158,22],[182,21,158,23,"errorSub"],[182,29,158,31],[182,30,158,32],[183,6,159,8],[183,13,159,15],[183,17,159,19],[184,4,160,4],[185,4,161,4],[186,0,162,0],[187,0,163,0],[188,0,164,0],[189,0,165,0],[190,0,166,0],[191,4,167,4,"connect"],[191,11,167,11,"connect"],[191,12,167,12,"fn"],[191,14,167,14],[191,16,167,16],[192,6,168,8],[192,13,168,15],[192,17,168,19],[192,18,168,20,"open"],[192,22,168,24],[192,23,168,25,"fn"],[192,25,168,27],[192,26,168,28],[193,4,169,4],[194,4,170,4],[195,0,171,0],[196,0,172,0],[197,0,173,0],[198,0,174,0],[199,4,175,4,"onopen"],[199,10,175,10,"onopen"],[199,11,175,10],[199,13,175,13],[200,6,176,8,"debug"],[200,11,176,13],[200,12,176,14],[200,18,176,20],[200,19,176,21],[201,6,177,8],[202,6,178,8],[202,10,178,12],[202,11,178,13,"cleanup"],[202,18,178,20],[202,19,178,21],[202,20,178,22],[203,6,179,8],[204,6,180,8],[204,10,180,12],[204,11,180,13,"_readyState"],[204,22,180,24],[204,25,180,27],[204,31,180,33],[205,6,181,8],[205,10,181,12],[205,11,181,13,"emitReserved"],[205,23,181,25],[205,24,181,26],[205,30,181,32],[205,31,181,33],[206,6,182,8],[207,6,183,8],[207,12,183,14,"socket"],[207,18,183,20],[207,21,183,23],[207,25,183,27],[207,26,183,28,"engine"],[207,32,183,34],[208,6,184,8],[208,10,184,12],[208,11,184,13,"subs"],[208,15,184,17],[208,16,184,18,"push"],[208,20,184,22],[208,21,184,23],[208,25,184,23,"on"],[208,30,184,25],[208,31,184,25,"on"],[208,33,184,25],[208,35,184,26,"socket"],[208,41,184,32],[208,43,184,34],[208,49,184,40],[208,51,184,42],[208,55,184,46],[208,56,184,47,"onping"],[208,62,184,53],[208,63,184,54,"bind"],[208,67,184,58],[208,68,184,59],[208,72,184,63],[208,73,184,64],[208,74,184,65],[208,76,184,67],[208,80,184,67,"on"],[208,85,184,69],[208,86,184,69,"on"],[208,88,184,69],[208,90,184,70,"socket"],[208,96,184,76],[208,98,184,78],[208,104,184,84],[208,106,184,86],[208,110,184,90],[208,111,184,91,"ondata"],[208,117,184,97],[208,118,184,98,"bind"],[208,122,184,102],[208,123,184,103],[208,127,184,107],[208,128,184,108],[208,129,184,109],[208,131,184,111],[208,135,184,111,"on"],[208,140,184,113],[208,141,184,113,"on"],[208,143,184,113],[208,145,184,114,"socket"],[208,151,184,120],[208,153,184,122],[208,160,184,129],[208,162,184,131],[208,166,184,135],[208,167,184,136,"onerror"],[208,174,184,143],[208,175,184,144,"bind"],[208,179,184,148],[208,180,184,149],[208,184,184,153],[208,185,184,154],[208,186,184,155],[208,188,184,157],[208,192,184,157,"on"],[208,197,184,159],[208,198,184,159,"on"],[208,200,184,159],[208,202,184,160,"socket"],[208,208,184,166],[208,210,184,168],[208,217,184,175],[208,219,184,177],[208,223,184,181],[208,224,184,182,"onclose"],[208,231,184,189],[208,232,184,190,"bind"],[208,236,184,194],[208,237,184,195],[208,241,184,199],[208,242,184,200],[208,243,184,201],[209,6,185,8],[210,6,186,8],[210,10,186,8,"on"],[210,15,186,10],[210,16,186,10,"on"],[210,18,186,10],[210,20,186,11],[210,24,186,15],[210,25,186,16,"decoder"],[210,32,186,23],[210,34,186,25],[210,43,186,34],[210,45,186,36],[210,49,186,40],[210,50,186,41,"ondecoded"],[210,59,186,50],[210,60,186,51,"bind"],[210,64,186,55],[210,65,186,56],[210,69,186,60],[210,70,186,61],[210,71,186,62],[210,72,186,63],[211,4,187,4],[212,4,188,4],[213,0,189,0],[214,0,190,0],[215,0,191,0],[216,0,192,0],[217,4,193,4,"onping"],[217,10,193,10,"onping"],[217,11,193,10],[217,13,193,13],[218,6,194,8],[218,10,194,12],[218,11,194,13,"emitReserved"],[218,23,194,25],[218,24,194,26],[218,30,194,32],[218,31,194,33],[219,4,195,4],[220,4,196,4],[221,0,197,0],[222,0,198,0],[223,0,199,0],[224,0,200,0],[225,4,201,4,"ondata"],[225,10,201,10,"ondata"],[225,11,201,11,"data"],[225,15,201,15],[225,17,201,17],[226,6,202,8],[226,10,202,12],[227,8,203,12],[227,12,203,16],[227,13,203,17,"decoder"],[227,20,203,24],[227,21,203,25,"add"],[227,24,203,28],[227,25,203,29,"data"],[227,29,203,33],[227,30,203,34],[228,6,204,8],[228,7,204,9],[228,8,205,8],[228,15,205,15,"e"],[228,16,205,16],[228,18,205,18],[229,8,206,12],[229,12,206,16],[229,13,206,17,"onclose"],[229,20,206,24],[229,21,206,25],[229,34,206,38],[229,36,206,40,"e"],[229,37,206,41],[229,38,206,42],[230,6,207,8],[231,4,208,4],[232,4,209,4],[233,0,210,0],[234,0,211,0],[235,0,212,0],[236,0,213,0],[237,4,214,4,"ondecoded"],[237,13,214,13,"ondecoded"],[237,14,214,14,"packet"],[237,20,214,20],[237,22,214,22],[238,6,215,8],[239,6,216,8],[239,10,216,8,"nextTick"],[239,25,216,16],[239,26,216,16,"nextTick"],[239,34,216,16],[239,36,216,17],[239,42,216,23],[240,8,217,12],[240,12,217,16],[240,13,217,17,"emitReserved"],[240,25,217,29],[240,26,217,30],[240,34,217,38],[240,36,217,40,"packet"],[240,42,217,46],[240,43,217,47],[241,6,218,8],[241,7,218,9],[241,9,218,11],[241,13,218,15],[241,14,218,16,"setTimeoutFn"],[241,26,218,28],[241,27,218,29],[242,4,219,4],[243,4,220,4],[244,0,221,0],[245,0,222,0],[246,0,223,0],[247,0,224,0],[248,4,225,4,"onerror"],[248,11,225,11,"onerror"],[248,12,225,12,"err"],[248,15,225,15],[248,17,225,17],[249,6,226,8,"debug"],[249,11,226,13],[249,12,226,14],[249,19,226,21],[249,21,226,23,"err"],[249,24,226,26],[249,25,226,27],[250,6,227,8],[250,10,227,12],[250,11,227,13,"emitReserved"],[250,23,227,25],[250,24,227,26],[250,31,227,33],[250,33,227,35,"err"],[250,36,227,38],[250,37,227,39],[251,4,228,4],[252,4,229,4],[253,0,230,0],[254,0,231,0],[255,0,232,0],[256,0,233,0],[257,0,234,0],[258,4,235,4,"socket"],[258,10,235,10,"socket"],[258,11,235,11,"nsp"],[258,14,235,14],[258,16,235,16,"opts"],[258,20,235,20],[258,22,235,22],[259,6,236,8],[259,10,236,12,"socket"],[259,16,236,18],[259,19,236,21],[259,23,236,25],[259,24,236,26,"nsps"],[259,28,236,30],[259,29,236,31,"nsp"],[259,32,236,34],[259,33,236,35],[260,6,237,8],[260,10,237,12],[260,11,237,13,"socket"],[260,17,237,19],[260,19,237,21],[261,8,238,12,"socket"],[261,14,238,18],[261,17,238,21],[261,21,238,25,"Socket"],[261,30,238,31],[261,31,238,31,"Socket"],[261,37,238,31],[261,38,238,32],[261,42,238,36],[261,44,238,38,"nsp"],[261,47,238,41],[261,49,238,43,"opts"],[261,53,238,47],[261,54,238,48],[262,8,239,12],[262,12,239,16],[262,13,239,17,"nsps"],[262,17,239,21],[262,18,239,22,"nsp"],[262,21,239,25],[262,22,239,26],[262,25,239,29,"socket"],[262,31,239,35],[263,6,240,8],[263,7,240,9],[263,13,241,13],[263,17,241,17],[263,21,241,21],[263,22,241,22,"_autoConnect"],[263,34,241,34],[263,38,241,38],[263,39,241,39,"socket"],[263,45,241,45],[263,46,241,46,"active"],[263,52,241,52],[263,54,241,54],[264,8,242,12,"socket"],[264,14,242,18],[264,15,242,19,"connect"],[264,22,242,26],[264,23,242,27],[264,24,242,28],[265,6,243,8],[266,6,244,8],[266,13,244,15,"socket"],[266,19,244,21],[267,4,245,4],[268,4,246,4],[269,0,247,0],[270,0,248,0],[271,0,249,0],[272,0,250,0],[273,0,251,0],[274,4,252,4,"_destroy"],[274,12,252,12,"_destroy"],[274,13,252,13,"socket"],[274,19,252,19],[274,21,252,21],[275,6,253,8],[275,12,253,14,"nsps"],[275,16,253,18],[275,19,253,21,"Object"],[275,25,253,27],[275,26,253,28,"keys"],[275,30,253,32],[275,31,253,33],[275,35,253,37],[275,36,253,38,"nsps"],[275,40,253,42],[275,41,253,43],[276,6,254,8],[276,11,254,13],[276,17,254,19,"nsp"],[276,20,254,22],[276,24,254,26,"nsps"],[276,28,254,30],[276,30,254,32],[277,8,255,12],[277,14,255,18,"socket"],[277,20,255,24],[277,23,255,27],[277,27,255,31],[277,28,255,32,"nsps"],[277,32,255,36],[277,33,255,37,"nsp"],[277,36,255,40],[277,37,255,41],[278,8,256,12],[278,12,256,16,"socket"],[278,18,256,22],[278,19,256,23,"active"],[278,25,256,29],[278,27,256,31],[279,10,257,16,"debug"],[279,15,257,21],[279,16,257,22],[279,59,257,65],[279,61,257,67,"nsp"],[279,64,257,70],[279,65,257,71],[280,10,258,16],[281,8,259,12],[282,6,260,8],[283,6,261,8],[283,10,261,12],[283,11,261,13,"_close"],[283,17,261,19],[283,18,261,20],[283,19,261,21],[284,4,262,4],[285,4,263,4],[286,0,264,0],[287,0,265,0],[288,0,266,0],[289,0,267,0],[290,0,268,0],[291,4,269,4,"_packet"],[291,11,269,11,"_packet"],[291,12,269,12,"packet"],[291,18,269,18],[291,20,269,20],[292,6,270,8,"debug"],[292,11,270,13],[292,12,270,14],[292,31,270,33],[292,33,270,35,"packet"],[292,39,270,41],[292,40,270,42],[293,6,271,8],[293,12,271,14,"encodedPackets"],[293,26,271,28],[293,29,271,31],[293,33,271,35],[293,34,271,36,"encoder"],[293,41,271,43],[293,42,271,44,"encode"],[293,48,271,50],[293,49,271,51,"packet"],[293,55,271,57],[293,56,271,58],[294,6,272,8],[294,11,272,13],[294,15,272,17,"i"],[294,16,272,18],[294,19,272,21],[294,20,272,22],[294,22,272,24,"i"],[294,23,272,25],[294,26,272,28,"encodedPackets"],[294,40,272,42],[294,41,272,43,"length"],[294,47,272,49],[294,49,272,51,"i"],[294,50,272,52],[294,52,272,54],[294,54,272,56],[295,8,273,12],[295,12,273,16],[295,13,273,17,"engine"],[295,19,273,23],[295,20,273,24,"write"],[295,25,273,29],[295,26,273,30,"encodedPackets"],[295,40,273,44],[295,41,273,45,"i"],[295,42,273,46],[295,43,273,47],[295,45,273,49,"packet"],[295,51,273,55],[295,52,273,56,"options"],[295,59,273,63],[295,60,273,64],[296,6,274,8],[297,4,275,4],[298,4,276,4],[299,0,277,0],[300,0,278,0],[301,0,279,0],[302,0,280,0],[303,4,281,4,"cleanup"],[303,11,281,11,"cleanup"],[303,12,281,11],[303,14,281,14],[304,6,282,8,"debug"],[304,11,282,13],[304,12,282,14],[304,21,282,23],[304,22,282,24],[305,6,283,8],[305,10,283,12],[305,11,283,13,"subs"],[305,15,283,17],[305,16,283,18,"forEach"],[305,23,283,25],[305,24,283,27,"subDestroy"],[305,34,283,37],[305,38,283,42,"subDestroy"],[305,48,283,52],[305,49,283,53],[305,50,283,54],[305,51,283,55],[306,6,284,8],[306,10,284,12],[306,11,284,13,"subs"],[306,15,284,17],[306,16,284,18,"length"],[306,22,284,24],[306,25,284,27],[306,26,284,28],[307,6,285,8],[307,10,285,12],[307,11,285,13,"decoder"],[307,18,285,20],[307,19,285,21,"destroy"],[307,26,285,28],[307,27,285,29],[307,28,285,30],[308,4,286,4],[309,4,287,4],[310,0,288,0],[311,0,289,0],[312,0,290,0],[313,0,291,0],[314,4,292,4,"_close"],[314,10,292,10,"_close"],[314,11,292,10],[314,13,292,13],[315,6,293,8,"debug"],[315,11,293,13],[315,12,293,14],[315,24,293,26],[315,25,293,27],[316,6,294,8],[316,10,294,12],[316,11,294,13,"skipReconnect"],[316,24,294,26],[316,27,294,29],[316,31,294,33],[317,6,295,8],[317,10,295,12],[317,11,295,13,"_reconnecting"],[317,24,295,26],[317,27,295,29],[317,32,295,34],[318,6,296,8],[318,10,296,12],[318,11,296,13,"onclose"],[318,18,296,20],[318,19,296,21],[318,33,296,35],[318,34,296,36],[319,4,297,4],[320,4,298,4],[321,0,299,0],[322,0,300,0],[323,0,301,0],[324,0,302,0],[325,4,303,4,"disconnect"],[325,14,303,14,"disconnect"],[325,15,303,14],[325,17,303,17],[326,6,304,8],[326,13,304,15],[326,17,304,19],[326,18,304,20,"_close"],[326,24,304,26],[326,25,304,27],[326,26,304,28],[327,4,305,4],[328,4,306,4],[329,0,307,0],[330,0,308,0],[331,0,309,0],[332,0,310,0],[333,0,311,0],[334,0,312,0],[335,0,313,0],[336,0,314,0],[337,4,315,4,"onclose"],[337,11,315,11,"onclose"],[337,12,315,12,"reason"],[337,18,315,18],[337,20,315,20,"description"],[337,31,315,31],[337,33,315,33],[338,6,316,8],[338,10,316,12,"_a"],[338,12,316,14],[339,6,317,8,"debug"],[339,11,317,13],[339,12,317,14],[339,30,317,32],[339,32,317,34,"reason"],[339,38,317,40],[339,39,317,41],[340,6,318,8],[340,10,318,12],[340,11,318,13,"cleanup"],[340,18,318,20],[340,19,318,21],[340,20,318,22],[341,6,319,8],[341,7,319,9,"_a"],[341,9,319,11],[341,12,319,14],[341,16,319,18],[341,17,319,19,"engine"],[341,23,319,25],[341,29,319,31],[341,33,319,35],[341,37,319,39,"_a"],[341,39,319,41],[341,44,319,46],[341,49,319,51],[341,50,319,52],[341,53,319,55],[341,58,319,60],[341,59,319,61],[341,62,319,64,"_a"],[341,64,319,66],[341,65,319,67,"close"],[341,70,319,72],[341,71,319,73],[341,72,319,74],[342,6,320,8],[342,10,320,12],[342,11,320,13,"backoff"],[342,18,320,20],[342,19,320,21,"reset"],[342,24,320,26],[342,25,320,27],[342,26,320,28],[343,6,321,8],[343,10,321,12],[343,11,321,13,"_readyState"],[343,22,321,24],[343,25,321,27],[343,33,321,35],[344,6,322,8],[344,10,322,12],[344,11,322,13,"emitReserved"],[344,23,322,25],[344,24,322,26],[344,31,322,33],[344,33,322,35,"reason"],[344,39,322,41],[344,41,322,43,"description"],[344,52,322,54],[344,53,322,55],[345,6,323,8],[345,10,323,12],[345,14,323,16],[345,15,323,17,"_reconnection"],[345,28,323,30],[345,32,323,34],[345,33,323,35],[345,37,323,39],[345,38,323,40,"skipReconnect"],[345,51,323,53],[345,53,323,55],[346,8,324,12],[346,12,324,16],[346,13,324,17,"reconnect"],[346,22,324,26],[346,23,324,27],[346,24,324,28],[347,6,325,8],[348,4,326,4],[349,4,327,4],[350,0,328,0],[351,0,329,0],[352,0,330,0],[353,0,331,0],[354,4,332,4,"reconnect"],[354,13,332,13,"reconnect"],[354,14,332,13],[354,16,332,16],[355,6,333,8],[355,10,333,12],[355,14,333,16],[355,15,333,17,"_reconnecting"],[355,28,333,30],[355,32,333,34],[355,36,333,38],[355,37,333,39,"skipReconnect"],[355,50,333,52],[355,52,334,12],[355,59,334,19],[355,63,334,23],[356,6,335,8],[356,12,335,14,"self"],[356,16,335,18],[356,19,335,21],[356,23,335,25],[357,6,336,8],[357,10,336,12],[357,14,336,16],[357,15,336,17,"backoff"],[357,22,336,24],[357,23,336,25,"attempts"],[357,31,336,33],[357,35,336,37],[357,39,336,41],[357,40,336,42,"_reconnectionAttempts"],[357,61,336,63],[357,63,336,65],[358,8,337,12,"debug"],[358,13,337,17],[358,14,337,18],[358,32,337,36],[358,33,337,37],[359,8,338,12],[359,12,338,16],[359,13,338,17,"backoff"],[359,20,338,24],[359,21,338,25,"reset"],[359,26,338,30],[359,27,338,31],[359,28,338,32],[360,8,339,12],[360,12,339,16],[360,13,339,17,"emitReserved"],[360,25,339,29],[360,26,339,30],[360,44,339,48],[360,45,339,49],[361,8,340,12],[361,12,340,16],[361,13,340,17,"_reconnecting"],[361,26,340,30],[361,29,340,33],[361,34,340,38],[362,6,341,8],[362,7,341,9],[362,13,342,13],[363,8,343,12],[363,14,343,18,"delay"],[363,19,343,23],[363,22,343,26],[363,26,343,30],[363,27,343,31,"backoff"],[363,34,343,38],[363,35,343,39,"duration"],[363,43,343,47],[363,44,343,48],[363,45,343,49],[364,8,344,12,"debug"],[364,13,344,17],[364,14,344,18],[364,55,344,59],[364,57,344,61,"delay"],[364,62,344,66],[364,63,344,67],[365,8,345,12],[365,12,345,16],[365,13,345,17,"_reconnecting"],[365,26,345,30],[365,29,345,33],[365,33,345,37],[366,8,346,12],[366,14,346,18,"timer"],[366,19,346,23],[366,22,346,26],[366,26,346,30],[366,27,346,31,"setTimeoutFn"],[366,39,346,43],[366,40,346,44],[366,46,346,50],[367,10,347,16],[367,14,347,20,"self"],[367,18,347,24],[367,19,347,25,"skipReconnect"],[367,32,347,38],[367,34,348,20],[368,10,349,16,"debug"],[368,15,349,21],[368,16,349,22],[368,38,349,44],[368,39,349,45],[369,10,350,16],[369,14,350,20],[369,15,350,21,"emitReserved"],[369,27,350,33],[369,28,350,34],[369,47,350,53],[369,49,350,55,"self"],[369,53,350,59],[369,54,350,60,"backoff"],[369,61,350,67],[369,62,350,68,"attempts"],[369,70,350,76],[369,71,350,77],[370,10,351,16],[371,10,352,16],[371,14,352,20,"self"],[371,18,352,24],[371,19,352,25,"skipReconnect"],[371,32,352,38],[371,34,353,20],[372,10,354,16,"self"],[372,14,354,20],[372,15,354,21,"open"],[372,19,354,25],[372,20,354,27,"err"],[372,23,354,30],[372,27,354,35],[373,12,355,20],[373,16,355,24,"err"],[373,19,355,27],[373,21,355,29],[374,14,356,24,"debug"],[374,19,356,29],[374,20,356,30],[374,45,356,55],[374,46,356,56],[375,14,357,24,"self"],[375,18,357,28],[375,19,357,29,"_reconnecting"],[375,32,357,42],[375,35,357,45],[375,40,357,50],[376,14,358,24,"self"],[376,18,358,28],[376,19,358,29,"reconnect"],[376,28,358,38],[376,29,358,39],[376,30,358,40],[377,14,359,24],[377,18,359,28],[377,19,359,29,"emitReserved"],[377,31,359,41],[377,32,359,42],[377,49,359,59],[377,51,359,61,"err"],[377,54,359,64],[377,55,359,65],[378,12,360,20],[378,13,360,21],[378,19,361,25],[379,14,362,24,"debug"],[379,19,362,29],[379,20,362,30],[379,39,362,49],[379,40,362,50],[380,14,363,24,"self"],[380,18,363,28],[380,19,363,29,"onreconnect"],[380,30,363,40],[380,31,363,41],[380,32,363,42],[381,12,364,20],[382,10,365,16],[382,11,365,17],[382,12,365,18],[383,8,366,12],[383,9,366,13],[383,11,366,15,"delay"],[383,16,366,20],[383,17,366,21],[384,8,367,12],[384,12,367,16],[384,16,367,20],[384,17,367,21,"opts"],[384,21,367,25],[384,22,367,26,"autoUnref"],[384,31,367,35],[384,33,367,37],[385,10,368,16,"timer"],[385,15,368,21],[385,16,368,22,"unref"],[385,21,368,27],[385,22,368,28],[385,23,368,29],[386,8,369,12],[387,8,370,12],[387,12,370,16],[387,13,370,17,"subs"],[387,17,370,21],[387,18,370,22,"push"],[387,22,370,26],[387,23,370,27],[387,29,370,33],[388,10,371,16],[388,14,371,20],[388,15,371,21,"clearTimeoutFn"],[388,29,371,35],[388,30,371,36,"timer"],[388,35,371,41],[388,36,371,42],[389,8,372,12],[389,9,372,13],[389,10,372,14],[390,6,373,8],[391,4,374,4],[392,4,375,4],[393,0,376,0],[394,0,377,0],[395,0,378,0],[396,0,379,0],[397,4,380,4,"onreconnect"],[397,15,380,15,"onreconnect"],[397,16,380,15],[397,18,380,18],[398,6,381,8],[398,12,381,14,"attempt"],[398,19,381,21],[398,22,381,24],[398,26,381,28],[398,27,381,29,"backoff"],[398,34,381,36],[398,35,381,37,"attempts"],[398,43,381,45],[399,6,382,8],[399,10,382,12],[399,11,382,13,"_reconnecting"],[399,24,382,26],[399,27,382,29],[399,32,382,34],[400,6,383,8],[400,10,383,12],[400,11,383,13,"backoff"],[400,18,383,20],[400,19,383,21,"reset"],[400,24,383,26],[400,25,383,27],[400,26,383,28],[401,6,384,8],[401,10,384,12],[401,11,384,13,"emitReserved"],[401,23,384,25],[401,24,384,26],[401,35,384,37],[401,37,384,39,"attempt"],[401,44,384,46],[401,45,384,47],[402,4,385,4],[403,2,386,0],[404,0,386,1],[404,3]],"functionMap":{"names":["<global>","Manager","Manager#constructor","Manager#reconnection","Manager#reconnectionAttempts","Manager#reconnectionDelay","Manager#randomizationFactor","Manager#reconnectionDelayMax","Manager#timeout","Manager#maybeReconnectOnOpen","Manager#open","on$argument_2","onError","setTimeoutFn$argument_0","subs.push$argument_0","Manager#connect","Manager#onopen","Manager#onping","Manager#ondata","Manager#ondecoded","nextTick$argument_0","Manager#onerror","Manager#socket","Manager#_destroy","Manager#_packet","Manager#cleanup","subs.forEach$argument_0","Manager#_close","Manager#disconnect","Manager#onclose","Manager#reconnect","self.open$argument_0","Manager#onreconnect"],"mappings":"AAA;OCQ;ICC;KDgC;IEC;KFQ;IGC;KHK;IIC;KJO;IKC;KLO;IMC;KNO;IOC;KPK;IQO;KRQ;ISQ;kDCW;SDG;wBEC;SFY;4CGO;aHK;2BII;aJE;KTK;IcO;KdE;IeM;KfY;IgBM;KhBE;IiBM;KjBO;IkBM;iBCE;SDE;KlBC;IoBM;KpBG;IqBO;KrBU;IsBO;KtBU;IuBO;KvBM;IwBM;0BCE,4BD;KxBG;I0BM;K1BK;I2BM;K3BE;I4BU;K5BW;I6BM;4CjBc;0BkBQ;iBlBW;aiBC;2BhBI;agBE;K7BE;I+BM;K/BK;CDC"},"hasCjsExports":false},"type":"js/module"}]}