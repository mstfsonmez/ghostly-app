{"dependencies":[{"name":"../transport.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":44,"index":44}}],"key":"q68AWRvh2qc0QUlp41HSOL9aMUA=","exportNames":["*"],"imports":1}},{"name":"../util.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":45},"end":{"line":2,"column":42,"index":87}}],"key":"kanFP5HUYYYoVhDf3d7saim1ZXY=","exportNames":["*"],"imports":1}},{"name":"engine.io-parser","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":88},"end":{"line":3,"column":64,"index":152}}],"key":"IB5HY76c7xC+tDEPCV8b/nK76DU=","exportNames":["*"],"imports":1}},{"name":"debug","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":153},"end":{"line":4,"column":32,"index":185}}],"key":"Nx7LMnUOZdRc8E6QIb5nvmtJE+4=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"Polling\", {\n    enumerable: true,\n    get: function () {\n      return Polling;\n    }\n  });\n  var _transportJs = require(_dependencyMap[0], \"../transport.js\");\n  var _utilJs = require(_dependencyMap[1], \"../util.js\");\n  var _engineIoParser = require(_dependencyMap[2], \"engine.io-parser\");\n  var _debug = require(_dependencyMap[3], \"debug\");\n  var debugModule = _interopDefault(_debug);\n  // debug()\n  const debug = (0, debugModule.default)(\"engine.io-client:polling\"); // debug()\n  class Polling extends _transportJs.Transport {\n    constructor() {\n      super(...arguments);\n      this._polling = false;\n    }\n    get name() {\n      return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @protected\n     */\n    doOpen() {\n      this._poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} onPause - callback upon buffers are flushed and transport is paused\n     * @package\n     */\n    pause(onPause) {\n      this.readyState = \"pausing\";\n      const pause = () => {\n        debug(\"paused\");\n        this.readyState = \"paused\";\n        onPause();\n      };\n      if (this._polling || !this.writable) {\n        let total = 0;\n        if (this._polling) {\n          debug(\"we are currently polling - waiting to pause\");\n          total++;\n          this.once(\"pollComplete\", function () {\n            debug(\"pre-pause polling complete\");\n            --total || pause();\n          });\n        }\n        if (!this.writable) {\n          debug(\"we are currently writing - waiting to pause\");\n          total++;\n          this.once(\"drain\", function () {\n            debug(\"pre-pause writing complete\");\n            --total || pause();\n          });\n        }\n      } else {\n        pause();\n      }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @private\n     */\n    _poll() {\n      debug(\"polling\");\n      this._polling = true;\n      this.doPoll();\n      this.emitReserved(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @protected\n     */\n    onData(data) {\n      debug(\"polling got data %s\", data);\n      const callback = packet => {\n        // if its the first message we consider the transport open\n        if (\"opening\" === this.readyState && packet.type === \"open\") {\n          this.onOpen();\n        }\n        // if its a close packet, we close the ongoing requests\n        if (\"close\" === packet.type) {\n          this.onClose({\n            description: \"transport closed by the server\"\n          });\n          return false;\n        }\n        // otherwise bypass onData and handle the message\n        this.onPacket(packet);\n      };\n      // decode payload\n      (0, _engineIoParser.decodePayload)(data, this.socket.binaryType).forEach(callback);\n      // if an event did not trigger closing\n      if (\"closed\" !== this.readyState) {\n        // if we got data we're not polling\n        this._polling = false;\n        this.emitReserved(\"pollComplete\");\n        if (\"open\" === this.readyState) {\n          this._poll();\n        } else {\n          debug('ignoring poll - transport state \"%s\"', this.readyState);\n        }\n      }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @protected\n     */\n    doClose() {\n      const close = () => {\n        debug(\"writing close packet\");\n        this.write([{\n          type: \"close\"\n        }]);\n      };\n      if (\"open\" === this.readyState) {\n        debug(\"transport open - closing\");\n        close();\n      } else {\n        // in case we're trying to close while\n        // handshaking is in progress (GH-164)\n        debug(\"transport not open - deferring close\");\n        this.once(\"open\", close);\n      }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} packets - data packets\n     * @protected\n     */\n    write(packets) {\n      this.writable = false;\n      (0, _engineIoParser.encodePayload)(packets, data => {\n        this.doWrite(data, () => {\n          this.writable = true;\n          this.emitReserved(\"drain\");\n        });\n      });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n    uri() {\n      const schema = this.opts.secure ? \"https\" : \"http\";\n      const query = this.query || {};\n      // cache busting is forced\n      if (false !== this.opts.timestampRequests) {\n        query[this.opts.timestampParam] = (0, _utilJs.randomString)();\n      }\n      if (!this.supportsBinary && !query.sid) {\n        query.b64 = 1;\n      }\n      return this.createUri(schema, query);\n    }\n  }\n});","lineCount":179,"map":[[12,2,6,0,"Object"],[12,8,6,0],[12,9,6,0,"defineProperty"],[12,23,6,0],[12,24,6,0,"exports"],[12,31,6,0],[13,4,6,0,"enumerable"],[13,14,6,0],[14,4,6,0,"get"],[14,7,6,0],[14,18,6,0,"get"],[14,19,6,0],[15,6,6,0],[15,13,6,0,"Polling"],[15,20,6,0],[16,4,6,0],[17,2,6,0],[18,2,1,0],[18,6,1,0,"_transportJs"],[18,18,1,0],[18,21,1,0,"require"],[18,28,1,0],[18,29,1,0,"_dependencyMap"],[18,43,1,0],[19,2,2,0],[19,6,2,0,"_utilJs"],[19,13,2,0],[19,16,2,0,"require"],[19,23,2,0],[19,24,2,0,"_dependencyMap"],[19,38,2,0],[20,2,3,0],[20,6,3,0,"_engineIoParser"],[20,21,3,0],[20,24,3,0,"require"],[20,31,3,0],[20,32,3,0,"_dependencyMap"],[20,46,3,0],[21,2,4,0],[21,6,4,0,"_debug"],[21,12,4,0],[21,15,4,0,"require"],[21,22,4,0],[21,23,4,0,"_dependencyMap"],[21,37,4,0],[22,2,4,0],[22,6,4,0,"debugModule"],[22,17,4,0],[22,20,4,0,"_interopDefault"],[22,35,4,0],[22,36,4,0,"_debug"],[22,42,4,0],[23,2,4,33],[24,2,5,0],[24,8,5,6,"debug"],[24,13,5,11],[24,16,5,14],[24,20,5,14,"debugModule"],[24,31,5,25],[24,32,5,25,"default"],[24,39,5,25],[24,41,5,26],[24,67,5,52],[24,68,5,53],[24,69,5,54],[24,70,5,55],[25,2,6,7],[25,8,6,13,"Polling"],[25,15,6,20],[25,24,6,29,"Transport"],[25,36,6,38],[25,37,6,38,"Transport"],[25,46,6,38],[25,47,6,39],[26,4,7,4,"constructor"],[26,15,7,15,"constructor"],[26,16,7,15],[26,18,7,18],[27,6,8,8],[27,11,8,13],[27,12,8,14],[27,15,8,17,"arguments"],[27,24,8,26],[27,25,8,27],[28,6,9,8],[28,10,9,12],[28,11,9,13,"_polling"],[28,19,9,21],[28,22,9,24],[28,27,9,29],[29,4,10,4],[30,4,11,4],[30,8,11,8,"name"],[30,12,11,12,"name"],[30,13,11,12],[30,15,11,15],[31,6,12,8],[31,13,12,15],[31,22,12,24],[32,4,13,4],[33,4,14,4],[34,0,15,0],[35,0,16,0],[36,0,17,0],[37,0,18,0],[38,0,19,0],[39,4,20,4,"doOpen"],[39,10,20,10,"doOpen"],[39,11,20,10],[39,13,20,13],[40,6,21,8],[40,10,21,12],[40,11,21,13,"_poll"],[40,16,21,18],[40,17,21,19],[40,18,21,20],[41,4,22,4],[42,4,23,4],[43,0,24,0],[44,0,25,0],[45,0,26,0],[46,0,27,0],[47,0,28,0],[48,4,29,4,"pause"],[48,9,29,9,"pause"],[48,10,29,10,"onPause"],[48,17,29,17],[48,19,29,19],[49,6,30,8],[49,10,30,12],[49,11,30,13,"readyState"],[49,21,30,23],[49,24,30,26],[49,33,30,35],[50,6,31,8],[50,12,31,14,"pause"],[50,17,31,19],[50,20,31,22,"pause"],[50,21,31,22],[50,26,31,28],[51,8,32,12,"debug"],[51,13,32,17],[51,14,32,18],[51,22,32,26],[51,23,32,27],[52,8,33,12],[52,12,33,16],[52,13,33,17,"readyState"],[52,23,33,27],[52,26,33,30],[52,34,33,38],[53,8,34,12,"onPause"],[53,15,34,19],[53,16,34,20],[53,17,34,21],[54,6,35,8],[54,7,35,9],[55,6,36,8],[55,10,36,12],[55,14,36,16],[55,15,36,17,"_polling"],[55,23,36,25],[55,27,36,29],[55,28,36,30],[55,32,36,34],[55,33,36,35,"writable"],[55,41,36,43],[55,43,36,45],[56,8,37,12],[56,12,37,16,"total"],[56,17,37,21],[56,20,37,24],[56,21,37,25],[57,8,38,12],[57,12,38,16],[57,16,38,20],[57,17,38,21,"_polling"],[57,25,38,29],[57,27,38,31],[58,10,39,16,"debug"],[58,15,39,21],[58,16,39,22],[58,61,39,67],[58,62,39,68],[59,10,40,16,"total"],[59,15,40,21],[59,17,40,23],[60,10,41,16],[60,14,41,20],[60,15,41,21,"once"],[60,19,41,25],[60,20,41,26],[60,34,41,40],[60,36,41,42],[60,48,41,54],[61,12,42,20,"debug"],[61,17,42,25],[61,18,42,26],[61,46,42,54],[61,47,42,55],[62,12,43,20],[62,14,43,22,"total"],[62,19,43,27],[62,23,43,31,"pause"],[62,28,43,36],[62,29,43,37],[62,30,43,38],[63,10,44,16],[63,11,44,17],[63,12,44,18],[64,8,45,12],[65,8,46,12],[65,12,46,16],[65,13,46,17],[65,17,46,21],[65,18,46,22,"writable"],[65,26,46,30],[65,28,46,32],[66,10,47,16,"debug"],[66,15,47,21],[66,16,47,22],[66,61,47,67],[66,62,47,68],[67,10,48,16,"total"],[67,15,48,21],[67,17,48,23],[68,10,49,16],[68,14,49,20],[68,15,49,21,"once"],[68,19,49,25],[68,20,49,26],[68,27,49,33],[68,29,49,35],[68,41,49,47],[69,12,50,20,"debug"],[69,17,50,25],[69,18,50,26],[69,46,50,54],[69,47,50,55],[70,12,51,20],[70,14,51,22,"total"],[70,19,51,27],[70,23,51,31,"pause"],[70,28,51,36],[70,29,51,37],[70,30,51,38],[71,10,52,16],[71,11,52,17],[71,12,52,18],[72,8,53,12],[73,6,54,8],[73,7,54,9],[73,13,55,13],[74,8,56,12,"pause"],[74,13,56,17],[74,14,56,18],[74,15,56,19],[75,6,57,8],[76,4,58,4],[77,4,59,4],[78,0,60,0],[79,0,61,0],[80,0,62,0],[81,0,63,0],[82,4,64,4,"_poll"],[82,9,64,9,"_poll"],[82,10,64,9],[82,12,64,12],[83,6,65,8,"debug"],[83,11,65,13],[83,12,65,14],[83,21,65,23],[83,22,65,24],[84,6,66,8],[84,10,66,12],[84,11,66,13,"_polling"],[84,19,66,21],[84,22,66,24],[84,26,66,28],[85,6,67,8],[85,10,67,12],[85,11,67,13,"doPoll"],[85,17,67,19],[85,18,67,20],[85,19,67,21],[86,6,68,8],[86,10,68,12],[86,11,68,13,"emitReserved"],[86,23,68,25],[86,24,68,26],[86,30,68,32],[86,31,68,33],[87,4,69,4],[88,4,70,4],[89,0,71,0],[90,0,72,0],[91,0,73,0],[92,0,74,0],[93,4,75,4,"onData"],[93,10,75,10,"onData"],[93,11,75,11,"data"],[93,15,75,15],[93,17,75,17],[94,6,76,8,"debug"],[94,11,76,13],[94,12,76,14],[94,33,76,35],[94,35,76,37,"data"],[94,39,76,41],[94,40,76,42],[95,6,77,8],[95,12,77,14,"callback"],[95,20,77,22],[95,23,77,26,"packet"],[95,29,77,32],[95,33,77,37],[96,8,78,12],[97,8,79,12],[97,12,79,16],[97,21,79,25],[97,26,79,30],[97,30,79,34],[97,31,79,35,"readyState"],[97,41,79,45],[97,45,79,49,"packet"],[97,51,79,55],[97,52,79,56,"type"],[97,56,79,60],[97,61,79,65],[97,67,79,71],[97,69,79,73],[98,10,80,16],[98,14,80,20],[98,15,80,21,"onOpen"],[98,21,80,27],[98,22,80,28],[98,23,80,29],[99,8,81,12],[100,8,82,12],[101,8,83,12],[101,12,83,16],[101,19,83,23],[101,24,83,28,"packet"],[101,30,83,34],[101,31,83,35,"type"],[101,35,83,39],[101,37,83,41],[102,10,84,16],[102,14,84,20],[102,15,84,21,"onClose"],[102,22,84,28],[102,23,84,29],[103,12,84,31,"description"],[103,23,84,42],[103,25,84,44],[104,10,84,77],[104,11,84,78],[104,12,84,79],[105,10,85,16],[105,17,85,23],[105,22,85,28],[106,8,86,12],[107,8,87,12],[108,8,88,12],[108,12,88,16],[108,13,88,17,"onPacket"],[108,21,88,25],[108,22,88,26,"packet"],[108,28,88,32],[108,29,88,33],[109,6,89,8],[109,7,89,9],[110,6,90,8],[111,6,91,8],[111,10,91,8,"decodePayload"],[111,25,91,21],[111,26,91,21,"decodePayload"],[111,39,91,21],[111,41,91,22,"data"],[111,45,91,26],[111,47,91,28],[111,51,91,32],[111,52,91,33,"socket"],[111,58,91,39],[111,59,91,40,"binaryType"],[111,69,91,50],[111,70,91,51],[111,71,91,52,"forEach"],[111,78,91,59],[111,79,91,60,"callback"],[111,87,91,68],[111,88,91,69],[112,6,92,8],[113,6,93,8],[113,10,93,12],[113,18,93,20],[113,23,93,25],[113,27,93,29],[113,28,93,30,"readyState"],[113,38,93,40],[113,40,93,42],[114,8,94,12],[115,8,95,12],[115,12,95,16],[115,13,95,17,"_polling"],[115,21,95,25],[115,24,95,28],[115,29,95,33],[116,8,96,12],[116,12,96,16],[116,13,96,17,"emitReserved"],[116,25,96,29],[116,26,96,30],[116,40,96,44],[116,41,96,45],[117,8,97,12],[117,12,97,16],[117,18,97,22],[117,23,97,27],[117,27,97,31],[117,28,97,32,"readyState"],[117,38,97,42],[117,40,97,44],[118,10,98,16],[118,14,98,20],[118,15,98,21,"_poll"],[118,20,98,26],[118,21,98,27],[118,22,98,28],[119,8,99,12],[119,9,99,13],[119,15,100,17],[120,10,101,16,"debug"],[120,15,101,21],[120,16,101,22],[120,54,101,60],[120,56,101,62],[120,60,101,66],[120,61,101,67,"readyState"],[120,71,101,77],[120,72,101,78],[121,8,102,12],[122,6,103,8],[123,4,104,4],[124,4,105,4],[125,0,106,0],[126,0,107,0],[127,0,108,0],[128,0,109,0],[129,4,110,4,"doClose"],[129,11,110,11,"doClose"],[129,12,110,11],[129,14,110,14],[130,6,111,8],[130,12,111,14,"close"],[130,17,111,19],[130,20,111,22,"close"],[130,21,111,22],[130,26,111,28],[131,8,112,12,"debug"],[131,13,112,17],[131,14,112,18],[131,36,112,40],[131,37,112,41],[132,8,113,12],[132,12,113,16],[132,13,113,17,"write"],[132,18,113,22],[132,19,113,23],[132,20,113,24],[133,10,113,26,"type"],[133,14,113,30],[133,16,113,32],[134,8,113,40],[134,9,113,41],[134,10,113,42],[134,11,113,43],[135,6,114,8],[135,7,114,9],[136,6,115,8],[136,10,115,12],[136,16,115,18],[136,21,115,23],[136,25,115,27],[136,26,115,28,"readyState"],[136,36,115,38],[136,38,115,40],[137,8,116,12,"debug"],[137,13,116,17],[137,14,116,18],[137,40,116,44],[137,41,116,45],[138,8,117,12,"close"],[138,13,117,17],[138,14,117,18],[138,15,117,19],[139,6,118,8],[139,7,118,9],[139,13,119,13],[140,8,120,12],[141,8,121,12],[142,8,122,12,"debug"],[142,13,122,17],[142,14,122,18],[142,52,122,56],[142,53,122,57],[143,8,123,12],[143,12,123,16],[143,13,123,17,"once"],[143,17,123,21],[143,18,123,22],[143,24,123,28],[143,26,123,30,"close"],[143,31,123,35],[143,32,123,36],[144,6,124,8],[145,4,125,4],[146,4,126,4],[147,0,127,0],[148,0,128,0],[149,0,129,0],[150,0,130,0],[151,0,131,0],[152,4,132,4,"write"],[152,9,132,9,"write"],[152,10,132,10,"packets"],[152,17,132,17],[152,19,132,19],[153,6,133,8],[153,10,133,12],[153,11,133,13,"writable"],[153,19,133,21],[153,22,133,24],[153,27,133,29],[154,6,134,8],[154,10,134,8,"encodePayload"],[154,25,134,21],[154,26,134,21,"encodePayload"],[154,39,134,21],[154,41,134,22,"packets"],[154,48,134,29],[154,50,134,32,"data"],[154,54,134,36],[154,58,134,41],[155,8,135,12],[155,12,135,16],[155,13,135,17,"doWrite"],[155,20,135,24],[155,21,135,25,"data"],[155,25,135,29],[155,27,135,31],[155,33,135,37],[156,10,136,16],[156,14,136,20],[156,15,136,21,"writable"],[156,23,136,29],[156,26,136,32],[156,30,136,36],[157,10,137,16],[157,14,137,20],[157,15,137,21,"emitReserved"],[157,27,137,33],[157,28,137,34],[157,35,137,41],[157,36,137,42],[158,8,138,12],[158,9,138,13],[158,10,138,14],[159,6,139,8],[159,7,139,9],[159,8,139,10],[160,4,140,4],[161,4,141,4],[162,0,142,0],[163,0,143,0],[164,0,144,0],[165,0,145,0],[166,4,146,4,"uri"],[166,7,146,7,"uri"],[166,8,146,7],[166,10,146,10],[167,6,147,8],[167,12,147,14,"schema"],[167,18,147,20],[167,21,147,23],[167,25,147,27],[167,26,147,28,"opts"],[167,30,147,32],[167,31,147,33,"secure"],[167,37,147,39],[167,40,147,42],[167,47,147,49],[167,50,147,52],[167,56,147,58],[168,6,148,8],[168,12,148,14,"query"],[168,17,148,19],[168,20,148,22],[168,24,148,26],[168,25,148,27,"query"],[168,30,148,32],[168,34,148,36],[168,35,148,37],[168,36,148,38],[169,6,149,8],[170,6,150,8],[170,10,150,12],[170,15,150,17],[170,20,150,22],[170,24,150,26],[170,25,150,27,"opts"],[170,29,150,31],[170,30,150,32,"timestampRequests"],[170,47,150,49],[170,49,150,51],[171,8,151,12,"query"],[171,13,151,17],[171,14,151,18],[171,18,151,22],[171,19,151,23,"opts"],[171,23,151,27],[171,24,151,28,"timestampParam"],[171,38,151,42],[171,39,151,43],[171,42,151,46],[171,46,151,46,"randomString"],[171,53,151,58],[171,54,151,58,"randomString"],[171,66,151,58],[171,68,151,59],[171,69,151,60],[172,6,152,8],[173,6,153,8],[173,10,153,12],[173,11,153,13],[173,15,153,17],[173,16,153,18,"supportsBinary"],[173,30,153,32],[173,34,153,36],[173,35,153,37,"query"],[173,40,153,42],[173,41,153,43,"sid"],[173,44,153,46],[173,46,153,48],[174,8,154,12,"query"],[174,13,154,17],[174,14,154,18,"b64"],[174,17,154,21],[174,20,154,24],[174,21,154,25],[175,6,155,8],[176,6,156,8],[176,13,156,15],[176,17,156,19],[176,18,156,20,"createUri"],[176,27,156,29],[176,28,156,30,"schema"],[176,34,156,36],[176,36,156,38,"query"],[176,41,156,43],[176,42,156,44],[177,4,157,4],[178,2,158,0],[179,0,158,1],[179,3]],"functionMap":{"names":["<global>","Polling","Polling#constructor","Polling#get__name","Polling#doOpen","Polling#pause","pause","once$argument_1","Polling#_poll","Polling#onData","callback","Polling#doClose","close","Polling#write","encodePayload$argument_1","doWrite$argument_1","Polling#uri"],"mappings":"AAA;OCK;ICC;KDG;IEC;KFE;IGO;KHE;IIO;sBCE;SDI;0CEM;iBFG;mCEK;iBFG;KJM;IOM;KPK;IQM;yBCE;SDY;KRe;IUM;sBCC;SDG;KVW;IYO;+BCE;+BCC;aDG;SDC;KZC;IeM;KfW;CDC"},"hasCjsExports":false},"type":"js/module"}]}