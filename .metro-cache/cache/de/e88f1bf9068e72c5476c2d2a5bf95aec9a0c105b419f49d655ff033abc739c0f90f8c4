{"dependencies":[{"name":"stream","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":21,"index":36},"end":{"line":3,"column":38,"index":53}}],"key":"ywjhWBPQUrHXIfwGsbgNg7Szt/A=","exportNames":["*"],"imports":1}},{"name":"./permessage-deflate","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":26,"index":82},"end":{"line":5,"column":57,"index":113}}],"key":"Q2Pva8QskhgfG9XaS7nBCDBdIDE=","exportNames":["*"],"imports":1}},{"name":"./constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":11,"column":4,"index":187},"end":{"line":11,"column":26,"index":209}}],"key":"3z43bJyk/UB4EKjDCOXTFak09do=","exportNames":["*"],"imports":1}},{"name":"./buffer-util","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":12,"column":42,"index":253},"end":{"line":12,"column":66,"index":277}}],"key":"FKD7Yg4fnu7BzoYB+P98shiBLdA=","exportNames":["*"],"imports":1}},{"name":"./validation","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":13,"column":43,"index":322},"end":{"line":13,"column":66,"index":345}}],"key":"DtGlBq654swJEbIf2z6Mk/R87pk=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  const {\n    Writable\n  } = require(_dependencyMap[0], \"stream\");\n  const PerMessageDeflate = require(_dependencyMap[1], \"./permessage-deflate\");\n  const {\n    BINARY_TYPES,\n    EMPTY_BUFFER,\n    kStatusCode,\n    kWebSocket\n  } = require(_dependencyMap[2], \"./constants\");\n  const {\n    concat,\n    toArrayBuffer,\n    unmask\n  } = require(_dependencyMap[3], \"./buffer-util\");\n  const {\n    isValidStatusCode,\n    isValidUTF8\n  } = require(_dependencyMap[4], \"./validation\");\n  const FastBuffer = Buffer[Symbol.species];\n  const GET_INFO = 0;\n  const GET_PAYLOAD_LENGTH_16 = 1;\n  const GET_PAYLOAD_LENGTH_64 = 2;\n  const GET_MASK = 3;\n  const GET_DATA = 4;\n  const INFLATING = 5;\n  const DEFER_EVENT = 6;\n\n  /**\n   * HyBi Receiver implementation.\n   *\n   * @extends Writable\n   */\n  class Receiver extends Writable {\n    /**\n     * Creates a Receiver instance.\n     *\n     * @param {Object} [options] Options object\n     * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether\n     *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted\n     *     multiple times in the same tick\n     * @param {String} [options.binaryType=nodebuffer] The type for binary data\n     * @param {Object} [options.extensions] An object containing the negotiated\n     *     extensions\n     * @param {Boolean} [options.isServer=false] Specifies whether to operate in\n     *     client or server mode\n     * @param {Number} [options.maxPayload=0] The maximum allowed message length\n     * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n     *     not to skip UTF-8 validation for text and close messages\n     */\n    constructor(options = {}) {\n      super();\n      this._allowSynchronousEvents = options.allowSynchronousEvents !== undefined ? options.allowSynchronousEvents : true;\n      this._binaryType = options.binaryType || BINARY_TYPES[0];\n      this._extensions = options.extensions || {};\n      this._isServer = !!options.isServer;\n      this._maxPayload = options.maxPayload | 0;\n      this._skipUTF8Validation = !!options.skipUTF8Validation;\n      this[kWebSocket] = undefined;\n      this._bufferedBytes = 0;\n      this._buffers = [];\n      this._compressed = false;\n      this._payloadLength = 0;\n      this._mask = undefined;\n      this._fragmented = 0;\n      this._masked = false;\n      this._fin = false;\n      this._opcode = 0;\n      this._totalPayloadLength = 0;\n      this._messageLength = 0;\n      this._fragments = [];\n      this._errored = false;\n      this._loop = false;\n      this._state = GET_INFO;\n    }\n\n    /**\n     * Implements `Writable.prototype._write()`.\n     *\n     * @param {Buffer} chunk The chunk of data to write\n     * @param {String} encoding The character encoding of `chunk`\n     * @param {Function} cb Callback\n     * @private\n     */\n    _write(chunk, encoding, cb) {\n      if (this._opcode === 0x08 && this._state == GET_INFO) return cb();\n      this._bufferedBytes += chunk.length;\n      this._buffers.push(chunk);\n      this.startLoop(cb);\n    }\n\n    /**\n     * Consumes `n` bytes from the buffered data.\n     *\n     * @param {Number} n The number of bytes to consume\n     * @return {Buffer} The consumed bytes\n     * @private\n     */\n    consume(n) {\n      this._bufferedBytes -= n;\n      if (n === this._buffers[0].length) return this._buffers.shift();\n      if (n < this._buffers[0].length) {\n        const buf = this._buffers[0];\n        this._buffers[0] = new FastBuffer(buf.buffer, buf.byteOffset + n, buf.length - n);\n        return new FastBuffer(buf.buffer, buf.byteOffset, n);\n      }\n      const dst = Buffer.allocUnsafe(n);\n      do {\n        const buf = this._buffers[0];\n        const offset = dst.length - n;\n        if (n >= buf.length) {\n          dst.set(this._buffers.shift(), offset);\n        } else {\n          dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);\n          this._buffers[0] = new FastBuffer(buf.buffer, buf.byteOffset + n, buf.length - n);\n        }\n        n -= buf.length;\n      } while (n > 0);\n      return dst;\n    }\n\n    /**\n     * Starts the parsing loop.\n     *\n     * @param {Function} cb Callback\n     * @private\n     */\n    startLoop(cb) {\n      this._loop = true;\n      do {\n        switch (this._state) {\n          case GET_INFO:\n            this.getInfo(cb);\n            break;\n          case GET_PAYLOAD_LENGTH_16:\n            this.getPayloadLength16(cb);\n            break;\n          case GET_PAYLOAD_LENGTH_64:\n            this.getPayloadLength64(cb);\n            break;\n          case GET_MASK:\n            this.getMask();\n            break;\n          case GET_DATA:\n            this.getData(cb);\n            break;\n          case INFLATING:\n          case DEFER_EVENT:\n            this._loop = false;\n            return;\n        }\n      } while (this._loop);\n      if (!this._errored) cb();\n    }\n\n    /**\n     * Reads the first two bytes of a frame.\n     *\n     * @param {Function} cb Callback\n     * @private\n     */\n    getInfo(cb) {\n      if (this._bufferedBytes < 2) {\n        this._loop = false;\n        return;\n      }\n      const buf = this.consume(2);\n      if ((buf[0] & 0x30) !== 0x00) {\n        const error = this.createError(RangeError, 'RSV2 and RSV3 must be clear', true, 1002, 'WS_ERR_UNEXPECTED_RSV_2_3');\n        cb(error);\n        return;\n      }\n      const compressed = (buf[0] & 0x40) === 0x40;\n      if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {\n        const error = this.createError(RangeError, 'RSV1 must be clear', true, 1002, 'WS_ERR_UNEXPECTED_RSV_1');\n        cb(error);\n        return;\n      }\n      this._fin = (buf[0] & 0x80) === 0x80;\n      this._opcode = buf[0] & 0x0f;\n      this._payloadLength = buf[1] & 0x7f;\n      if (this._opcode === 0x00) {\n        if (compressed) {\n          const error = this.createError(RangeError, 'RSV1 must be clear', true, 1002, 'WS_ERR_UNEXPECTED_RSV_1');\n          cb(error);\n          return;\n        }\n        if (!this._fragmented) {\n          const error = this.createError(RangeError, 'invalid opcode 0', true, 1002, 'WS_ERR_INVALID_OPCODE');\n          cb(error);\n          return;\n        }\n        this._opcode = this._fragmented;\n      } else if (this._opcode === 0x01 || this._opcode === 0x02) {\n        if (this._fragmented) {\n          const error = this.createError(RangeError, `invalid opcode ${this._opcode}`, true, 1002, 'WS_ERR_INVALID_OPCODE');\n          cb(error);\n          return;\n        }\n        this._compressed = compressed;\n      } else if (this._opcode > 0x07 && this._opcode < 0x0b) {\n        if (!this._fin) {\n          const error = this.createError(RangeError, 'FIN must be set', true, 1002, 'WS_ERR_EXPECTED_FIN');\n          cb(error);\n          return;\n        }\n        if (compressed) {\n          const error = this.createError(RangeError, 'RSV1 must be clear', true, 1002, 'WS_ERR_UNEXPECTED_RSV_1');\n          cb(error);\n          return;\n        }\n        if (this._payloadLength > 0x7d || this._opcode === 0x08 && this._payloadLength === 1) {\n          const error = this.createError(RangeError, `invalid payload length ${this._payloadLength}`, true, 1002, 'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH');\n          cb(error);\n          return;\n        }\n      } else {\n        const error = this.createError(RangeError, `invalid opcode ${this._opcode}`, true, 1002, 'WS_ERR_INVALID_OPCODE');\n        cb(error);\n        return;\n      }\n      if (!this._fin && !this._fragmented) this._fragmented = this._opcode;\n      this._masked = (buf[1] & 0x80) === 0x80;\n      if (this._isServer) {\n        if (!this._masked) {\n          const error = this.createError(RangeError, 'MASK must be set', true, 1002, 'WS_ERR_EXPECTED_MASK');\n          cb(error);\n          return;\n        }\n      } else if (this._masked) {\n        const error = this.createError(RangeError, 'MASK must be clear', true, 1002, 'WS_ERR_UNEXPECTED_MASK');\n        cb(error);\n        return;\n      }\n      if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;else this.haveLength(cb);\n    }\n\n    /**\n     * Gets extended payload length (7+16).\n     *\n     * @param {Function} cb Callback\n     * @private\n     */\n    getPayloadLength16(cb) {\n      if (this._bufferedBytes < 2) {\n        this._loop = false;\n        return;\n      }\n      this._payloadLength = this.consume(2).readUInt16BE(0);\n      this.haveLength(cb);\n    }\n\n    /**\n     * Gets extended payload length (7+64).\n     *\n     * @param {Function} cb Callback\n     * @private\n     */\n    getPayloadLength64(cb) {\n      if (this._bufferedBytes < 8) {\n        this._loop = false;\n        return;\n      }\n      const buf = this.consume(8);\n      const num = buf.readUInt32BE(0);\n\n      //\n      // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\n      // if payload length is greater than this number.\n      //\n      if (num > Math.pow(2, 53 - 32) - 1) {\n        const error = this.createError(RangeError, 'Unsupported WebSocket frame: payload length > 2^53 - 1', false, 1009, 'WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH');\n        cb(error);\n        return;\n      }\n      this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);\n      this.haveLength(cb);\n    }\n\n    /**\n     * Payload length has been read.\n     *\n     * @param {Function} cb Callback\n     * @private\n     */\n    haveLength(cb) {\n      if (this._payloadLength && this._opcode < 0x08) {\n        this._totalPayloadLength += this._payloadLength;\n        if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {\n          const error = this.createError(RangeError, 'Max payload size exceeded', false, 1009, 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH');\n          cb(error);\n          return;\n        }\n      }\n      if (this._masked) this._state = GET_MASK;else this._state = GET_DATA;\n    }\n\n    /**\n     * Reads mask bytes.\n     *\n     * @private\n     */\n    getMask() {\n      if (this._bufferedBytes < 4) {\n        this._loop = false;\n        return;\n      }\n      this._mask = this.consume(4);\n      this._state = GET_DATA;\n    }\n\n    /**\n     * Reads data bytes.\n     *\n     * @param {Function} cb Callback\n     * @private\n     */\n    getData(cb) {\n      let data = EMPTY_BUFFER;\n      if (this._payloadLength) {\n        if (this._bufferedBytes < this._payloadLength) {\n          this._loop = false;\n          return;\n        }\n        data = this.consume(this._payloadLength);\n        if (this._masked && (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0) {\n          unmask(data, this._mask);\n        }\n      }\n      if (this._opcode > 0x07) {\n        this.controlMessage(data, cb);\n        return;\n      }\n      if (this._compressed) {\n        this._state = INFLATING;\n        this.decompress(data, cb);\n        return;\n      }\n      if (data.length) {\n        //\n        // This message is not compressed so its length is the sum of the payload\n        // length of all fragments.\n        //\n        this._messageLength = this._totalPayloadLength;\n        this._fragments.push(data);\n      }\n      this.dataMessage(cb);\n    }\n\n    /**\n     * Decompresses data.\n     *\n     * @param {Buffer} data Compressed data\n     * @param {Function} cb Callback\n     * @private\n     */\n    decompress(data, cb) {\n      const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n      perMessageDeflate.decompress(data, this._fin, (err, buf) => {\n        if (err) return cb(err);\n        if (buf.length) {\n          this._messageLength += buf.length;\n          if (this._messageLength > this._maxPayload && this._maxPayload > 0) {\n            const error = this.createError(RangeError, 'Max payload size exceeded', false, 1009, 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH');\n            cb(error);\n            return;\n          }\n          this._fragments.push(buf);\n        }\n        this.dataMessage(cb);\n        if (this._state === GET_INFO) this.startLoop(cb);\n      });\n    }\n\n    /**\n     * Handles a data message.\n     *\n     * @param {Function} cb Callback\n     * @private\n     */\n    dataMessage(cb) {\n      if (!this._fin) {\n        this._state = GET_INFO;\n        return;\n      }\n      const messageLength = this._messageLength;\n      const fragments = this._fragments;\n      this._totalPayloadLength = 0;\n      this._messageLength = 0;\n      this._fragmented = 0;\n      this._fragments = [];\n      if (this._opcode === 2) {\n        let data;\n        if (this._binaryType === 'nodebuffer') {\n          data = concat(fragments, messageLength);\n        } else if (this._binaryType === 'arraybuffer') {\n          data = toArrayBuffer(concat(fragments, messageLength));\n        } else {\n          data = fragments;\n        }\n        if (this._allowSynchronousEvents) {\n          this.emit('message', data, true);\n          this._state = GET_INFO;\n        } else {\n          this._state = DEFER_EVENT;\n          setImmediate(() => {\n            this.emit('message', data, true);\n            this._state = GET_INFO;\n            this.startLoop(cb);\n          });\n        }\n      } else {\n        const buf = concat(fragments, messageLength);\n        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n          const error = this.createError(Error, 'invalid UTF-8 sequence', true, 1007, 'WS_ERR_INVALID_UTF8');\n          cb(error);\n          return;\n        }\n        if (this._state === INFLATING || this._allowSynchronousEvents) {\n          this.emit('message', buf, false);\n          this._state = GET_INFO;\n        } else {\n          this._state = DEFER_EVENT;\n          setImmediate(() => {\n            this.emit('message', buf, false);\n            this._state = GET_INFO;\n            this.startLoop(cb);\n          });\n        }\n      }\n    }\n\n    /**\n     * Handles a control message.\n     *\n     * @param {Buffer} data Data to handle\n     * @return {(Error|RangeError|undefined)} A possible error\n     * @private\n     */\n    controlMessage(data, cb) {\n      if (this._opcode === 0x08) {\n        if (data.length === 0) {\n          this._loop = false;\n          this.emit('conclude', 1005, EMPTY_BUFFER);\n          this.end();\n        } else {\n          const code = data.readUInt16BE(0);\n          if (!isValidStatusCode(code)) {\n            const error = this.createError(RangeError, `invalid status code ${code}`, true, 1002, 'WS_ERR_INVALID_CLOSE_CODE');\n            cb(error);\n            return;\n          }\n          const buf = new FastBuffer(data.buffer, data.byteOffset + 2, data.length - 2);\n          if (!this._skipUTF8Validation && !isValidUTF8(buf)) {\n            const error = this.createError(Error, 'invalid UTF-8 sequence', true, 1007, 'WS_ERR_INVALID_UTF8');\n            cb(error);\n            return;\n          }\n          this._loop = false;\n          this.emit('conclude', code, buf);\n          this.end();\n        }\n        this._state = GET_INFO;\n        return;\n      }\n      if (this._allowSynchronousEvents) {\n        this.emit(this._opcode === 0x09 ? 'ping' : 'pong', data);\n        this._state = GET_INFO;\n      } else {\n        this._state = DEFER_EVENT;\n        setImmediate(() => {\n          this.emit(this._opcode === 0x09 ? 'ping' : 'pong', data);\n          this._state = GET_INFO;\n          this.startLoop(cb);\n        });\n      }\n    }\n\n    /**\n     * Builds an error object.\n     *\n     * @param {function(new:Error|RangeError)} ErrorCtor The error constructor\n     * @param {String} message The error message\n     * @param {Boolean} prefix Specifies whether or not to add a default prefix to\n     *     `message`\n     * @param {Number} statusCode The status code\n     * @param {String} errorCode The exposed error code\n     * @return {(Error|RangeError)} The error\n     * @private\n     */\n    createError(ErrorCtor, message, prefix, statusCode, errorCode) {\n      this._loop = false;\n      this._errored = true;\n      const err = new ErrorCtor(prefix ? `Invalid WebSocket frame: ${message}` : message);\n      Error.captureStackTrace(err, this.createError);\n      err.code = errorCode;\n      err[kStatusCode] = statusCode;\n      return err;\n    }\n  }\n  module.exports = Receiver;\n});","lineCount":505,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,8,3,6],[5,4,3,8,"Writable"],[6,2,3,17],[6,3,3,18],[6,6,3,21,"require"],[6,13,3,28],[6,14,3,28,"_dependencyMap"],[6,28,3,28],[6,41,3,37],[6,42,3,38],[7,2,5,0],[7,8,5,6,"PerMessageDeflate"],[7,25,5,23],[7,28,5,26,"require"],[7,35,5,33],[7,36,5,33,"_dependencyMap"],[7,50,5,33],[7,77,5,56],[7,78,5,57],[8,2,6,0],[8,8,6,6],[9,4,7,2,"BINARY_TYPES"],[9,16,7,14],[10,4,8,2,"EMPTY_BUFFER"],[10,16,8,14],[11,4,9,2,"kStatusCode"],[11,15,9,13],[12,4,10,2,"kWebSocket"],[13,2,11,0],[13,3,11,1],[13,6,11,4,"require"],[13,13,11,11],[13,14,11,11,"_dependencyMap"],[13,28,11,11],[13,46,11,25],[13,47,11,26],[14,2,12,0],[14,8,12,6],[15,4,12,8,"concat"],[15,10,12,14],[16,4,12,16,"toArrayBuffer"],[16,17,12,29],[17,4,12,31,"unmask"],[18,2,12,38],[18,3,12,39],[18,6,12,42,"require"],[18,13,12,49],[18,14,12,49,"_dependencyMap"],[18,28,12,49],[18,48,12,65],[18,49,12,66],[19,2,13,0],[19,8,13,6],[20,4,13,8,"isValidStatusCode"],[20,21,13,25],[21,4,13,27,"isValidUTF8"],[22,2,13,39],[22,3,13,40],[22,6,13,43,"require"],[22,13,13,50],[22,14,13,50,"_dependencyMap"],[22,28,13,50],[22,47,13,65],[22,48,13,66],[23,2,15,0],[23,8,15,6,"FastBuffer"],[23,18,15,16],[23,21,15,19,"Buffer"],[23,27,15,25],[23,28,15,26,"Symbol"],[23,34,15,32],[23,35,15,33,"species"],[23,42,15,40],[23,43,15,41],[24,2,17,0],[24,8,17,6,"GET_INFO"],[24,16,17,14],[24,19,17,17],[24,20,17,18],[25,2,18,0],[25,8,18,6,"GET_PAYLOAD_LENGTH_16"],[25,29,18,27],[25,32,18,30],[25,33,18,31],[26,2,19,0],[26,8,19,6,"GET_PAYLOAD_LENGTH_64"],[26,29,19,27],[26,32,19,30],[26,33,19,31],[27,2,20,0],[27,8,20,6,"GET_MASK"],[27,16,20,14],[27,19,20,17],[27,20,20,18],[28,2,21,0],[28,8,21,6,"GET_DATA"],[28,16,21,14],[28,19,21,17],[28,20,21,18],[29,2,22,0],[29,8,22,6,"INFLATING"],[29,17,22,15],[29,20,22,18],[29,21,22,19],[30,2,23,0],[30,8,23,6,"DEFER_EVENT"],[30,19,23,17],[30,22,23,20],[30,23,23,21],[32,2,25,0],[33,0,26,0],[34,0,27,0],[35,0,28,0],[36,0,29,0],[37,2,30,0],[37,8,30,6,"Receiver"],[37,16,30,14],[37,25,30,23,"Writable"],[37,33,30,31],[37,34,30,32],[38,4,31,2],[39,0,32,0],[40,0,33,0],[41,0,34,0],[42,0,35,0],[43,0,36,0],[44,0,37,0],[45,0,38,0],[46,0,39,0],[47,0,40,0],[48,0,41,0],[49,0,42,0],[50,0,43,0],[51,0,44,0],[52,0,45,0],[53,0,46,0],[54,4,47,2,"constructor"],[54,15,47,13,"constructor"],[54,16,47,14,"options"],[54,23,47,21],[54,26,47,24],[54,27,47,25],[54,28,47,26],[54,30,47,28],[55,6,48,4],[55,11,48,9],[55,12,48,10],[55,13,48,11],[56,6,50,4],[56,10,50,8],[56,11,50,9,"_allowSynchronousEvents"],[56,34,50,32],[56,37,51,6,"options"],[56,44,51,13],[56,45,51,14,"allowSynchronousEvents"],[56,67,51,36],[56,72,51,41,"undefined"],[56,81,51,50],[56,84,52,10,"options"],[56,91,52,17],[56,92,52,18,"allowSynchronousEvents"],[56,114,52,40],[56,117,53,10],[56,121,53,14],[57,6,54,4],[57,10,54,8],[57,11,54,9,"_binaryType"],[57,22,54,20],[57,25,54,23,"options"],[57,32,54,30],[57,33,54,31,"binaryType"],[57,43,54,41],[57,47,54,45,"BINARY_TYPES"],[57,59,54,57],[57,60,54,58],[57,61,54,59],[57,62,54,60],[58,6,55,4],[58,10,55,8],[58,11,55,9,"_extensions"],[58,22,55,20],[58,25,55,23,"options"],[58,32,55,30],[58,33,55,31,"extensions"],[58,43,55,41],[58,47,55,45],[58,48,55,46],[58,49,55,47],[59,6,56,4],[59,10,56,8],[59,11,56,9,"_isServer"],[59,20,56,18],[59,23,56,21],[59,24,56,22],[59,25,56,23,"options"],[59,32,56,30],[59,33,56,31,"isServer"],[59,41,56,39],[60,6,57,4],[60,10,57,8],[60,11,57,9,"_maxPayload"],[60,22,57,20],[60,25,57,23,"options"],[60,32,57,30],[60,33,57,31,"maxPayload"],[60,43,57,41],[60,46,57,44],[60,47,57,45],[61,6,58,4],[61,10,58,8],[61,11,58,9,"_skipUTF8Validation"],[61,30,58,28],[61,33,58,31],[61,34,58,32],[61,35,58,33,"options"],[61,42,58,40],[61,43,58,41,"skipUTF8Validation"],[61,61,58,59],[62,6,59,4],[62,10,59,8],[62,11,59,9,"kWebSocket"],[62,21,59,19],[62,22,59,20],[62,25,59,23,"undefined"],[62,34,59,32],[63,6,61,4],[63,10,61,8],[63,11,61,9,"_bufferedBytes"],[63,25,61,23],[63,28,61,26],[63,29,61,27],[64,6,62,4],[64,10,62,8],[64,11,62,9,"_buffers"],[64,19,62,17],[64,22,62,20],[64,24,62,22],[65,6,64,4],[65,10,64,8],[65,11,64,9,"_compressed"],[65,22,64,20],[65,25,64,23],[65,30,64,28],[66,6,65,4],[66,10,65,8],[66,11,65,9,"_payloadLength"],[66,25,65,23],[66,28,65,26],[66,29,65,27],[67,6,66,4],[67,10,66,8],[67,11,66,9,"_mask"],[67,16,66,14],[67,19,66,17,"undefined"],[67,28,66,26],[68,6,67,4],[68,10,67,8],[68,11,67,9,"_fragmented"],[68,22,67,20],[68,25,67,23],[68,26,67,24],[69,6,68,4],[69,10,68,8],[69,11,68,9,"_masked"],[69,18,68,16],[69,21,68,19],[69,26,68,24],[70,6,69,4],[70,10,69,8],[70,11,69,9,"_fin"],[70,15,69,13],[70,18,69,16],[70,23,69,21],[71,6,70,4],[71,10,70,8],[71,11,70,9,"_opcode"],[71,18,70,16],[71,21,70,19],[71,22,70,20],[72,6,72,4],[72,10,72,8],[72,11,72,9,"_totalPayloadLength"],[72,30,72,28],[72,33,72,31],[72,34,72,32],[73,6,73,4],[73,10,73,8],[73,11,73,9,"_messageLength"],[73,25,73,23],[73,28,73,26],[73,29,73,27],[74,6,74,4],[74,10,74,8],[74,11,74,9,"_fragments"],[74,21,74,19],[74,24,74,22],[74,26,74,24],[75,6,76,4],[75,10,76,8],[75,11,76,9,"_errored"],[75,19,76,17],[75,22,76,20],[75,27,76,25],[76,6,77,4],[76,10,77,8],[76,11,77,9,"_loop"],[76,16,77,14],[76,19,77,17],[76,24,77,22],[77,6,78,4],[77,10,78,8],[77,11,78,9,"_state"],[77,17,78,15],[77,20,78,18,"GET_INFO"],[77,28,78,26],[78,4,79,2],[80,4,81,2],[81,0,82,0],[82,0,83,0],[83,0,84,0],[84,0,85,0],[85,0,86,0],[86,0,87,0],[87,0,88,0],[88,4,89,2,"_write"],[88,10,89,8,"_write"],[88,11,89,9,"chunk"],[88,16,89,14],[88,18,89,16,"encoding"],[88,26,89,24],[88,28,89,26,"cb"],[88,30,89,28],[88,32,89,30],[89,6,90,4],[89,10,90,8],[89,14,90,12],[89,15,90,13,"_opcode"],[89,22,90,20],[89,27,90,25],[89,31,90,29],[89,35,90,33],[89,39,90,37],[89,40,90,38,"_state"],[89,46,90,44],[89,50,90,48,"GET_INFO"],[89,58,90,56],[89,60,90,58],[89,67,90,65,"cb"],[89,69,90,67],[89,70,90,68],[89,71,90,69],[90,6,92,4],[90,10,92,8],[90,11,92,9,"_bufferedBytes"],[90,25,92,23],[90,29,92,27,"chunk"],[90,34,92,32],[90,35,92,33,"length"],[90,41,92,39],[91,6,93,4],[91,10,93,8],[91,11,93,9,"_buffers"],[91,19,93,17],[91,20,93,18,"push"],[91,24,93,22],[91,25,93,23,"chunk"],[91,30,93,28],[91,31,93,29],[92,6,94,4],[92,10,94,8],[92,11,94,9,"startLoop"],[92,20,94,18],[92,21,94,19,"cb"],[92,23,94,21],[92,24,94,22],[93,4,95,2],[95,4,97,2],[96,0,98,0],[97,0,99,0],[98,0,100,0],[99,0,101,0],[100,0,102,0],[101,0,103,0],[102,4,104,2,"consume"],[102,11,104,9,"consume"],[102,12,104,10,"n"],[102,13,104,11],[102,15,104,13],[103,6,105,4],[103,10,105,8],[103,11,105,9,"_bufferedBytes"],[103,25,105,23],[103,29,105,27,"n"],[103,30,105,28],[104,6,107,4],[104,10,107,8,"n"],[104,11,107,9],[104,16,107,14],[104,20,107,18],[104,21,107,19,"_buffers"],[104,29,107,27],[104,30,107,28],[104,31,107,29],[104,32,107,30],[104,33,107,31,"length"],[104,39,107,37],[104,41,107,39],[104,48,107,46],[104,52,107,50],[104,53,107,51,"_buffers"],[104,61,107,59],[104,62,107,60,"shift"],[104,67,107,65],[104,68,107,66],[104,69,107,67],[105,6,109,4],[105,10,109,8,"n"],[105,11,109,9],[105,14,109,12],[105,18,109,16],[105,19,109,17,"_buffers"],[105,27,109,25],[105,28,109,26],[105,29,109,27],[105,30,109,28],[105,31,109,29,"length"],[105,37,109,35],[105,39,109,37],[106,8,110,6],[106,14,110,12,"buf"],[106,17,110,15],[106,20,110,18],[106,24,110,22],[106,25,110,23,"_buffers"],[106,33,110,31],[106,34,110,32],[106,35,110,33],[106,36,110,34],[107,8,111,6],[107,12,111,10],[107,13,111,11,"_buffers"],[107,21,111,19],[107,22,111,20],[107,23,111,21],[107,24,111,22],[107,27,111,25],[107,31,111,29,"FastBuffer"],[107,41,111,39],[107,42,112,8,"buf"],[107,45,112,11],[107,46,112,12,"buffer"],[107,52,112,18],[107,54,113,8,"buf"],[107,57,113,11],[107,58,113,12,"byteOffset"],[107,68,113,22],[107,71,113,25,"n"],[107,72,113,26],[107,74,114,8,"buf"],[107,77,114,11],[107,78,114,12,"length"],[107,84,114,18],[107,87,114,21,"n"],[107,88,115,6],[107,89,115,7],[108,8,117,6],[108,15,117,13],[108,19,117,17,"FastBuffer"],[108,29,117,27],[108,30,117,28,"buf"],[108,33,117,31],[108,34,117,32,"buffer"],[108,40,117,38],[108,42,117,40,"buf"],[108,45,117,43],[108,46,117,44,"byteOffset"],[108,56,117,54],[108,58,117,56,"n"],[108,59,117,57],[108,60,117,58],[109,6,118,4],[110,6,120,4],[110,12,120,10,"dst"],[110,15,120,13],[110,18,120,16,"Buffer"],[110,24,120,22],[110,25,120,23,"allocUnsafe"],[110,36,120,34],[110,37,120,35,"n"],[110,38,120,36],[110,39,120,37],[111,6,122,4],[111,9,122,7],[112,8,123,6],[112,14,123,12,"buf"],[112,17,123,15],[112,20,123,18],[112,24,123,22],[112,25,123,23,"_buffers"],[112,33,123,31],[112,34,123,32],[112,35,123,33],[112,36,123,34],[113,8,124,6],[113,14,124,12,"offset"],[113,20,124,18],[113,23,124,21,"dst"],[113,26,124,24],[113,27,124,25,"length"],[113,33,124,31],[113,36,124,34,"n"],[113,37,124,35],[114,8,126,6],[114,12,126,10,"n"],[114,13,126,11],[114,17,126,15,"buf"],[114,20,126,18],[114,21,126,19,"length"],[114,27,126,25],[114,29,126,27],[115,10,127,8,"dst"],[115,13,127,11],[115,14,127,12,"set"],[115,17,127,15],[115,18,127,16],[115,22,127,20],[115,23,127,21,"_buffers"],[115,31,127,29],[115,32,127,30,"shift"],[115,37,127,35],[115,38,127,36],[115,39,127,37],[115,41,127,39,"offset"],[115,47,127,45],[115,48,127,46],[116,8,128,6],[116,9,128,7],[116,15,128,13],[117,10,129,8,"dst"],[117,13,129,11],[117,14,129,12,"set"],[117,17,129,15],[117,18,129,16],[117,22,129,20,"Uint8Array"],[117,32,129,30],[117,33,129,31,"buf"],[117,36,129,34],[117,37,129,35,"buffer"],[117,43,129,41],[117,45,129,43,"buf"],[117,48,129,46],[117,49,129,47,"byteOffset"],[117,59,129,57],[117,61,129,59,"n"],[117,62,129,60],[117,63,129,61],[117,65,129,63,"offset"],[117,71,129,69],[117,72,129,70],[118,10,130,8],[118,14,130,12],[118,15,130,13,"_buffers"],[118,23,130,21],[118,24,130,22],[118,25,130,23],[118,26,130,24],[118,29,130,27],[118,33,130,31,"FastBuffer"],[118,43,130,41],[118,44,131,10,"buf"],[118,47,131,13],[118,48,131,14,"buffer"],[118,54,131,20],[118,56,132,10,"buf"],[118,59,132,13],[118,60,132,14,"byteOffset"],[118,70,132,24],[118,73,132,27,"n"],[118,74,132,28],[118,76,133,10,"buf"],[118,79,133,13],[118,80,133,14,"length"],[118,86,133,20],[118,89,133,23,"n"],[118,90,134,8],[118,91,134,9],[119,8,135,6],[120,8,137,6,"n"],[120,9,137,7],[120,13,137,11,"buf"],[120,16,137,14],[120,17,137,15,"length"],[120,23,137,21],[121,6,138,4],[121,7,138,5],[121,15,138,13,"n"],[121,16,138,14],[121,19,138,17],[121,20,138,18],[122,6,140,4],[122,13,140,11,"dst"],[122,16,140,14],[123,4,141,2],[125,4,143,2],[126,0,144,0],[127,0,145,0],[128,0,146,0],[129,0,147,0],[130,0,148,0],[131,4,149,2,"startLoop"],[131,13,149,11,"startLoop"],[131,14,149,12,"cb"],[131,16,149,14],[131,18,149,16],[132,6,150,4],[132,10,150,8],[132,11,150,9,"_loop"],[132,16,150,14],[132,19,150,17],[132,23,150,21],[133,6,152,4],[133,9,152,7],[134,8,153,6],[134,16,153,14],[134,20,153,18],[134,21,153,19,"_state"],[134,27,153,25],[135,10,154,8],[135,15,154,13,"GET_INFO"],[135,23,154,21],[136,12,155,10],[136,16,155,14],[136,17,155,15,"getInfo"],[136,24,155,22],[136,25,155,23,"cb"],[136,27,155,25],[136,28,155,26],[137,12,156,10],[138,10,157,8],[138,15,157,13,"GET_PAYLOAD_LENGTH_16"],[138,36,157,34],[139,12,158,10],[139,16,158,14],[139,17,158,15,"getPayloadLength16"],[139,35,158,33],[139,36,158,34,"cb"],[139,38,158,36],[139,39,158,37],[140,12,159,10],[141,10,160,8],[141,15,160,13,"GET_PAYLOAD_LENGTH_64"],[141,36,160,34],[142,12,161,10],[142,16,161,14],[142,17,161,15,"getPayloadLength64"],[142,35,161,33],[142,36,161,34,"cb"],[142,38,161,36],[142,39,161,37],[143,12,162,10],[144,10,163,8],[144,15,163,13,"GET_MASK"],[144,23,163,21],[145,12,164,10],[145,16,164,14],[145,17,164,15,"getMask"],[145,24,164,22],[145,25,164,23],[145,26,164,24],[146,12,165,10],[147,10,166,8],[147,15,166,13,"GET_DATA"],[147,23,166,21],[148,12,167,10],[148,16,167,14],[148,17,167,15,"getData"],[148,24,167,22],[148,25,167,23,"cb"],[148,27,167,25],[148,28,167,26],[149,12,168,10],[150,10,169,8],[150,15,169,13,"INFLATING"],[150,24,169,22],[151,10,170,8],[151,15,170,13,"DEFER_EVENT"],[151,26,170,24],[152,12,171,10],[152,16,171,14],[152,17,171,15,"_loop"],[152,22,171,20],[152,25,171,23],[152,30,171,28],[153,12,172,10],[154,8,173,6],[155,6,174,4],[155,7,174,5],[155,15,174,13],[155,19,174,17],[155,20,174,18,"_loop"],[155,25,174,23],[156,6,176,4],[156,10,176,8],[156,11,176,9],[156,15,176,13],[156,16,176,14,"_errored"],[156,24,176,22],[156,26,176,24,"cb"],[156,28,176,26],[156,29,176,27],[156,30,176,28],[157,4,177,2],[159,4,179,2],[160,0,180,0],[161,0,181,0],[162,0,182,0],[163,0,183,0],[164,0,184,0],[165,4,185,2,"getInfo"],[165,11,185,9,"getInfo"],[165,12,185,10,"cb"],[165,14,185,12],[165,16,185,14],[166,6,186,4],[166,10,186,8],[166,14,186,12],[166,15,186,13,"_bufferedBytes"],[166,29,186,27],[166,32,186,30],[166,33,186,31],[166,35,186,33],[167,8,187,6],[167,12,187,10],[167,13,187,11,"_loop"],[167,18,187,16],[167,21,187,19],[167,26,187,24],[168,8,188,6],[169,6,189,4],[170,6,191,4],[170,12,191,10,"buf"],[170,15,191,13],[170,18,191,16],[170,22,191,20],[170,23,191,21,"consume"],[170,30,191,28],[170,31,191,29],[170,32,191,30],[170,33,191,31],[171,6,193,4],[171,10,193,8],[171,11,193,9,"buf"],[171,14,193,12],[171,15,193,13],[171,16,193,14],[171,17,193,15],[171,20,193,18],[171,24,193,22],[171,30,193,28],[171,34,193,32],[171,36,193,34],[172,8,194,6],[172,14,194,12,"error"],[172,19,194,17],[172,22,194,20],[172,26,194,24],[172,27,194,25,"createError"],[172,38,194,36],[172,39,195,8,"RangeError"],[172,49,195,18],[172,51,196,8],[172,80,196,37],[172,82,197,8],[172,86,197,12],[172,88,198,8],[172,92,198,12],[172,94,199,8],[172,121,200,6],[172,122,200,7],[173,8,202,6,"cb"],[173,10,202,8],[173,11,202,9,"error"],[173,16,202,14],[173,17,202,15],[174,8,203,6],[175,6,204,4],[176,6,206,4],[176,12,206,10,"compressed"],[176,22,206,20],[176,25,206,23],[176,26,206,24,"buf"],[176,29,206,27],[176,30,206,28],[176,31,206,29],[176,32,206,30],[176,35,206,33],[176,39,206,37],[176,45,206,43],[176,49,206,47],[177,6,208,4],[177,10,208,8,"compressed"],[177,20,208,18],[177,24,208,22],[177,25,208,23],[177,29,208,27],[177,30,208,28,"_extensions"],[177,41,208,39],[177,42,208,40,"PerMessageDeflate"],[177,59,208,57],[177,60,208,58,"extensionName"],[177,73,208,71],[177,74,208,72],[177,76,208,74],[178,8,209,6],[178,14,209,12,"error"],[178,19,209,17],[178,22,209,20],[178,26,209,24],[178,27,209,25,"createError"],[178,38,209,36],[178,39,210,8,"RangeError"],[178,49,210,18],[178,51,211,8],[178,71,211,28],[178,73,212,8],[178,77,212,12],[178,79,213,8],[178,83,213,12],[178,85,214,8],[178,110,215,6],[178,111,215,7],[179,8,217,6,"cb"],[179,10,217,8],[179,11,217,9,"error"],[179,16,217,14],[179,17,217,15],[180,8,218,6],[181,6,219,4],[182,6,221,4],[182,10,221,8],[182,11,221,9,"_fin"],[182,15,221,13],[182,18,221,16],[182,19,221,17,"buf"],[182,22,221,20],[182,23,221,21],[182,24,221,22],[182,25,221,23],[182,28,221,26],[182,32,221,30],[182,38,221,36],[182,42,221,40],[183,6,222,4],[183,10,222,8],[183,11,222,9,"_opcode"],[183,18,222,16],[183,21,222,19,"buf"],[183,24,222,22],[183,25,222,23],[183,26,222,24],[183,27,222,25],[183,30,222,28],[183,34,222,32],[184,6,223,4],[184,10,223,8],[184,11,223,9,"_payloadLength"],[184,25,223,23],[184,28,223,26,"buf"],[184,31,223,29],[184,32,223,30],[184,33,223,31],[184,34,223,32],[184,37,223,35],[184,41,223,39],[185,6,225,4],[185,10,225,8],[185,14,225,12],[185,15,225,13,"_opcode"],[185,22,225,20],[185,27,225,25],[185,31,225,29],[185,33,225,31],[186,8,226,6],[186,12,226,10,"compressed"],[186,22,226,20],[186,24,226,22],[187,10,227,8],[187,16,227,14,"error"],[187,21,227,19],[187,24,227,22],[187,28,227,26],[187,29,227,27,"createError"],[187,40,227,38],[187,41,228,10,"RangeError"],[187,51,228,20],[187,53,229,10],[187,73,229,30],[187,75,230,10],[187,79,230,14],[187,81,231,10],[187,85,231,14],[187,87,232,10],[187,112,233,8],[187,113,233,9],[188,10,235,8,"cb"],[188,12,235,10],[188,13,235,11,"error"],[188,18,235,16],[188,19,235,17],[189,10,236,8],[190,8,237,6],[191,8,239,6],[191,12,239,10],[191,13,239,11],[191,17,239,15],[191,18,239,16,"_fragmented"],[191,29,239,27],[191,31,239,29],[192,10,240,8],[192,16,240,14,"error"],[192,21,240,19],[192,24,240,22],[192,28,240,26],[192,29,240,27,"createError"],[192,40,240,38],[192,41,241,10,"RangeError"],[192,51,241,20],[192,53,242,10],[192,71,242,28],[192,73,243,10],[192,77,243,14],[192,79,244,10],[192,83,244,14],[192,85,245,10],[192,108,246,8],[192,109,246,9],[193,10,248,8,"cb"],[193,12,248,10],[193,13,248,11,"error"],[193,18,248,16],[193,19,248,17],[194,10,249,8],[195,8,250,6],[196,8,252,6],[196,12,252,10],[196,13,252,11,"_opcode"],[196,20,252,18],[196,23,252,21],[196,27,252,25],[196,28,252,26,"_fragmented"],[196,39,252,37],[197,6,253,4],[197,7,253,5],[197,13,253,11],[197,17,253,15],[197,21,253,19],[197,22,253,20,"_opcode"],[197,29,253,27],[197,34,253,32],[197,38,253,36],[197,42,253,40],[197,46,253,44],[197,47,253,45,"_opcode"],[197,54,253,52],[197,59,253,57],[197,63,253,61],[197,65,253,63],[198,8,254,6],[198,12,254,10],[198,16,254,14],[198,17,254,15,"_fragmented"],[198,28,254,26],[198,30,254,28],[199,10,255,8],[199,16,255,14,"error"],[199,21,255,19],[199,24,255,22],[199,28,255,26],[199,29,255,27,"createError"],[199,40,255,38],[199,41,256,10,"RangeError"],[199,51,256,20],[199,53,257,10],[199,71,257,28],[199,75,257,32],[199,76,257,33,"_opcode"],[199,83,257,40],[199,85,257,42],[199,87,258,10],[199,91,258,14],[199,93,259,10],[199,97,259,14],[199,99,260,10],[199,122,261,8],[199,123,261,9],[200,10,263,8,"cb"],[200,12,263,10],[200,13,263,11,"error"],[200,18,263,16],[200,19,263,17],[201,10,264,8],[202,8,265,6],[203,8,267,6],[203,12,267,10],[203,13,267,11,"_compressed"],[203,24,267,22],[203,27,267,25,"compressed"],[203,37,267,35],[204,6,268,4],[204,7,268,5],[204,13,268,11],[204,17,268,15],[204,21,268,19],[204,22,268,20,"_opcode"],[204,29,268,27],[204,32,268,30],[204,36,268,34],[204,40,268,38],[204,44,268,42],[204,45,268,43,"_opcode"],[204,52,268,50],[204,55,268,53],[204,59,268,57],[204,61,268,59],[205,8,269,6],[205,12,269,10],[205,13,269,11],[205,17,269,15],[205,18,269,16,"_fin"],[205,22,269,20],[205,24,269,22],[206,10,270,8],[206,16,270,14,"error"],[206,21,270,19],[206,24,270,22],[206,28,270,26],[206,29,270,27,"createError"],[206,40,270,38],[206,41,271,10,"RangeError"],[206,51,271,20],[206,53,272,10],[206,70,272,27],[206,72,273,10],[206,76,273,14],[206,78,274,10],[206,82,274,14],[206,84,275,10],[206,105,276,8],[206,106,276,9],[207,10,278,8,"cb"],[207,12,278,10],[207,13,278,11,"error"],[207,18,278,16],[207,19,278,17],[208,10,279,8],[209,8,280,6],[210,8,282,6],[210,12,282,10,"compressed"],[210,22,282,20],[210,24,282,22],[211,10,283,8],[211,16,283,14,"error"],[211,21,283,19],[211,24,283,22],[211,28,283,26],[211,29,283,27,"createError"],[211,40,283,38],[211,41,284,10,"RangeError"],[211,51,284,20],[211,53,285,10],[211,73,285,30],[211,75,286,10],[211,79,286,14],[211,81,287,10],[211,85,287,14],[211,87,288,10],[211,112,289,8],[211,113,289,9],[212,10,291,8,"cb"],[212,12,291,10],[212,13,291,11,"error"],[212,18,291,16],[212,19,291,17],[213,10,292,8],[214,8,293,6],[215,8,295,6],[215,12,296,8],[215,16,296,12],[215,17,296,13,"_payloadLength"],[215,31,296,27],[215,34,296,30],[215,38,296,34],[215,42,297,9],[215,46,297,13],[215,47,297,14,"_opcode"],[215,54,297,21],[215,59,297,26],[215,63,297,30],[215,67,297,34],[215,71,297,38],[215,72,297,39,"_payloadLength"],[215,86,297,53],[215,91,297,58],[215,92,297,60],[215,94,298,8],[216,10,299,8],[216,16,299,14,"error"],[216,21,299,19],[216,24,299,22],[216,28,299,26],[216,29,299,27,"createError"],[216,40,299,38],[216,41,300,10,"RangeError"],[216,51,300,20],[216,53,301,10],[216,79,301,36],[216,83,301,40],[216,84,301,41,"_payloadLength"],[216,98,301,55],[216,100,301,57],[216,102,302,10],[216,106,302,14],[216,108,303,10],[216,112,303,14],[216,114,304,10],[216,153,305,8],[216,154,305,9],[217,10,307,8,"cb"],[217,12,307,10],[217,13,307,11,"error"],[217,18,307,16],[217,19,307,17],[218,10,308,8],[219,8,309,6],[220,6,310,4],[220,7,310,5],[220,13,310,11],[221,8,311,6],[221,14,311,12,"error"],[221,19,311,17],[221,22,311,20],[221,26,311,24],[221,27,311,25,"createError"],[221,38,311,36],[221,39,312,8,"RangeError"],[221,49,312,18],[221,51,313,8],[221,69,313,26],[221,73,313,30],[221,74,313,31,"_opcode"],[221,81,313,38],[221,83,313,40],[221,85,314,8],[221,89,314,12],[221,91,315,8],[221,95,315,12],[221,97,316,8],[221,120,317,6],[221,121,317,7],[222,8,319,6,"cb"],[222,10,319,8],[222,11,319,9,"error"],[222,16,319,14],[222,17,319,15],[223,8,320,6],[224,6,321,4],[225,6,323,4],[225,10,323,8],[225,11,323,9],[225,15,323,13],[225,16,323,14,"_fin"],[225,20,323,18],[225,24,323,22],[225,25,323,23],[225,29,323,27],[225,30,323,28,"_fragmented"],[225,41,323,39],[225,43,323,41],[225,47,323,45],[225,48,323,46,"_fragmented"],[225,59,323,57],[225,62,323,60],[225,66,323,64],[225,67,323,65,"_opcode"],[225,74,323,72],[226,6,324,4],[226,10,324,8],[226,11,324,9,"_masked"],[226,18,324,16],[226,21,324,19],[226,22,324,20,"buf"],[226,25,324,23],[226,26,324,24],[226,27,324,25],[226,28,324,26],[226,31,324,29],[226,35,324,33],[226,41,324,39],[226,45,324,43],[227,6,326,4],[227,10,326,8],[227,14,326,12],[227,15,326,13,"_isServer"],[227,24,326,22],[227,26,326,24],[228,8,327,6],[228,12,327,10],[228,13,327,11],[228,17,327,15],[228,18,327,16,"_masked"],[228,25,327,23],[228,27,327,25],[229,10,328,8],[229,16,328,14,"error"],[229,21,328,19],[229,24,328,22],[229,28,328,26],[229,29,328,27,"createError"],[229,40,328,38],[229,41,329,10,"RangeError"],[229,51,329,20],[229,53,330,10],[229,71,330,28],[229,73,331,10],[229,77,331,14],[229,79,332,10],[229,83,332,14],[229,85,333,10],[229,107,334,8],[229,108,334,9],[230,10,336,8,"cb"],[230,12,336,10],[230,13,336,11,"error"],[230,18,336,16],[230,19,336,17],[231,10,337,8],[232,8,338,6],[233,6,339,4],[233,7,339,5],[233,13,339,11],[233,17,339,15],[233,21,339,19],[233,22,339,20,"_masked"],[233,29,339,27],[233,31,339,29],[234,8,340,6],[234,14,340,12,"error"],[234,19,340,17],[234,22,340,20],[234,26,340,24],[234,27,340,25,"createError"],[234,38,340,36],[234,39,341,8,"RangeError"],[234,49,341,18],[234,51,342,8],[234,71,342,28],[234,73,343,8],[234,77,343,12],[234,79,344,8],[234,83,344,12],[234,85,345,8],[234,109,346,6],[234,110,346,7],[235,8,348,6,"cb"],[235,10,348,8],[235,11,348,9,"error"],[235,16,348,14],[235,17,348,15],[236,8,349,6],[237,6,350,4],[238,6,352,4],[238,10,352,8],[238,14,352,12],[238,15,352,13,"_payloadLength"],[238,29,352,27],[238,34,352,32],[238,37,352,35],[238,39,352,37],[238,43,352,41],[238,44,352,42,"_state"],[238,50,352,48],[238,53,352,51,"GET_PAYLOAD_LENGTH_16"],[238,74,352,72],[238,75,352,73],[238,80,353,9],[238,84,353,13],[238,88,353,17],[238,89,353,18,"_payloadLength"],[238,103,353,32],[238,108,353,37],[238,111,353,40],[238,113,353,42],[238,117,353,46],[238,118,353,47,"_state"],[238,124,353,53],[238,127,353,56,"GET_PAYLOAD_LENGTH_64"],[238,148,353,77],[238,149,353,78],[238,154,354,9],[238,158,354,13],[238,159,354,14,"haveLength"],[238,169,354,24],[238,170,354,25,"cb"],[238,172,354,27],[238,173,354,28],[239,4,355,2],[241,4,357,2],[242,0,358,0],[243,0,359,0],[244,0,360,0],[245,0,361,0],[246,0,362,0],[247,4,363,2,"getPayloadLength16"],[247,22,363,20,"getPayloadLength16"],[247,23,363,21,"cb"],[247,25,363,23],[247,27,363,25],[248,6,364,4],[248,10,364,8],[248,14,364,12],[248,15,364,13,"_bufferedBytes"],[248,29,364,27],[248,32,364,30],[248,33,364,31],[248,35,364,33],[249,8,365,6],[249,12,365,10],[249,13,365,11,"_loop"],[249,18,365,16],[249,21,365,19],[249,26,365,24],[250,8,366,6],[251,6,367,4],[252,6,369,4],[252,10,369,8],[252,11,369,9,"_payloadLength"],[252,25,369,23],[252,28,369,26],[252,32,369,30],[252,33,369,31,"consume"],[252,40,369,38],[252,41,369,39],[252,42,369,40],[252,43,369,41],[252,44,369,42,"readUInt16BE"],[252,56,369,54],[252,57,369,55],[252,58,369,56],[252,59,369,57],[253,6,370,4],[253,10,370,8],[253,11,370,9,"haveLength"],[253,21,370,19],[253,22,370,20,"cb"],[253,24,370,22],[253,25,370,23],[254,4,371,2],[256,4,373,2],[257,0,374,0],[258,0,375,0],[259,0,376,0],[260,0,377,0],[261,0,378,0],[262,4,379,2,"getPayloadLength64"],[262,22,379,20,"getPayloadLength64"],[262,23,379,21,"cb"],[262,25,379,23],[262,27,379,25],[263,6,380,4],[263,10,380,8],[263,14,380,12],[263,15,380,13,"_bufferedBytes"],[263,29,380,27],[263,32,380,30],[263,33,380,31],[263,35,380,33],[264,8,381,6],[264,12,381,10],[264,13,381,11,"_loop"],[264,18,381,16],[264,21,381,19],[264,26,381,24],[265,8,382,6],[266,6,383,4],[267,6,385,4],[267,12,385,10,"buf"],[267,15,385,13],[267,18,385,16],[267,22,385,20],[267,23,385,21,"consume"],[267,30,385,28],[267,31,385,29],[267,32,385,30],[267,33,385,31],[268,6,386,4],[268,12,386,10,"num"],[268,15,386,13],[268,18,386,16,"buf"],[268,21,386,19],[268,22,386,20,"readUInt32BE"],[268,34,386,32],[268,35,386,33],[268,36,386,34],[268,37,386,35],[270,6,388,4],[271,6,389,4],[272,6,390,4],[273,6,391,4],[274,6,392,4],[274,10,392,8,"num"],[274,13,392,11],[274,16,392,14,"Math"],[274,20,392,18],[274,21,392,19,"pow"],[274,24,392,22],[274,25,392,23],[274,26,392,24],[274,28,392,26],[274,30,392,28],[274,33,392,31],[274,35,392,33],[274,36,392,34],[274,39,392,37],[274,40,392,38],[274,42,392,40],[275,8,393,6],[275,14,393,12,"error"],[275,19,393,17],[275,22,393,20],[275,26,393,24],[275,27,393,25,"createError"],[275,38,393,36],[275,39,394,8,"RangeError"],[275,49,394,18],[275,51,395,8],[275,107,395,64],[275,109,396,8],[275,114,396,13],[275,116,397,8],[275,120,397,12],[275,122,398,8],[275,162,399,6],[275,163,399,7],[276,8,401,6,"cb"],[276,10,401,8],[276,11,401,9,"error"],[276,16,401,14],[276,17,401,15],[277,8,402,6],[278,6,403,4],[279,6,405,4],[279,10,405,8],[279,11,405,9,"_payloadLength"],[279,25,405,23],[279,28,405,26,"num"],[279,31,405,29],[279,34,405,32,"Math"],[279,38,405,36],[279,39,405,37,"pow"],[279,42,405,40],[279,43,405,41],[279,44,405,42],[279,46,405,44],[279,48,405,46],[279,49,405,47],[279,52,405,50,"buf"],[279,55,405,53],[279,56,405,54,"readUInt32BE"],[279,68,405,66],[279,69,405,67],[279,70,405,68],[279,71,405,69],[280,6,406,4],[280,10,406,8],[280,11,406,9,"haveLength"],[280,21,406,19],[280,22,406,20,"cb"],[280,24,406,22],[280,25,406,23],[281,4,407,2],[283,4,409,2],[284,0,410,0],[285,0,411,0],[286,0,412,0],[287,0,413,0],[288,0,414,0],[289,4,415,2,"haveLength"],[289,14,415,12,"haveLength"],[289,15,415,13,"cb"],[289,17,415,15],[289,19,415,17],[290,6,416,4],[290,10,416,8],[290,14,416,12],[290,15,416,13,"_payloadLength"],[290,29,416,27],[290,33,416,31],[290,37,416,35],[290,38,416,36,"_opcode"],[290,45,416,43],[290,48,416,46],[290,52,416,50],[290,54,416,52],[291,8,417,6],[291,12,417,10],[291,13,417,11,"_totalPayloadLength"],[291,32,417,30],[291,36,417,34],[291,40,417,38],[291,41,417,39,"_payloadLength"],[291,55,417,53],[292,8,418,6],[292,12,418,10],[292,16,418,14],[292,17,418,15,"_totalPayloadLength"],[292,36,418,34],[292,39,418,37],[292,43,418,41],[292,44,418,42,"_maxPayload"],[292,55,418,53],[292,59,418,57],[292,63,418,61],[292,64,418,62,"_maxPayload"],[292,75,418,73],[292,78,418,76],[292,79,418,77],[292,81,418,79],[293,10,419,8],[293,16,419,14,"error"],[293,21,419,19],[293,24,419,22],[293,28,419,26],[293,29,419,27,"createError"],[293,40,419,38],[293,41,420,10,"RangeError"],[293,51,420,20],[293,53,421,10],[293,80,421,37],[293,82,422,10],[293,87,422,15],[293,89,423,10],[293,93,423,14],[293,95,424,10],[293,130,425,8],[293,131,425,9],[294,10,427,8,"cb"],[294,12,427,10],[294,13,427,11,"error"],[294,18,427,16],[294,19,427,17],[295,10,428,8],[296,8,429,6],[297,6,430,4],[298,6,432,4],[298,10,432,8],[298,14,432,12],[298,15,432,13,"_masked"],[298,22,432,20],[298,24,432,22],[298,28,432,26],[298,29,432,27,"_state"],[298,35,432,33],[298,38,432,36,"GET_MASK"],[298,46,432,44],[298,47,432,45],[298,52,433,9],[298,56,433,13],[298,57,433,14,"_state"],[298,63,433,20],[298,66,433,23,"GET_DATA"],[298,74,433,31],[299,4,434,2],[301,4,436,2],[302,0,437,0],[303,0,438,0],[304,0,439,0],[305,0,440,0],[306,4,441,2,"getMask"],[306,11,441,9,"getMask"],[306,12,441,9],[306,14,441,12],[307,6,442,4],[307,10,442,8],[307,14,442,12],[307,15,442,13,"_bufferedBytes"],[307,29,442,27],[307,32,442,30],[307,33,442,31],[307,35,442,33],[308,8,443,6],[308,12,443,10],[308,13,443,11,"_loop"],[308,18,443,16],[308,21,443,19],[308,26,443,24],[309,8,444,6],[310,6,445,4],[311,6,447,4],[311,10,447,8],[311,11,447,9,"_mask"],[311,16,447,14],[311,19,447,17],[311,23,447,21],[311,24,447,22,"consume"],[311,31,447,29],[311,32,447,30],[311,33,447,31],[311,34,447,32],[312,6,448,4],[312,10,448,8],[312,11,448,9,"_state"],[312,17,448,15],[312,20,448,18,"GET_DATA"],[312,28,448,26],[313,4,449,2],[315,4,451,2],[316,0,452,0],[317,0,453,0],[318,0,454,0],[319,0,455,0],[320,0,456,0],[321,4,457,2,"getData"],[321,11,457,9,"getData"],[321,12,457,10,"cb"],[321,14,457,12],[321,16,457,14],[322,6,458,4],[322,10,458,8,"data"],[322,14,458,12],[322,17,458,15,"EMPTY_BUFFER"],[322,29,458,27],[323,6,460,4],[323,10,460,8],[323,14,460,12],[323,15,460,13,"_payloadLength"],[323,29,460,27],[323,31,460,29],[324,8,461,6],[324,12,461,10],[324,16,461,14],[324,17,461,15,"_bufferedBytes"],[324,31,461,29],[324,34,461,32],[324,38,461,36],[324,39,461,37,"_payloadLength"],[324,53,461,51],[324,55,461,53],[325,10,462,8],[325,14,462,12],[325,15,462,13,"_loop"],[325,20,462,18],[325,23,462,21],[325,28,462,26],[326,10,463,8],[327,8,464,6],[328,8,466,6,"data"],[328,12,466,10],[328,15,466,13],[328,19,466,17],[328,20,466,18,"consume"],[328,27,466,25],[328,28,466,26],[328,32,466,30],[328,33,466,31,"_payloadLength"],[328,47,466,45],[328,48,466,46],[329,8,468,6],[329,12,469,8],[329,16,469,12],[329,17,469,13,"_masked"],[329,24,469,20],[329,28,470,8],[329,29,470,9],[329,33,470,13],[329,34,470,14,"_mask"],[329,39,470,19],[329,40,470,20],[329,41,470,21],[329,42,470,22],[329,45,470,25],[329,49,470,29],[329,50,470,30,"_mask"],[329,55,470,35],[329,56,470,36],[329,57,470,37],[329,58,470,38],[329,61,470,41],[329,65,470,45],[329,66,470,46,"_mask"],[329,71,470,51],[329,72,470,52],[329,73,470,53],[329,74,470,54],[329,77,470,57],[329,81,470,61],[329,82,470,62,"_mask"],[329,87,470,67],[329,88,470,68],[329,89,470,69],[329,90,470,70],[329,96,470,76],[329,97,470,77],[329,99,471,8],[330,10,472,8,"unmask"],[330,16,472,14],[330,17,472,15,"data"],[330,21,472,19],[330,23,472,21],[330,27,472,25],[330,28,472,26,"_mask"],[330,33,472,31],[330,34,472,32],[331,8,473,6],[332,6,474,4],[333,6,476,4],[333,10,476,8],[333,14,476,12],[333,15,476,13,"_opcode"],[333,22,476,20],[333,25,476,23],[333,29,476,27],[333,31,476,29],[334,8,477,6],[334,12,477,10],[334,13,477,11,"controlMessage"],[334,27,477,25],[334,28,477,26,"data"],[334,32,477,30],[334,34,477,32,"cb"],[334,36,477,34],[334,37,477,35],[335,8,478,6],[336,6,479,4],[337,6,481,4],[337,10,481,8],[337,14,481,12],[337,15,481,13,"_compressed"],[337,26,481,24],[337,28,481,26],[338,8,482,6],[338,12,482,10],[338,13,482,11,"_state"],[338,19,482,17],[338,22,482,20,"INFLATING"],[338,31,482,29],[339,8,483,6],[339,12,483,10],[339,13,483,11,"decompress"],[339,23,483,21],[339,24,483,22,"data"],[339,28,483,26],[339,30,483,28,"cb"],[339,32,483,30],[339,33,483,31],[340,8,484,6],[341,6,485,4],[342,6,487,4],[342,10,487,8,"data"],[342,14,487,12],[342,15,487,13,"length"],[342,21,487,19],[342,23,487,21],[343,8,488,6],[344,8,489,6],[345,8,490,6],[346,8,491,6],[347,8,492,6],[347,12,492,10],[347,13,492,11,"_messageLength"],[347,27,492,25],[347,30,492,28],[347,34,492,32],[347,35,492,33,"_totalPayloadLength"],[347,54,492,52],[348,8,493,6],[348,12,493,10],[348,13,493,11,"_fragments"],[348,23,493,21],[348,24,493,22,"push"],[348,28,493,26],[348,29,493,27,"data"],[348,33,493,31],[348,34,493,32],[349,6,494,4],[350,6,496,4],[350,10,496,8],[350,11,496,9,"dataMessage"],[350,22,496,20],[350,23,496,21,"cb"],[350,25,496,23],[350,26,496,24],[351,4,497,2],[353,4,499,2],[354,0,500,0],[355,0,501,0],[356,0,502,0],[357,0,503,0],[358,0,504,0],[359,0,505,0],[360,4,506,2,"decompress"],[360,14,506,12,"decompress"],[360,15,506,13,"data"],[360,19,506,17],[360,21,506,19,"cb"],[360,23,506,21],[360,25,506,23],[361,6,507,4],[361,12,507,10,"perMessageDeflate"],[361,29,507,27],[361,32,507,30],[361,36,507,34],[361,37,507,35,"_extensions"],[361,48,507,46],[361,49,507,47,"PerMessageDeflate"],[361,66,507,64],[361,67,507,65,"extensionName"],[361,80,507,78],[361,81,507,79],[362,6,509,4,"perMessageDeflate"],[362,23,509,21],[362,24,509,22,"decompress"],[362,34,509,32],[362,35,509,33,"data"],[362,39,509,37],[362,41,509,39],[362,45,509,43],[362,46,509,44,"_fin"],[362,50,509,48],[362,52,509,50],[362,53,509,51,"err"],[362,56,509,54],[362,58,509,56,"buf"],[362,61,509,59],[362,66,509,64],[363,8,510,6],[363,12,510,10,"err"],[363,15,510,13],[363,17,510,15],[363,24,510,22,"cb"],[363,26,510,24],[363,27,510,25,"err"],[363,30,510,28],[363,31,510,29],[364,8,512,6],[364,12,512,10,"buf"],[364,15,512,13],[364,16,512,14,"length"],[364,22,512,20],[364,24,512,22],[365,10,513,8],[365,14,513,12],[365,15,513,13,"_messageLength"],[365,29,513,27],[365,33,513,31,"buf"],[365,36,513,34],[365,37,513,35,"length"],[365,43,513,41],[366,10,514,8],[366,14,514,12],[366,18,514,16],[366,19,514,17,"_messageLength"],[366,33,514,31],[366,36,514,34],[366,40,514,38],[366,41,514,39,"_maxPayload"],[366,52,514,50],[366,56,514,54],[366,60,514,58],[366,61,514,59,"_maxPayload"],[366,72,514,70],[366,75,514,73],[366,76,514,74],[366,78,514,76],[367,12,515,10],[367,18,515,16,"error"],[367,23,515,21],[367,26,515,24],[367,30,515,28],[367,31,515,29,"createError"],[367,42,515,40],[367,43,516,12,"RangeError"],[367,53,516,22],[367,55,517,12],[367,82,517,39],[367,84,518,12],[367,89,518,17],[367,91,519,12],[367,95,519,16],[367,97,520,12],[367,132,521,10],[367,133,521,11],[368,12,523,10,"cb"],[368,14,523,12],[368,15,523,13,"error"],[368,20,523,18],[368,21,523,19],[369,12,524,10],[370,10,525,8],[371,10,527,8],[371,14,527,12],[371,15,527,13,"_fragments"],[371,25,527,23],[371,26,527,24,"push"],[371,30,527,28],[371,31,527,29,"buf"],[371,34,527,32],[371,35,527,33],[372,8,528,6],[373,8,530,6],[373,12,530,10],[373,13,530,11,"dataMessage"],[373,24,530,22],[373,25,530,23,"cb"],[373,27,530,25],[373,28,530,26],[374,8,531,6],[374,12,531,10],[374,16,531,14],[374,17,531,15,"_state"],[374,23,531,21],[374,28,531,26,"GET_INFO"],[374,36,531,34],[374,38,531,36],[374,42,531,40],[374,43,531,41,"startLoop"],[374,52,531,50],[374,53,531,51,"cb"],[374,55,531,53],[374,56,531,54],[375,6,532,4],[375,7,532,5],[375,8,532,6],[376,4,533,2],[378,4,535,2],[379,0,536,0],[380,0,537,0],[381,0,538,0],[382,0,539,0],[383,0,540,0],[384,4,541,2,"dataMessage"],[384,15,541,13,"dataMessage"],[384,16,541,14,"cb"],[384,18,541,16],[384,20,541,18],[385,6,542,4],[385,10,542,8],[385,11,542,9],[385,15,542,13],[385,16,542,14,"_fin"],[385,20,542,18],[385,22,542,20],[386,8,543,6],[386,12,543,10],[386,13,543,11,"_state"],[386,19,543,17],[386,22,543,20,"GET_INFO"],[386,30,543,28],[387,8,544,6],[388,6,545,4],[389,6,547,4],[389,12,547,10,"messageLength"],[389,25,547,23],[389,28,547,26],[389,32,547,30],[389,33,547,31,"_messageLength"],[389,47,547,45],[390,6,548,4],[390,12,548,10,"fragments"],[390,21,548,19],[390,24,548,22],[390,28,548,26],[390,29,548,27,"_fragments"],[390,39,548,37],[391,6,550,4],[391,10,550,8],[391,11,550,9,"_totalPayloadLength"],[391,30,550,28],[391,33,550,31],[391,34,550,32],[392,6,551,4],[392,10,551,8],[392,11,551,9,"_messageLength"],[392,25,551,23],[392,28,551,26],[392,29,551,27],[393,6,552,4],[393,10,552,8],[393,11,552,9,"_fragmented"],[393,22,552,20],[393,25,552,23],[393,26,552,24],[394,6,553,4],[394,10,553,8],[394,11,553,9,"_fragments"],[394,21,553,19],[394,24,553,22],[394,26,553,24],[395,6,555,4],[395,10,555,8],[395,14,555,12],[395,15,555,13,"_opcode"],[395,22,555,20],[395,27,555,25],[395,28,555,26],[395,30,555,28],[396,8,556,6],[396,12,556,10,"data"],[396,16,556,14],[397,8,558,6],[397,12,558,10],[397,16,558,14],[397,17,558,15,"_binaryType"],[397,28,558,26],[397,33,558,31],[397,45,558,43],[397,47,558,45],[398,10,559,8,"data"],[398,14,559,12],[398,17,559,15,"concat"],[398,23,559,21],[398,24,559,22,"fragments"],[398,33,559,31],[398,35,559,33,"messageLength"],[398,48,559,46],[398,49,559,47],[399,8,560,6],[399,9,560,7],[399,15,560,13],[399,19,560,17],[399,23,560,21],[399,24,560,22,"_binaryType"],[399,35,560,33],[399,40,560,38],[399,53,560,51],[399,55,560,53],[400,10,561,8,"data"],[400,14,561,12],[400,17,561,15,"toArrayBuffer"],[400,30,561,28],[400,31,561,29,"concat"],[400,37,561,35],[400,38,561,36,"fragments"],[400,47,561,45],[400,49,561,47,"messageLength"],[400,62,561,60],[400,63,561,61],[400,64,561,62],[401,8,562,6],[401,9,562,7],[401,15,562,13],[402,10,563,8,"data"],[402,14,563,12],[402,17,563,15,"fragments"],[402,26,563,24],[403,8,564,6],[404,8,566,6],[404,12,566,10],[404,16,566,14],[404,17,566,15,"_allowSynchronousEvents"],[404,40,566,38],[404,42,566,40],[405,10,567,8],[405,14,567,12],[405,15,567,13,"emit"],[405,19,567,17],[405,20,567,18],[405,29,567,27],[405,31,567,29,"data"],[405,35,567,33],[405,37,567,35],[405,41,567,39],[405,42,567,40],[406,10,568,8],[406,14,568,12],[406,15,568,13,"_state"],[406,21,568,19],[406,24,568,22,"GET_INFO"],[406,32,568,30],[407,8,569,6],[407,9,569,7],[407,15,569,13],[408,10,570,8],[408,14,570,12],[408,15,570,13,"_state"],[408,21,570,19],[408,24,570,22,"DEFER_EVENT"],[408,35,570,33],[409,10,571,8,"setImmediate"],[409,22,571,20],[409,23,571,21],[409,29,571,27],[410,12,572,10],[410,16,572,14],[410,17,572,15,"emit"],[410,21,572,19],[410,22,572,20],[410,31,572,29],[410,33,572,31,"data"],[410,37,572,35],[410,39,572,37],[410,43,572,41],[410,44,572,42],[411,12,573,10],[411,16,573,14],[411,17,573,15,"_state"],[411,23,573,21],[411,26,573,24,"GET_INFO"],[411,34,573,32],[412,12,574,10],[412,16,574,14],[412,17,574,15,"startLoop"],[412,26,574,24],[412,27,574,25,"cb"],[412,29,574,27],[412,30,574,28],[413,10,575,8],[413,11,575,9],[413,12,575,10],[414,8,576,6],[415,6,577,4],[415,7,577,5],[415,13,577,11],[416,8,578,6],[416,14,578,12,"buf"],[416,17,578,15],[416,20,578,18,"concat"],[416,26,578,24],[416,27,578,25,"fragments"],[416,36,578,34],[416,38,578,36,"messageLength"],[416,51,578,49],[416,52,578,50],[417,8,580,6],[417,12,580,10],[417,13,580,11],[417,17,580,15],[417,18,580,16,"_skipUTF8Validation"],[417,37,580,35],[417,41,580,39],[417,42,580,40,"isValidUTF8"],[417,53,580,51],[417,54,580,52,"buf"],[417,57,580,55],[417,58,580,56],[417,60,580,58],[418,10,581,8],[418,16,581,14,"error"],[418,21,581,19],[418,24,581,22],[418,28,581,26],[418,29,581,27,"createError"],[418,40,581,38],[418,41,582,10,"Error"],[418,46,582,15],[418,48,583,10],[418,72,583,34],[418,74,584,10],[418,78,584,14],[418,80,585,10],[418,84,585,14],[418,86,586,10],[418,107,587,8],[418,108,587,9],[419,10,589,8,"cb"],[419,12,589,10],[419,13,589,11,"error"],[419,18,589,16],[419,19,589,17],[420,10,590,8],[421,8,591,6],[422,8,593,6],[422,12,593,10],[422,16,593,14],[422,17,593,15,"_state"],[422,23,593,21],[422,28,593,26,"INFLATING"],[422,37,593,35],[422,41,593,39],[422,45,593,43],[422,46,593,44,"_allowSynchronousEvents"],[422,69,593,67],[422,71,593,69],[423,10,594,8],[423,14,594,12],[423,15,594,13,"emit"],[423,19,594,17],[423,20,594,18],[423,29,594,27],[423,31,594,29,"buf"],[423,34,594,32],[423,36,594,34],[423,41,594,39],[423,42,594,40],[424,10,595,8],[424,14,595,12],[424,15,595,13,"_state"],[424,21,595,19],[424,24,595,22,"GET_INFO"],[424,32,595,30],[425,8,596,6],[425,9,596,7],[425,15,596,13],[426,10,597,8],[426,14,597,12],[426,15,597,13,"_state"],[426,21,597,19],[426,24,597,22,"DEFER_EVENT"],[426,35,597,33],[427,10,598,8,"setImmediate"],[427,22,598,20],[427,23,598,21],[427,29,598,27],[428,12,599,10],[428,16,599,14],[428,17,599,15,"emit"],[428,21,599,19],[428,22,599,20],[428,31,599,29],[428,33,599,31,"buf"],[428,36,599,34],[428,38,599,36],[428,43,599,41],[428,44,599,42],[429,12,600,10],[429,16,600,14],[429,17,600,15,"_state"],[429,23,600,21],[429,26,600,24,"GET_INFO"],[429,34,600,32],[430,12,601,10],[430,16,601,14],[430,17,601,15,"startLoop"],[430,26,601,24],[430,27,601,25,"cb"],[430,29,601,27],[430,30,601,28],[431,10,602,8],[431,11,602,9],[431,12,602,10],[432,8,603,6],[433,6,604,4],[434,4,605,2],[436,4,607,2],[437,0,608,0],[438,0,609,0],[439,0,610,0],[440,0,611,0],[441,0,612,0],[442,0,613,0],[443,4,614,2,"controlMessage"],[443,18,614,16,"controlMessage"],[443,19,614,17,"data"],[443,23,614,21],[443,25,614,23,"cb"],[443,27,614,25],[443,29,614,27],[444,6,615,4],[444,10,615,8],[444,14,615,12],[444,15,615,13,"_opcode"],[444,22,615,20],[444,27,615,25],[444,31,615,29],[444,33,615,31],[445,8,616,6],[445,12,616,10,"data"],[445,16,616,14],[445,17,616,15,"length"],[445,23,616,21],[445,28,616,26],[445,29,616,27],[445,31,616,29],[446,10,617,8],[446,14,617,12],[446,15,617,13,"_loop"],[446,20,617,18],[446,23,617,21],[446,28,617,26],[447,10,618,8],[447,14,618,12],[447,15,618,13,"emit"],[447,19,618,17],[447,20,618,18],[447,30,618,28],[447,32,618,30],[447,36,618,34],[447,38,618,36,"EMPTY_BUFFER"],[447,50,618,48],[447,51,618,49],[448,10,619,8],[448,14,619,12],[448,15,619,13,"end"],[448,18,619,16],[448,19,619,17],[448,20,619,18],[449,8,620,6],[449,9,620,7],[449,15,620,13],[450,10,621,8],[450,16,621,14,"code"],[450,20,621,18],[450,23,621,21,"data"],[450,27,621,25],[450,28,621,26,"readUInt16BE"],[450,40,621,38],[450,41,621,39],[450,42,621,40],[450,43,621,41],[451,10,623,8],[451,14,623,12],[451,15,623,13,"isValidStatusCode"],[451,32,623,30],[451,33,623,31,"code"],[451,37,623,35],[451,38,623,36],[451,40,623,38],[452,12,624,10],[452,18,624,16,"error"],[452,23,624,21],[452,26,624,24],[452,30,624,28],[452,31,624,29,"createError"],[452,42,624,40],[452,43,625,12,"RangeError"],[452,53,625,22],[452,55,626,12],[452,78,626,35,"code"],[452,82,626,39],[452,84,626,41],[452,86,627,12],[452,90,627,16],[452,92,628,12],[452,96,628,16],[452,98,629,12],[452,125,630,10],[452,126,630,11],[453,12,632,10,"cb"],[453,14,632,12],[453,15,632,13,"error"],[453,20,632,18],[453,21,632,19],[454,12,633,10],[455,10,634,8],[456,10,636,8],[456,16,636,14,"buf"],[456,19,636,17],[456,22,636,20],[456,26,636,24,"FastBuffer"],[456,36,636,34],[456,37,637,10,"data"],[456,41,637,14],[456,42,637,15,"buffer"],[456,48,637,21],[456,50,638,10,"data"],[456,54,638,14],[456,55,638,15,"byteOffset"],[456,65,638,25],[456,68,638,28],[456,69,638,29],[456,71,639,10,"data"],[456,75,639,14],[456,76,639,15,"length"],[456,82,639,21],[456,85,639,24],[456,86,640,8],[456,87,640,9],[457,10,642,8],[457,14,642,12],[457,15,642,13],[457,19,642,17],[457,20,642,18,"_skipUTF8Validation"],[457,39,642,37],[457,43,642,41],[457,44,642,42,"isValidUTF8"],[457,55,642,53],[457,56,642,54,"buf"],[457,59,642,57],[457,60,642,58],[457,62,642,60],[458,12,643,10],[458,18,643,16,"error"],[458,23,643,21],[458,26,643,24],[458,30,643,28],[458,31,643,29,"createError"],[458,42,643,40],[458,43,644,12,"Error"],[458,48,644,17],[458,50,645,12],[458,74,645,36],[458,76,646,12],[458,80,646,16],[458,82,647,12],[458,86,647,16],[458,88,648,12],[458,109,649,10],[458,110,649,11],[459,12,651,10,"cb"],[459,14,651,12],[459,15,651,13,"error"],[459,20,651,18],[459,21,651,19],[460,12,652,10],[461,10,653,8],[462,10,655,8],[462,14,655,12],[462,15,655,13,"_loop"],[462,20,655,18],[462,23,655,21],[462,28,655,26],[463,10,656,8],[463,14,656,12],[463,15,656,13,"emit"],[463,19,656,17],[463,20,656,18],[463,30,656,28],[463,32,656,30,"code"],[463,36,656,34],[463,38,656,36,"buf"],[463,41,656,39],[463,42,656,40],[464,10,657,8],[464,14,657,12],[464,15,657,13,"end"],[464,18,657,16],[464,19,657,17],[464,20,657,18],[465,8,658,6],[466,8,660,6],[466,12,660,10],[466,13,660,11,"_state"],[466,19,660,17],[466,22,660,20,"GET_INFO"],[466,30,660,28],[467,8,661,6],[468,6,662,4],[469,6,664,4],[469,10,664,8],[469,14,664,12],[469,15,664,13,"_allowSynchronousEvents"],[469,38,664,36],[469,40,664,38],[470,8,665,6],[470,12,665,10],[470,13,665,11,"emit"],[470,17,665,15],[470,18,665,16],[470,22,665,20],[470,23,665,21,"_opcode"],[470,30,665,28],[470,35,665,33],[470,39,665,37],[470,42,665,40],[470,48,665,46],[470,51,665,49],[470,57,665,55],[470,59,665,57,"data"],[470,63,665,61],[470,64,665,62],[471,8,666,6],[471,12,666,10],[471,13,666,11,"_state"],[471,19,666,17],[471,22,666,20,"GET_INFO"],[471,30,666,28],[472,6,667,4],[472,7,667,5],[472,13,667,11],[473,8,668,6],[473,12,668,10],[473,13,668,11,"_state"],[473,19,668,17],[473,22,668,20,"DEFER_EVENT"],[473,33,668,31],[474,8,669,6,"setImmediate"],[474,20,669,18],[474,21,669,19],[474,27,669,25],[475,10,670,8],[475,14,670,12],[475,15,670,13,"emit"],[475,19,670,17],[475,20,670,18],[475,24,670,22],[475,25,670,23,"_opcode"],[475,32,670,30],[475,37,670,35],[475,41,670,39],[475,44,670,42],[475,50,670,48],[475,53,670,51],[475,59,670,57],[475,61,670,59,"data"],[475,65,670,63],[475,66,670,64],[476,10,671,8],[476,14,671,12],[476,15,671,13,"_state"],[476,21,671,19],[476,24,671,22,"GET_INFO"],[476,32,671,30],[477,10,672,8],[477,14,672,12],[477,15,672,13,"startLoop"],[477,24,672,22],[477,25,672,23,"cb"],[477,27,672,25],[477,28,672,26],[478,8,673,6],[478,9,673,7],[478,10,673,8],[479,6,674,4],[480,4,675,2],[482,4,677,2],[483,0,678,0],[484,0,679,0],[485,0,680,0],[486,0,681,0],[487,0,682,0],[488,0,683,0],[489,0,684,0],[490,0,685,0],[491,0,686,0],[492,0,687,0],[493,0,688,0],[494,4,689,2,"createError"],[494,15,689,13,"createError"],[494,16,689,14,"ErrorCtor"],[494,25,689,23],[494,27,689,25,"message"],[494,34,689,32],[494,36,689,34,"prefix"],[494,42,689,40],[494,44,689,42,"statusCode"],[494,54,689,52],[494,56,689,54,"errorCode"],[494,65,689,63],[494,67,689,65],[495,6,690,4],[495,10,690,8],[495,11,690,9,"_loop"],[495,16,690,14],[495,19,690,17],[495,24,690,22],[496,6,691,4],[496,10,691,8],[496,11,691,9,"_errored"],[496,19,691,17],[496,22,691,20],[496,26,691,24],[497,6,693,4],[497,12,693,10,"err"],[497,15,693,13],[497,18,693,16],[497,22,693,20,"ErrorCtor"],[497,31,693,29],[497,32,694,6,"prefix"],[497,38,694,12],[497,41,694,15],[497,69,694,43,"message"],[497,76,694,50],[497,78,694,52],[497,81,694,55,"message"],[497,88,695,4],[497,89,695,5],[498,6,697,4,"Error"],[498,11,697,9],[498,12,697,10,"captureStackTrace"],[498,29,697,27],[498,30,697,28,"err"],[498,33,697,31],[498,35,697,33],[498,39,697,37],[498,40,697,38,"createError"],[498,51,697,49],[498,52,697,50],[499,6,698,4,"err"],[499,9,698,7],[499,10,698,8,"code"],[499,14,698,12],[499,17,698,15,"errorCode"],[499,26,698,24],[500,6,699,4,"err"],[500,9,699,7],[500,10,699,8,"kStatusCode"],[500,21,699,19],[500,22,699,20],[500,25,699,23,"statusCode"],[500,35,699,33],[501,6,700,4],[501,13,700,11,"err"],[501,16,700,14],[502,4,701,2],[503,2,702,0],[504,2,704,0,"module"],[504,8,704,6],[504,9,704,7,"exports"],[504,16,704,14],[504,19,704,17,"Receiver"],[504,27,704,25],[505,0,704,26],[505,3]],"functionMap":{"names":["<global>","Receiver","Receiver#constructor","Receiver#_write","Receiver#consume","Receiver#startLoop","Receiver#getInfo","Receiver#getPayloadLength16","Receiver#getPayloadLength64","Receiver#haveLength","Receiver#getMask","Receiver#getData","Receiver#decompress","perMessageDeflate.decompress$argument_2","Receiver#dataMessage","setImmediate$argument_0","Receiver#controlMessage","Receiver#createError"],"mappings":"AAA;AC6B;ECiB;GDgC;EEU;GFM;EGS;GHqC;EIQ;GJ4B;EKQ;GL0K;EMQ;GNQ;EOQ;GP4B;EQQ;GRmB;ESO;GTQ;EUQ;GVwC;EWS;kDCG;KDuB;GXC;EaQ;qBC8B;SDI;qBCuB;SDI;GbG;EeS;mBDuD;OCI;GfE;EgBc;GhBY;CDC"},"hasCjsExports":true},"type":"js/module"}]}