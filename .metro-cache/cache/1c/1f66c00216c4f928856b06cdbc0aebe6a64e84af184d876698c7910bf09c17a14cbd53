{"dependencies":[{"name":"../transport.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":44,"index":44}}],"key":"q68AWRvh2qc0QUlp41HSOL9aMUA=","exportNames":["*"],"imports":1}},{"name":"../util.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":45},"end":{"line":2,"column":42,"index":87}}],"key":"kanFP5HUYYYoVhDf3d7saim1ZXY=","exportNames":["*"],"imports":1}},{"name":"engine.io-parser","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":88},"end":{"line":3,"column":64,"index":152}}],"key":"IB5HY76c7xC+tDEPCV8b/nK76DU=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"Polling\", {\n    enumerable: true,\n    get: function () {\n      return Polling;\n    }\n  });\n  var _transportJs = require(_dependencyMap[0], \"../transport.js\");\n  var _utilJs = require(_dependencyMap[1], \"../util.js\");\n  var _engineIoParser = require(_dependencyMap[2], \"engine.io-parser\");\n  class Polling extends _transportJs.Transport {\n    constructor() {\n      super(...arguments);\n      this._polling = false;\n    }\n    get name() {\n      return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @protected\n     */\n    doOpen() {\n      this._poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} onPause - callback upon buffers are flushed and transport is paused\n     * @package\n     */\n    pause(onPause) {\n      this.readyState = \"pausing\";\n      const pause = () => {\n        this.readyState = \"paused\";\n        onPause();\n      };\n      if (this._polling || !this.writable) {\n        let total = 0;\n        if (this._polling) {\n          total++;\n          this.once(\"pollComplete\", function () {\n            --total || pause();\n          });\n        }\n        if (!this.writable) {\n          total++;\n          this.once(\"drain\", function () {\n            --total || pause();\n          });\n        }\n      } else {\n        pause();\n      }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @private\n     */\n    _poll() {\n      this._polling = true;\n      this.doPoll();\n      this.emitReserved(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @protected\n     */\n    onData(data) {\n      const callback = packet => {\n        // if its the first message we consider the transport open\n        if (\"opening\" === this.readyState && packet.type === \"open\") {\n          this.onOpen();\n        }\n        // if its a close packet, we close the ongoing requests\n        if (\"close\" === packet.type) {\n          this.onClose({\n            description: \"transport closed by the server\"\n          });\n          return false;\n        }\n        // otherwise bypass onData and handle the message\n        this.onPacket(packet);\n      };\n      // decode payload\n      (0, _engineIoParser.decodePayload)(data, this.socket.binaryType).forEach(callback);\n      // if an event did not trigger closing\n      if (\"closed\" !== this.readyState) {\n        // if we got data we're not polling\n        this._polling = false;\n        this.emitReserved(\"pollComplete\");\n        if (\"open\" === this.readyState) {\n          this._poll();\n        } else {}\n      }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @protected\n     */\n    doClose() {\n      const close = () => {\n        this.write([{\n          type: \"close\"\n        }]);\n      };\n      if (\"open\" === this.readyState) {\n        close();\n      } else {\n        // in case we're trying to close while\n        // handshaking is in progress (GH-164)\n        this.once(\"open\", close);\n      }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} packets - data packets\n     * @protected\n     */\n    write(packets) {\n      this.writable = false;\n      (0, _engineIoParser.encodePayload)(packets, data => {\n        this.doWrite(data, () => {\n          this.writable = true;\n          this.emitReserved(\"drain\");\n        });\n      });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n    uri() {\n      const schema = this.opts.secure ? \"https\" : \"http\";\n      const query = this.query || {};\n      // cache busting is forced\n      if (false !== this.opts.timestampRequests) {\n        query[this.opts.timestampParam] = (0, _utilJs.randomString)();\n      }\n      if (!this.supportsBinary && !query.sid) {\n        query.b64 = 1;\n      }\n      return this.createUri(schema, query);\n    }\n  }\n});","lineCount":158,"map":[[7,2,4,0,"Object"],[7,8,4,0],[7,9,4,0,"defineProperty"],[7,23,4,0],[7,24,4,0,"exports"],[7,31,4,0],[8,4,4,0,"enumerable"],[8,14,4,0],[9,4,4,0,"get"],[9,7,4,0],[9,18,4,0,"get"],[9,19,4,0],[10,6,4,0],[10,13,4,0,"Polling"],[10,20,4,0],[11,4,4,0],[12,2,4,0],[13,2,1,0],[13,6,1,0,"_transportJs"],[13,18,1,0],[13,21,1,0,"require"],[13,28,1,0],[13,29,1,0,"_dependencyMap"],[13,43,1,0],[14,2,2,0],[14,6,2,0,"_utilJs"],[14,13,2,0],[14,16,2,0,"require"],[14,23,2,0],[14,24,2,0,"_dependencyMap"],[14,38,2,0],[15,2,3,0],[15,6,3,0,"_engineIoParser"],[15,21,3,0],[15,24,3,0,"require"],[15,31,3,0],[15,32,3,0,"_dependencyMap"],[15,46,3,0],[16,2,4,7],[16,8,4,13,"Polling"],[16,15,4,20],[16,24,4,29,"Transport"],[16,36,4,38],[16,37,4,38,"Transport"],[16,46,4,38],[16,47,4,39],[17,4,5,4,"constructor"],[17,15,5,15,"constructor"],[17,16,5,15],[17,18,5,18],[18,6,6,8],[18,11,6,13],[18,12,6,14],[18,15,6,17,"arguments"],[18,24,6,26],[18,25,6,27],[19,6,7,8],[19,10,7,12],[19,11,7,13,"_polling"],[19,19,7,21],[19,22,7,24],[19,27,7,29],[20,4,8,4],[21,4,9,4],[21,8,9,8,"name"],[21,12,9,12,"name"],[21,13,9,12],[21,15,9,15],[22,6,10,8],[22,13,10,15],[22,22,10,24],[23,4,11,4],[24,4,12,4],[25,0,13,0],[26,0,14,0],[27,0,15,0],[28,0,16,0],[29,0,17,0],[30,4,18,4,"doOpen"],[30,10,18,10,"doOpen"],[30,11,18,10],[30,13,18,13],[31,6,19,8],[31,10,19,12],[31,11,19,13,"_poll"],[31,16,19,18],[31,17,19,19],[31,18,19,20],[32,4,20,4],[33,4,21,4],[34,0,22,0],[35,0,23,0],[36,0,24,0],[37,0,25,0],[38,0,26,0],[39,4,27,4,"pause"],[39,9,27,9,"pause"],[39,10,27,10,"onPause"],[39,17,27,17],[39,19,27,19],[40,6,28,8],[40,10,28,12],[40,11,28,13,"readyState"],[40,21,28,23],[40,24,28,26],[40,33,28,35],[41,6,29,8],[41,12,29,14,"pause"],[41,17,29,19],[41,20,29,22,"pause"],[41,21,29,22],[41,26,29,28],[42,8,30,12],[42,12,30,16],[42,13,30,17,"readyState"],[42,23,30,27],[42,26,30,30],[42,34,30,38],[43,8,31,12,"onPause"],[43,15,31,19],[43,16,31,20],[43,17,31,21],[44,6,32,8],[44,7,32,9],[45,6,33,8],[45,10,33,12],[45,14,33,16],[45,15,33,17,"_polling"],[45,23,33,25],[45,27,33,29],[45,28,33,30],[45,32,33,34],[45,33,33,35,"writable"],[45,41,33,43],[45,43,33,45],[46,8,34,12],[46,12,34,16,"total"],[46,17,34,21],[46,20,34,24],[46,21,34,25],[47,8,35,12],[47,12,35,16],[47,16,35,20],[47,17,35,21,"_polling"],[47,25,35,29],[47,27,35,31],[48,10,36,16,"total"],[48,15,36,21],[48,17,36,23],[49,10,37,16],[49,14,37,20],[49,15,37,21,"once"],[49,19,37,25],[49,20,37,26],[49,34,37,40],[49,36,37,42],[49,48,37,54],[50,12,38,20],[50,14,38,22,"total"],[50,19,38,27],[50,23,38,31,"pause"],[50,28,38,36],[50,29,38,37],[50,30,38,38],[51,10,39,16],[51,11,39,17],[51,12,39,18],[52,8,40,12],[53,8,41,12],[53,12,41,16],[53,13,41,17],[53,17,41,21],[53,18,41,22,"writable"],[53,26,41,30],[53,28,41,32],[54,10,42,16,"total"],[54,15,42,21],[54,17,42,23],[55,10,43,16],[55,14,43,20],[55,15,43,21,"once"],[55,19,43,25],[55,20,43,26],[55,27,43,33],[55,29,43,35],[55,41,43,47],[56,12,44,20],[56,14,44,22,"total"],[56,19,44,27],[56,23,44,31,"pause"],[56,28,44,36],[56,29,44,37],[56,30,44,38],[57,10,45,16],[57,11,45,17],[57,12,45,18],[58,8,46,12],[59,6,47,8],[59,7,47,9],[59,13,48,13],[60,8,49,12,"pause"],[60,13,49,17],[60,14,49,18],[60,15,49,19],[61,6,50,8],[62,4,51,4],[63,4,52,4],[64,0,53,0],[65,0,54,0],[66,0,55,0],[67,0,56,0],[68,4,57,4,"_poll"],[68,9,57,9,"_poll"],[68,10,57,9],[68,12,57,12],[69,6,58,8],[69,10,58,12],[69,11,58,13,"_polling"],[69,19,58,21],[69,22,58,24],[69,26,58,28],[70,6,59,8],[70,10,59,12],[70,11,59,13,"doPoll"],[70,17,59,19],[70,18,59,20],[70,19,59,21],[71,6,60,8],[71,10,60,12],[71,11,60,13,"emitReserved"],[71,23,60,25],[71,24,60,26],[71,30,60,32],[71,31,60,33],[72,4,61,4],[73,4,62,4],[74,0,63,0],[75,0,64,0],[76,0,65,0],[77,0,66,0],[78,4,67,4,"onData"],[78,10,67,10,"onData"],[78,11,67,11,"data"],[78,15,67,15],[78,17,67,17],[79,6,68,8],[79,12,68,14,"callback"],[79,20,68,22],[79,23,68,26,"packet"],[79,29,68,32],[79,33,68,37],[80,8,69,12],[81,8,70,12],[81,12,70,16],[81,21,70,25],[81,26,70,30],[81,30,70,34],[81,31,70,35,"readyState"],[81,41,70,45],[81,45,70,49,"packet"],[81,51,70,55],[81,52,70,56,"type"],[81,56,70,60],[81,61,70,65],[81,67,70,71],[81,69,70,73],[82,10,71,16],[82,14,71,20],[82,15,71,21,"onOpen"],[82,21,71,27],[82,22,71,28],[82,23,71,29],[83,8,72,12],[84,8,73,12],[85,8,74,12],[85,12,74,16],[85,19,74,23],[85,24,74,28,"packet"],[85,30,74,34],[85,31,74,35,"type"],[85,35,74,39],[85,37,74,41],[86,10,75,16],[86,14,75,20],[86,15,75,21,"onClose"],[86,22,75,28],[86,23,75,29],[87,12,75,31,"description"],[87,23,75,42],[87,25,75,44],[88,10,75,77],[88,11,75,78],[88,12,75,79],[89,10,76,16],[89,17,76,23],[89,22,76,28],[90,8,77,12],[91,8,78,12],[92,8,79,12],[92,12,79,16],[92,13,79,17,"onPacket"],[92,21,79,25],[92,22,79,26,"packet"],[92,28,79,32],[92,29,79,33],[93,6,80,8],[93,7,80,9],[94,6,81,8],[95,6,82,8],[95,10,82,8,"decodePayload"],[95,25,82,21],[95,26,82,21,"decodePayload"],[95,39,82,21],[95,41,82,22,"data"],[95,45,82,26],[95,47,82,28],[95,51,82,32],[95,52,82,33,"socket"],[95,58,82,39],[95,59,82,40,"binaryType"],[95,69,82,50],[95,70,82,51],[95,71,82,52,"forEach"],[95,78,82,59],[95,79,82,60,"callback"],[95,87,82,68],[95,88,82,69],[96,6,83,8],[97,6,84,8],[97,10,84,12],[97,18,84,20],[97,23,84,25],[97,27,84,29],[97,28,84,30,"readyState"],[97,38,84,40],[97,40,84,42],[98,8,85,12],[99,8,86,12],[99,12,86,16],[99,13,86,17,"_polling"],[99,21,86,25],[99,24,86,28],[99,29,86,33],[100,8,87,12],[100,12,87,16],[100,13,87,17,"emitReserved"],[100,25,87,29],[100,26,87,30],[100,40,87,44],[100,41,87,45],[101,8,88,12],[101,12,88,16],[101,18,88,22],[101,23,88,27],[101,27,88,31],[101,28,88,32,"readyState"],[101,38,88,42],[101,40,88,44],[102,10,89,16],[102,14,89,20],[102,15,89,21,"_poll"],[102,20,89,26],[102,21,89,27],[102,22,89,28],[103,8,90,12],[103,9,90,13],[103,15,91,17],[103,16,92,12],[104,6,93,8],[105,4,94,4],[106,4,95,4],[107,0,96,0],[108,0,97,0],[109,0,98,0],[110,0,99,0],[111,4,100,4,"doClose"],[111,11,100,11,"doClose"],[111,12,100,11],[111,14,100,14],[112,6,101,8],[112,12,101,14,"close"],[112,17,101,19],[112,20,101,22,"close"],[112,21,101,22],[112,26,101,28],[113,8,102,12],[113,12,102,16],[113,13,102,17,"write"],[113,18,102,22],[113,19,102,23],[113,20,102,24],[114,10,102,26,"type"],[114,14,102,30],[114,16,102,32],[115,8,102,40],[115,9,102,41],[115,10,102,42],[115,11,102,43],[116,6,103,8],[116,7,103,9],[117,6,104,8],[117,10,104,12],[117,16,104,18],[117,21,104,23],[117,25,104,27],[117,26,104,28,"readyState"],[117,36,104,38],[117,38,104,40],[118,8,105,12,"close"],[118,13,105,17],[118,14,105,18],[118,15,105,19],[119,6,106,8],[119,7,106,9],[119,13,107,13],[120,8,108,12],[121,8,109,12],[122,8,110,12],[122,12,110,16],[122,13,110,17,"once"],[122,17,110,21],[122,18,110,22],[122,24,110,28],[122,26,110,30,"close"],[122,31,110,35],[122,32,110,36],[123,6,111,8],[124,4,112,4],[125,4,113,4],[126,0,114,0],[127,0,115,0],[128,0,116,0],[129,0,117,0],[130,0,118,0],[131,4,119,4,"write"],[131,9,119,9,"write"],[131,10,119,10,"packets"],[131,17,119,17],[131,19,119,19],[132,6,120,8],[132,10,120,12],[132,11,120,13,"writable"],[132,19,120,21],[132,22,120,24],[132,27,120,29],[133,6,121,8],[133,10,121,8,"encodePayload"],[133,25,121,21],[133,26,121,21,"encodePayload"],[133,39,121,21],[133,41,121,22,"packets"],[133,48,121,29],[133,50,121,32,"data"],[133,54,121,36],[133,58,121,41],[134,8,122,12],[134,12,122,16],[134,13,122,17,"doWrite"],[134,20,122,24],[134,21,122,25,"data"],[134,25,122,29],[134,27,122,31],[134,33,122,37],[135,10,123,16],[135,14,123,20],[135,15,123,21,"writable"],[135,23,123,29],[135,26,123,32],[135,30,123,36],[136,10,124,16],[136,14,124,20],[136,15,124,21,"emitReserved"],[136,27,124,33],[136,28,124,34],[136,35,124,41],[136,36,124,42],[137,8,125,12],[137,9,125,13],[137,10,125,14],[138,6,126,8],[138,7,126,9],[138,8,126,10],[139,4,127,4],[140,4,128,4],[141,0,129,0],[142,0,130,0],[143,0,131,0],[144,0,132,0],[145,4,133,4,"uri"],[145,7,133,7,"uri"],[145,8,133,7],[145,10,133,10],[146,6,134,8],[146,12,134,14,"schema"],[146,18,134,20],[146,21,134,23],[146,25,134,27],[146,26,134,28,"opts"],[146,30,134,32],[146,31,134,33,"secure"],[146,37,134,39],[146,40,134,42],[146,47,134,49],[146,50,134,52],[146,56,134,58],[147,6,135,8],[147,12,135,14,"query"],[147,17,135,19],[147,20,135,22],[147,24,135,26],[147,25,135,27,"query"],[147,30,135,32],[147,34,135,36],[147,35,135,37],[147,36,135,38],[148,6,136,8],[149,6,137,8],[149,10,137,12],[149,15,137,17],[149,20,137,22],[149,24,137,26],[149,25,137,27,"opts"],[149,29,137,31],[149,30,137,32,"timestampRequests"],[149,47,137,49],[149,49,137,51],[150,8,138,12,"query"],[150,13,138,17],[150,14,138,18],[150,18,138,22],[150,19,138,23,"opts"],[150,23,138,27],[150,24,138,28,"timestampParam"],[150,38,138,42],[150,39,138,43],[150,42,138,46],[150,46,138,46,"randomString"],[150,53,138,58],[150,54,138,58,"randomString"],[150,66,138,58],[150,68,138,59],[150,69,138,60],[151,6,139,8],[152,6,140,8],[152,10,140,12],[152,11,140,13],[152,15,140,17],[152,16,140,18,"supportsBinary"],[152,30,140,32],[152,34,140,36],[152,35,140,37,"query"],[152,40,140,42],[152,41,140,43,"sid"],[152,44,140,46],[152,46,140,48],[153,8,141,12,"query"],[153,13,141,17],[153,14,141,18,"b64"],[153,17,141,21],[153,20,141,24],[153,21,141,25],[154,6,142,8],[155,6,143,8],[155,13,143,15],[155,17,143,19],[155,18,143,20,"createUri"],[155,27,143,29],[155,28,143,30,"schema"],[155,34,143,36],[155,36,143,38,"query"],[155,41,143,43],[155,42,143,44],[156,4,144,4],[157,2,145,0],[158,0,145,1],[158,3]],"functionMap":{"names":["<global>","Polling","Polling#constructor","Polling#get__name","Polling#doOpen","Polling#pause","pause","once$argument_1","Polling#_poll","Polling#onData","callback","Polling#doClose","close","Polling#write","encodePayload$argument_1","doWrite$argument_1","Polling#uri"],"mappings":"AAA;OCG;ICC;KDG;IEC;KFE;IGO;KHE;IIO;sBCE;SDG;0CEK;iBFE;mCEI;iBFE;KJM;IOM;KPI;IQM;yBCC;SDY;KRc;IUM;sBCC;SDE;KVS;IYO;+BCE;+BCC;aDG;SDC;KZC;IeM;KfW;CDC"},"hasCjsExports":false},"type":"js/module"}]}