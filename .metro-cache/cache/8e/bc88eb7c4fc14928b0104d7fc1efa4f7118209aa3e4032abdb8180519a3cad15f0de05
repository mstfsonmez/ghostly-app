{"dependencies":[{"name":"./constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":25,"index":40},"end":{"line":3,"column":47,"index":62}}],"key":"3z43bJyk/UB4EKjDCOXTFak09do=","exportNames":["*"],"imports":1}},{"name":"bufferutil","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":117,"column":23,"index":2593},"end":{"line":117,"column":44,"index":2614}}],"key":"+1/sflFWE8SK3vl9pGAd6P58YTY=","exportNames":["*"],"imports":1,"isOptional":true}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  const {\n    EMPTY_BUFFER\n  } = require(_dependencyMap[0], \"./constants\");\n  const FastBuffer = Buffer[Symbol.species];\n\n  /**\n   * Merges an array of buffers into a new buffer.\n   *\n   * @param {Buffer[]} list The array of buffers to concat\n   * @param {Number} totalLength The total length of buffers in the list\n   * @return {Buffer} The resulting buffer\n   * @public\n   */\n  function concat(list, totalLength) {\n    if (list.length === 0) return EMPTY_BUFFER;\n    if (list.length === 1) return list[0];\n    const target = Buffer.allocUnsafe(totalLength);\n    let offset = 0;\n    for (let i = 0; i < list.length; i++) {\n      const buf = list[i];\n      target.set(buf, offset);\n      offset += buf.length;\n    }\n    if (offset < totalLength) {\n      return new FastBuffer(target.buffer, target.byteOffset, offset);\n    }\n    return target;\n  }\n\n  /**\n   * Masks a buffer using the given mask.\n   *\n   * @param {Buffer} source The buffer to mask\n   * @param {Buffer} mask The mask to use\n   * @param {Buffer} output The buffer where to store the result\n   * @param {Number} offset The offset at which to start writing\n   * @param {Number} length The number of bytes to mask.\n   * @public\n   */\n  function _mask(source, mask, output, offset, length) {\n    for (let i = 0; i < length; i++) {\n      output[offset + i] = source[i] ^ mask[i & 3];\n    }\n  }\n\n  /**\n   * Unmasks a buffer using the given mask.\n   *\n   * @param {Buffer} buffer The buffer to unmask\n   * @param {Buffer} mask The mask to use\n   * @public\n   */\n  function _unmask(buffer, mask) {\n    for (let i = 0; i < buffer.length; i++) {\n      buffer[i] ^= mask[i & 3];\n    }\n  }\n\n  /**\n   * Converts a buffer to an `ArrayBuffer`.\n   *\n   * @param {Buffer} buf The buffer to convert\n   * @return {ArrayBuffer} Converted buffer\n   * @public\n   */\n  function toArrayBuffer(buf) {\n    if (buf.length === buf.buffer.byteLength) {\n      return buf.buffer;\n    }\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.length);\n  }\n\n  /**\n   * Converts `data` to a `Buffer`.\n   *\n   * @param {*} data The data to convert\n   * @return {Buffer} The buffer\n   * @throws {TypeError}\n   * @public\n   */\n  function toBuffer(data) {\n    toBuffer.readOnly = true;\n    if (Buffer.isBuffer(data)) return data;\n    let buf;\n    if (data instanceof ArrayBuffer) {\n      buf = new FastBuffer(data);\n    } else if (ArrayBuffer.isView(data)) {\n      buf = new FastBuffer(data.buffer, data.byteOffset, data.byteLength);\n    } else {\n      buf = Buffer.from(data);\n      toBuffer.readOnly = false;\n    }\n    return buf;\n  }\n  module.exports = {\n    concat,\n    mask: _mask,\n    toArrayBuffer,\n    toBuffer,\n    unmask: _unmask\n  };\n\n  /* istanbul ignore else  */\n  if (!process.env.WS_NO_BUFFER_UTIL) {\n    try {\n      const bufferUtil = require(_dependencyMap[1], \"bufferutil\");\n      module.exports.mask = function (source, mask, output, offset, length) {\n        if (length < 48) _mask(source, mask, output, offset, length);else bufferUtil.mask(source, mask, output, offset, length);\n      };\n      module.exports.unmask = function (buffer, mask) {\n        if (buffer.length < 32) _unmask(buffer, mask);else bufferUtil.unmask(buffer, mask);\n      };\n    } catch (e) {\n      // Continue regardless of the error.\n    }\n  }\n});","lineCount":120,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,8,3,6],[5,4,3,8,"EMPTY_BUFFER"],[6,2,3,21],[6,3,3,22],[6,6,3,25,"require"],[6,13,3,32],[6,14,3,32,"_dependencyMap"],[6,28,3,32],[6,46,3,46],[6,47,3,47],[7,2,5,0],[7,8,5,6,"FastBuffer"],[7,18,5,16],[7,21,5,19,"Buffer"],[7,27,5,25],[7,28,5,26,"Symbol"],[7,34,5,32],[7,35,5,33,"species"],[7,42,5,40],[7,43,5,41],[9,2,7,0],[10,0,8,0],[11,0,9,0],[12,0,10,0],[13,0,11,0],[14,0,12,0],[15,0,13,0],[16,0,14,0],[17,2,15,0],[17,11,15,9,"concat"],[17,17,15,15,"concat"],[17,18,15,16,"list"],[17,22,15,20],[17,24,15,22,"totalLength"],[17,35,15,33],[17,37,15,35],[18,4,16,2],[18,8,16,6,"list"],[18,12,16,10],[18,13,16,11,"length"],[18,19,16,17],[18,24,16,22],[18,25,16,23],[18,27,16,25],[18,34,16,32,"EMPTY_BUFFER"],[18,46,16,44],[19,4,17,2],[19,8,17,6,"list"],[19,12,17,10],[19,13,17,11,"length"],[19,19,17,17],[19,24,17,22],[19,25,17,23],[19,27,17,25],[19,34,17,32,"list"],[19,38,17,36],[19,39,17,37],[19,40,17,38],[19,41,17,39],[20,4,19,2],[20,10,19,8,"target"],[20,16,19,14],[20,19,19,17,"Buffer"],[20,25,19,23],[20,26,19,24,"allocUnsafe"],[20,37,19,35],[20,38,19,36,"totalLength"],[20,49,19,47],[20,50,19,48],[21,4,20,2],[21,8,20,6,"offset"],[21,14,20,12],[21,17,20,15],[21,18,20,16],[22,4,22,2],[22,9,22,7],[22,13,22,11,"i"],[22,14,22,12],[22,17,22,15],[22,18,22,16],[22,20,22,18,"i"],[22,21,22,19],[22,24,22,22,"list"],[22,28,22,26],[22,29,22,27,"length"],[22,35,22,33],[22,37,22,35,"i"],[22,38,22,36],[22,40,22,38],[22,42,22,40],[23,6,23,4],[23,12,23,10,"buf"],[23,15,23,13],[23,18,23,16,"list"],[23,22,23,20],[23,23,23,21,"i"],[23,24,23,22],[23,25,23,23],[24,6,24,4,"target"],[24,12,24,10],[24,13,24,11,"set"],[24,16,24,14],[24,17,24,15,"buf"],[24,20,24,18],[24,22,24,20,"offset"],[24,28,24,26],[24,29,24,27],[25,6,25,4,"offset"],[25,12,25,10],[25,16,25,14,"buf"],[25,19,25,17],[25,20,25,18,"length"],[25,26,25,24],[26,4,26,2],[27,4,28,2],[27,8,28,6,"offset"],[27,14,28,12],[27,17,28,15,"totalLength"],[27,28,28,26],[27,30,28,28],[28,6,29,4],[28,13,29,11],[28,17,29,15,"FastBuffer"],[28,27,29,25],[28,28,29,26,"target"],[28,34,29,32],[28,35,29,33,"buffer"],[28,41,29,39],[28,43,29,41,"target"],[28,49,29,47],[28,50,29,48,"byteOffset"],[28,60,29,58],[28,62,29,60,"offset"],[28,68,29,66],[28,69,29,67],[29,4,30,2],[30,4,32,2],[30,11,32,9,"target"],[30,17,32,15],[31,2,33,0],[33,2,35,0],[34,0,36,0],[35,0,37,0],[36,0,38,0],[37,0,39,0],[38,0,40,0],[39,0,41,0],[40,0,42,0],[41,0,43,0],[42,0,44,0],[43,2,45,0],[43,11,45,9,"_mask"],[43,16,45,14,"_mask"],[43,17,45,15,"source"],[43,23,45,21],[43,25,45,23,"mask"],[43,29,45,27],[43,31,45,29,"output"],[43,37,45,35],[43,39,45,37,"offset"],[43,45,45,43],[43,47,45,45,"length"],[43,53,45,51],[43,55,45,53],[44,4,46,2],[44,9,46,7],[44,13,46,11,"i"],[44,14,46,12],[44,17,46,15],[44,18,46,16],[44,20,46,18,"i"],[44,21,46,19],[44,24,46,22,"length"],[44,30,46,28],[44,32,46,30,"i"],[44,33,46,31],[44,35,46,33],[44,37,46,35],[45,6,47,4,"output"],[45,12,47,10],[45,13,47,11,"offset"],[45,19,47,17],[45,22,47,20,"i"],[45,23,47,21],[45,24,47,22],[45,27,47,25,"source"],[45,33,47,31],[45,34,47,32,"i"],[45,35,47,33],[45,36,47,34],[45,39,47,37,"mask"],[45,43,47,41],[45,44,47,42,"i"],[45,45,47,43],[45,48,47,46],[45,49,47,47],[45,50,47,48],[46,4,48,2],[47,2,49,0],[49,2,51,0],[50,0,52,0],[51,0,53,0],[52,0,54,0],[53,0,55,0],[54,0,56,0],[55,0,57,0],[56,2,58,0],[56,11,58,9,"_unmask"],[56,18,58,16,"_unmask"],[56,19,58,17,"buffer"],[56,25,58,23],[56,27,58,25,"mask"],[56,31,58,29],[56,33,58,31],[57,4,59,2],[57,9,59,7],[57,13,59,11,"i"],[57,14,59,12],[57,17,59,15],[57,18,59,16],[57,20,59,18,"i"],[57,21,59,19],[57,24,59,22,"buffer"],[57,30,59,28],[57,31,59,29,"length"],[57,37,59,35],[57,39,59,37,"i"],[57,40,59,38],[57,42,59,40],[57,44,59,42],[58,6,60,4,"buffer"],[58,12,60,10],[58,13,60,11,"i"],[58,14,60,12],[58,15,60,13],[58,19,60,17,"mask"],[58,23,60,21],[58,24,60,22,"i"],[58,25,60,23],[58,28,60,26],[58,29,60,27],[58,30,60,28],[59,4,61,2],[60,2,62,0],[62,2,64,0],[63,0,65,0],[64,0,66,0],[65,0,67,0],[66,0,68,0],[67,0,69,0],[68,0,70,0],[69,2,71,0],[69,11,71,9,"toArrayBuffer"],[69,24,71,22,"toArrayBuffer"],[69,25,71,23,"buf"],[69,28,71,26],[69,30,71,28],[70,4,72,2],[70,8,72,6,"buf"],[70,11,72,9],[70,12,72,10,"length"],[70,18,72,16],[70,23,72,21,"buf"],[70,26,72,24],[70,27,72,25,"buffer"],[70,33,72,31],[70,34,72,32,"byteLength"],[70,44,72,42],[70,46,72,44],[71,6,73,4],[71,13,73,11,"buf"],[71,16,73,14],[71,17,73,15,"buffer"],[71,23,73,21],[72,4,74,2],[73,4,76,2],[73,11,76,9,"buf"],[73,14,76,12],[73,15,76,13,"buffer"],[73,21,76,19],[73,22,76,20,"slice"],[73,27,76,25],[73,28,76,26,"buf"],[73,31,76,29],[73,32,76,30,"byteOffset"],[73,42,76,40],[73,44,76,42,"buf"],[73,47,76,45],[73,48,76,46,"byteOffset"],[73,58,76,56],[73,61,76,59,"buf"],[73,64,76,62],[73,65,76,63,"length"],[73,71,76,69],[73,72,76,70],[74,2,77,0],[76,2,79,0],[77,0,80,0],[78,0,81,0],[79,0,82,0],[80,0,83,0],[81,0,84,0],[82,0,85,0],[83,0,86,0],[84,2,87,0],[84,11,87,9,"toBuffer"],[84,19,87,17,"toBuffer"],[84,20,87,18,"data"],[84,24,87,22],[84,26,87,24],[85,4,88,2,"toBuffer"],[85,12,88,10],[85,13,88,11,"readOnly"],[85,21,88,19],[85,24,88,22],[85,28,88,26],[86,4,90,2],[86,8,90,6,"Buffer"],[86,14,90,12],[86,15,90,13,"isBuffer"],[86,23,90,21],[86,24,90,22,"data"],[86,28,90,26],[86,29,90,27],[86,31,90,29],[86,38,90,36,"data"],[86,42,90,40],[87,4,92,2],[87,8,92,6,"buf"],[87,11,92,9],[88,4,94,2],[88,8,94,6,"data"],[88,12,94,10],[88,24,94,22,"ArrayBuffer"],[88,35,94,33],[88,37,94,35],[89,6,95,4,"buf"],[89,9,95,7],[89,12,95,10],[89,16,95,14,"FastBuffer"],[89,26,95,24],[89,27,95,25,"data"],[89,31,95,29],[89,32,95,30],[90,4,96,2],[90,5,96,3],[90,11,96,9],[90,15,96,13,"ArrayBuffer"],[90,26,96,24],[90,27,96,25,"isView"],[90,33,96,31],[90,34,96,32,"data"],[90,38,96,36],[90,39,96,37],[90,41,96,39],[91,6,97,4,"buf"],[91,9,97,7],[91,12,97,10],[91,16,97,14,"FastBuffer"],[91,26,97,24],[91,27,97,25,"data"],[91,31,97,29],[91,32,97,30,"buffer"],[91,38,97,36],[91,40,97,38,"data"],[91,44,97,42],[91,45,97,43,"byteOffset"],[91,55,97,53],[91,57,97,55,"data"],[91,61,97,59],[91,62,97,60,"byteLength"],[91,72,97,70],[91,73,97,71],[92,4,98,2],[92,5,98,3],[92,11,98,9],[93,6,99,4,"buf"],[93,9,99,7],[93,12,99,10,"Buffer"],[93,18,99,16],[93,19,99,17,"from"],[93,23,99,21],[93,24,99,22,"data"],[93,28,99,26],[93,29,99,27],[94,6,100,4,"toBuffer"],[94,14,100,12],[94,15,100,13,"readOnly"],[94,23,100,21],[94,26,100,24],[94,31,100,29],[95,4,101,2],[96,4,103,2],[96,11,103,9,"buf"],[96,14,103,12],[97,2,104,0],[98,2,106,0,"module"],[98,8,106,6],[98,9,106,7,"exports"],[98,16,106,14],[98,19,106,17],[99,4,107,2,"concat"],[99,10,107,8],[100,4,108,2,"mask"],[100,8,108,6],[100,10,108,8,"_mask"],[100,15,108,13],[101,4,109,2,"toArrayBuffer"],[101,17,109,15],[102,4,110,2,"toBuffer"],[102,12,110,10],[103,4,111,2,"unmask"],[103,10,111,8],[103,12,111,10,"_unmask"],[104,2,112,0],[104,3,112,1],[106,2,114,0],[107,2,115,0],[107,6,115,4],[107,7,115,5,"process"],[107,14,115,12],[107,15,115,13,"env"],[107,18,115,16],[107,19,115,17,"WS_NO_BUFFER_UTIL"],[107,36,115,34],[107,38,115,36],[108,4,116,2],[108,8,116,6],[109,6,117,4],[109,12,117,10,"bufferUtil"],[109,22,117,20],[109,25,117,23,"require"],[109,32,117,30],[109,33,117,30,"_dependencyMap"],[109,47,117,30],[109,64,117,43],[109,65,117,44],[110,6,119,4,"module"],[110,12,119,10],[110,13,119,11,"exports"],[110,20,119,18],[110,21,119,19,"mask"],[110,25,119,23],[110,28,119,26],[110,38,119,36,"source"],[110,44,119,42],[110,46,119,44,"mask"],[110,50,119,48],[110,52,119,50,"output"],[110,58,119,56],[110,60,119,58,"offset"],[110,66,119,64],[110,68,119,66,"length"],[110,74,119,72],[110,76,119,74],[111,8,120,6],[111,12,120,10,"length"],[111,18,120,16],[111,21,120,19],[111,23,120,21],[111,25,120,23,"_mask"],[111,30,120,28],[111,31,120,29,"source"],[111,37,120,35],[111,39,120,37,"mask"],[111,43,120,41],[111,45,120,43,"output"],[111,51,120,49],[111,53,120,51,"offset"],[111,59,120,57],[111,61,120,59,"length"],[111,67,120,65],[111,68,120,66],[111,69,120,67],[111,74,121,11,"bufferUtil"],[111,84,121,21],[111,85,121,22,"mask"],[111,89,121,26],[111,90,121,27,"source"],[111,96,121,33],[111,98,121,35,"mask"],[111,102,121,39],[111,104,121,41,"output"],[111,110,121,47],[111,112,121,49,"offset"],[111,118,121,55],[111,120,121,57,"length"],[111,126,121,63],[111,127,121,64],[112,6,122,4],[112,7,122,5],[113,6,124,4,"module"],[113,12,124,10],[113,13,124,11,"exports"],[113,20,124,18],[113,21,124,19,"unmask"],[113,27,124,25],[113,30,124,28],[113,40,124,38,"buffer"],[113,46,124,44],[113,48,124,46,"mask"],[113,52,124,50],[113,54,124,52],[114,8,125,6],[114,12,125,10,"buffer"],[114,18,125,16],[114,19,125,17,"length"],[114,25,125,23],[114,28,125,26],[114,30,125,28],[114,32,125,30,"_unmask"],[114,39,125,37],[114,40,125,38,"buffer"],[114,46,125,44],[114,48,125,46,"mask"],[114,52,125,50],[114,53,125,51],[114,54,125,52],[114,59,126,11,"bufferUtil"],[114,69,126,21],[114,70,126,22,"unmask"],[114,76,126,28],[114,77,126,29,"buffer"],[114,83,126,35],[114,85,126,37,"mask"],[114,89,126,41],[114,90,126,42],[115,6,127,4],[115,7,127,5],[116,4,128,2],[116,5,128,3],[116,6,128,4],[116,13,128,11,"e"],[116,14,128,12],[116,16,128,14],[117,6,129,4],[118,4,129,4],[119,2,131,0],[120,0,131,1],[120,3]],"functionMap":{"names":["<global>","concat","_mask","_unmask","toArrayBuffer","toBuffer","module.exports.mask","module.exports.unmask"],"mappings":"AAA;ACc;CDkB;AEY;CFI;AGS;CHI;AIS;CJM;AKU;CLiB;0BMe;KNG;4BOE;KPG"},"hasCjsExports":true},"type":"js/module"}]}