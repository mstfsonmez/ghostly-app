{"dependencies":[{"name":"expo/virtual/env","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"dgHc21cgR+buKc7O3/dChhD5JJk=","exportNames":["*"],"imports":1}},{"name":"socket.io-client","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":46,"index":46}}],"key":"LVgCyxgUdze/lYG0kA6DdCAztfM=","exportNames":["*"],"imports":1}},{"name":"expo-constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":117},"end":{"line":3,"column":39,"index":156}}],"key":"pPv5KzfRT0rL6NCr7G9k0o4d1W8=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  var _expoVirtualEnv = require(_dependencyMap[0], \"expo/virtual/env\");\n  var _socketIoClient = require(_dependencyMap[1], \"socket.io-client\");\n  var _expoConstants = require(_dependencyMap[2], \"expo-constants\");\n  var Constants = _interopDefault(_expoConstants);\n  const API_URL = Constants.default.expoConfig?.extra?.EXPO_PUBLIC_BACKEND_URL || _expoVirtualEnv.env.EXPO_PUBLIC_BACKEND_URL || 'http://localhost:8001';\n  class SocketService {\n    socket = null;\n    isConnected = false;\n    connectionListeners = [];\n    pendingListeners = [];\n    registeredListeners = [];\n    async connect() {\n      try {\n        console.log('🔵 Connecting to Socket.IO server:', API_URL);\n\n        // Force polling transport only (WebSocket blocked by Kubernetes proxy)\n        // Socket.IO path must be under /api/ to work with Kubernetes ingress\n        this.socket = (0, _socketIoClient.io)(API_URL, {\n          path: '/socket.io',\n          transports: ['polling'],\n          // Only use polling, not websocket\n          reconnection: true,\n          reconnectionDelay: 1000,\n          reconnectionAttempts: 5,\n          timeout: 10000\n        });\n        this.socket.on('connect', () => {\n          console.log('✅ Socket connected:', this.socket?.id);\n          this.isConnected = true;\n          this.notifyConnectionListeners(true);\n\n          // Register all pending listeners\n          console.log(`📝 Registering ${this.pendingListeners.length} pending listeners`);\n          this.pendingListeners.forEach(({\n            event,\n            callback\n          }) => {\n            if (this.socket) {\n              this.socket.on(event, callback);\n              this.registeredListeners.push({\n                event,\n                callback\n              });\n              console.log(`✅ Registered listener for: ${event}`);\n            }\n          });\n          this.pendingListeners = [];\n\n          // Re-register all previously registered listeners (for reconnect)\n          console.log(`🔄 Re-registering ${this.registeredListeners.length} existing listeners`);\n          this.registeredListeners.forEach(({\n            event,\n            callback\n          }) => {\n            if (this.socket) {\n              this.socket.on(event, callback);\n            }\n          });\n        });\n        this.socket.on('disconnect', reason => {\n          console.log('❌ Socket disconnected:', reason);\n          this.isConnected = false;\n          this.notifyConnectionListeners(false);\n        });\n        this.socket.on('connect_error', error => {\n          console.error('❌ Connection error:', error.message);\n          this.isConnected = false;\n          this.notifyConnectionListeners(false);\n        });\n        return true;\n      } catch (error) {\n        console.error('Socket connection error:', error);\n        return false;\n      }\n    }\n    disconnect() {\n      if (this.socket) {\n        this.socket.disconnect();\n        this.socket = null;\n        this.isConnected = false;\n      }\n    }\n    emit(event, data) {\n      if (this.socket && this.isConnected) {\n        console.log(`📤 Emitting: ${event}`, data);\n        this.socket.emit(event, data);\n      } else {\n        console.warn('⚠️ Socket not connected, cannot emit:', event);\n      }\n    }\n    on(event, callback) {\n      if (this.socket && this.isConnected) {\n        // Socket is already connected, register immediately\n        console.log(`✅ Registering listener immediately for: ${event}`);\n        this.socket.on(event, callback);\n        // Store for reconnection\n        this.registeredListeners.push({\n          event,\n          callback\n        });\n      } else {\n        // Socket not connected yet, queue the listener\n        console.log(`⏳ Queuing listener for: ${event}`);\n        this.pendingListeners.push({\n          event,\n          callback\n        });\n      }\n    }\n    off(event, callback) {\n      if (this.socket) {\n        this.socket.off(event, callback);\n      }\n      // Remove from registered listeners\n      this.registeredListeners = this.registeredListeners.filter(listener => listener.event !== event || callback && listener.callback !== callback);\n      // Also remove from pending listeners\n      this.pendingListeners = this.pendingListeners.filter(listener => listener.event !== event || callback && listener.callback !== callback);\n    }\n    addConnectionListener(callback) {\n      this.connectionListeners.push(callback);\n    }\n    removeConnectionListener(callback) {\n      this.connectionListeners = this.connectionListeners.filter(listener => listener !== callback);\n    }\n    notifyConnectionListeners(isConnected) {\n      this.connectionListeners.forEach(callback => {\n        callback(isConnected);\n      });\n    }\n  }\n  var _default = new SocketService();\n});","lineCount":149,"map":[[12,2,136,0,"Object"],[12,8,136,0],[12,9,136,0,"defineProperty"],[12,23,136,0],[12,24,136,0,"exports"],[12,31,136,0],[13,4,136,0,"enumerable"],[13,14,136,0],[14,4,136,0,"get"],[14,7,136,0],[14,18,136,0,"get"],[14,19,136,0],[15,6,136,0],[15,13,136,0,"_default"],[15,21,136,0],[16,4,136,0],[17,2,136,0],[18,2,136,35],[18,6,136,35,"_expoVirtualEnv"],[18,21,136,35],[18,24,136,35,"require"],[18,31,136,35],[18,32,136,35,"_dependencyMap"],[18,46,136,35],[19,2,1,0],[19,6,1,0,"_socketIoClient"],[19,21,1,0],[19,24,1,0,"require"],[19,31,1,0],[19,32,1,0,"_dependencyMap"],[19,46,1,0],[20,2,3,0],[20,6,3,0,"_expoConstants"],[20,20,3,0],[20,23,3,0,"require"],[20,30,3,0],[20,31,3,0,"_dependencyMap"],[20,45,3,0],[21,2,3,0],[21,6,3,0,"Constants"],[21,15,3,0],[21,18,3,0,"_interopDefault"],[21,33,3,0],[21,34,3,0,"_expoConstants"],[21,48,3,0],[22,2,5,0],[22,8,5,6,"API_URL"],[22,15,5,13],[22,18,5,16,"Constants"],[22,27,5,25],[22,28,5,25,"default"],[22,35,5,25],[22,36,5,26,"expoConfig"],[22,46,5,36],[22,48,5,38,"extra"],[22,53,5,43],[22,55,5,45,"EXPO_PUBLIC_BACKEND_URL"],[22,78,5,68],[22,82,5,68,"_expoVirtualEnv"],[22,97,5,68],[22,98,5,68,"env"],[22,101,5,68],[22,102,5,68,"EXPO_PUBLIC_BACKEND_URL"],[22,125,5,107],[22,129,5,111],[22,152,5,134],[23,2,7,0],[23,8,7,6,"SocketService"],[23,21,7,19],[23,22,7,20],[24,4,8,2,"socket"],[24,10,8,8],[24,13,8,26],[24,17,8,30],[25,4,9,2,"isConnected"],[25,15,9,13],[25,18,9,25],[25,23,9,30],[26,4,10,2,"connectionListeners"],[26,23,10,21],[26,26,10,60],[26,28,10,62],[27,4,11,2,"pendingListeners"],[27,20,11,18],[27,23,11,73],[27,25,11,75],[28,4,12,2,"registeredListeners"],[28,23,12,21],[28,26,12,76],[28,28,12,78],[29,4,14,2],[29,10,14,8,"connect"],[29,17,14,15,"connect"],[29,18,14,15],[29,20,14,18],[30,6,15,4],[30,10,15,8],[31,8,16,6,"console"],[31,15,16,13],[31,16,16,14,"log"],[31,19,16,17],[31,20,16,18],[31,56,16,54],[31,58,16,56,"API_URL"],[31,65,16,63],[31,66,16,64],[33,8,18,6],[34,8,19,6],[35,8,20,6],[35,12,20,10],[35,13,20,11,"socket"],[35,19,20,17],[35,22,20,20],[35,26,20,20,"io"],[35,41,20,22],[35,42,20,22,"io"],[35,44,20,22],[35,46,20,23,"API_URL"],[35,53,20,30],[35,55,20,32],[36,10,21,8,"path"],[36,14,21,12],[36,16,21,14],[36,28,21,26],[37,10,22,8,"transports"],[37,20,22,18],[37,22,22,20],[37,23,22,21],[37,32,22,30],[37,33,22,31],[38,10,22,33],[39,10,23,8,"reconnection"],[39,22,23,20],[39,24,23,22],[39,28,23,26],[40,10,24,8,"reconnectionDelay"],[40,27,24,25],[40,29,24,27],[40,33,24,31],[41,10,25,8,"reconnectionAttempts"],[41,30,25,28],[41,32,25,30],[41,33,25,31],[42,10,26,8,"timeout"],[42,17,26,15],[42,19,26,17],[43,8,27,6],[43,9,27,7],[43,10,27,8],[44,8,29,6],[44,12,29,10],[44,13,29,11,"socket"],[44,19,29,17],[44,20,29,18,"on"],[44,22,29,20],[44,23,29,21],[44,32,29,30],[44,34,29,32],[44,40,29,38],[45,10,30,8,"console"],[45,17,30,15],[45,18,30,16,"log"],[45,21,30,19],[45,22,30,20],[45,43,30,41],[45,45,30,43],[45,49,30,47],[45,50,30,48,"socket"],[45,56,30,54],[45,58,30,56,"id"],[45,60,30,58],[45,61,30,59],[46,10,31,8],[46,14,31,12],[46,15,31,13,"isConnected"],[46,26,31,24],[46,29,31,27],[46,33,31,31],[47,10,32,8],[47,14,32,12],[47,15,32,13,"notifyConnectionListeners"],[47,40,32,38],[47,41,32,39],[47,45,32,43],[47,46,32,44],[49,10,34,8],[50,10,35,8,"console"],[50,17,35,15],[50,18,35,16,"log"],[50,21,35,19],[50,22,35,20],[50,40,35,38],[50,44,35,42],[50,45,35,43,"pendingListeners"],[50,61,35,59],[50,62,35,60,"length"],[50,68,35,66],[50,88,35,86],[50,89,35,87],[51,10,36,8],[51,14,36,12],[51,15,36,13,"pendingListeners"],[51,31,36,29],[51,32,36,30,"forEach"],[51,39,36,37],[51,40,36,38],[51,41,36,39],[52,12,36,41,"event"],[52,17,36,46],[53,12,36,48,"callback"],[54,10,36,57],[54,11,36,58],[54,16,36,63],[55,12,37,10],[55,16,37,14],[55,20,37,18],[55,21,37,19,"socket"],[55,27,37,25],[55,29,37,27],[56,14,38,12],[56,18,38,16],[56,19,38,17,"socket"],[56,25,38,23],[56,26,38,24,"on"],[56,28,38,26],[56,29,38,27,"event"],[56,34,38,32],[56,36,38,34,"callback"],[56,44,38,42],[56,45,38,43],[57,14,39,12],[57,18,39,16],[57,19,39,17,"registeredListeners"],[57,38,39,36],[57,39,39,37,"push"],[57,43,39,41],[57,44,39,42],[58,16,39,44,"event"],[58,21,39,49],[59,16,39,51,"callback"],[60,14,39,60],[60,15,39,61],[60,16,39,62],[61,14,40,12,"console"],[61,21,40,19],[61,22,40,20,"log"],[61,25,40,23],[61,26,40,24],[61,56,40,54,"event"],[61,61,40,59],[61,63,40,61],[61,64,40,62],[62,12,41,10],[63,10,42,8],[63,11,42,9],[63,12,42,10],[64,10,43,8],[64,14,43,12],[64,15,43,13,"pendingListeners"],[64,31,43,29],[64,34,43,32],[64,36,43,34],[66,10,45,8],[67,10,46,8,"console"],[67,17,46,15],[67,18,46,16,"log"],[67,21,46,19],[67,22,46,20],[67,43,46,41],[67,47,46,45],[67,48,46,46,"registeredListeners"],[67,67,46,65],[67,68,46,66,"length"],[67,74,46,72],[67,95,46,93],[67,96,46,94],[68,10,47,8],[68,14,47,12],[68,15,47,13,"registeredListeners"],[68,34,47,32],[68,35,47,33,"forEach"],[68,42,47,40],[68,43,47,41],[68,44,47,42],[69,12,47,44,"event"],[69,17,47,49],[70,12,47,51,"callback"],[71,10,47,60],[71,11,47,61],[71,16,47,66],[72,12,48,10],[72,16,48,14],[72,20,48,18],[72,21,48,19,"socket"],[72,27,48,25],[72,29,48,27],[73,14,49,12],[73,18,49,16],[73,19,49,17,"socket"],[73,25,49,23],[73,26,49,24,"on"],[73,28,49,26],[73,29,49,27,"event"],[73,34,49,32],[73,36,49,34,"callback"],[73,44,49,42],[73,45,49,43],[74,12,50,10],[75,10,51,8],[75,11,51,9],[75,12,51,10],[76,8,52,6],[76,9,52,7],[76,10,52,8],[77,8,54,6],[77,12,54,10],[77,13,54,11,"socket"],[77,19,54,17],[77,20,54,18,"on"],[77,22,54,20],[77,23,54,21],[77,35,54,33],[77,37,54,36,"reason"],[77,43,54,50],[77,47,54,55],[78,10,55,8,"console"],[78,17,55,15],[78,18,55,16,"log"],[78,21,55,19],[78,22,55,20],[78,46,55,44],[78,48,55,46,"reason"],[78,54,55,52],[78,55,55,53],[79,10,56,8],[79,14,56,12],[79,15,56,13,"isConnected"],[79,26,56,24],[79,29,56,27],[79,34,56,32],[80,10,57,8],[80,14,57,12],[80,15,57,13,"notifyConnectionListeners"],[80,40,57,38],[80,41,57,39],[80,46,57,44],[80,47,57,45],[81,8,58,6],[81,9,58,7],[81,10,58,8],[82,8,60,6],[82,12,60,10],[82,13,60,11,"socket"],[82,19,60,17],[82,20,60,18,"on"],[82,22,60,20],[82,23,60,21],[82,38,60,36],[82,40,60,39,"error"],[82,45,60,51],[82,49,60,56],[83,10,61,8,"console"],[83,17,61,15],[83,18,61,16,"error"],[83,23,61,21],[83,24,61,22],[83,45,61,43],[83,47,61,45,"error"],[83,52,61,50],[83,53,61,51,"message"],[83,60,61,58],[83,61,61,59],[84,10,62,8],[84,14,62,12],[84,15,62,13,"isConnected"],[84,26,62,24],[84,29,62,27],[84,34,62,32],[85,10,63,8],[85,14,63,12],[85,15,63,13,"notifyConnectionListeners"],[85,40,63,38],[85,41,63,39],[85,46,63,44],[85,47,63,45],[86,8,64,6],[86,9,64,7],[86,10,64,8],[87,8,66,6],[87,15,66,13],[87,19,66,17],[88,6,68,4],[88,7,68,5],[88,8,68,6],[88,15,68,13,"error"],[88,20,68,18],[88,22,68,20],[89,8,69,6,"console"],[89,15,69,13],[89,16,69,14,"error"],[89,21,69,19],[89,22,69,20],[89,48,69,46],[89,50,69,48,"error"],[89,55,69,53],[89,56,69,54],[90,8,70,6],[90,15,70,13],[90,20,70,18],[91,6,71,4],[92,4,72,2],[93,4,74,2,"disconnect"],[93,14,74,12,"disconnect"],[93,15,74,12],[93,17,74,15],[94,6,75,4],[94,10,75,8],[94,14,75,12],[94,15,75,13,"socket"],[94,21,75,19],[94,23,75,21],[95,8,76,6],[95,12,76,10],[95,13,76,11,"socket"],[95,19,76,17],[95,20,76,18,"disconnect"],[95,30,76,28],[95,31,76,29],[95,32,76,30],[96,8,77,6],[96,12,77,10],[96,13,77,11,"socket"],[96,19,77,17],[96,22,77,20],[96,26,77,24],[97,8,78,6],[97,12,78,10],[97,13,78,11,"isConnected"],[97,24,78,22],[97,27,78,25],[97,32,78,30],[98,6,79,4],[99,4,80,2],[100,4,82,2,"emit"],[100,8,82,6,"emit"],[100,9,82,7,"event"],[100,14,82,20],[100,16,82,22,"data"],[100,20,82,31],[100,22,82,33],[101,6,83,4],[101,10,83,8],[101,14,83,12],[101,15,83,13,"socket"],[101,21,83,19],[101,25,83,23],[101,29,83,27],[101,30,83,28,"isConnected"],[101,41,83,39],[101,43,83,41],[102,8,84,6,"console"],[102,15,84,13],[102,16,84,14,"log"],[102,19,84,17],[102,20,84,18],[102,36,84,34,"event"],[102,41,84,39],[102,43,84,41],[102,45,84,43,"data"],[102,49,84,47],[102,50,84,48],[103,8,85,6],[103,12,85,10],[103,13,85,11,"socket"],[103,19,85,17],[103,20,85,18,"emit"],[103,24,85,22],[103,25,85,23,"event"],[103,30,85,28],[103,32,85,30,"data"],[103,36,85,34],[103,37,85,35],[104,6,86,4],[104,7,86,5],[104,13,86,11],[105,8,87,6,"console"],[105,15,87,13],[105,16,87,14,"warn"],[105,20,87,18],[105,21,87,19],[105,60,87,58],[105,62,87,60,"event"],[105,67,87,65],[105,68,87,66],[106,6,88,4],[107,4,89,2],[108,4,91,2,"on"],[108,6,91,4,"on"],[108,7,91,5,"event"],[108,12,91,18],[108,14,91,20,"callback"],[108,22,91,49],[108,24,91,51],[109,6,92,4],[109,10,92,8],[109,14,92,12],[109,15,92,13,"socket"],[109,21,92,19],[109,25,92,23],[109,29,92,27],[109,30,92,28,"isConnected"],[109,41,92,39],[109,43,92,41],[110,8,93,6],[111,8,94,6,"console"],[111,15,94,13],[111,16,94,14,"log"],[111,19,94,17],[111,20,94,18],[111,63,94,61,"event"],[111,68,94,66],[111,70,94,68],[111,71,94,69],[112,8,95,6],[112,12,95,10],[112,13,95,11,"socket"],[112,19,95,17],[112,20,95,18,"on"],[112,22,95,20],[112,23,95,21,"event"],[112,28,95,26],[112,30,95,28,"callback"],[112,38,95,36],[112,39,95,37],[113,8,96,6],[114,8,97,6],[114,12,97,10],[114,13,97,11,"registeredListeners"],[114,32,97,30],[114,33,97,31,"push"],[114,37,97,35],[114,38,97,36],[115,10,97,38,"event"],[115,15,97,43],[116,10,97,45,"callback"],[117,8,97,54],[117,9,97,55],[117,10,97,56],[118,6,98,4],[118,7,98,5],[118,13,98,11],[119,8,99,6],[120,8,100,6,"console"],[120,15,100,13],[120,16,100,14,"log"],[120,19,100,17],[120,20,100,18],[120,47,100,45,"event"],[120,52,100,50],[120,54,100,52],[120,55,100,53],[121,8,101,6],[121,12,101,10],[121,13,101,11,"pendingListeners"],[121,29,101,27],[121,30,101,28,"push"],[121,34,101,32],[121,35,101,33],[122,10,101,35,"event"],[122,15,101,40],[123,10,101,42,"callback"],[124,8,101,51],[124,9,101,52],[124,10,101,53],[125,6,102,4],[126,4,103,2],[127,4,105,2,"off"],[127,7,105,5,"off"],[127,8,105,6,"event"],[127,13,105,19],[127,15,105,21,"callback"],[127,23,105,51],[127,25,105,53],[128,6,106,4],[128,10,106,8],[128,14,106,12],[128,15,106,13,"socket"],[128,21,106,19],[128,23,106,21],[129,8,107,6],[129,12,107,10],[129,13,107,11,"socket"],[129,19,107,17],[129,20,107,18,"off"],[129,23,107,21],[129,24,107,22,"event"],[129,29,107,27],[129,31,107,29,"callback"],[129,39,107,37],[129,40,107,38],[130,6,108,4],[131,6,109,4],[132,6,110,4],[132,10,110,8],[132,11,110,9,"registeredListeners"],[132,30,110,28],[132,33,110,31],[132,37,110,35],[132,38,110,36,"registeredListeners"],[132,57,110,55],[132,58,110,56,"filter"],[132,64,110,62],[132,65,111,6,"listener"],[132,73,111,14],[132,77,111,18,"listener"],[132,85,111,26],[132,86,111,27,"event"],[132,91,111,32],[132,96,111,37,"event"],[132,101,111,42],[132,105,111,47,"callback"],[132,113,111,55],[132,117,111,59,"listener"],[132,125,111,67],[132,126,111,68,"callback"],[132,134,111,76],[132,139,111,81,"callback"],[132,147,112,4],[132,148,112,5],[133,6,113,4],[134,6,114,4],[134,10,114,8],[134,11,114,9,"pendingListeners"],[134,27,114,25],[134,30,114,28],[134,34,114,32],[134,35,114,33,"pendingListeners"],[134,51,114,49],[134,52,114,50,"filter"],[134,58,114,56],[134,59,115,6,"listener"],[134,67,115,14],[134,71,115,18,"listener"],[134,79,115,26],[134,80,115,27,"event"],[134,85,115,32],[134,90,115,37,"event"],[134,95,115,42],[134,99,115,47,"callback"],[134,107,115,55],[134,111,115,59,"listener"],[134,119,115,67],[134,120,115,68,"callback"],[134,128,115,76],[134,133,115,81,"callback"],[134,141,116,4],[134,142,116,5],[135,4,117,2],[136,4,119,2,"addConnectionListener"],[136,25,119,23,"addConnectionListener"],[136,26,119,24,"callback"],[136,34,119,64],[136,36,119,66],[137,6,120,4],[137,10,120,8],[137,11,120,9,"connectionListeners"],[137,30,120,28],[137,31,120,29,"push"],[137,35,120,33],[137,36,120,34,"callback"],[137,44,120,42],[137,45,120,43],[138,4,121,2],[139,4,123,2,"removeConnectionListener"],[139,28,123,26,"removeConnectionListener"],[139,29,123,27,"callback"],[139,37,123,67],[139,39,123,69],[140,6,124,4],[140,10,124,8],[140,11,124,9,"connectionListeners"],[140,30,124,28],[140,33,124,31],[140,37,124,35],[140,38,124,36,"connectionListeners"],[140,57,124,55],[140,58,124,56,"filter"],[140,64,124,62],[140,65,125,6,"listener"],[140,73,125,14],[140,77,125,18,"listener"],[140,85,125,26],[140,90,125,31,"callback"],[140,98,126,4],[140,99,126,5],[141,4,127,2],[142,4,129,2,"notifyConnectionListeners"],[142,29,129,27,"notifyConnectionListeners"],[142,30,129,28,"isConnected"],[142,41,129,48],[142,43,129,50],[143,6,130,4],[143,10,130,8],[143,11,130,9,"connectionListeners"],[143,30,130,28],[143,31,130,29,"forEach"],[143,38,130,36],[143,39,130,37,"callback"],[143,47,130,45],[143,51,130,49],[144,8,131,6,"callback"],[144,16,131,14],[144,17,131,15,"isConnected"],[144,28,131,26],[144,29,131,27],[145,6,132,4],[145,7,132,5],[145,8,132,6],[146,4,133,2],[147,2,134,0],[148,2,136,0],[148,6,136,0,"_default"],[148,14,136,0],[148,17,136,15],[148,21,136,19,"SocketService"],[148,34,136,32],[148,35,136,33],[148,36,136,34],[149,0,136,35],[149,3]],"functionMap":{"names":["<global>","SocketService","SocketService#connect","on$argument_1","pendingListeners.forEach$argument_0","registeredListeners.forEach$argument_0","SocketService#disconnect","SocketService#emit","SocketService#on","SocketService#off","registeredListeners.filter$argument_0","pendingListeners.filter$argument_0","SocketService#addConnectionListener","SocketService#removeConnectionListener","connectionListeners.filter$argument_0","SocketService#notifyConnectionListeners","connectionListeners.forEach$argument_0"],"mappings":"AAA;ACM;ECO;gCCe;sCCO;SDM;yCEK;SFI;ODC;mCCE;ODI;sCCE;ODI;GDQ;EKE;GLM;EME;GNO;EOE;GPY;EQE;MCM,oFD;MEI,oFF;GRE;EWE;GXE;EYE;MCE,iCD;GZE;EcE;qCCC;KDE;GdC;CDC"},"hasCjsExports":false},"type":"js/module"}]}