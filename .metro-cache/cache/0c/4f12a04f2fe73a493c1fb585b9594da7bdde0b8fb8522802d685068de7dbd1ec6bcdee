{"dependencies":[{"name":"./transports/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":73,"index":73}}],"key":"7CLKJUHLWOUmn3xjjCK2YLx/ESU=","exportNames":["*"],"imports":1}},{"name":"./util.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":74},"end":{"line":2,"column":62,"index":136}}],"key":"+UpHPazG/Yk8JnTjB6d2Eo+vUl4=","exportNames":["*"],"imports":1}},{"name":"./contrib/parseqs.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":137},"end":{"line":3,"column":46,"index":183}}],"key":"BJ+q1MtlpK8TmoXWscM6udPVjkM=","exportNames":["*"],"imports":1}},{"name":"./contrib/parseuri.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":184},"end":{"line":4,"column":46,"index":230}}],"key":"5FHL6vc7rbDf51XGIsZLRdNOJXo=","exportNames":["*"],"imports":1}},{"name":"@socket.io/component-emitter","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":231},"end":{"line":5,"column":55,"index":286}}],"key":"nWmouVdWEVSQD2UwM6teY1JyKBM=","exportNames":["*"],"imports":1}},{"name":"engine.io-parser","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":287},"end":{"line":6,"column":44,"index":331}}],"key":"IB5HY76c7xC+tDEPCV8b/nK76DU=","exportNames":["*"],"imports":1}},{"name":"./globals.node.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":332},"end":{"line":7,"column":82,"index":414}}],"key":"9IvwYHBhshdIr/kWH4ou0H+0FaM=","exportNames":["*"],"imports":1}},{"name":"debug","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":415},"end":{"line":8,"column":32,"index":447}}],"key":"Nx7LMnUOZdRc8E6QIb5nvmtJE+4=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"SocketWithoutUpgrade\", {\n    enumerable: true,\n    get: function () {\n      return SocketWithoutUpgrade;\n    }\n  });\n  Object.defineProperty(exports, \"SocketWithUpgrade\", {\n    enumerable: true,\n    get: function () {\n      return SocketWithUpgrade;\n    }\n  });\n  Object.defineProperty(exports, \"Socket\", {\n    enumerable: true,\n    get: function () {\n      return Socket;\n    }\n  });\n  var _transportsIndexJs = require(_dependencyMap[0], \"./transports/index.js\");\n  var _utilJs = require(_dependencyMap[1], \"./util.js\");\n  var _contribParseqsJs = require(_dependencyMap[2], \"./contrib/parseqs.js\");\n  var _contribParseuriJs = require(_dependencyMap[3], \"./contrib/parseuri.js\");\n  var _socketIoComponentEmitter = require(_dependencyMap[4], \"@socket.io/component-emitter\");\n  var _engineIoParser = require(_dependencyMap[5], \"engine.io-parser\");\n  var _globalsNodeJs = require(_dependencyMap[6], \"./globals.node.js\");\n  var _debug = require(_dependencyMap[7], \"debug\");\n  var debugModule = _interopDefault(_debug);\n  // debug()\n  const debug = (0, debugModule.default)(\"engine.io-client:socket\"); // debug()\n  const withEventListeners = typeof addEventListener === \"function\" && typeof removeEventListener === \"function\";\n  const OFFLINE_EVENT_LISTENERS = [];\n  if (withEventListeners) {\n    // within a ServiceWorker, any event handler for the 'offline' event must be added on the initial evaluation of the\n    // script, so we create one single event listener here which will forward the event to the socket instances\n    addEventListener(\"offline\", () => {\n      debug(\"closing %d connection(s) because the network was lost\", OFFLINE_EVENT_LISTENERS.length);\n      OFFLINE_EVENT_LISTENERS.forEach(listener => listener());\n    }, false);\n  }\n  /**\n   * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n   * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n   *\n   * This class comes without upgrade mechanism, which means that it will keep the first low-level transport that\n   * successfully establishes the connection.\n   *\n   * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n   *\n   * @example\n   * import { SocketWithoutUpgrade, WebSocket } from \"engine.io-client\";\n   *\n   * const socket = new SocketWithoutUpgrade({\n   *   transports: [WebSocket]\n   * });\n   *\n   * socket.on(\"open\", () => {\n   *   socket.send(\"hello\");\n   * });\n   *\n   * @see SocketWithUpgrade\n   * @see Socket\n   */\n  class SocketWithoutUpgrade extends _socketIoComponentEmitter.Emitter {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri - uri or options\n     * @param {Object} opts - options\n     */\n    constructor(uri, opts) {\n      super();\n      this.binaryType = _globalsNodeJs.defaultBinaryType;\n      this.writeBuffer = [];\n      this._prevBufferLen = 0;\n      this._pingInterval = -1;\n      this._pingTimeout = -1;\n      this._maxPayload = -1;\n      /**\n       * The expiration timestamp of the {@link _pingTimeoutTimer} object is tracked, in case the timer is throttled and the\n       * callback is not fired on time. This can happen for example when a laptop is suspended or when a phone is locked.\n       */\n      this._pingTimeoutTime = Infinity;\n      if (uri && \"object\" === typeof uri) {\n        opts = uri;\n        uri = null;\n      }\n      if (uri) {\n        const parsedUri = (0, _contribParseuriJs.parse)(uri);\n        opts.hostname = parsedUri.host;\n        opts.secure = parsedUri.protocol === \"https\" || parsedUri.protocol === \"wss\";\n        opts.port = parsedUri.port;\n        if (parsedUri.query) opts.query = parsedUri.query;\n      } else if (opts.host) {\n        opts.hostname = (0, _contribParseuriJs.parse)(opts.host).host;\n      }\n      (0, _utilJs.installTimerFunctions)(this, opts);\n      this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n      if (opts.hostname && !opts.port) {\n        // if no port is specified manually, use the protocol default\n        opts.port = this.secure ? \"443\" : \"80\";\n      }\n      this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n      this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : this.secure ? \"443\" : \"80\");\n      this.transports = [];\n      this._transportsByName = {};\n      opts.transports.forEach(t => {\n        const transportName = t.prototype.name;\n        this.transports.push(transportName);\n        this._transportsByName[transportName] = t;\n      });\n      this.opts = Object.assign({\n        path: \"/engine.io\",\n        agent: false,\n        withCredentials: false,\n        upgrade: true,\n        timestampParam: \"t\",\n        rememberUpgrade: false,\n        addTrailingSlash: true,\n        rejectUnauthorized: true,\n        perMessageDeflate: {\n          threshold: 1024\n        },\n        transportOptions: {},\n        closeOnBeforeunload: false\n      }, opts);\n      this.opts.path = this.opts.path.replace(/\\/$/, \"\") + (this.opts.addTrailingSlash ? \"/\" : \"\");\n      if (typeof this.opts.query === \"string\") {\n        this.opts.query = (0, _contribParseqsJs.decode)(this.opts.query);\n      }\n      if (withEventListeners) {\n        if (this.opts.closeOnBeforeunload) {\n          // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n          // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n          // closed/reloaded)\n          this._beforeunloadEventListener = () => {\n            if (this.transport) {\n              // silently close the transport\n              this.transport.removeAllListeners();\n              this.transport.close();\n            }\n          };\n          addEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n        }\n        if (this.hostname !== \"localhost\") {\n          debug(\"adding listener for the 'offline' event\");\n          this._offlineEventListener = () => {\n            this._onClose(\"transport close\", {\n              description: \"network connection lost\"\n            });\n          };\n          OFFLINE_EVENT_LISTENERS.push(this._offlineEventListener);\n        }\n      }\n      if (this.opts.withCredentials) {\n        this._cookieJar = (0, _globalsNodeJs.createCookieJar)();\n      }\n      this._open();\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} name - transport name\n     * @return {Transport}\n     * @private\n     */\n    createTransport(name) {\n      debug('creating transport \"%s\"', name);\n      const query = Object.assign({}, this.opts.query);\n      // append engine.io protocol identifier\n      query.EIO = _engineIoParser.protocol;\n      // transport name\n      query.transport = name;\n      // session id if we already have one\n      if (this.id) query.sid = this.id;\n      const opts = Object.assign({}, this.opts, {\n        query,\n        socket: this,\n        hostname: this.hostname,\n        secure: this.secure,\n        port: this.port\n      }, this.opts.transportOptions[name]);\n      debug(\"options: %j\", opts);\n      return new this._transportsByName[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @private\n     */\n    _open() {\n      if (this.transports.length === 0) {\n        // Emit error on next tick so it can be listened to\n        this.setTimeoutFn(() => {\n          this.emitReserved(\"error\", \"No transports available\");\n        }, 0);\n        return;\n      }\n      const transportName = this.opts.rememberUpgrade && SocketWithoutUpgrade.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1 ? \"websocket\" : this.transports[0];\n      this.readyState = \"opening\";\n      const transport = this.createTransport(transportName);\n      transport.open();\n      this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @private\n     */\n    setTransport(transport) {\n      debug(\"setting transport %s\", transport.name);\n      if (this.transport) {\n        debug(\"clearing existing transport %s\", this.transport.name);\n        this.transport.removeAllListeners();\n      }\n      // set up transport\n      this.transport = transport;\n      // set up transport listeners\n      transport.on(\"drain\", this._onDrain.bind(this)).on(\"packet\", this._onPacket.bind(this)).on(\"error\", this._onError.bind(this)).on(\"close\", reason => this._onClose(\"transport close\", reason));\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @private\n     */\n    onOpen() {\n      debug(\"socket open\");\n      this.readyState = \"open\";\n      SocketWithoutUpgrade.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n      this.emitReserved(\"open\");\n      this.flush();\n    }\n    /**\n     * Handles a packet.\n     *\n     * @private\n     */\n    _onPacket(packet) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n        this.emitReserved(\"packet\", packet);\n        // Socket is live - any packet counts\n        this.emitReserved(\"heartbeat\");\n        switch (packet.type) {\n          case \"open\":\n            this.onHandshake(JSON.parse(packet.data));\n            break;\n          case \"ping\":\n            this._sendPacket(\"pong\");\n            this.emitReserved(\"ping\");\n            this.emitReserved(\"pong\");\n            this._resetPingTimeout();\n            break;\n          case \"error\":\n            const err = new Error(\"server error\");\n            // @ts-ignore\n            err.code = packet.data;\n            this._onError(err);\n            break;\n          case \"message\":\n            this.emitReserved(\"data\", packet.data);\n            this.emitReserved(\"message\", packet.data);\n            break;\n        }\n      } else {\n        debug('packet received with socket readyState \"%s\"', this.readyState);\n      }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @private\n     */\n    onHandshake(data) {\n      this.emitReserved(\"handshake\", data);\n      this.id = data.sid;\n      this.transport.query.sid = data.sid;\n      this._pingInterval = data.pingInterval;\n      this._pingTimeout = data.pingTimeout;\n      this._maxPayload = data.maxPayload;\n      this.onOpen();\n      // In case open handler closes socket\n      if (\"closed\" === this.readyState) return;\n      this._resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @private\n     */\n    _resetPingTimeout() {\n      this.clearTimeoutFn(this._pingTimeoutTimer);\n      const delay = this._pingInterval + this._pingTimeout;\n      this._pingTimeoutTime = Date.now() + delay;\n      this._pingTimeoutTimer = this.setTimeoutFn(() => {\n        this._onClose(\"ping timeout\");\n      }, delay);\n      if (this.opts.autoUnref) {\n        this._pingTimeoutTimer.unref();\n      }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @private\n     */\n    _onDrain() {\n      this.writeBuffer.splice(0, this._prevBufferLen);\n      // setting prevBufferLen = 0 is very important\n      // for example, when upgrading, upgrade packet is sent over,\n      // and a nonzero prevBufferLen could cause problems on `drain`\n      this._prevBufferLen = 0;\n      if (0 === this.writeBuffer.length) {\n        this.emitReserved(\"drain\");\n      } else {\n        this.flush();\n      }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @private\n     */\n    flush() {\n      if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n        const packets = this._getWritablePackets();\n        debug(\"flushing %d packets in socket\", packets.length);\n        this.transport.send(packets);\n        // keep track of current length of writeBuffer\n        // splice writeBuffer and callbackBuffer on `drain`\n        this._prevBufferLen = packets.length;\n        this.emitReserved(\"flush\");\n      }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n    _getWritablePackets() {\n      const shouldCheckPayloadSize = this._maxPayload && this.transport.name === \"polling\" && this.writeBuffer.length > 1;\n      if (!shouldCheckPayloadSize) {\n        return this.writeBuffer;\n      }\n      let payloadSize = 1; // first packet type\n      for (let i = 0; i < this.writeBuffer.length; i++) {\n        const data = this.writeBuffer[i].data;\n        if (data) {\n          payloadSize += (0, _utilJs.byteLength)(data);\n        }\n        if (i > 0 && payloadSize > this._maxPayload) {\n          debug(\"only send %d out of %d packets\", i, this.writeBuffer.length);\n          return this.writeBuffer.slice(0, i);\n        }\n        payloadSize += 2; // separator + packet type\n      }\n      debug(\"payload size is %d (max: %d)\", payloadSize, this._maxPayload);\n      return this.writeBuffer;\n    }\n    /**\n     * Checks whether the heartbeat timer has expired but the socket has not yet been notified.\n     *\n     * Note: this method is private for now because it does not really fit the WebSocket API, but if we put it in the\n     * `write()` method then the message would not be buffered by the Socket.IO client.\n     *\n     * @return {boolean}\n     * @private\n     */\n    /* private */\n    _hasPingExpired() {\n      if (!this._pingTimeoutTime) return true;\n      const hasExpired = Date.now() > this._pingTimeoutTime;\n      if (hasExpired) {\n        debug(\"throttled timer detected, scheduling connection close\");\n        this._pingTimeoutTime = 0;\n        (0, _globalsNodeJs.nextTick)(() => {\n          this._onClose(\"ping timeout\");\n        }, this.setTimeoutFn);\n      }\n      return hasExpired;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n    write(msg, options, fn) {\n      this._sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n    /**\n     * Sends a message. Alias of {@link Socket#write}.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n    send(msg, options, fn) {\n      this._sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} type: packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @private\n     */\n    _sendPacket(type, data, options, fn) {\n      if (\"function\" === typeof data) {\n        fn = data;\n        data = undefined;\n      }\n      if (\"function\" === typeof options) {\n        fn = options;\n        options = null;\n      }\n      if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n        return;\n      }\n      options = options || {};\n      options.compress = false !== options.compress;\n      const packet = {\n        type: type,\n        data: data,\n        options: options\n      };\n      this.emitReserved(\"packetCreate\", packet);\n      this.writeBuffer.push(packet);\n      if (fn) this.once(\"flush\", fn);\n      this.flush();\n    }\n    /**\n     * Closes the connection.\n     */\n    close() {\n      const close = () => {\n        this._onClose(\"forced close\");\n        debug(\"socket closing - telling transport to close\");\n        this.transport.close();\n      };\n      const cleanupAndClose = () => {\n        this.off(\"upgrade\", cleanupAndClose);\n        this.off(\"upgradeError\", cleanupAndClose);\n        close();\n      };\n      const waitForUpgrade = () => {\n        // wait for upgrade to finish since we can't send packets while pausing a transport\n        this.once(\"upgrade\", cleanupAndClose);\n        this.once(\"upgradeError\", cleanupAndClose);\n      };\n      if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n        this.readyState = \"closing\";\n        if (this.writeBuffer.length) {\n          this.once(\"drain\", () => {\n            if (this.upgrading) {\n              waitForUpgrade();\n            } else {\n              close();\n            }\n          });\n        } else if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      }\n      return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @private\n     */\n    _onError(err) {\n      debug(\"socket error %j\", err);\n      SocketWithoutUpgrade.priorWebsocketSuccess = false;\n      if (this.opts.tryAllTransports && this.transports.length > 1 && this.readyState === \"opening\") {\n        debug(\"trying next transport\");\n        this.transports.shift();\n        return this._open();\n      }\n      this.emitReserved(\"error\", err);\n      this._onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @private\n     */\n    _onClose(reason, description) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        debug('socket close with reason: \"%s\"', reason);\n        // clear timers\n        this.clearTimeoutFn(this._pingTimeoutTimer);\n        // stop event from firing again for transport\n        this.transport.removeAllListeners(\"close\");\n        // ensure transport won't stay open\n        this.transport.close();\n        // ignore further transport communication\n        this.transport.removeAllListeners();\n        if (withEventListeners) {\n          if (this._beforeunloadEventListener) {\n            removeEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n          }\n          if (this._offlineEventListener) {\n            const i = OFFLINE_EVENT_LISTENERS.indexOf(this._offlineEventListener);\n            if (i !== -1) {\n              debug(\"removing listener for the 'offline' event\");\n              OFFLINE_EVENT_LISTENERS.splice(i, 1);\n            }\n          }\n        }\n        // set ready state\n        this.readyState = \"closed\";\n        // clear session id\n        this.id = null;\n        // emit close event\n        this.emitReserved(\"close\", reason, description);\n        // clean buffers after, so users can still\n        // grab the buffers on `close` event\n        this.writeBuffer = [];\n        this._prevBufferLen = 0;\n      }\n    }\n  }\n  SocketWithoutUpgrade.protocol = _engineIoParser.protocol;\n  /**\n   * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n   * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n   *\n   * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n   * low-level transport, it will try to upgrade to a better transport.\n   *\n   * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n   *\n   * @example\n   * import { SocketWithUpgrade, WebSocket } from \"engine.io-client\";\n   *\n   * const socket = new SocketWithUpgrade({\n   *   transports: [WebSocket]\n   * });\n   *\n   * socket.on(\"open\", () => {\n   *   socket.send(\"hello\");\n   * });\n   *\n   * @see SocketWithoutUpgrade\n   * @see Socket\n   */\n  class SocketWithUpgrade extends SocketWithoutUpgrade {\n    constructor() {\n      super(...arguments);\n      this._upgrades = [];\n    }\n    onOpen() {\n      super.onOpen();\n      if (\"open\" === this.readyState && this.opts.upgrade) {\n        debug(\"starting upgrade probes\");\n        for (let i = 0; i < this._upgrades.length; i++) {\n          this._probe(this._upgrades[i]);\n        }\n      }\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} name - transport name\n     * @private\n     */\n    _probe(name) {\n      debug('probing transport \"%s\"', name);\n      let transport = this.createTransport(name);\n      let failed = false;\n      SocketWithoutUpgrade.priorWebsocketSuccess = false;\n      const onTransportOpen = () => {\n        if (failed) return;\n        debug('probe transport \"%s\" opened', name);\n        transport.send([{\n          type: \"ping\",\n          data: \"probe\"\n        }]);\n        transport.once(\"packet\", msg => {\n          if (failed) return;\n          if (\"pong\" === msg.type && \"probe\" === msg.data) {\n            debug('probe transport \"%s\" pong', name);\n            this.upgrading = true;\n            this.emitReserved(\"upgrading\", transport);\n            if (!transport) return;\n            SocketWithoutUpgrade.priorWebsocketSuccess = \"websocket\" === transport.name;\n            debug('pausing current transport \"%s\"', this.transport.name);\n            this.transport.pause(() => {\n              if (failed) return;\n              if (\"closed\" === this.readyState) return;\n              debug(\"changing transport and sending upgrade packet\");\n              cleanup();\n              this.setTransport(transport);\n              transport.send([{\n                type: \"upgrade\"\n              }]);\n              this.emitReserved(\"upgrade\", transport);\n              transport = null;\n              this.upgrading = false;\n              this.flush();\n            });\n          } else {\n            debug('probe transport \"%s\" failed', name);\n            const err = new Error(\"probe error\");\n            // @ts-ignore\n            err.transport = transport.name;\n            this.emitReserved(\"upgradeError\", err);\n          }\n        });\n      };\n      function freezeTransport() {\n        if (failed) return;\n        // Any callback called by transport should be ignored since now\n        failed = true;\n        cleanup();\n        transport.close();\n        transport = null;\n      }\n      // Handle any error that happens while probing\n      const onerror = err => {\n        const error = new Error(\"probe error: \" + err);\n        // @ts-ignore\n        error.transport = transport.name;\n        freezeTransport();\n        debug('probe transport \"%s\" failed because of error: %s', name, err);\n        this.emitReserved(\"upgradeError\", error);\n      };\n      function onTransportClose() {\n        onerror(\"transport closed\");\n      }\n      // When the socket is closed while we're probing\n      function onclose() {\n        onerror(\"socket closed\");\n      }\n      // When the socket is upgraded while we're probing\n      function onupgrade(to) {\n        if (transport && to.name !== transport.name) {\n          debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n          freezeTransport();\n        }\n      }\n      // Remove all listeners on the transport and on self\n      const cleanup = () => {\n        transport.removeListener(\"open\", onTransportOpen);\n        transport.removeListener(\"error\", onerror);\n        transport.removeListener(\"close\", onTransportClose);\n        this.off(\"close\", onclose);\n        this.off(\"upgrading\", onupgrade);\n      };\n      transport.once(\"open\", onTransportOpen);\n      transport.once(\"error\", onerror);\n      transport.once(\"close\", onTransportClose);\n      this.once(\"close\", onclose);\n      this.once(\"upgrading\", onupgrade);\n      if (this._upgrades.indexOf(\"webtransport\") !== -1 && name !== \"webtransport\") {\n        // favor WebTransport\n        this.setTimeoutFn(() => {\n          if (!failed) {\n            transport.open();\n          }\n        }, 200);\n      } else {\n        transport.open();\n      }\n    }\n    onHandshake(data) {\n      this._upgrades = this._filterUpgrades(data.upgrades);\n      super.onHandshake(data);\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} upgrades - server upgrades\n     * @private\n     */\n    _filterUpgrades(upgrades) {\n      const filteredUpgrades = [];\n      for (let i = 0; i < upgrades.length; i++) {\n        if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n      }\n      return filteredUpgrades;\n    }\n  }\n  /**\n   * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n   * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n   *\n   * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n   * low-level transport, it will try to upgrade to a better transport.\n   *\n   * @example\n   * import { Socket } from \"engine.io-client\";\n   *\n   * const socket = new Socket();\n   *\n   * socket.on(\"open\", () => {\n   *   socket.send(\"hello\");\n   * });\n   *\n   * @see SocketWithoutUpgrade\n   * @see SocketWithUpgrade\n   */\n  class Socket extends SocketWithUpgrade {\n    constructor(uri, opts = {}) {\n      const o = typeof uri === \"object\" ? uri : opts;\n      if (!o.transports || o.transports && typeof o.transports[0] === \"string\") {\n        o.transports = (o.transports || [\"polling\", \"websocket\", \"webtransport\"]).map(transportName => _transportsIndexJs.transports[transportName]).filter(t => !!t);\n      }\n      super(uri, o);\n    }\n  }\n});","lineCount":734,"map":[[12,2,44,0,"Object"],[12,8,44,0],[12,9,44,0,"defineProperty"],[12,23,44,0],[12,24,44,0,"exports"],[12,31,44,0],[13,4,44,0,"enumerable"],[13,14,44,0],[14,4,44,0,"get"],[14,7,44,0],[14,18,44,0,"get"],[14,19,44,0],[15,6,44,0],[15,13,44,0,"SocketWithoutUpgrade"],[15,33,44,0],[16,4,44,0],[17,2,44,0],[18,2,583,0,"Object"],[18,8,583,0],[18,9,583,0,"defineProperty"],[18,23,583,0],[18,24,583,0,"exports"],[18,31,583,0],[19,4,583,0,"enumerable"],[19,14,583,0],[20,4,583,0,"get"],[20,7,583,0],[20,18,583,0,"get"],[20,19,583,0],[21,6,583,0],[21,13,583,0,"SocketWithUpgrade"],[21,30,583,0],[22,4,583,0],[23,2,583,0],[24,2,745,0,"Object"],[24,8,745,0],[24,9,745,0,"defineProperty"],[24,23,745,0],[24,24,745,0,"exports"],[24,31,745,0],[25,4,745,0,"enumerable"],[25,14,745,0],[26,4,745,0,"get"],[26,7,745,0],[26,18,745,0,"get"],[26,19,745,0],[27,6,745,0],[27,13,745,0,"Socket"],[27,19,745,0],[28,4,745,0],[29,2,745,0],[30,2,1,0],[30,6,1,0,"_transportsIndexJs"],[30,24,1,0],[30,27,1,0,"require"],[30,34,1,0],[30,35,1,0,"_dependencyMap"],[30,49,1,0],[31,2,2,0],[31,6,2,0,"_utilJs"],[31,13,2,0],[31,16,2,0,"require"],[31,23,2,0],[31,24,2,0,"_dependencyMap"],[31,38,2,0],[32,2,3,0],[32,6,3,0,"_contribParseqsJs"],[32,23,3,0],[32,26,3,0,"require"],[32,33,3,0],[32,34,3,0,"_dependencyMap"],[32,48,3,0],[33,2,4,0],[33,6,4,0,"_contribParseuriJs"],[33,24,4,0],[33,27,4,0,"require"],[33,34,4,0],[33,35,4,0,"_dependencyMap"],[33,49,4,0],[34,2,5,0],[34,6,5,0,"_socketIoComponentEmitter"],[34,31,5,0],[34,34,5,0,"require"],[34,41,5,0],[34,42,5,0,"_dependencyMap"],[34,56,5,0],[35,2,6,0],[35,6,6,0,"_engineIoParser"],[35,21,6,0],[35,24,6,0,"require"],[35,31,6,0],[35,32,6,0,"_dependencyMap"],[35,46,6,0],[36,2,7,0],[36,6,7,0,"_globalsNodeJs"],[36,20,7,0],[36,23,7,0,"require"],[36,30,7,0],[36,31,7,0,"_dependencyMap"],[36,45,7,0],[37,2,8,0],[37,6,8,0,"_debug"],[37,12,8,0],[37,15,8,0,"require"],[37,22,8,0],[37,23,8,0,"_dependencyMap"],[37,37,8,0],[38,2,8,0],[38,6,8,0,"debugModule"],[38,17,8,0],[38,20,8,0,"_interopDefault"],[38,35,8,0],[38,36,8,0,"_debug"],[38,42,8,0],[39,2,8,33],[40,2,9,0],[40,8,9,6,"debug"],[40,13,9,11],[40,16,9,14],[40,20,9,14,"debugModule"],[40,31,9,25],[40,32,9,25,"default"],[40,39,9,25],[40,41,9,26],[40,66,9,51],[40,67,9,52],[40,68,9,53],[40,69,9,54],[41,2,10,0],[41,8,10,6,"withEventListeners"],[41,26,10,24],[41,29,10,27],[41,36,10,34,"addEventListener"],[41,52,10,50],[41,57,10,55],[41,67,10,65],[41,71,11,4],[41,78,11,11,"removeEventListener"],[41,97,11,30],[41,102,11,35],[41,112,11,45],[42,2,12,0],[42,8,12,6,"OFFLINE_EVENT_LISTENERS"],[42,31,12,29],[42,34,12,32],[42,36,12,34],[43,2,13,0],[43,6,13,4,"withEventListeners"],[43,24,13,22],[43,26,13,24],[44,4,14,4],[45,4,15,4],[46,4,16,4,"addEventListener"],[46,20,16,20],[46,21,16,21],[46,30,16,30],[46,32,16,32],[46,38,16,38],[47,6,17,8,"debug"],[47,11,17,13],[47,12,17,14],[47,67,17,69],[47,69,17,71,"OFFLINE_EVENT_LISTENERS"],[47,92,17,94],[47,93,17,95,"length"],[47,99,17,101],[47,100,17,102],[48,6,18,8,"OFFLINE_EVENT_LISTENERS"],[48,29,18,31],[48,30,18,32,"forEach"],[48,37,18,39],[48,38,18,41,"listener"],[48,46,18,49],[48,50,18,54,"listener"],[48,58,18,62],[48,59,18,63],[48,60,18,64],[48,61,18,65],[49,4,19,4],[49,5,19,5],[49,7,19,7],[49,12,19,12],[49,13,19,13],[50,2,20,0],[51,2,21,0],[52,0,22,0],[53,0,23,0],[54,0,24,0],[55,0,25,0],[56,0,26,0],[57,0,27,0],[58,0,28,0],[59,0,29,0],[60,0,30,0],[61,0,31,0],[62,0,32,0],[63,0,33,0],[64,0,34,0],[65,0,35,0],[66,0,36,0],[67,0,37,0],[68,0,38,0],[69,0,39,0],[70,0,40,0],[71,0,41,0],[72,0,42,0],[73,0,43,0],[74,2,44,7],[74,8,44,13,"SocketWithoutUpgrade"],[74,28,44,33],[74,37,44,42,"Emitter"],[74,62,44,49],[74,63,44,49,"Emitter"],[74,70,44,49],[74,71,44,50],[75,4,45,4],[76,0,46,0],[77,0,47,0],[78,0,48,0],[79,0,49,0],[80,0,50,0],[81,4,51,4,"constructor"],[81,15,51,15,"constructor"],[81,16,51,16,"uri"],[81,19,51,19],[81,21,51,21,"opts"],[81,25,51,25],[81,27,51,27],[82,6,52,8],[82,11,52,13],[82,12,52,14],[82,13,52,15],[83,6,53,8],[83,10,53,12],[83,11,53,13,"binaryType"],[83,21,53,23],[83,24,53,26,"defaultBinaryType"],[83,38,53,43],[83,39,53,43,"defaultBinaryType"],[83,56,53,43],[84,6,54,8],[84,10,54,12],[84,11,54,13,"writeBuffer"],[84,22,54,24],[84,25,54,27],[84,27,54,29],[85,6,55,8],[85,10,55,12],[85,11,55,13,"_prevBufferLen"],[85,25,55,27],[85,28,55,30],[85,29,55,31],[86,6,56,8],[86,10,56,12],[86,11,56,13,"_pingInterval"],[86,24,56,26],[86,27,56,29],[86,28,56,30],[86,29,56,31],[87,6,57,8],[87,10,57,12],[87,11,57,13,"_pingTimeout"],[87,23,57,25],[87,26,57,28],[87,27,57,29],[87,28,57,30],[88,6,58,8],[88,10,58,12],[88,11,58,13,"_maxPayload"],[88,22,58,24],[88,25,58,27],[88,26,58,28],[88,27,58,29],[89,6,59,8],[90,0,60,0],[91,0,61,0],[92,0,62,0],[93,6,63,8],[93,10,63,12],[93,11,63,13,"_pingTimeoutTime"],[93,27,63,29],[93,30,63,32,"Infinity"],[93,38,63,40],[94,6,64,8],[94,10,64,12,"uri"],[94,13,64,15],[94,17,64,19],[94,25,64,27],[94,30,64,32],[94,37,64,39,"uri"],[94,40,64,42],[94,42,64,44],[95,8,65,12,"opts"],[95,12,65,16],[95,15,65,19,"uri"],[95,18,65,22],[96,8,66,12,"uri"],[96,11,66,15],[96,14,66,18],[96,18,66,22],[97,6,67,8],[98,6,68,8],[98,10,68,12,"uri"],[98,13,68,15],[98,15,68,17],[99,8,69,12],[99,14,69,18,"parsedUri"],[99,23,69,27],[99,26,69,30],[99,30,69,30,"parse"],[99,48,69,35],[99,49,69,35,"parse"],[99,54,69,35],[99,56,69,36,"uri"],[99,59,69,39],[99,60,69,40],[100,8,70,12,"opts"],[100,12,70,16],[100,13,70,17,"hostname"],[100,21,70,25],[100,24,70,28,"parsedUri"],[100,33,70,37],[100,34,70,38,"host"],[100,38,70,42],[101,8,71,12,"opts"],[101,12,71,16],[101,13,71,17,"secure"],[101,19,71,23],[101,22,72,16,"parsedUri"],[101,31,72,25],[101,32,72,26,"protocol"],[101,40,72,34],[101,45,72,39],[101,52,72,46],[101,56,72,50,"parsedUri"],[101,65,72,59],[101,66,72,60,"protocol"],[101,74,72,68],[101,79,72,73],[101,84,72,78],[102,8,73,12,"opts"],[102,12,73,16],[102,13,73,17,"port"],[102,17,73,21],[102,20,73,24,"parsedUri"],[102,29,73,33],[102,30,73,34,"port"],[102,34,73,38],[103,8,74,12],[103,12,74,16,"parsedUri"],[103,21,74,25],[103,22,74,26,"query"],[103,27,74,31],[103,29,75,16,"opts"],[103,33,75,20],[103,34,75,21,"query"],[103,39,75,26],[103,42,75,29,"parsedUri"],[103,51,75,38],[103,52,75,39,"query"],[103,57,75,44],[104,6,76,8],[104,7,76,9],[104,13,77,13],[104,17,77,17,"opts"],[104,21,77,21],[104,22,77,22,"host"],[104,26,77,26],[104,28,77,28],[105,8,78,12,"opts"],[105,12,78,16],[105,13,78,17,"hostname"],[105,21,78,25],[105,24,78,28],[105,28,78,28,"parse"],[105,46,78,33],[105,47,78,33,"parse"],[105,52,78,33],[105,54,78,34,"opts"],[105,58,78,38],[105,59,78,39,"host"],[105,63,78,43],[105,64,78,44],[105,65,78,45,"host"],[105,69,78,49],[106,6,79,8],[107,6,80,8],[107,10,80,8,"installTimerFunctions"],[107,17,80,29],[107,18,80,29,"installTimerFunctions"],[107,39,80,29],[107,41,80,30],[107,45,80,34],[107,47,80,36,"opts"],[107,51,80,40],[107,52,80,41],[108,6,81,8],[108,10,81,12],[108,11,81,13,"secure"],[108,17,81,19],[108,20,82,12],[108,24,82,16],[108,28,82,20,"opts"],[108,32,82,24],[108,33,82,25,"secure"],[108,39,82,31],[108,42,83,18,"opts"],[108,46,83,22],[108,47,83,23,"secure"],[108,53,83,29],[108,56,84,18],[108,63,84,25,"location"],[108,71,84,33],[108,76,84,38],[108,87,84,49],[108,91,84,53],[108,99,84,61],[108,104,84,66,"location"],[108,112,84,74],[108,113,84,75,"protocol"],[108,121,84,83],[109,6,85,8],[109,10,85,12,"opts"],[109,14,85,16],[109,15,85,17,"hostname"],[109,23,85,25],[109,27,85,29],[109,28,85,30,"opts"],[109,32,85,34],[109,33,85,35,"port"],[109,37,85,39],[109,39,85,41],[110,8,86,12],[111,8,87,12,"opts"],[111,12,87,16],[111,13,87,17,"port"],[111,17,87,21],[111,20,87,24],[111,24,87,28],[111,25,87,29,"secure"],[111,31,87,35],[111,34,87,38],[111,39,87,43],[111,42,87,46],[111,46,87,50],[112,6,88,8],[113,6,89,8],[113,10,89,12],[113,11,89,13,"hostname"],[113,19,89,21],[113,22,90,12,"opts"],[113,26,90,16],[113,27,90,17,"hostname"],[113,35,90,25],[113,40,91,17],[113,47,91,24,"location"],[113,55,91,32],[113,60,91,37],[113,71,91,48],[113,74,91,51,"location"],[113,82,91,59],[113,83,91,60,"hostname"],[113,91,91,68],[113,94,91,71],[113,105,91,82],[113,106,91,83],[114,6,92,8],[114,10,92,12],[114,11,92,13,"port"],[114,15,92,17],[114,18,93,12,"opts"],[114,22,93,16],[114,23,93,17,"port"],[114,27,93,21],[114,32,94,17],[114,39,94,24,"location"],[114,47,94,32],[114,52,94,37],[114,63,94,48],[114,67,94,52,"location"],[114,75,94,60],[114,76,94,61,"port"],[114,80,94,65],[114,83,95,22,"location"],[114,91,95,30],[114,92,95,31,"port"],[114,96,95,35],[114,99,96,22],[114,103,96,26],[114,104,96,27,"secure"],[114,110,96,33],[114,113,97,26],[114,118,97,31],[114,121,98,26],[114,125,98,30],[114,126,98,31],[115,6,99,8],[115,10,99,12],[115,11,99,13,"transports"],[115,21,99,23],[115,24,99,26],[115,26,99,28],[116,6,100,8],[116,10,100,12],[116,11,100,13,"_transportsByName"],[116,28,100,30],[116,31,100,33],[116,32,100,34],[116,33,100,35],[117,6,101,8,"opts"],[117,10,101,12],[117,11,101,13,"transports"],[117,21,101,23],[117,22,101,24,"forEach"],[117,29,101,31],[117,30,101,33,"t"],[117,31,101,34],[117,35,101,39],[118,8,102,12],[118,14,102,18,"transportName"],[118,27,102,31],[118,30,102,34,"t"],[118,31,102,35],[118,32,102,36,"prototype"],[118,41,102,45],[118,42,102,46,"name"],[118,46,102,50],[119,8,103,12],[119,12,103,16],[119,13,103,17,"transports"],[119,23,103,27],[119,24,103,28,"push"],[119,28,103,32],[119,29,103,33,"transportName"],[119,42,103,46],[119,43,103,47],[120,8,104,12],[120,12,104,16],[120,13,104,17,"_transportsByName"],[120,30,104,34],[120,31,104,35,"transportName"],[120,44,104,48],[120,45,104,49],[120,48,104,52,"t"],[120,49,104,53],[121,6,105,8],[121,7,105,9],[121,8,105,10],[122,6,106,8],[122,10,106,12],[122,11,106,13,"opts"],[122,15,106,17],[122,18,106,20,"Object"],[122,24,106,26],[122,25,106,27,"assign"],[122,31,106,33],[122,32,106,34],[123,8,107,12,"path"],[123,12,107,16],[123,14,107,18],[123,26,107,30],[124,8,108,12,"agent"],[124,13,108,17],[124,15,108,19],[124,20,108,24],[125,8,109,12,"withCredentials"],[125,23,109,27],[125,25,109,29],[125,30,109,34],[126,8,110,12,"upgrade"],[126,15,110,19],[126,17,110,21],[126,21,110,25],[127,8,111,12,"timestampParam"],[127,22,111,26],[127,24,111,28],[127,27,111,31],[128,8,112,12,"rememberUpgrade"],[128,23,112,27],[128,25,112,29],[128,30,112,34],[129,8,113,12,"addTrailingSlash"],[129,24,113,28],[129,26,113,30],[129,30,113,34],[130,8,114,12,"rejectUnauthorized"],[130,26,114,30],[130,28,114,32],[130,32,114,36],[131,8,115,12,"perMessageDeflate"],[131,25,115,29],[131,27,115,31],[132,10,116,16,"threshold"],[132,19,116,25],[132,21,116,27],[133,8,117,12],[133,9,117,13],[134,8,118,12,"transportOptions"],[134,24,118,28],[134,26,118,30],[134,27,118,31],[134,28,118,32],[135,8,119,12,"closeOnBeforeunload"],[135,27,119,31],[135,29,119,33],[136,6,120,8],[136,7,120,9],[136,9,120,11,"opts"],[136,13,120,15],[136,14,120,16],[137,6,121,8],[137,10,121,12],[137,11,121,13,"opts"],[137,15,121,17],[137,16,121,18,"path"],[137,20,121,22],[137,23,122,12],[137,27,122,16],[137,28,122,17,"opts"],[137,32,122,21],[137,33,122,22,"path"],[137,37,122,26],[137,38,122,27,"replace"],[137,45,122,34],[137,46,122,35],[137,51,122,40],[137,53,122,42],[137,55,122,44],[137,56,122,45],[137,60,123,17],[137,64,123,21],[137,65,123,22,"opts"],[137,69,123,26],[137,70,123,27,"addTrailingSlash"],[137,86,123,43],[137,89,123,46],[137,92,123,49],[137,95,123,52],[137,97,123,54],[137,98,123,55],[138,6,124,8],[138,10,124,12],[138,17,124,19],[138,21,124,23],[138,22,124,24,"opts"],[138,26,124,28],[138,27,124,29,"query"],[138,32,124,34],[138,37,124,39],[138,45,124,47],[138,47,124,49],[139,8,125,12],[139,12,125,16],[139,13,125,17,"opts"],[139,17,125,21],[139,18,125,22,"query"],[139,23,125,27],[139,26,125,30],[139,30,125,30,"decode"],[139,47,125,36],[139,48,125,36,"decode"],[139,54,125,36],[139,56,125,37],[139,60,125,41],[139,61,125,42,"opts"],[139,65,125,46],[139,66,125,47,"query"],[139,71,125,52],[139,72,125,53],[140,6,126,8],[141,6,127,8],[141,10,127,12,"withEventListeners"],[141,28,127,30],[141,30,127,32],[142,8,128,12],[142,12,128,16],[142,16,128,20],[142,17,128,21,"opts"],[142,21,128,25],[142,22,128,26,"closeOnBeforeunload"],[142,41,128,45],[142,43,128,47],[143,10,129,16],[144,10,130,16],[145,10,131,16],[146,10,132,16],[146,14,132,20],[146,15,132,21,"_beforeunloadEventListener"],[146,41,132,47],[146,44,132,50],[146,50,132,56],[147,12,133,20],[147,16,133,24],[147,20,133,28],[147,21,133,29,"transport"],[147,30,133,38],[147,32,133,40],[148,14,134,24],[149,14,135,24],[149,18,135,28],[149,19,135,29,"transport"],[149,28,135,38],[149,29,135,39,"removeAllListeners"],[149,47,135,57],[149,48,135,58],[149,49,135,59],[150,14,136,24],[150,18,136,28],[150,19,136,29,"transport"],[150,28,136,38],[150,29,136,39,"close"],[150,34,136,44],[150,35,136,45],[150,36,136,46],[151,12,137,20],[152,10,138,16],[152,11,138,17],[153,10,139,16,"addEventListener"],[153,26,139,32],[153,27,139,33],[153,41,139,47],[153,43,139,49],[153,47,139,53],[153,48,139,54,"_beforeunloadEventListener"],[153,74,139,80],[153,76,139,82],[153,81,139,87],[153,82,139,88],[154,8,140,12],[155,8,141,12],[155,12,141,16],[155,16,141,20],[155,17,141,21,"hostname"],[155,25,141,29],[155,30,141,34],[155,41,141,45],[155,43,141,47],[156,10,142,16,"debug"],[156,15,142,21],[156,16,142,22],[156,57,142,63],[156,58,142,64],[157,10,143,16],[157,14,143,20],[157,15,143,21,"_offlineEventListener"],[157,36,143,42],[157,39,143,45],[157,45,143,51],[158,12,144,20],[158,16,144,24],[158,17,144,25,"_onClose"],[158,25,144,33],[158,26,144,34],[158,43,144,51],[158,45,144,53],[159,14,145,24,"description"],[159,25,145,35],[159,27,145,37],[160,12,146,20],[160,13,146,21],[160,14,146,22],[161,10,147,16],[161,11,147,17],[162,10,148,16,"OFFLINE_EVENT_LISTENERS"],[162,33,148,39],[162,34,148,40,"push"],[162,38,148,44],[162,39,148,45],[162,43,148,49],[162,44,148,50,"_offlineEventListener"],[162,65,148,71],[162,66,148,72],[163,8,149,12],[164,6,150,8],[165,6,151,8],[165,10,151,12],[165,14,151,16],[165,15,151,17,"opts"],[165,19,151,21],[165,20,151,22,"withCredentials"],[165,35,151,37],[165,37,151,39],[166,8,152,12],[166,12,152,16],[166,13,152,17,"_cookieJar"],[166,23,152,27],[166,26,152,30],[166,30,152,30,"createCookieJar"],[166,44,152,45],[166,45,152,45,"createCookieJar"],[166,60,152,45],[166,62,152,46],[166,63,152,47],[167,6,153,8],[168,6,154,8],[168,10,154,12],[168,11,154,13,"_open"],[168,16,154,18],[168,17,154,19],[168,18,154,20],[169,4,155,4],[170,4,156,4],[171,0,157,0],[172,0,158,0],[173,0,159,0],[174,0,160,0],[175,0,161,0],[176,0,162,0],[177,4,163,4,"createTransport"],[177,19,163,19,"createTransport"],[177,20,163,20,"name"],[177,24,163,24],[177,26,163,26],[178,6,164,8,"debug"],[178,11,164,13],[178,12,164,14],[178,37,164,39],[178,39,164,41,"name"],[178,43,164,45],[178,44,164,46],[179,6,165,8],[179,12,165,14,"query"],[179,17,165,19],[179,20,165,22,"Object"],[179,26,165,28],[179,27,165,29,"assign"],[179,33,165,35],[179,34,165,36],[179,35,165,37],[179,36,165,38],[179,38,165,40],[179,42,165,44],[179,43,165,45,"opts"],[179,47,165,49],[179,48,165,50,"query"],[179,53,165,55],[179,54,165,56],[180,6,166,8],[181,6,167,8,"query"],[181,11,167,13],[181,12,167,14,"EIO"],[181,15,167,17],[181,18,167,20,"protocol"],[181,33,167,28],[181,34,167,28,"protocol"],[181,42,167,28],[182,6,168,8],[183,6,169,8,"query"],[183,11,169,13],[183,12,169,14,"transport"],[183,21,169,23],[183,24,169,26,"name"],[183,28,169,30],[184,6,170,8],[185,6,171,8],[185,10,171,12],[185,14,171,16],[185,15,171,17,"id"],[185,17,171,19],[185,19,172,12,"query"],[185,24,172,17],[185,25,172,18,"sid"],[185,28,172,21],[185,31,172,24],[185,35,172,28],[185,36,172,29,"id"],[185,38,172,31],[186,6,173,8],[186,12,173,14,"opts"],[186,16,173,18],[186,19,173,21,"Object"],[186,25,173,27],[186,26,173,28,"assign"],[186,32,173,34],[186,33,173,35],[186,34,173,36],[186,35,173,37],[186,37,173,39],[186,41,173,43],[186,42,173,44,"opts"],[186,46,173,48],[186,48,173,50],[187,8,174,12,"query"],[187,13,174,17],[188,8,175,12,"socket"],[188,14,175,18],[188,16,175,20],[188,20,175,24],[189,8,176,12,"hostname"],[189,16,176,20],[189,18,176,22],[189,22,176,26],[189,23,176,27,"hostname"],[189,31,176,35],[190,8,177,12,"secure"],[190,14,177,18],[190,16,177,20],[190,20,177,24],[190,21,177,25,"secure"],[190,27,177,31],[191,8,178,12,"port"],[191,12,178,16],[191,14,178,18],[191,18,178,22],[191,19,178,23,"port"],[192,6,179,8],[192,7,179,9],[192,9,179,11],[192,13,179,15],[192,14,179,16,"opts"],[192,18,179,20],[192,19,179,21,"transportOptions"],[192,35,179,37],[192,36,179,38,"name"],[192,40,179,42],[192,41,179,43],[192,42,179,44],[193,6,180,8,"debug"],[193,11,180,13],[193,12,180,14],[193,25,180,27],[193,27,180,29,"opts"],[193,31,180,33],[193,32,180,34],[194,6,181,8],[194,13,181,15],[194,17,181,19],[194,21,181,23],[194,22,181,24,"_transportsByName"],[194,39,181,41],[194,40,181,42,"name"],[194,44,181,46],[194,45,181,47],[194,46,181,48,"opts"],[194,50,181,52],[194,51,181,53],[195,4,182,4],[196,4,183,4],[197,0,184,0],[198,0,185,0],[199,0,186,0],[200,0,187,0],[201,4,188,4,"_open"],[201,9,188,9,"_open"],[201,10,188,9],[201,12,188,12],[202,6,189,8],[202,10,189,12],[202,14,189,16],[202,15,189,17,"transports"],[202,25,189,27],[202,26,189,28,"length"],[202,32,189,34],[202,37,189,39],[202,38,189,40],[202,40,189,42],[203,8,190,12],[204,8,191,12],[204,12,191,16],[204,13,191,17,"setTimeoutFn"],[204,25,191,29],[204,26,191,30],[204,32,191,36],[205,10,192,16],[205,14,192,20],[205,15,192,21,"emitReserved"],[205,27,192,33],[205,28,192,34],[205,35,192,41],[205,37,192,43],[205,62,192,68],[205,63,192,69],[206,8,193,12],[206,9,193,13],[206,11,193,15],[206,12,193,16],[206,13,193,17],[207,8,194,12],[208,6,195,8],[209,6,196,8],[209,12,196,14,"transportName"],[209,25,196,27],[209,28,196,30],[209,32,196,34],[209,33,196,35,"opts"],[209,37,196,39],[209,38,196,40,"rememberUpgrade"],[209,53,196,55],[209,57,197,12,"SocketWithoutUpgrade"],[209,77,197,32],[209,78,197,33,"priorWebsocketSuccess"],[209,99,197,54],[209,103,198,12],[209,107,198,16],[209,108,198,17,"transports"],[209,118,198,27],[209,119,198,28,"indexOf"],[209,126,198,35],[209,127,198,36],[209,138,198,47],[209,139,198,48],[209,144,198,53],[209,145,198,54],[209,146,198,55],[209,149,199,14],[209,160,199,25],[209,163,200,14],[209,167,200,18],[209,168,200,19,"transports"],[209,178,200,29],[209,179,200,30],[209,180,200,31],[209,181,200,32],[210,6,201,8],[210,10,201,12],[210,11,201,13,"readyState"],[210,21,201,23],[210,24,201,26],[210,33,201,35],[211,6,202,8],[211,12,202,14,"transport"],[211,21,202,23],[211,24,202,26],[211,28,202,30],[211,29,202,31,"createTransport"],[211,44,202,46],[211,45,202,47,"transportName"],[211,58,202,60],[211,59,202,61],[212,6,203,8,"transport"],[212,15,203,17],[212,16,203,18,"open"],[212,20,203,22],[212,21,203,23],[212,22,203,24],[213,6,204,8],[213,10,204,12],[213,11,204,13,"setTransport"],[213,23,204,25],[213,24,204,26,"transport"],[213,33,204,35],[213,34,204,36],[214,4,205,4],[215,4,206,4],[216,0,207,0],[217,0,208,0],[218,0,209,0],[219,0,210,0],[220,4,211,4,"setTransport"],[220,16,211,16,"setTransport"],[220,17,211,17,"transport"],[220,26,211,26],[220,28,211,28],[221,6,212,8,"debug"],[221,11,212,13],[221,12,212,14],[221,34,212,36],[221,36,212,38,"transport"],[221,45,212,47],[221,46,212,48,"name"],[221,50,212,52],[221,51,212,53],[222,6,213,8],[222,10,213,12],[222,14,213,16],[222,15,213,17,"transport"],[222,24,213,26],[222,26,213,28],[223,8,214,12,"debug"],[223,13,214,17],[223,14,214,18],[223,46,214,50],[223,48,214,52],[223,52,214,56],[223,53,214,57,"transport"],[223,62,214,66],[223,63,214,67,"name"],[223,67,214,71],[223,68,214,72],[224,8,215,12],[224,12,215,16],[224,13,215,17,"transport"],[224,22,215,26],[224,23,215,27,"removeAllListeners"],[224,41,215,45],[224,42,215,46],[224,43,215,47],[225,6,216,8],[226,6,217,8],[227,6,218,8],[227,10,218,12],[227,11,218,13,"transport"],[227,20,218,22],[227,23,218,25,"transport"],[227,32,218,34],[228,6,219,8],[229,6,220,8,"transport"],[229,15,220,17],[229,16,221,13,"on"],[229,18,221,15],[229,19,221,16],[229,26,221,23],[229,28,221,25],[229,32,221,29],[229,33,221,30,"_onDrain"],[229,41,221,38],[229,42,221,39,"bind"],[229,46,221,43],[229,47,221,44],[229,51,221,48],[229,52,221,49],[229,53,221,50],[229,54,222,13,"on"],[229,56,222,15],[229,57,222,16],[229,65,222,24],[229,67,222,26],[229,71,222,30],[229,72,222,31,"_onPacket"],[229,81,222,40],[229,82,222,41,"bind"],[229,86,222,45],[229,87,222,46],[229,91,222,50],[229,92,222,51],[229,93,222,52],[229,94,223,13,"on"],[229,96,223,15],[229,97,223,16],[229,104,223,23],[229,106,223,25],[229,110,223,29],[229,111,223,30,"_onError"],[229,119,223,38],[229,120,223,39,"bind"],[229,124,223,43],[229,125,223,44],[229,129,223,48],[229,130,223,49],[229,131,223,50],[229,132,224,13,"on"],[229,134,224,15],[229,135,224,16],[229,142,224,23],[229,144,224,26,"reason"],[229,150,224,32],[229,154,224,37],[229,158,224,41],[229,159,224,42,"_onClose"],[229,167,224,50],[229,168,224,51],[229,185,224,68],[229,187,224,70,"reason"],[229,193,224,76],[229,194,224,77],[229,195,224,78],[230,4,225,4],[231,4,226,4],[232,0,227,0],[233,0,228,0],[234,0,229,0],[235,0,230,0],[236,4,231,4,"onOpen"],[236,10,231,10,"onOpen"],[236,11,231,10],[236,13,231,13],[237,6,232,8,"debug"],[237,11,232,13],[237,12,232,14],[237,25,232,27],[237,26,232,28],[238,6,233,8],[238,10,233,12],[238,11,233,13,"readyState"],[238,21,233,23],[238,24,233,26],[238,30,233,32],[239,6,234,8,"SocketWithoutUpgrade"],[239,26,234,28],[239,27,234,29,"priorWebsocketSuccess"],[239,48,234,50],[239,51,235,12],[239,62,235,23],[239,67,235,28],[239,71,235,32],[239,72,235,33,"transport"],[239,81,235,42],[239,82,235,43,"name"],[239,86,235,47],[240,6,236,8],[240,10,236,12],[240,11,236,13,"emitReserved"],[240,23,236,25],[240,24,236,26],[240,30,236,32],[240,31,236,33],[241,6,237,8],[241,10,237,12],[241,11,237,13,"flush"],[241,16,237,18],[241,17,237,19],[241,18,237,20],[242,4,238,4],[243,4,239,4],[244,0,240,0],[245,0,241,0],[246,0,242,0],[247,0,243,0],[248,4,244,4,"_onPacket"],[248,13,244,13,"_onPacket"],[248,14,244,14,"packet"],[248,20,244,20],[248,22,244,22],[249,6,245,8],[249,10,245,12],[249,19,245,21],[249,24,245,26],[249,28,245,30],[249,29,245,31,"readyState"],[249,39,245,41],[249,43,246,12],[249,49,246,18],[249,54,246,23],[249,58,246,27],[249,59,246,28,"readyState"],[249,69,246,38],[249,73,247,12],[249,82,247,21],[249,87,247,26],[249,91,247,30],[249,92,247,31,"readyState"],[249,102,247,41],[249,104,247,43],[250,8,248,12,"debug"],[250,13,248,17],[250,14,248,18],[250,52,248,56],[250,54,248,58,"packet"],[250,60,248,64],[250,61,248,65,"type"],[250,65,248,69],[250,67,248,71,"packet"],[250,73,248,77],[250,74,248,78,"data"],[250,78,248,82],[250,79,248,83],[251,8,249,12],[251,12,249,16],[251,13,249,17,"emitReserved"],[251,25,249,29],[251,26,249,30],[251,34,249,38],[251,36,249,40,"packet"],[251,42,249,46],[251,43,249,47],[252,8,250,12],[253,8,251,12],[253,12,251,16],[253,13,251,17,"emitReserved"],[253,25,251,29],[253,26,251,30],[253,37,251,41],[253,38,251,42],[254,8,252,12],[254,16,252,20,"packet"],[254,22,252,26],[254,23,252,27,"type"],[254,27,252,31],[255,10,253,16],[255,15,253,21],[255,21,253,27],[256,12,254,20],[256,16,254,24],[256,17,254,25,"onHandshake"],[256,28,254,36],[256,29,254,37,"JSON"],[256,33,254,41],[256,34,254,42,"parse"],[256,39,254,47],[256,40,254,48,"packet"],[256,46,254,54],[256,47,254,55,"data"],[256,51,254,59],[256,52,254,60],[256,53,254,61],[257,12,255,20],[258,10,256,16],[258,15,256,21],[258,21,256,27],[259,12,257,20],[259,16,257,24],[259,17,257,25,"_sendPacket"],[259,28,257,36],[259,29,257,37],[259,35,257,43],[259,36,257,44],[260,12,258,20],[260,16,258,24],[260,17,258,25,"emitReserved"],[260,29,258,37],[260,30,258,38],[260,36,258,44],[260,37,258,45],[261,12,259,20],[261,16,259,24],[261,17,259,25,"emitReserved"],[261,29,259,37],[261,30,259,38],[261,36,259,44],[261,37,259,45],[262,12,260,20],[262,16,260,24],[262,17,260,25,"_resetPingTimeout"],[262,34,260,42],[262,35,260,43],[262,36,260,44],[263,12,261,20],[264,10,262,16],[264,15,262,21],[264,22,262,28],[265,12,263,20],[265,18,263,26,"err"],[265,21,263,29],[265,24,263,32],[265,28,263,36,"Error"],[265,33,263,41],[265,34,263,42],[265,48,263,56],[265,49,263,57],[266,12,264,20],[267,12,265,20,"err"],[267,15,265,23],[267,16,265,24,"code"],[267,20,265,28],[267,23,265,31,"packet"],[267,29,265,37],[267,30,265,38,"data"],[267,34,265,42],[268,12,266,20],[268,16,266,24],[268,17,266,25,"_onError"],[268,25,266,33],[268,26,266,34,"err"],[268,29,266,37],[268,30,266,38],[269,12,267,20],[270,10,268,16],[270,15,268,21],[270,24,268,30],[271,12,269,20],[271,16,269,24],[271,17,269,25,"emitReserved"],[271,29,269,37],[271,30,269,38],[271,36,269,44],[271,38,269,46,"packet"],[271,44,269,52],[271,45,269,53,"data"],[271,49,269,57],[271,50,269,58],[272,12,270,20],[272,16,270,24],[272,17,270,25,"emitReserved"],[272,29,270,37],[272,30,270,38],[272,39,270,47],[272,41,270,49,"packet"],[272,47,270,55],[272,48,270,56,"data"],[272,52,270,60],[272,53,270,61],[273,12,271,20],[274,8,272,12],[275,6,273,8],[275,7,273,9],[275,13,274,13],[276,8,275,12,"debug"],[276,13,275,17],[276,14,275,18],[276,59,275,63],[276,61,275,65],[276,65,275,69],[276,66,275,70,"readyState"],[276,76,275,80],[276,77,275,81],[277,6,276,8],[278,4,277,4],[279,4,278,4],[280,0,279,0],[281,0,280,0],[282,0,281,0],[283,0,282,0],[284,0,283,0],[285,4,284,4,"onHandshake"],[285,15,284,15,"onHandshake"],[285,16,284,16,"data"],[285,20,284,20],[285,22,284,22],[286,6,285,8],[286,10,285,12],[286,11,285,13,"emitReserved"],[286,23,285,25],[286,24,285,26],[286,35,285,37],[286,37,285,39,"data"],[286,41,285,43],[286,42,285,44],[287,6,286,8],[287,10,286,12],[287,11,286,13,"id"],[287,13,286,15],[287,16,286,18,"data"],[287,20,286,22],[287,21,286,23,"sid"],[287,24,286,26],[288,6,287,8],[288,10,287,12],[288,11,287,13,"transport"],[288,20,287,22],[288,21,287,23,"query"],[288,26,287,28],[288,27,287,29,"sid"],[288,30,287,32],[288,33,287,35,"data"],[288,37,287,39],[288,38,287,40,"sid"],[288,41,287,43],[289,6,288,8],[289,10,288,12],[289,11,288,13,"_pingInterval"],[289,24,288,26],[289,27,288,29,"data"],[289,31,288,33],[289,32,288,34,"pingInterval"],[289,44,288,46],[290,6,289,8],[290,10,289,12],[290,11,289,13,"_pingTimeout"],[290,23,289,25],[290,26,289,28,"data"],[290,30,289,32],[290,31,289,33,"pingTimeout"],[290,42,289,44],[291,6,290,8],[291,10,290,12],[291,11,290,13,"_maxPayload"],[291,22,290,24],[291,25,290,27,"data"],[291,29,290,31],[291,30,290,32,"maxPayload"],[291,40,290,42],[292,6,291,8],[292,10,291,12],[292,11,291,13,"onOpen"],[292,17,291,19],[292,18,291,20],[292,19,291,21],[293,6,292,8],[294,6,293,8],[294,10,293,12],[294,18,293,20],[294,23,293,25],[294,27,293,29],[294,28,293,30,"readyState"],[294,38,293,40],[294,40,294,12],[295,6,295,8],[295,10,295,12],[295,11,295,13,"_resetPingTimeout"],[295,28,295,30],[295,29,295,31],[295,30,295,32],[296,4,296,4],[297,4,297,4],[298,0,298,0],[299,0,299,0],[300,0,300,0],[301,0,301,0],[302,4,302,4,"_resetPingTimeout"],[302,21,302,21,"_resetPingTimeout"],[302,22,302,21],[302,24,302,24],[303,6,303,8],[303,10,303,12],[303,11,303,13,"clearTimeoutFn"],[303,25,303,27],[303,26,303,28],[303,30,303,32],[303,31,303,33,"_pingTimeoutTimer"],[303,48,303,50],[303,49,303,51],[304,6,304,8],[304,12,304,14,"delay"],[304,17,304,19],[304,20,304,22],[304,24,304,26],[304,25,304,27,"_pingInterval"],[304,38,304,40],[304,41,304,43],[304,45,304,47],[304,46,304,48,"_pingTimeout"],[304,58,304,60],[305,6,305,8],[305,10,305,12],[305,11,305,13,"_pingTimeoutTime"],[305,27,305,29],[305,30,305,32,"Date"],[305,34,305,36],[305,35,305,37,"now"],[305,38,305,40],[305,39,305,41],[305,40,305,42],[305,43,305,45,"delay"],[305,48,305,50],[306,6,306,8],[306,10,306,12],[306,11,306,13,"_pingTimeoutTimer"],[306,28,306,30],[306,31,306,33],[306,35,306,37],[306,36,306,38,"setTimeoutFn"],[306,48,306,50],[306,49,306,51],[306,55,306,57],[307,8,307,12],[307,12,307,16],[307,13,307,17,"_onClose"],[307,21,307,25],[307,22,307,26],[307,36,307,40],[307,37,307,41],[308,6,308,8],[308,7,308,9],[308,9,308,11,"delay"],[308,14,308,16],[308,15,308,17],[309,6,309,8],[309,10,309,12],[309,14,309,16],[309,15,309,17,"opts"],[309,19,309,21],[309,20,309,22,"autoUnref"],[309,29,309,31],[309,31,309,33],[310,8,310,12],[310,12,310,16],[310,13,310,17,"_pingTimeoutTimer"],[310,30,310,34],[310,31,310,35,"unref"],[310,36,310,40],[310,37,310,41],[310,38,310,42],[311,6,311,8],[312,4,312,4],[313,4,313,4],[314,0,314,0],[315,0,315,0],[316,0,316,0],[317,0,317,0],[318,4,318,4,"_onDrain"],[318,12,318,12,"_onDrain"],[318,13,318,12],[318,15,318,15],[319,6,319,8],[319,10,319,12],[319,11,319,13,"writeBuffer"],[319,22,319,24],[319,23,319,25,"splice"],[319,29,319,31],[319,30,319,32],[319,31,319,33],[319,33,319,35],[319,37,319,39],[319,38,319,40,"_prevBufferLen"],[319,52,319,54],[319,53,319,55],[320,6,320,8],[321,6,321,8],[322,6,322,8],[323,6,323,8],[323,10,323,12],[323,11,323,13,"_prevBufferLen"],[323,25,323,27],[323,28,323,30],[323,29,323,31],[324,6,324,8],[324,10,324,12],[324,11,324,13],[324,16,324,18],[324,20,324,22],[324,21,324,23,"writeBuffer"],[324,32,324,34],[324,33,324,35,"length"],[324,39,324,41],[324,41,324,43],[325,8,325,12],[325,12,325,16],[325,13,325,17,"emitReserved"],[325,25,325,29],[325,26,325,30],[325,33,325,37],[325,34,325,38],[326,6,326,8],[326,7,326,9],[326,13,327,13],[327,8,328,12],[327,12,328,16],[327,13,328,17,"flush"],[327,18,328,22],[327,19,328,23],[327,20,328,24],[328,6,329,8],[329,4,330,4],[330,4,331,4],[331,0,332,0],[332,0,333,0],[333,0,334,0],[334,0,335,0],[335,4,336,4,"flush"],[335,9,336,9,"flush"],[335,10,336,9],[335,12,336,12],[336,6,337,8],[336,10,337,12],[336,18,337,20],[336,23,337,25],[336,27,337,29],[336,28,337,30,"readyState"],[336,38,337,40],[336,42,338,12],[336,46,338,16],[336,47,338,17,"transport"],[336,56,338,26],[336,57,338,27,"writable"],[336,65,338,35],[336,69,339,12],[336,70,339,13],[336,74,339,17],[336,75,339,18,"upgrading"],[336,84,339,27],[336,88,340,12],[336,92,340,16],[336,93,340,17,"writeBuffer"],[336,104,340,28],[336,105,340,29,"length"],[336,111,340,35],[336,113,340,37],[337,8,341,12],[337,14,341,18,"packets"],[337,21,341,25],[337,24,341,28],[337,28,341,32],[337,29,341,33,"_getWritablePackets"],[337,48,341,52],[337,49,341,53],[337,50,341,54],[338,8,342,12,"debug"],[338,13,342,17],[338,14,342,18],[338,45,342,49],[338,47,342,51,"packets"],[338,54,342,58],[338,55,342,59,"length"],[338,61,342,65],[338,62,342,66],[339,8,343,12],[339,12,343,16],[339,13,343,17,"transport"],[339,22,343,26],[339,23,343,27,"send"],[339,27,343,31],[339,28,343,32,"packets"],[339,35,343,39],[339,36,343,40],[340,8,344,12],[341,8,345,12],[342,8,346,12],[342,12,346,16],[342,13,346,17,"_prevBufferLen"],[342,27,346,31],[342,30,346,34,"packets"],[342,37,346,41],[342,38,346,42,"length"],[342,44,346,48],[343,8,347,12],[343,12,347,16],[343,13,347,17,"emitReserved"],[343,25,347,29],[343,26,347,30],[343,33,347,37],[343,34,347,38],[344,6,348,8],[345,4,349,4],[346,4,350,4],[347,0,351,0],[348,0,352,0],[349,0,353,0],[350,0,354,0],[351,0,355,0],[352,4,356,4,"_getWritablePackets"],[352,23,356,23,"_getWritablePackets"],[352,24,356,23],[352,26,356,26],[353,6,357,8],[353,12,357,14,"shouldCheckPayloadSize"],[353,34,357,36],[353,37,357,39],[353,41,357,43],[353,42,357,44,"_maxPayload"],[353,53,357,55],[353,57,358,12],[353,61,358,16],[353,62,358,17,"transport"],[353,71,358,26],[353,72,358,27,"name"],[353,76,358,31],[353,81,358,36],[353,90,358,45],[353,94,359,12],[353,98,359,16],[353,99,359,17,"writeBuffer"],[353,110,359,28],[353,111,359,29,"length"],[353,117,359,35],[353,120,359,38],[353,121,359,39],[354,6,360,8],[354,10,360,12],[354,11,360,13,"shouldCheckPayloadSize"],[354,33,360,35],[354,35,360,37],[355,8,361,12],[355,15,361,19],[355,19,361,23],[355,20,361,24,"writeBuffer"],[355,31,361,35],[356,6,362,8],[357,6,363,8],[357,10,363,12,"payloadSize"],[357,21,363,23],[357,24,363,26],[357,25,363,27],[357,26,363,28],[357,27,363,29],[358,6,364,8],[358,11,364,13],[358,15,364,17,"i"],[358,16,364,18],[358,19,364,21],[358,20,364,22],[358,22,364,24,"i"],[358,23,364,25],[358,26,364,28],[358,30,364,32],[358,31,364,33,"writeBuffer"],[358,42,364,44],[358,43,364,45,"length"],[358,49,364,51],[358,51,364,53,"i"],[358,52,364,54],[358,54,364,56],[358,56,364,58],[359,8,365,12],[359,14,365,18,"data"],[359,18,365,22],[359,21,365,25],[359,25,365,29],[359,26,365,30,"writeBuffer"],[359,37,365,41],[359,38,365,42,"i"],[359,39,365,43],[359,40,365,44],[359,41,365,45,"data"],[359,45,365,49],[360,8,366,12],[360,12,366,16,"data"],[360,16,366,20],[360,18,366,22],[361,10,367,16,"payloadSize"],[361,21,367,27],[361,25,367,31],[361,29,367,31,"byteLength"],[361,36,367,41],[361,37,367,41,"byteLength"],[361,47,367,41],[361,49,367,42,"data"],[361,53,367,46],[361,54,367,47],[362,8,368,12],[363,8,369,12],[363,12,369,16,"i"],[363,13,369,17],[363,16,369,20],[363,17,369,21],[363,21,369,25,"payloadSize"],[363,32,369,36],[363,35,369,39],[363,39,369,43],[363,40,369,44,"_maxPayload"],[363,51,369,55],[363,53,369,57],[364,10,370,16,"debug"],[364,15,370,21],[364,16,370,22],[364,48,370,54],[364,50,370,56,"i"],[364,51,370,57],[364,53,370,59],[364,57,370,63],[364,58,370,64,"writeBuffer"],[364,69,370,75],[364,70,370,76,"length"],[364,76,370,82],[364,77,370,83],[365,10,371,16],[365,17,371,23],[365,21,371,27],[365,22,371,28,"writeBuffer"],[365,33,371,39],[365,34,371,40,"slice"],[365,39,371,45],[365,40,371,46],[365,41,371,47],[365,43,371,49,"i"],[365,44,371,50],[365,45,371,51],[366,8,372,12],[367,8,373,12,"payloadSize"],[367,19,373,23],[367,23,373,27],[367,24,373,28],[367,25,373,29],[367,26,373,30],[368,6,374,8],[369,6,375,8,"debug"],[369,11,375,13],[369,12,375,14],[369,42,375,44],[369,44,375,46,"payloadSize"],[369,55,375,57],[369,57,375,59],[369,61,375,63],[369,62,375,64,"_maxPayload"],[369,73,375,75],[369,74,375,76],[370,6,376,8],[370,13,376,15],[370,17,376,19],[370,18,376,20,"writeBuffer"],[370,29,376,31],[371,4,377,4],[372,4,378,4],[373,0,379,0],[374,0,380,0],[375,0,381,0],[376,0,382,0],[377,0,383,0],[378,0,384,0],[379,0,385,0],[380,0,386,0],[381,4,387,4],[382,4,387,18,"_hasPingExpired"],[382,19,387,33,"_hasPingExpired"],[382,20,387,33],[382,22,387,36],[383,6,388,8],[383,10,388,12],[383,11,388,13],[383,15,388,17],[383,16,388,18,"_pingTimeoutTime"],[383,32,388,34],[383,34,389,12],[383,41,389,19],[383,45,389,23],[384,6,390,8],[384,12,390,14,"hasExpired"],[384,22,390,24],[384,25,390,27,"Date"],[384,29,390,31],[384,30,390,32,"now"],[384,33,390,35],[384,34,390,36],[384,35,390,37],[384,38,390,40],[384,42,390,44],[384,43,390,45,"_pingTimeoutTime"],[384,59,390,61],[385,6,391,8],[385,10,391,12,"hasExpired"],[385,20,391,22],[385,22,391,24],[386,8,392,12,"debug"],[386,13,392,17],[386,14,392,18],[386,69,392,73],[386,70,392,74],[387,8,393,12],[387,12,393,16],[387,13,393,17,"_pingTimeoutTime"],[387,29,393,33],[387,32,393,36],[387,33,393,37],[388,8,394,12],[388,12,394,12,"nextTick"],[388,26,394,20],[388,27,394,20,"nextTick"],[388,35,394,20],[388,37,394,21],[388,43,394,27],[389,10,395,16],[389,14,395,20],[389,15,395,21,"_onClose"],[389,23,395,29],[389,24,395,30],[389,38,395,44],[389,39,395,45],[390,8,396,12],[390,9,396,13],[390,11,396,15],[390,15,396,19],[390,16,396,20,"setTimeoutFn"],[390,28,396,32],[390,29,396,33],[391,6,397,8],[392,6,398,8],[392,13,398,15,"hasExpired"],[392,23,398,25],[393,4,399,4],[394,4,400,4],[395,0,401,0],[396,0,402,0],[397,0,403,0],[398,0,404,0],[399,0,405,0],[400,0,406,0],[401,0,407,0],[402,4,408,4,"write"],[402,9,408,9,"write"],[402,10,408,10,"msg"],[402,13,408,13],[402,15,408,15,"options"],[402,22,408,22],[402,24,408,24,"fn"],[402,26,408,26],[402,28,408,28],[403,6,409,8],[403,10,409,12],[403,11,409,13,"_sendPacket"],[403,22,409,24],[403,23,409,25],[403,32,409,34],[403,34,409,36,"msg"],[403,37,409,39],[403,39,409,41,"options"],[403,46,409,48],[403,48,409,50,"fn"],[403,50,409,52],[403,51,409,53],[404,6,410,8],[404,13,410,15],[404,17,410,19],[405,4,411,4],[406,4,412,4],[407,0,413,0],[408,0,414,0],[409,0,415,0],[410,0,416,0],[411,0,417,0],[412,0,418,0],[413,0,419,0],[414,4,420,4,"send"],[414,8,420,8,"send"],[414,9,420,9,"msg"],[414,12,420,12],[414,14,420,14,"options"],[414,21,420,21],[414,23,420,23,"fn"],[414,25,420,25],[414,27,420,27],[415,6,421,8],[415,10,421,12],[415,11,421,13,"_sendPacket"],[415,22,421,24],[415,23,421,25],[415,32,421,34],[415,34,421,36,"msg"],[415,37,421,39],[415,39,421,41,"options"],[415,46,421,48],[415,48,421,50,"fn"],[415,50,421,52],[415,51,421,53],[416,6,422,8],[416,13,422,15],[416,17,422,19],[417,4,423,4],[418,4,424,4],[419,0,425,0],[420,0,426,0],[421,0,427,0],[422,0,428,0],[423,0,429,0],[424,0,430,0],[425,0,431,0],[426,0,432,0],[427,4,433,4,"_sendPacket"],[427,15,433,15,"_sendPacket"],[427,16,433,16,"type"],[427,20,433,20],[427,22,433,22,"data"],[427,26,433,26],[427,28,433,28,"options"],[427,35,433,35],[427,37,433,37,"fn"],[427,39,433,39],[427,41,433,41],[428,6,434,8],[428,10,434,12],[428,20,434,22],[428,25,434,27],[428,32,434,34,"data"],[428,36,434,38],[428,38,434,40],[429,8,435,12,"fn"],[429,10,435,14],[429,13,435,17,"data"],[429,17,435,21],[430,8,436,12,"data"],[430,12,436,16],[430,15,436,19,"undefined"],[430,24,436,28],[431,6,437,8],[432,6,438,8],[432,10,438,12],[432,20,438,22],[432,25,438,27],[432,32,438,34,"options"],[432,39,438,41],[432,41,438,43],[433,8,439,12,"fn"],[433,10,439,14],[433,13,439,17,"options"],[433,20,439,24],[434,8,440,12,"options"],[434,15,440,19],[434,18,440,22],[434,22,440,26],[435,6,441,8],[436,6,442,8],[436,10,442,12],[436,19,442,21],[436,24,442,26],[436,28,442,30],[436,29,442,31,"readyState"],[436,39,442,41],[436,43,442,45],[436,51,442,53],[436,56,442,58],[436,60,442,62],[436,61,442,63,"readyState"],[436,71,442,73],[436,73,442,75],[437,8,443,12],[438,6,444,8],[439,6,445,8,"options"],[439,13,445,15],[439,16,445,18,"options"],[439,23,445,25],[439,27,445,29],[439,28,445,30],[439,29,445,31],[440,6,446,8,"options"],[440,13,446,15],[440,14,446,16,"compress"],[440,22,446,24],[440,25,446,27],[440,30,446,32],[440,35,446,37,"options"],[440,42,446,44],[440,43,446,45,"compress"],[440,51,446,53],[441,6,447,8],[441,12,447,14,"packet"],[441,18,447,20],[441,21,447,23],[442,8,448,12,"type"],[442,12,448,16],[442,14,448,18,"type"],[442,18,448,22],[443,8,449,12,"data"],[443,12,449,16],[443,14,449,18,"data"],[443,18,449,22],[444,8,450,12,"options"],[444,15,450,19],[444,17,450,21,"options"],[445,6,451,8],[445,7,451,9],[446,6,452,8],[446,10,452,12],[446,11,452,13,"emitReserved"],[446,23,452,25],[446,24,452,26],[446,38,452,40],[446,40,452,42,"packet"],[446,46,452,48],[446,47,452,49],[447,6,453,8],[447,10,453,12],[447,11,453,13,"writeBuffer"],[447,22,453,24],[447,23,453,25,"push"],[447,27,453,29],[447,28,453,30,"packet"],[447,34,453,36],[447,35,453,37],[448,6,454,8],[448,10,454,12,"fn"],[448,12,454,14],[448,14,455,12],[448,18,455,16],[448,19,455,17,"once"],[448,23,455,21],[448,24,455,22],[448,31,455,29],[448,33,455,31,"fn"],[448,35,455,33],[448,36,455,34],[449,6,456,8],[449,10,456,12],[449,11,456,13,"flush"],[449,16,456,18],[449,17,456,19],[449,18,456,20],[450,4,457,4],[451,4,458,4],[452,0,459,0],[453,0,460,0],[454,4,461,4,"close"],[454,9,461,9,"close"],[454,10,461,9],[454,12,461,12],[455,6,462,8],[455,12,462,14,"close"],[455,17,462,19],[455,20,462,22,"close"],[455,21,462,22],[455,26,462,28],[456,8,463,12],[456,12,463,16],[456,13,463,17,"_onClose"],[456,21,463,25],[456,22,463,26],[456,36,463,40],[456,37,463,41],[457,8,464,12,"debug"],[457,13,464,17],[457,14,464,18],[457,59,464,63],[457,60,464,64],[458,8,465,12],[458,12,465,16],[458,13,465,17,"transport"],[458,22,465,26],[458,23,465,27,"close"],[458,28,465,32],[458,29,465,33],[458,30,465,34],[459,6,466,8],[459,7,466,9],[460,6,467,8],[460,12,467,14,"cleanupAndClose"],[460,27,467,29],[460,30,467,32,"cleanupAndClose"],[460,31,467,32],[460,36,467,38],[461,8,468,12],[461,12,468,16],[461,13,468,17,"off"],[461,16,468,20],[461,17,468,21],[461,26,468,30],[461,28,468,32,"cleanupAndClose"],[461,43,468,47],[461,44,468,48],[462,8,469,12],[462,12,469,16],[462,13,469,17,"off"],[462,16,469,20],[462,17,469,21],[462,31,469,35],[462,33,469,37,"cleanupAndClose"],[462,48,469,52],[462,49,469,53],[463,8,470,12,"close"],[463,13,470,17],[463,14,470,18],[463,15,470,19],[464,6,471,8],[464,7,471,9],[465,6,472,8],[465,12,472,14,"waitForUpgrade"],[465,26,472,28],[465,29,472,31,"waitForUpgrade"],[465,30,472,31],[465,35,472,37],[466,8,473,12],[467,8,474,12],[467,12,474,16],[467,13,474,17,"once"],[467,17,474,21],[467,18,474,22],[467,27,474,31],[467,29,474,33,"cleanupAndClose"],[467,44,474,48],[467,45,474,49],[468,8,475,12],[468,12,475,16],[468,13,475,17,"once"],[468,17,475,21],[468,18,475,22],[468,32,475,36],[468,34,475,38,"cleanupAndClose"],[468,49,475,53],[468,50,475,54],[469,6,476,8],[469,7,476,9],[470,6,477,8],[470,10,477,12],[470,19,477,21],[470,24,477,26],[470,28,477,30],[470,29,477,31,"readyState"],[470,39,477,41],[470,43,477,45],[470,49,477,51],[470,54,477,56],[470,58,477,60],[470,59,477,61,"readyState"],[470,69,477,71],[470,71,477,73],[471,8,478,12],[471,12,478,16],[471,13,478,17,"readyState"],[471,23,478,27],[471,26,478,30],[471,35,478,39],[472,8,479,12],[472,12,479,16],[472,16,479,20],[472,17,479,21,"writeBuffer"],[472,28,479,32],[472,29,479,33,"length"],[472,35,479,39],[472,37,479,41],[473,10,480,16],[473,14,480,20],[473,15,480,21,"once"],[473,19,480,25],[473,20,480,26],[473,27,480,33],[473,29,480,35],[473,35,480,41],[474,12,481,20],[474,16,481,24],[474,20,481,28],[474,21,481,29,"upgrading"],[474,30,481,38],[474,32,481,40],[475,14,482,24,"waitForUpgrade"],[475,28,482,38],[475,29,482,39],[475,30,482,40],[476,12,483,20],[476,13,483,21],[476,19,484,25],[477,14,485,24,"close"],[477,19,485,29],[477,20,485,30],[477,21,485,31],[478,12,486,20],[479,10,487,16],[479,11,487,17],[479,12,487,18],[480,8,488,12],[480,9,488,13],[480,15,489,17],[480,19,489,21],[480,23,489,25],[480,24,489,26,"upgrading"],[480,33,489,35],[480,35,489,37],[481,10,490,16,"waitForUpgrade"],[481,24,490,30],[481,25,490,31],[481,26,490,32],[482,8,491,12],[482,9,491,13],[482,15,492,17],[483,10,493,16,"close"],[483,15,493,21],[483,16,493,22],[483,17,493,23],[484,8,494,12],[485,6,495,8],[486,6,496,8],[486,13,496,15],[486,17,496,19],[487,4,497,4],[488,4,498,4],[489,0,499,0],[490,0,500,0],[491,0,501,0],[492,0,502,0],[493,4,503,4,"_onError"],[493,12,503,12,"_onError"],[493,13,503,13,"err"],[493,16,503,16],[493,18,503,18],[494,6,504,8,"debug"],[494,11,504,13],[494,12,504,14],[494,29,504,31],[494,31,504,33,"err"],[494,34,504,36],[494,35,504,37],[495,6,505,8,"SocketWithoutUpgrade"],[495,26,505,28],[495,27,505,29,"priorWebsocketSuccess"],[495,48,505,50],[495,51,505,53],[495,56,505,58],[496,6,506,8],[496,10,506,12],[496,14,506,16],[496,15,506,17,"opts"],[496,19,506,21],[496,20,506,22,"tryAllTransports"],[496,36,506,38],[496,40,507,12],[496,44,507,16],[496,45,507,17,"transports"],[496,55,507,27],[496,56,507,28,"length"],[496,62,507,34],[496,65,507,37],[496,66,507,38],[496,70,508,12],[496,74,508,16],[496,75,508,17,"readyState"],[496,85,508,27],[496,90,508,32],[496,99,508,41],[496,101,508,43],[497,8,509,12,"debug"],[497,13,509,17],[497,14,509,18],[497,37,509,41],[497,38,509,42],[498,8,510,12],[498,12,510,16],[498,13,510,17,"transports"],[498,23,510,27],[498,24,510,28,"shift"],[498,29,510,33],[498,30,510,34],[498,31,510,35],[499,8,511,12],[499,15,511,19],[499,19,511,23],[499,20,511,24,"_open"],[499,25,511,29],[499,26,511,30],[499,27,511,31],[500,6,512,8],[501,6,513,8],[501,10,513,12],[501,11,513,13,"emitReserved"],[501,23,513,25],[501,24,513,26],[501,31,513,33],[501,33,513,35,"err"],[501,36,513,38],[501,37,513,39],[502,6,514,8],[502,10,514,12],[502,11,514,13,"_onClose"],[502,19,514,21],[502,20,514,22],[502,37,514,39],[502,39,514,41,"err"],[502,42,514,44],[502,43,514,45],[503,4,515,4],[504,4,516,4],[505,0,517,0],[506,0,518,0],[507,0,519,0],[508,0,520,0],[509,4,521,4,"_onClose"],[509,12,521,12,"_onClose"],[509,13,521,13,"reason"],[509,19,521,19],[509,21,521,21,"description"],[509,32,521,32],[509,34,521,34],[510,6,522,8],[510,10,522,12],[510,19,522,21],[510,24,522,26],[510,28,522,30],[510,29,522,31,"readyState"],[510,39,522,41],[510,43,523,12],[510,49,523,18],[510,54,523,23],[510,58,523,27],[510,59,523,28,"readyState"],[510,69,523,38],[510,73,524,12],[510,82,524,21],[510,87,524,26],[510,91,524,30],[510,92,524,31,"readyState"],[510,102,524,41],[510,104,524,43],[511,8,525,12,"debug"],[511,13,525,17],[511,14,525,18],[511,46,525,50],[511,48,525,52,"reason"],[511,54,525,58],[511,55,525,59],[512,8,526,12],[513,8,527,12],[513,12,527,16],[513,13,527,17,"clearTimeoutFn"],[513,27,527,31],[513,28,527,32],[513,32,527,36],[513,33,527,37,"_pingTimeoutTimer"],[513,50,527,54],[513,51,527,55],[514,8,528,12],[515,8,529,12],[515,12,529,16],[515,13,529,17,"transport"],[515,22,529,26],[515,23,529,27,"removeAllListeners"],[515,41,529,45],[515,42,529,46],[515,49,529,53],[515,50,529,54],[516,8,530,12],[517,8,531,12],[517,12,531,16],[517,13,531,17,"transport"],[517,22,531,26],[517,23,531,27,"close"],[517,28,531,32],[517,29,531,33],[517,30,531,34],[518,8,532,12],[519,8,533,12],[519,12,533,16],[519,13,533,17,"transport"],[519,22,533,26],[519,23,533,27,"removeAllListeners"],[519,41,533,45],[519,42,533,46],[519,43,533,47],[520,8,534,12],[520,12,534,16,"withEventListeners"],[520,30,534,34],[520,32,534,36],[521,10,535,16],[521,14,535,20],[521,18,535,24],[521,19,535,25,"_beforeunloadEventListener"],[521,45,535,51],[521,47,535,53],[522,12,536,20,"removeEventListener"],[522,31,536,39],[522,32,536,40],[522,46,536,54],[522,48,536,56],[522,52,536,60],[522,53,536,61,"_beforeunloadEventListener"],[522,79,536,87],[522,81,536,89],[522,86,536,94],[522,87,536,95],[523,10,537,16],[524,10,538,16],[524,14,538,20],[524,18,538,24],[524,19,538,25,"_offlineEventListener"],[524,40,538,46],[524,42,538,48],[525,12,539,20],[525,18,539,26,"i"],[525,19,539,27],[525,22,539,30,"OFFLINE_EVENT_LISTENERS"],[525,45,539,53],[525,46,539,54,"indexOf"],[525,53,539,61],[525,54,539,62],[525,58,539,66],[525,59,539,67,"_offlineEventListener"],[525,80,539,88],[525,81,539,89],[526,12,540,20],[526,16,540,24,"i"],[526,17,540,25],[526,22,540,30],[526,23,540,31],[526,24,540,32],[526,26,540,34],[527,14,541,24,"debug"],[527,19,541,29],[527,20,541,30],[527,63,541,73],[527,64,541,74],[528,14,542,24,"OFFLINE_EVENT_LISTENERS"],[528,37,542,47],[528,38,542,48,"splice"],[528,44,542,54],[528,45,542,55,"i"],[528,46,542,56],[528,48,542,58],[528,49,542,59],[528,50,542,60],[529,12,543,20],[530,10,544,16],[531,8,545,12],[532,8,546,12],[533,8,547,12],[533,12,547,16],[533,13,547,17,"readyState"],[533,23,547,27],[533,26,547,30],[533,34,547,38],[534,8,548,12],[535,8,549,12],[535,12,549,16],[535,13,549,17,"id"],[535,15,549,19],[535,18,549,22],[535,22,549,26],[536,8,550,12],[537,8,551,12],[537,12,551,16],[537,13,551,17,"emitReserved"],[537,25,551,29],[537,26,551,30],[537,33,551,37],[537,35,551,39,"reason"],[537,41,551,45],[537,43,551,47,"description"],[537,54,551,58],[537,55,551,59],[538,8,552,12],[539,8,553,12],[540,8,554,12],[540,12,554,16],[540,13,554,17,"writeBuffer"],[540,24,554,28],[540,27,554,31],[540,29,554,33],[541,8,555,12],[541,12,555,16],[541,13,555,17,"_prevBufferLen"],[541,27,555,31],[541,30,555,34],[541,31,555,35],[542,6,556,8],[543,4,557,4],[544,2,558,0],[545,2,559,0,"SocketWithoutUpgrade"],[545,22,559,20],[545,23,559,21,"protocol"],[545,31,559,29],[545,34,559,32,"protocol"],[545,49,559,40],[545,50,559,40,"protocol"],[545,58,559,40],[546,2,560,0],[547,0,561,0],[548,0,562,0],[549,0,563,0],[550,0,564,0],[551,0,565,0],[552,0,566,0],[553,0,567,0],[554,0,568,0],[555,0,569,0],[556,0,570,0],[557,0,571,0],[558,0,572,0],[559,0,573,0],[560,0,574,0],[561,0,575,0],[562,0,576,0],[563,0,577,0],[564,0,578,0],[565,0,579,0],[566,0,580,0],[567,0,581,0],[568,0,582,0],[569,2,583,7],[569,8,583,13,"SocketWithUpgrade"],[569,25,583,30],[569,34,583,39,"SocketWithoutUpgrade"],[569,54,583,59],[569,55,583,60],[570,4,584,4,"constructor"],[570,15,584,15,"constructor"],[570,16,584,15],[570,18,584,18],[571,6,585,8],[571,11,585,13],[571,12,585,14],[571,15,585,17,"arguments"],[571,24,585,26],[571,25,585,27],[572,6,586,8],[572,10,586,12],[572,11,586,13,"_upgrades"],[572,20,586,22],[572,23,586,25],[572,25,586,27],[573,4,587,4],[574,4,588,4,"onOpen"],[574,10,588,10,"onOpen"],[574,11,588,10],[574,13,588,13],[575,6,589,8],[575,11,589,13],[575,12,589,14,"onOpen"],[575,18,589,20],[575,19,589,21],[575,20,589,22],[576,6,590,8],[576,10,590,12],[576,16,590,18],[576,21,590,23],[576,25,590,27],[576,26,590,28,"readyState"],[576,36,590,38],[576,40,590,42],[576,44,590,46],[576,45,590,47,"opts"],[576,49,590,51],[576,50,590,52,"upgrade"],[576,57,590,59],[576,59,590,61],[577,8,591,12,"debug"],[577,13,591,17],[577,14,591,18],[577,39,591,43],[577,40,591,44],[578,8,592,12],[578,13,592,17],[578,17,592,21,"i"],[578,18,592,22],[578,21,592,25],[578,22,592,26],[578,24,592,28,"i"],[578,25,592,29],[578,28,592,32],[578,32,592,36],[578,33,592,37,"_upgrades"],[578,42,592,46],[578,43,592,47,"length"],[578,49,592,53],[578,51,592,55,"i"],[578,52,592,56],[578,54,592,58],[578,56,592,60],[579,10,593,16],[579,14,593,20],[579,15,593,21,"_probe"],[579,21,593,27],[579,22,593,28],[579,26,593,32],[579,27,593,33,"_upgrades"],[579,36,593,42],[579,37,593,43,"i"],[579,38,593,44],[579,39,593,45],[579,40,593,46],[580,8,594,12],[581,6,595,8],[582,4,596,4],[583,4,597,4],[584,0,598,0],[585,0,599,0],[586,0,600,0],[587,0,601,0],[588,0,602,0],[589,4,603,4,"_probe"],[589,10,603,10,"_probe"],[589,11,603,11,"name"],[589,15,603,15],[589,17,603,17],[590,6,604,8,"debug"],[590,11,604,13],[590,12,604,14],[590,36,604,38],[590,38,604,40,"name"],[590,42,604,44],[590,43,604,45],[591,6,605,8],[591,10,605,12,"transport"],[591,19,605,21],[591,22,605,24],[591,26,605,28],[591,27,605,29,"createTransport"],[591,42,605,44],[591,43,605,45,"name"],[591,47,605,49],[591,48,605,50],[592,6,606,8],[592,10,606,12,"failed"],[592,16,606,18],[592,19,606,21],[592,24,606,26],[593,6,607,8,"SocketWithoutUpgrade"],[593,26,607,28],[593,27,607,29,"priorWebsocketSuccess"],[593,48,607,50],[593,51,607,53],[593,56,607,58],[594,6,608,8],[594,12,608,14,"onTransportOpen"],[594,27,608,29],[594,30,608,32,"onTransportOpen"],[594,31,608,32],[594,36,608,38],[595,8,609,12],[595,12,609,16,"failed"],[595,18,609,22],[595,20,610,16],[596,8,611,12,"debug"],[596,13,611,17],[596,14,611,18],[596,43,611,47],[596,45,611,49,"name"],[596,49,611,53],[596,50,611,54],[597,8,612,12,"transport"],[597,17,612,21],[597,18,612,22,"send"],[597,22,612,26],[597,23,612,27],[597,24,612,28],[598,10,612,30,"type"],[598,14,612,34],[598,16,612,36],[598,22,612,42],[599,10,612,44,"data"],[599,14,612,48],[599,16,612,50],[600,8,612,58],[600,9,612,59],[600,10,612,60],[600,11,612,61],[601,8,613,12,"transport"],[601,17,613,21],[601,18,613,22,"once"],[601,22,613,26],[601,23,613,27],[601,31,613,35],[601,33,613,38,"msg"],[601,36,613,41],[601,40,613,46],[602,10,614,16],[602,14,614,20,"failed"],[602,20,614,26],[602,22,615,20],[603,10,616,16],[603,14,616,20],[603,20,616,26],[603,25,616,31,"msg"],[603,28,616,34],[603,29,616,35,"type"],[603,33,616,39],[603,37,616,43],[603,44,616,50],[603,49,616,55,"msg"],[603,52,616,58],[603,53,616,59,"data"],[603,57,616,63],[603,59,616,65],[604,12,617,20,"debug"],[604,17,617,25],[604,18,617,26],[604,45,617,53],[604,47,617,55,"name"],[604,51,617,59],[604,52,617,60],[605,12,618,20],[605,16,618,24],[605,17,618,25,"upgrading"],[605,26,618,34],[605,29,618,37],[605,33,618,41],[606,12,619,20],[606,16,619,24],[606,17,619,25,"emitReserved"],[606,29,619,37],[606,30,619,38],[606,41,619,49],[606,43,619,51,"transport"],[606,52,619,60],[606,53,619,61],[607,12,620,20],[607,16,620,24],[607,17,620,25,"transport"],[607,26,620,34],[607,28,621,24],[608,12,622,20,"SocketWithoutUpgrade"],[608,32,622,40],[608,33,622,41,"priorWebsocketSuccess"],[608,54,622,62],[608,57,623,24],[608,68,623,35],[608,73,623,40,"transport"],[608,82,623,49],[608,83,623,50,"name"],[608,87,623,54],[609,12,624,20,"debug"],[609,17,624,25],[609,18,624,26],[609,50,624,58],[609,52,624,60],[609,56,624,64],[609,57,624,65,"transport"],[609,66,624,74],[609,67,624,75,"name"],[609,71,624,79],[609,72,624,80],[610,12,625,20],[610,16,625,24],[610,17,625,25,"transport"],[610,26,625,34],[610,27,625,35,"pause"],[610,32,625,40],[610,33,625,41],[610,39,625,47],[611,14,626,24],[611,18,626,28,"failed"],[611,24,626,34],[611,26,627,28],[612,14,628,24],[612,18,628,28],[612,26,628,36],[612,31,628,41],[612,35,628,45],[612,36,628,46,"readyState"],[612,46,628,56],[612,48,629,28],[613,14,630,24,"debug"],[613,19,630,29],[613,20,630,30],[613,67,630,77],[613,68,630,78],[614,14,631,24,"cleanup"],[614,21,631,31],[614,22,631,32],[614,23,631,33],[615,14,632,24],[615,18,632,28],[615,19,632,29,"setTransport"],[615,31,632,41],[615,32,632,42,"transport"],[615,41,632,51],[615,42,632,52],[616,14,633,24,"transport"],[616,23,633,33],[616,24,633,34,"send"],[616,28,633,38],[616,29,633,39],[616,30,633,40],[617,16,633,42,"type"],[617,20,633,46],[617,22,633,48],[618,14,633,58],[618,15,633,59],[618,16,633,60],[618,17,633,61],[619,14,634,24],[619,18,634,28],[619,19,634,29,"emitReserved"],[619,31,634,41],[619,32,634,42],[619,41,634,51],[619,43,634,53,"transport"],[619,52,634,62],[619,53,634,63],[620,14,635,24,"transport"],[620,23,635,33],[620,26,635,36],[620,30,635,40],[621,14,636,24],[621,18,636,28],[621,19,636,29,"upgrading"],[621,28,636,38],[621,31,636,41],[621,36,636,46],[622,14,637,24],[622,18,637,28],[622,19,637,29,"flush"],[622,24,637,34],[622,25,637,35],[622,26,637,36],[623,12,638,20],[623,13,638,21],[623,14,638,22],[624,10,639,16],[624,11,639,17],[624,17,640,21],[625,12,641,20,"debug"],[625,17,641,25],[625,18,641,26],[625,47,641,55],[625,49,641,57,"name"],[625,53,641,61],[625,54,641,62],[626,12,642,20],[626,18,642,26,"err"],[626,21,642,29],[626,24,642,32],[626,28,642,36,"Error"],[626,33,642,41],[626,34,642,42],[626,47,642,55],[626,48,642,56],[627,12,643,20],[628,12,644,20,"err"],[628,15,644,23],[628,16,644,24,"transport"],[628,25,644,33],[628,28,644,36,"transport"],[628,37,644,45],[628,38,644,46,"name"],[628,42,644,50],[629,12,645,20],[629,16,645,24],[629,17,645,25,"emitReserved"],[629,29,645,37],[629,30,645,38],[629,44,645,52],[629,46,645,54,"err"],[629,49,645,57],[629,50,645,58],[630,10,646,16],[631,8,647,12],[631,9,647,13],[631,10,647,14],[632,6,648,8],[632,7,648,9],[633,6,649,8],[633,15,649,17,"freezeTransport"],[633,30,649,32,"freezeTransport"],[633,31,649,32],[633,33,649,35],[634,8,650,12],[634,12,650,16,"failed"],[634,18,650,22],[634,20,651,16],[635,8,652,12],[636,8,653,12,"failed"],[636,14,653,18],[636,17,653,21],[636,21,653,25],[637,8,654,12,"cleanup"],[637,15,654,19],[637,16,654,20],[637,17,654,21],[638,8,655,12,"transport"],[638,17,655,21],[638,18,655,22,"close"],[638,23,655,27],[638,24,655,28],[638,25,655,29],[639,8,656,12,"transport"],[639,17,656,21],[639,20,656,24],[639,24,656,28],[640,6,657,8],[641,6,658,8],[642,6,659,8],[642,12,659,14,"onerror"],[642,19,659,21],[642,22,659,25,"err"],[642,25,659,28],[642,29,659,33],[643,8,660,12],[643,14,660,18,"error"],[643,19,660,23],[643,22,660,26],[643,26,660,30,"Error"],[643,31,660,35],[643,32,660,36],[643,47,660,51],[643,50,660,54,"err"],[643,53,660,57],[643,54,660,58],[644,8,661,12],[645,8,662,12,"error"],[645,13,662,17],[645,14,662,18,"transport"],[645,23,662,27],[645,26,662,30,"transport"],[645,35,662,39],[645,36,662,40,"name"],[645,40,662,44],[646,8,663,12,"freezeTransport"],[646,23,663,27],[646,24,663,28],[646,25,663,29],[647,8,664,12,"debug"],[647,13,664,17],[647,14,664,18],[647,64,664,68],[647,66,664,70,"name"],[647,70,664,74],[647,72,664,76,"err"],[647,75,664,79],[647,76,664,80],[648,8,665,12],[648,12,665,16],[648,13,665,17,"emitReserved"],[648,25,665,29],[648,26,665,30],[648,40,665,44],[648,42,665,46,"error"],[648,47,665,51],[648,48,665,52],[649,6,666,8],[649,7,666,9],[650,6,667,8],[650,15,667,17,"onTransportClose"],[650,31,667,33,"onTransportClose"],[650,32,667,33],[650,34,667,36],[651,8,668,12,"onerror"],[651,15,668,19],[651,16,668,20],[651,34,668,38],[651,35,668,39],[652,6,669,8],[653,6,670,8],[654,6,671,8],[654,15,671,17,"onclose"],[654,22,671,24,"onclose"],[654,23,671,24],[654,25,671,27],[655,8,672,12,"onerror"],[655,15,672,19],[655,16,672,20],[655,31,672,35],[655,32,672,36],[656,6,673,8],[657,6,674,8],[658,6,675,8],[658,15,675,17,"onupgrade"],[658,24,675,26,"onupgrade"],[658,25,675,27,"to"],[658,27,675,29],[658,29,675,31],[659,8,676,12],[659,12,676,16,"transport"],[659,21,676,25],[659,25,676,29,"to"],[659,27,676,31],[659,28,676,32,"name"],[659,32,676,36],[659,37,676,41,"transport"],[659,46,676,50],[659,47,676,51,"name"],[659,51,676,55],[659,53,676,57],[660,10,677,16,"debug"],[660,15,677,21],[660,16,677,22],[660,44,677,50],[660,46,677,52,"to"],[660,48,677,54],[660,49,677,55,"name"],[660,53,677,59],[660,55,677,61,"transport"],[660,64,677,70],[660,65,677,71,"name"],[660,69,677,75],[660,70,677,76],[661,10,678,16,"freezeTransport"],[661,25,678,31],[661,26,678,32],[661,27,678,33],[662,8,679,12],[663,6,680,8],[664,6,681,8],[665,6,682,8],[665,12,682,14,"cleanup"],[665,19,682,21],[665,22,682,24,"cleanup"],[665,23,682,24],[665,28,682,30],[666,8,683,12,"transport"],[666,17,683,21],[666,18,683,22,"removeListener"],[666,32,683,36],[666,33,683,37],[666,39,683,43],[666,41,683,45,"onTransportOpen"],[666,56,683,60],[666,57,683,61],[667,8,684,12,"transport"],[667,17,684,21],[667,18,684,22,"removeListener"],[667,32,684,36],[667,33,684,37],[667,40,684,44],[667,42,684,46,"onerror"],[667,49,684,53],[667,50,684,54],[668,8,685,12,"transport"],[668,17,685,21],[668,18,685,22,"removeListener"],[668,32,685,36],[668,33,685,37],[668,40,685,44],[668,42,685,46,"onTransportClose"],[668,58,685,62],[668,59,685,63],[669,8,686,12],[669,12,686,16],[669,13,686,17,"off"],[669,16,686,20],[669,17,686,21],[669,24,686,28],[669,26,686,30,"onclose"],[669,33,686,37],[669,34,686,38],[670,8,687,12],[670,12,687,16],[670,13,687,17,"off"],[670,16,687,20],[670,17,687,21],[670,28,687,32],[670,30,687,34,"onupgrade"],[670,39,687,43],[670,40,687,44],[671,6,688,8],[671,7,688,9],[672,6,689,8,"transport"],[672,15,689,17],[672,16,689,18,"once"],[672,20,689,22],[672,21,689,23],[672,27,689,29],[672,29,689,31,"onTransportOpen"],[672,44,689,46],[672,45,689,47],[673,6,690,8,"transport"],[673,15,690,17],[673,16,690,18,"once"],[673,20,690,22],[673,21,690,23],[673,28,690,30],[673,30,690,32,"onerror"],[673,37,690,39],[673,38,690,40],[674,6,691,8,"transport"],[674,15,691,17],[674,16,691,18,"once"],[674,20,691,22],[674,21,691,23],[674,28,691,30],[674,30,691,32,"onTransportClose"],[674,46,691,48],[674,47,691,49],[675,6,692,8],[675,10,692,12],[675,11,692,13,"once"],[675,15,692,17],[675,16,692,18],[675,23,692,25],[675,25,692,27,"onclose"],[675,32,692,34],[675,33,692,35],[676,6,693,8],[676,10,693,12],[676,11,693,13,"once"],[676,15,693,17],[676,16,693,18],[676,27,693,29],[676,29,693,31,"onupgrade"],[676,38,693,40],[676,39,693,41],[677,6,694,8],[677,10,694,12],[677,14,694,16],[677,15,694,17,"_upgrades"],[677,24,694,26],[677,25,694,27,"indexOf"],[677,32,694,34],[677,33,694,35],[677,47,694,49],[677,48,694,50],[677,53,694,55],[677,54,694,56],[677,55,694,57],[677,59,695,12,"name"],[677,63,695,16],[677,68,695,21],[677,82,695,35],[677,84,695,37],[678,8,696,12],[679,8,697,12],[679,12,697,16],[679,13,697,17,"setTimeoutFn"],[679,25,697,29],[679,26,697,30],[679,32,697,36],[680,10,698,16],[680,14,698,20],[680,15,698,21,"failed"],[680,21,698,27],[680,23,698,29],[681,12,699,20,"transport"],[681,21,699,29],[681,22,699,30,"open"],[681,26,699,34],[681,27,699,35],[681,28,699,36],[682,10,700,16],[683,8,701,12],[683,9,701,13],[683,11,701,15],[683,14,701,18],[683,15,701,19],[684,6,702,8],[684,7,702,9],[684,13,703,13],[685,8,704,12,"transport"],[685,17,704,21],[685,18,704,22,"open"],[685,22,704,26],[685,23,704,27],[685,24,704,28],[686,6,705,8],[687,4,706,4],[688,4,707,4,"onHandshake"],[688,15,707,15,"onHandshake"],[688,16,707,16,"data"],[688,20,707,20],[688,22,707,22],[689,6,708,8],[689,10,708,12],[689,11,708,13,"_upgrades"],[689,20,708,22],[689,23,708,25],[689,27,708,29],[689,28,708,30,"_filterUpgrades"],[689,43,708,45],[689,44,708,46,"data"],[689,48,708,50],[689,49,708,51,"upgrades"],[689,57,708,59],[689,58,708,60],[690,6,709,8],[690,11,709,13],[690,12,709,14,"onHandshake"],[690,23,709,25],[690,24,709,26,"data"],[690,28,709,30],[690,29,709,31],[691,4,710,4],[692,4,711,4],[693,0,712,0],[694,0,713,0],[695,0,714,0],[696,0,715,0],[697,0,716,0],[698,4,717,4,"_filterUpgrades"],[698,19,717,19,"_filterUpgrades"],[698,20,717,20,"upgrades"],[698,28,717,28],[698,30,717,30],[699,6,718,8],[699,12,718,14,"filteredUpgrades"],[699,28,718,30],[699,31,718,33],[699,33,718,35],[700,6,719,8],[700,11,719,13],[700,15,719,17,"i"],[700,16,719,18],[700,19,719,21],[700,20,719,22],[700,22,719,24,"i"],[700,23,719,25],[700,26,719,28,"upgrades"],[700,34,719,36],[700,35,719,37,"length"],[700,41,719,43],[700,43,719,45,"i"],[700,44,719,46],[700,46,719,48],[700,48,719,50],[701,8,720,12],[701,12,720,16],[701,13,720,17],[701,17,720,21],[701,18,720,22,"transports"],[701,28,720,32],[701,29,720,33,"indexOf"],[701,36,720,40],[701,37,720,41,"upgrades"],[701,45,720,49],[701,46,720,50,"i"],[701,47,720,51],[701,48,720,52],[701,49,720,53],[701,51,721,16,"filteredUpgrades"],[701,67,721,32],[701,68,721,33,"push"],[701,72,721,37],[701,73,721,38,"upgrades"],[701,81,721,46],[701,82,721,47,"i"],[701,83,721,48],[701,84,721,49],[701,85,721,50],[702,6,722,8],[703,6,723,8],[703,13,723,15,"filteredUpgrades"],[703,29,723,31],[704,4,724,4],[705,2,725,0],[706,2,726,0],[707,0,727,0],[708,0,728,0],[709,0,729,0],[710,0,730,0],[711,0,731,0],[712,0,732,0],[713,0,733,0],[714,0,734,0],[715,0,735,0],[716,0,736,0],[717,0,737,0],[718,0,738,0],[719,0,739,0],[720,0,740,0],[721,0,741,0],[722,0,742,0],[723,0,743,0],[724,0,744,0],[725,2,745,7],[725,8,745,13,"Socket"],[725,14,745,19],[725,23,745,28,"SocketWithUpgrade"],[725,40,745,45],[725,41,745,46],[726,4,746,4,"constructor"],[726,15,746,15,"constructor"],[726,16,746,16,"uri"],[726,19,746,19],[726,21,746,21,"opts"],[726,25,746,25],[726,28,746,28],[726,29,746,29],[726,30,746,30],[726,32,746,32],[727,6,747,8],[727,12,747,14,"o"],[727,13,747,15],[727,16,747,18],[727,23,747,25,"uri"],[727,26,747,28],[727,31,747,33],[727,39,747,41],[727,42,747,44,"uri"],[727,45,747,47],[727,48,747,50,"opts"],[727,52,747,54],[728,6,748,8],[728,10,748,12],[728,11,748,13,"o"],[728,12,748,14],[728,13,748,15,"transports"],[728,23,748,25],[728,27,749,13,"o"],[728,28,749,14],[728,29,749,15,"transports"],[728,39,749,25],[728,43,749,29],[728,50,749,36,"o"],[728,51,749,37],[728,52,749,38,"transports"],[728,62,749,48],[728,63,749,49],[728,64,749,50],[728,65,749,51],[728,70,749,56],[728,78,749,65],[728,80,749,67],[729,8,750,12,"o"],[729,9,750,13],[729,10,750,14,"transports"],[729,20,750,24],[729,23,750,27],[729,24,750,28,"o"],[729,25,750,29],[729,26,750,30,"transports"],[729,36,750,40],[729,40,750,44],[729,41,750,45],[729,50,750,54],[729,52,750,56],[729,63,750,67],[729,65,750,69],[729,79,750,83],[729,80,750,84],[729,82,751,17,"map"],[729,85,751,20],[729,86,751,22,"transportName"],[729,99,751,35],[729,103,751,40,"DEFAULT_TRANSPORTS"],[729,121,751,58],[729,122,751,58,"transports"],[729,132,751,58],[729,133,751,59,"transportName"],[729,146,751,72],[729,147,751,73],[729,148,751,74],[729,149,752,17,"filter"],[729,155,752,23],[729,156,752,25,"t"],[729,157,752,26],[729,161,752,31],[729,162,752,32],[729,163,752,33,"t"],[729,164,752,34],[729,165,752,35],[730,6,753,8],[731,6,754,8],[731,11,754,13],[731,12,754,14,"uri"],[731,15,754,17],[731,17,754,19,"o"],[731,18,754,20],[731,19,754,21],[732,4,755,4],[733,2,756,0],[734,0,756,1],[734,3]],"functionMap":{"names":["<global>","addEventListener$argument_1","OFFLINE_EVENT_LISTENERS.forEach$argument_0","SocketWithoutUpgrade","SocketWithoutUpgrade#constructor","opts.transports.forEach$argument_0","_beforeunloadEventListener","_offlineEventListener","SocketWithoutUpgrade#createTransport","SocketWithoutUpgrade#_open","setTimeoutFn$argument_0","SocketWithoutUpgrade#setTransport","transport.on.on.on.on$argument_1","SocketWithoutUpgrade#onOpen","SocketWithoutUpgrade#_onPacket","SocketWithoutUpgrade#onHandshake","SocketWithoutUpgrade#_resetPingTimeout","SocketWithoutUpgrade#_onDrain","SocketWithoutUpgrade#flush","SocketWithoutUpgrade#_getWritablePackets","SocketWithoutUpgrade#_hasPingExpired","nextTick$argument_0","SocketWithoutUpgrade#write","SocketWithoutUpgrade#send","SocketWithoutUpgrade#_sendPacket","SocketWithoutUpgrade#close","close","cleanupAndClose","waitForUpgrade","once$argument_1","SocketWithoutUpgrade#_onError","SocketWithoutUpgrade#_onClose","SocketWithUpgrade","SocketWithUpgrade#constructor","SocketWithUpgrade#onOpen","SocketWithUpgrade#_probe","onTransportOpen","transport.once$argument_1","transport.pause$argument_0","freezeTransport","onerror","onTransportClose","onclose","onupgrade","cleanup","SocketWithUpgrade#onHandshake","SocketWithUpgrade#_filterUpgrades","Socket","Socket#constructor","map$argument_0","map.filter$argument_0"],"mappings":"AAA;gCCe;wCCE,wBD;KDC;OGyB;ICO;gCCkD;SDI;kDE2B;iBFM;6CGK;iBHI;KDQ;IKQ;KLmB;IMM;8BCG;aDE;KNY;IQM;yBCa,oDD;KRC;IUM;KVO;IWM;KXiC;IYO;KZY;IaM;mDNI;SME;KbI;IcM;KdY;IeM;Kfa;IgBO;KhBqB;kBiBU;qBCO;aDE;KjBG;ImBS;KnBG;IoBS;KpBG;IqBU;KrBwB;IsBI;sBCC;SDI;gCEC;SFI;+BGC;SHI;mCII;iBJO;KtBU;I2BM;K3BY;I4BM;K5BoC;CHC;OgCyB;ICC;KDG;IEC;KFQ;IGO;gCCK;qCCK;yCCY;qBDa;aDS;SDC;QIC;SJQ;wBKE;SLO;QMC;SNE;QOE;SPE;QQE;SRK;wBSE;STM;8BzBS;ayBI;KHK;IaC;KbG;IcO;KdO;ChCC;O+CoB;ICC;qBCK,oDD;wBEC,UF;KDG;C/CC"},"hasCjsExports":false},"type":"js/module"}]}