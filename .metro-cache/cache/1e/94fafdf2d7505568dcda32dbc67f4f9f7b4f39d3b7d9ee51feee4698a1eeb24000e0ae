{"dependencies":[{"name":"stream","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":19,"index":34},"end":{"line":3,"column":36,"index":51}}],"key":"ywjhWBPQUrHXIfwGsbgNg7Szt/A=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  const {\n    Duplex\n  } = require(_dependencyMap[0], \"stream\");\n\n  /**\n   * Emits the `'close'` event on a stream.\n   *\n   * @param {Duplex} stream The stream.\n   * @private\n   */\n  function emitClose(stream) {\n    stream.emit('close');\n  }\n\n  /**\n   * The listener of the `'end'` event.\n   *\n   * @private\n   */\n  function duplexOnEnd() {\n    if (!this.destroyed && this._writableState.finished) {\n      this.destroy();\n    }\n  }\n\n  /**\n   * The listener of the `'error'` event.\n   *\n   * @param {Error} err The error\n   * @private\n   */\n  function duplexOnError(err) {\n    this.removeListener('error', duplexOnError);\n    this.destroy();\n    if (this.listenerCount('error') === 0) {\n      // Do not suppress the throwing behavior.\n      this.emit('error', err);\n    }\n  }\n\n  /**\n   * Wraps a `WebSocket` in a duplex stream.\n   *\n   * @param {WebSocket} ws The `WebSocket` to wrap\n   * @param {Object} [options] The options for the `Duplex` constructor\n   * @return {Duplex} The duplex stream\n   * @public\n   */\n  function createWebSocketStream(ws, options) {\n    let terminateOnDestroy = true;\n    const duplex = new Duplex({\n      ...options,\n      autoDestroy: false,\n      emitClose: false,\n      objectMode: false,\n      writableObjectMode: false\n    });\n    ws.on('message', function message(msg, isBinary) {\n      const data = !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;\n      if (!duplex.push(data)) ws.pause();\n    });\n    ws.once('error', function error(err) {\n      if (duplex.destroyed) return;\n\n      // Prevent `ws.terminate()` from being called by `duplex._destroy()`.\n      //\n      // - If the `'error'` event is emitted before the `'open'` event, then\n      //   `ws.terminate()` is a noop as no socket is assigned.\n      // - Otherwise, the error is re-emitted by the listener of the `'error'`\n      //   event of the `Receiver` object. The listener already closes the\n      //   connection by calling `ws.close()`. This allows a close frame to be\n      //   sent to the other peer. If `ws.terminate()` is called right after this,\n      //   then the close frame might not be sent.\n      terminateOnDestroy = false;\n      duplex.destroy(err);\n    });\n    ws.once('close', function close() {\n      if (duplex.destroyed) return;\n      duplex.push(null);\n    });\n    duplex._destroy = function (err, callback) {\n      if (ws.readyState === ws.CLOSED) {\n        callback(err);\n        process.nextTick(emitClose, duplex);\n        return;\n      }\n      let called = false;\n      ws.once('error', function error(err) {\n        called = true;\n        callback(err);\n      });\n      ws.once('close', function close() {\n        if (!called) callback(err);\n        process.nextTick(emitClose, duplex);\n      });\n      if (terminateOnDestroy) ws.terminate();\n    };\n    duplex._final = function (callback) {\n      if (ws.readyState === ws.CONNECTING) {\n        ws.once('open', function open() {\n          duplex._final(callback);\n        });\n        return;\n      }\n\n      // If the value of the `_socket` property is `null` it means that `ws` is a\n      // client websocket and the handshake failed. In fact, when this happens, a\n      // socket is never assigned to the websocket. Wait for the `'error'` event\n      // that will be emitted by the websocket.\n      if (ws._socket === null) return;\n      if (ws._socket._writableState.finished) {\n        callback();\n        if (duplex._readableState.endEmitted) duplex.destroy();\n      } else {\n        ws._socket.once('finish', function finish() {\n          // `duplex` is not destroyed here because the `'end'` event will be\n          // emitted on `duplex` after this `'finish'` event. The EOF signaling\n          // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\n          callback();\n        });\n        ws.close();\n      }\n    };\n    duplex._read = function () {\n      if (ws.isPaused) ws.resume();\n    };\n    duplex._write = function (chunk, encoding, callback) {\n      if (ws.readyState === ws.CONNECTING) {\n        ws.once('open', function open() {\n          duplex._write(chunk, encoding, callback);\n        });\n        return;\n      }\n      ws.send(chunk, callback);\n    };\n    duplex.on('end', duplexOnEnd);\n    duplex.on('error', duplexOnError);\n    return duplex;\n  }\n  module.exports = createWebSocketStream;\n});","lineCount":144,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,8,3,6],[5,4,3,8,"Duplex"],[6,2,3,15],[6,3,3,16],[6,6,3,19,"require"],[6,13,3,26],[6,14,3,26,"_dependencyMap"],[6,28,3,26],[6,41,3,35],[6,42,3,36],[8,2,5,0],[9,0,6,0],[10,0,7,0],[11,0,8,0],[12,0,9,0],[13,0,10,0],[14,2,11,0],[14,11,11,9,"emitClose"],[14,20,11,18,"emitClose"],[14,21,11,19,"stream"],[14,27,11,25],[14,29,11,27],[15,4,12,2,"stream"],[15,10,12,8],[15,11,12,9,"emit"],[15,15,12,13],[15,16,12,14],[15,23,12,21],[15,24,12,22],[16,2,13,0],[18,2,15,0],[19,0,16,0],[20,0,17,0],[21,0,18,0],[22,0,19,0],[23,2,20,0],[23,11,20,9,"duplexOnEnd"],[23,22,20,20,"duplexOnEnd"],[23,23,20,20],[23,25,20,23],[24,4,21,2],[24,8,21,6],[24,9,21,7],[24,13,21,11],[24,14,21,12,"destroyed"],[24,23,21,21],[24,27,21,25],[24,31,21,29],[24,32,21,30,"_writableState"],[24,46,21,44],[24,47,21,45,"finished"],[24,55,21,53],[24,57,21,55],[25,6,22,4],[25,10,22,8],[25,11,22,9,"destroy"],[25,18,22,16],[25,19,22,17],[25,20,22,18],[26,4,23,2],[27,2,24,0],[29,2,26,0],[30,0,27,0],[31,0,28,0],[32,0,29,0],[33,0,30,0],[34,0,31,0],[35,2,32,0],[35,11,32,9,"duplexOnError"],[35,24,32,22,"duplexOnError"],[35,25,32,23,"err"],[35,28,32,26],[35,30,32,28],[36,4,33,2],[36,8,33,6],[36,9,33,7,"removeListener"],[36,23,33,21],[36,24,33,22],[36,31,33,29],[36,33,33,31,"duplexOnError"],[36,46,33,44],[36,47,33,45],[37,4,34,2],[37,8,34,6],[37,9,34,7,"destroy"],[37,16,34,14],[37,17,34,15],[37,18,34,16],[38,4,35,2],[38,8,35,6],[38,12,35,10],[38,13,35,11,"listenerCount"],[38,26,35,24],[38,27,35,25],[38,34,35,32],[38,35,35,33],[38,40,35,38],[38,41,35,39],[38,43,35,41],[39,6,36,4],[40,6,37,4],[40,10,37,8],[40,11,37,9,"emit"],[40,15,37,13],[40,16,37,14],[40,23,37,21],[40,25,37,23,"err"],[40,28,37,26],[40,29,37,27],[41,4,38,2],[42,2,39,0],[44,2,41,0],[45,0,42,0],[46,0,43,0],[47,0,44,0],[48,0,45,0],[49,0,46,0],[50,0,47,0],[51,0,48,0],[52,2,49,0],[52,11,49,9,"createWebSocketStream"],[52,32,49,30,"createWebSocketStream"],[52,33,49,31,"ws"],[52,35,49,33],[52,37,49,35,"options"],[52,44,49,42],[52,46,49,44],[53,4,50,2],[53,8,50,6,"terminateOnDestroy"],[53,26,50,24],[53,29,50,27],[53,33,50,31],[54,4,52,2],[54,10,52,8,"duplex"],[54,16,52,14],[54,19,52,17],[54,23,52,21,"Duplex"],[54,29,52,27],[54,30,52,28],[55,6,53,4],[55,9,53,7,"options"],[55,16,53,14],[56,6,54,4,"autoDestroy"],[56,17,54,15],[56,19,54,17],[56,24,54,22],[57,6,55,4,"emitClose"],[57,15,55,13],[57,17,55,15],[57,22,55,20],[58,6,56,4,"objectMode"],[58,16,56,14],[58,18,56,16],[58,23,56,21],[59,6,57,4,"writableObjectMode"],[59,24,57,22],[59,26,57,24],[60,4,58,2],[60,5,58,3],[60,6,58,4],[61,4,60,2,"ws"],[61,6,60,4],[61,7,60,5,"on"],[61,9,60,7],[61,10,60,8],[61,19,60,17],[61,21,60,19],[61,30,60,28,"message"],[61,37,60,35,"message"],[61,38,60,36,"msg"],[61,41,60,39],[61,43,60,41,"isBinary"],[61,51,60,49],[61,53,60,51],[62,6,61,4],[62,12,61,10,"data"],[62,16,61,14],[62,19,62,6],[62,20,62,7,"isBinary"],[62,28,62,15],[62,32,62,19,"duplex"],[62,38,62,25],[62,39,62,26,"_readableState"],[62,53,62,40],[62,54,62,41,"objectMode"],[62,64,62,51],[62,67,62,54,"msg"],[62,70,62,57],[62,71,62,58,"toString"],[62,79,62,66],[62,80,62,67],[62,81,62,68],[62,84,62,71,"msg"],[62,87,62,74],[63,6,64,4],[63,10,64,8],[63,11,64,9,"duplex"],[63,17,64,15],[63,18,64,16,"push"],[63,22,64,20],[63,23,64,21,"data"],[63,27,64,25],[63,28,64,26],[63,30,64,28,"ws"],[63,32,64,30],[63,33,64,31,"pause"],[63,38,64,36],[63,39,64,37],[63,40,64,38],[64,4,65,2],[64,5,65,3],[64,6,65,4],[65,4,67,2,"ws"],[65,6,67,4],[65,7,67,5,"once"],[65,11,67,9],[65,12,67,10],[65,19,67,17],[65,21,67,19],[65,30,67,28,"error"],[65,35,67,33,"error"],[65,36,67,34,"err"],[65,39,67,37],[65,41,67,39],[66,6,68,4],[66,10,68,8,"duplex"],[66,16,68,14],[66,17,68,15,"destroyed"],[66,26,68,24],[66,28,68,26],[68,6,70,4],[69,6,71,4],[70,6,72,4],[71,6,73,4],[72,6,74,4],[73,6,75,4],[74,6,76,4],[75,6,77,4],[76,6,78,4],[77,6,79,4,"terminateOnDestroy"],[77,24,79,22],[77,27,79,25],[77,32,79,30],[78,6,80,4,"duplex"],[78,12,80,10],[78,13,80,11,"destroy"],[78,20,80,18],[78,21,80,19,"err"],[78,24,80,22],[78,25,80,23],[79,4,81,2],[79,5,81,3],[79,6,81,4],[80,4,83,2,"ws"],[80,6,83,4],[80,7,83,5,"once"],[80,11,83,9],[80,12,83,10],[80,19,83,17],[80,21,83,19],[80,30,83,28,"close"],[80,35,83,33,"close"],[80,36,83,33],[80,38,83,36],[81,6,84,4],[81,10,84,8,"duplex"],[81,16,84,14],[81,17,84,15,"destroyed"],[81,26,84,24],[81,28,84,26],[82,6,86,4,"duplex"],[82,12,86,10],[82,13,86,11,"push"],[82,17,86,15],[82,18,86,16],[82,22,86,20],[82,23,86,21],[83,4,87,2],[83,5,87,3],[83,6,87,4],[84,4,89,2,"duplex"],[84,10,89,8],[84,11,89,9,"_destroy"],[84,19,89,17],[84,22,89,20],[84,32,89,30,"err"],[84,35,89,33],[84,37,89,35,"callback"],[84,45,89,43],[84,47,89,45],[85,6,90,4],[85,10,90,8,"ws"],[85,12,90,10],[85,13,90,11,"readyState"],[85,23,90,21],[85,28,90,26,"ws"],[85,30,90,28],[85,31,90,29,"CLOSED"],[85,37,90,35],[85,39,90,37],[86,8,91,6,"callback"],[86,16,91,14],[86,17,91,15,"err"],[86,20,91,18],[86,21,91,19],[87,8,92,6,"process"],[87,15,92,13],[87,16,92,14,"nextTick"],[87,24,92,22],[87,25,92,23,"emitClose"],[87,34,92,32],[87,36,92,34,"duplex"],[87,42,92,40],[87,43,92,41],[88,8,93,6],[89,6,94,4],[90,6,96,4],[90,10,96,8,"called"],[90,16,96,14],[90,19,96,17],[90,24,96,22],[91,6,98,4,"ws"],[91,8,98,6],[91,9,98,7,"once"],[91,13,98,11],[91,14,98,12],[91,21,98,19],[91,23,98,21],[91,32,98,30,"error"],[91,37,98,35,"error"],[91,38,98,36,"err"],[91,41,98,39],[91,43,98,41],[92,8,99,6,"called"],[92,14,99,12],[92,17,99,15],[92,21,99,19],[93,8,100,6,"callback"],[93,16,100,14],[93,17,100,15,"err"],[93,20,100,18],[93,21,100,19],[94,6,101,4],[94,7,101,5],[94,8,101,6],[95,6,103,4,"ws"],[95,8,103,6],[95,9,103,7,"once"],[95,13,103,11],[95,14,103,12],[95,21,103,19],[95,23,103,21],[95,32,103,30,"close"],[95,37,103,35,"close"],[95,38,103,35],[95,40,103,38],[96,8,104,6],[96,12,104,10],[96,13,104,11,"called"],[96,19,104,17],[96,21,104,19,"callback"],[96,29,104,27],[96,30,104,28,"err"],[96,33,104,31],[96,34,104,32],[97,8,105,6,"process"],[97,15,105,13],[97,16,105,14,"nextTick"],[97,24,105,22],[97,25,105,23,"emitClose"],[97,34,105,32],[97,36,105,34,"duplex"],[97,42,105,40],[97,43,105,41],[98,6,106,4],[98,7,106,5],[98,8,106,6],[99,6,108,4],[99,10,108,8,"terminateOnDestroy"],[99,28,108,26],[99,30,108,28,"ws"],[99,32,108,30],[99,33,108,31,"terminate"],[99,42,108,40],[99,43,108,41],[99,44,108,42],[100,4,109,2],[100,5,109,3],[101,4,111,2,"duplex"],[101,10,111,8],[101,11,111,9,"_final"],[101,17,111,15],[101,20,111,18],[101,30,111,28,"callback"],[101,38,111,36],[101,40,111,38],[102,6,112,4],[102,10,112,8,"ws"],[102,12,112,10],[102,13,112,11,"readyState"],[102,23,112,21],[102,28,112,26,"ws"],[102,30,112,28],[102,31,112,29,"CONNECTING"],[102,41,112,39],[102,43,112,41],[103,8,113,6,"ws"],[103,10,113,8],[103,11,113,9,"once"],[103,15,113,13],[103,16,113,14],[103,22,113,20],[103,24,113,22],[103,33,113,31,"open"],[103,37,113,35,"open"],[103,38,113,35],[103,40,113,38],[104,10,114,8,"duplex"],[104,16,114,14],[104,17,114,15,"_final"],[104,23,114,21],[104,24,114,22,"callback"],[104,32,114,30],[104,33,114,31],[105,8,115,6],[105,9,115,7],[105,10,115,8],[106,8,116,6],[107,6,117,4],[109,6,119,4],[110,6,120,4],[111,6,121,4],[112,6,122,4],[113,6,123,4],[113,10,123,8,"ws"],[113,12,123,10],[113,13,123,11,"_socket"],[113,20,123,18],[113,25,123,23],[113,29,123,27],[113,31,123,29],[114,6,125,4],[114,10,125,8,"ws"],[114,12,125,10],[114,13,125,11,"_socket"],[114,20,125,18],[114,21,125,19,"_writableState"],[114,35,125,33],[114,36,125,34,"finished"],[114,44,125,42],[114,46,125,44],[115,8,126,6,"callback"],[115,16,126,14],[115,17,126,15],[115,18,126,16],[116,8,127,6],[116,12,127,10,"duplex"],[116,18,127,16],[116,19,127,17,"_readableState"],[116,33,127,31],[116,34,127,32,"endEmitted"],[116,44,127,42],[116,46,127,44,"duplex"],[116,52,127,50],[116,53,127,51,"destroy"],[116,60,127,58],[116,61,127,59],[116,62,127,60],[117,6,128,4],[117,7,128,5],[117,13,128,11],[118,8,129,6,"ws"],[118,10,129,8],[118,11,129,9,"_socket"],[118,18,129,16],[118,19,129,17,"once"],[118,23,129,21],[118,24,129,22],[118,32,129,30],[118,34,129,32],[118,43,129,41,"finish"],[118,49,129,47,"finish"],[118,50,129,47],[118,52,129,50],[119,10,130,8],[120,10,131,8],[121,10,132,8],[122,10,133,8,"callback"],[122,18,133,16],[122,19,133,17],[122,20,133,18],[123,8,134,6],[123,9,134,7],[123,10,134,8],[124,8,135,6,"ws"],[124,10,135,8],[124,11,135,9,"close"],[124,16,135,14],[124,17,135,15],[124,18,135,16],[125,6,136,4],[126,4,137,2],[126,5,137,3],[127,4,139,2,"duplex"],[127,10,139,8],[127,11,139,9,"_read"],[127,16,139,14],[127,19,139,17],[127,31,139,29],[128,6,140,4],[128,10,140,8,"ws"],[128,12,140,10],[128,13,140,11,"isPaused"],[128,21,140,19],[128,23,140,21,"ws"],[128,25,140,23],[128,26,140,24,"resume"],[128,32,140,30],[128,33,140,31],[128,34,140,32],[129,4,141,2],[129,5,141,3],[130,4,143,2,"duplex"],[130,10,143,8],[130,11,143,9,"_write"],[130,17,143,15],[130,20,143,18],[130,30,143,28,"chunk"],[130,35,143,33],[130,37,143,35,"encoding"],[130,45,143,43],[130,47,143,45,"callback"],[130,55,143,53],[130,57,143,55],[131,6,144,4],[131,10,144,8,"ws"],[131,12,144,10],[131,13,144,11,"readyState"],[131,23,144,21],[131,28,144,26,"ws"],[131,30,144,28],[131,31,144,29,"CONNECTING"],[131,41,144,39],[131,43,144,41],[132,8,145,6,"ws"],[132,10,145,8],[132,11,145,9,"once"],[132,15,145,13],[132,16,145,14],[132,22,145,20],[132,24,145,22],[132,33,145,31,"open"],[132,37,145,35,"open"],[132,38,145,35],[132,40,145,38],[133,10,146,8,"duplex"],[133,16,146,14],[133,17,146,15,"_write"],[133,23,146,21],[133,24,146,22,"chunk"],[133,29,146,27],[133,31,146,29,"encoding"],[133,39,146,37],[133,41,146,39,"callback"],[133,49,146,47],[133,50,146,48],[134,8,147,6],[134,9,147,7],[134,10,147,8],[135,8,148,6],[136,6,149,4],[137,6,151,4,"ws"],[137,8,151,6],[137,9,151,7,"send"],[137,13,151,11],[137,14,151,12,"chunk"],[137,19,151,17],[137,21,151,19,"callback"],[137,29,151,27],[137,30,151,28],[138,4,152,2],[138,5,152,3],[139,4,154,2,"duplex"],[139,10,154,8],[139,11,154,9,"on"],[139,13,154,11],[139,14,154,12],[139,19,154,17],[139,21,154,19,"duplexOnEnd"],[139,32,154,30],[139,33,154,31],[140,4,155,2,"duplex"],[140,10,155,8],[140,11,155,9,"on"],[140,13,155,11],[140,14,155,12],[140,21,155,19],[140,23,155,21,"duplexOnError"],[140,36,155,34],[140,37,155,35],[141,4,156,2],[141,11,156,9,"duplex"],[141,17,156,15],[142,2,157,0],[143,2,159,0,"module"],[143,8,159,6],[143,9,159,7,"exports"],[143,16,159,14],[143,19,159,17,"createWebSocketStream"],[143,40,159,38],[144,0,159,39],[144,3]],"functionMap":{"names":["<global>","emitClose","duplexOnEnd","duplexOnError","createWebSocketStream","message","error","close","duplex._destroy","duplex._final","open","finish","duplex._read","duplex._write"],"mappings":"AAA;ACU;CDE;AEO;CFI;AGQ;CHO;AIU;mBCW;GDK;mBEE;GFc;mBGE;GHI;oBIE;qBFS;KEG;qBDE;KCG;GJG;kBKE;sBCE;ODE;gCEc;OFK;GLG;iBQE;GRE;kBSE;sBHE;OGE;GTK;CJK"},"hasCjsExports":true},"type":"js/module"}]}