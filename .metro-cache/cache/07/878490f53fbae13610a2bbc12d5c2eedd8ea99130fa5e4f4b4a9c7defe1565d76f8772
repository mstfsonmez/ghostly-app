{"dependencies":[{"name":"@socket.io/component-emitter","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":55,"index":55}}],"key":"nWmouVdWEVSQD2UwM6teY1JyKBM=","exportNames":["*"],"imports":1}},{"name":"./binary.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":56},"end":{"line":2,"column":67,"index":123}}],"key":"n3k3ricg147CfAsjRPov5+2UD6U=","exportNames":["*"],"imports":1}},{"name":"./is-binary.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":124},"end":{"line":3,"column":53,"index":177}}],"key":"nI6Cd4R9sJDIQIUaBK8/eqMqCAI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"protocol\", {\n    enumerable: true,\n    get: function () {\n      return protocol;\n    }\n  });\n  Object.defineProperty(exports, \"PacketType\", {\n    enumerable: true,\n    get: function () {\n      return PacketType;\n    }\n  });\n  Object.defineProperty(exports, \"Encoder\", {\n    enumerable: true,\n    get: function () {\n      return Encoder;\n    }\n  });\n  Object.defineProperty(exports, \"Decoder\", {\n    enumerable: true,\n    get: function () {\n      return Decoder;\n    }\n  });\n  var _socketIoComponentEmitter = require(_dependencyMap[0], \"@socket.io/component-emitter\");\n  var _binaryJs = require(_dependencyMap[1], \"./binary.js\");\n  var _isBinaryJs = require(_dependencyMap[2], \"./is-binary.js\");\n  /**\n   * These strings must not be used as event names, as they have a special meaning.\n   */\n  const RESERVED_EVENTS = [\"connect\", \"connect_error\", \"disconnect\", \"disconnecting\", \"newListener\", \"removeListener\" // used by the Node.js EventEmitter\n  ];\n  /**\n   * Protocol version.\n   *\n   * @public\n   */\n  const protocol = 5;\n  var PacketType;\n  (function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n  })(PacketType || (PacketType = {}));\n  /**\n   * A socket.io Encoder instance\n   */\n  class Encoder {\n    /**\n     * Encoder constructor\n     *\n     * @param {function} replacer - custom replacer to pass down to JSON.parse\n     */\n    constructor(replacer) {\n      this.replacer = replacer;\n    }\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    encode(obj) {\n      if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n        if ((0, _isBinaryJs.hasBinary)(obj)) {\n          return this.encodeAsBinary({\n            type: obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK,\n            nsp: obj.nsp,\n            data: obj.data,\n            id: obj.id\n          });\n        }\n      }\n      return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n    encodeAsString(obj) {\n      // first is type\n      let str = \"\" + obj.type;\n      // attachments if we have them\n      if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {\n        str += obj.attachments + \"-\";\n      }\n      // if we have a namespace other than `/`\n      // we append it followed by a comma `,`\n      if (obj.nsp && \"/\" !== obj.nsp) {\n        str += obj.nsp + \",\";\n      }\n      // immediately followed by the id\n      if (null != obj.id) {\n        str += obj.id;\n      }\n      // json data\n      if (null != obj.data) {\n        str += JSON.stringify(obj.data, this.replacer);\n      }\n      return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n    encodeAsBinary(obj) {\n      const deconstruction = (0, _binaryJs.deconstructPacket)(obj);\n      const pack = this.encodeAsString(deconstruction.packet);\n      const buffers = deconstruction.buffers;\n      buffers.unshift(pack); // add packet info to beginning of data list\n      return buffers; // write all the buffers\n    }\n  }\n  // see https://stackoverflow.com/questions/8511281/check-if-a-value-is-an-object-in-javascript\n  function isObject(value) {\n    return Object.prototype.toString.call(value) === \"[object Object]\";\n  }\n  /**\n   * A socket.io Decoder instance\n   *\n   * @return {Object} decoder\n   */\n  class Decoder extends _socketIoComponentEmitter.Emitter {\n    /**\n     * Decoder constructor\n     *\n     * @param {function} reviver - custom reviver to pass down to JSON.stringify\n     */\n    constructor(reviver) {\n      super();\n      this.reviver = reviver;\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    add(obj) {\n      let packet;\n      if (typeof obj === \"string\") {\n        if (this.reconstructor) {\n          throw new Error(\"got plaintext data when reconstructing a packet\");\n        }\n        packet = this.decodeString(obj);\n        const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;\n        if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {\n          packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;\n          // binary packet's json\n          this.reconstructor = new BinaryReconstructor(packet);\n          // no attachments, labeled binary but no binary data to follow\n          if (packet.attachments === 0) {\n            super.emitReserved(\"decoded\", packet);\n          }\n        } else {\n          // non-binary full packet\n          super.emitReserved(\"decoded\", packet);\n        }\n      } else if ((0, _isBinaryJs.isBinary)(obj) || obj.base64) {\n        // raw binary data\n        if (!this.reconstructor) {\n          throw new Error(\"got binary data when not reconstructing a packet\");\n        } else {\n          packet = this.reconstructor.takeBinaryData(obj);\n          if (packet) {\n            // received final buffer\n            this.reconstructor = null;\n            super.emitReserved(\"decoded\", packet);\n          }\n        }\n      } else {\n        throw new Error(\"Unknown type: \" + obj);\n      }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n    decodeString(str) {\n      let i = 0;\n      // look up type\n      const p = {\n        type: Number(str.charAt(0))\n      };\n      if (PacketType[p.type] === undefined) {\n        throw new Error(\"unknown packet type \" + p.type);\n      }\n      // look up attachments if type binary\n      if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {\n        const start = i + 1;\n        while (str.charAt(++i) !== \"-\" && i != str.length) {}\n        const buf = str.substring(start, i);\n        if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n          throw new Error(\"Illegal attachments\");\n        }\n        p.attachments = Number(buf);\n      }\n      // look up namespace (if any)\n      if (\"/\" === str.charAt(i + 1)) {\n        const start = i + 1;\n        while (++i) {\n          const c = str.charAt(i);\n          if (\",\" === c) break;\n          if (i === str.length) break;\n        }\n        p.nsp = str.substring(start, i);\n      } else {\n        p.nsp = \"/\";\n      }\n      // look up id\n      const next = str.charAt(i + 1);\n      if (\"\" !== next && Number(next) == next) {\n        const start = i + 1;\n        while (++i) {\n          const c = str.charAt(i);\n          if (null == c || Number(c) != c) {\n            --i;\n            break;\n          }\n          if (i === str.length) break;\n        }\n        p.id = Number(str.substring(start, i + 1));\n      }\n      // look up json data\n      if (str.charAt(++i)) {\n        const payload = this.tryParse(str.substr(i));\n        if (Decoder.isPayloadValid(p.type, payload)) {\n          p.data = payload;\n        } else {\n          throw new Error(\"invalid payload\");\n        }\n      }\n      return p;\n    }\n    tryParse(str) {\n      try {\n        return JSON.parse(str, this.reviver);\n      } catch (e) {\n        return false;\n      }\n    }\n    static isPayloadValid(type, payload) {\n      switch (type) {\n        case PacketType.CONNECT:\n          return isObject(payload);\n        case PacketType.DISCONNECT:\n          return payload === undefined;\n        case PacketType.CONNECT_ERROR:\n          return typeof payload === \"string\" || isObject(payload);\n        case PacketType.EVENT:\n        case PacketType.BINARY_EVENT:\n          return Array.isArray(payload) && (typeof payload[0] === \"number\" || typeof payload[0] === \"string\" && RESERVED_EVENTS.indexOf(payload[0]) === -1);\n        case PacketType.ACK:\n        case PacketType.BINARY_ACK:\n          return Array.isArray(payload);\n      }\n    }\n    /**\n     * Deallocates a parser's resources\n     */\n    destroy() {\n      if (this.reconstructor) {\n        this.reconstructor.finishedReconstruction();\n        this.reconstructor = null;\n      }\n    }\n  }\n  /**\n   * A manager of a binary event's 'buffer sequence'. Should\n   * be constructed whenever a packet of type BINARY_EVENT is\n   * decoded.\n   *\n   * @param {Object} packet\n   * @return {BinaryReconstructor} initialized reconstructor\n   */\n  class BinaryReconstructor {\n    constructor(packet) {\n      this.packet = packet;\n      this.buffers = [];\n      this.reconPack = packet;\n    }\n    /**\n     * Method to be called when binary data received from connection\n     * after a BINARY_EVENT packet.\n     *\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n     * @return {null | Object} returns null if more binary data is expected or\n     *   a reconstructed packet object if all buffers have been received.\n     */\n    takeBinaryData(binData) {\n      this.buffers.push(binData);\n      if (this.buffers.length === this.reconPack.attachments) {\n        // done with buffer list\n        const packet = (0, _binaryJs.reconstructPacket)(this.reconPack, this.buffers);\n        this.finishedReconstruction();\n        return packet;\n      }\n      return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n    finishedReconstruction() {\n      this.reconPack = null;\n      this.buffers = [];\n    }\n  }\n});","lineCount":319,"map":[[7,2,20,0,"Object"],[7,8,20,0],[7,9,20,0,"defineProperty"],[7,23,20,0],[7,24,20,0,"exports"],[7,31,20,0],[8,4,20,0,"enumerable"],[8,14,20,0],[9,4,20,0,"get"],[9,7,20,0],[9,18,20,0,"get"],[9,19,20,0],[10,6,20,0],[10,13,20,0,"protocol"],[10,21,20,0],[11,4,20,0],[12,2,20,0],[13,2,21,0,"Object"],[13,8,21,0],[13,9,21,0,"defineProperty"],[13,23,21,0],[13,24,21,0,"exports"],[13,31,21,0],[14,4,21,0,"enumerable"],[14,14,21,0],[15,4,21,0,"get"],[15,7,21,0],[15,18,21,0,"get"],[15,19,21,0],[16,6,21,0],[16,13,21,0,"PacketType"],[16,23,21,0],[17,4,21,0],[18,2,21,0],[19,2,34,0,"Object"],[19,8,34,0],[19,9,34,0,"defineProperty"],[19,23,34,0],[19,24,34,0,"exports"],[19,31,34,0],[20,4,34,0,"enumerable"],[20,14,34,0],[21,4,34,0,"get"],[21,7,34,0],[21,18,34,0,"get"],[21,19,34,0],[22,6,34,0],[22,13,34,0,"Encoder"],[22,20,34,0],[23,4,34,0],[24,2,34,0],[25,2,112,0,"Object"],[25,8,112,0],[25,9,112,0,"defineProperty"],[25,23,112,0],[25,24,112,0,"exports"],[25,31,112,0],[26,4,112,0,"enumerable"],[26,14,112,0],[27,4,112,0,"get"],[27,7,112,0],[27,18,112,0,"get"],[27,19,112,0],[28,6,112,0],[28,13,112,0,"Decoder"],[28,20,112,0],[29,4,112,0],[30,2,112,0],[31,2,1,0],[31,6,1,0,"_socketIoComponentEmitter"],[31,31,1,0],[31,34,1,0,"require"],[31,41,1,0],[31,42,1,0,"_dependencyMap"],[31,56,1,0],[32,2,2,0],[32,6,2,0,"_binaryJs"],[32,15,2,0],[32,18,2,0,"require"],[32,25,2,0],[32,26,2,0,"_dependencyMap"],[32,40,2,0],[33,2,3,0],[33,6,3,0,"_isBinaryJs"],[33,17,3,0],[33,20,3,0,"require"],[33,27,3,0],[33,28,3,0,"_dependencyMap"],[33,42,3,0],[34,2,4,0],[35,0,5,0],[36,0,6,0],[37,2,7,0],[37,8,7,6,"RESERVED_EVENTS"],[37,23,7,21],[37,26,7,24],[37,27,8,4],[37,36,8,13],[37,38,9,4],[37,53,9,19],[37,55,10,4],[37,67,10,16],[37,69,11,4],[37,84,11,19],[37,86,12,4],[37,99,12,17],[37,101,13,4],[37,117,13,20],[37,118,13,22],[38,2,13,22],[38,3,14,1],[39,2,15,0],[40,0,16,0],[41,0,17,0],[42,0,18,0],[43,0,19,0],[44,2,20,7],[44,8,20,13,"protocol"],[44,16,20,21],[44,19,20,24],[44,20,20,25],[45,2,21,7],[45,6,21,11,"PacketType"],[45,16,21,21],[46,2,22,0],[46,3,22,1],[46,13,22,11,"PacketType"],[46,23,22,21],[46,25,22,23],[47,4,23,4,"PacketType"],[47,14,23,14],[47,15,23,15,"PacketType"],[47,25,23,25],[47,26,23,26],[47,35,23,35],[47,36,23,36],[47,39,23,39],[47,40,23,40],[47,41,23,41],[47,44,23,44],[47,53,23,53],[48,4,24,4,"PacketType"],[48,14,24,14],[48,15,24,15,"PacketType"],[48,25,24,25],[48,26,24,26],[48,38,24,38],[48,39,24,39],[48,42,24,42],[48,43,24,43],[48,44,24,44],[48,47,24,47],[48,59,24,59],[49,4,25,4,"PacketType"],[49,14,25,14],[49,15,25,15,"PacketType"],[49,25,25,25],[49,26,25,26],[49,33,25,33],[49,34,25,34],[49,37,25,37],[49,38,25,38],[49,39,25,39],[49,42,25,42],[49,49,25,49],[50,4,26,4,"PacketType"],[50,14,26,14],[50,15,26,15,"PacketType"],[50,25,26,25],[50,26,26,26],[50,31,26,31],[50,32,26,32],[50,35,26,35],[50,36,26,36],[50,37,26,37],[50,40,26,40],[50,45,26,45],[51,4,27,4,"PacketType"],[51,14,27,14],[51,15,27,15,"PacketType"],[51,25,27,25],[51,26,27,26],[51,41,27,41],[51,42,27,42],[51,45,27,45],[51,46,27,46],[51,47,27,47],[51,50,27,50],[51,65,27,65],[52,4,28,4,"PacketType"],[52,14,28,14],[52,15,28,15,"PacketType"],[52,25,28,25],[52,26,28,26],[52,40,28,40],[52,41,28,41],[52,44,28,44],[52,45,28,45],[52,46,28,46],[52,49,28,49],[52,63,28,63],[53,4,29,4,"PacketType"],[53,14,29,14],[53,15,29,15,"PacketType"],[53,25,29,25],[53,26,29,26],[53,38,29,38],[53,39,29,39],[53,42,29,42],[53,43,29,43],[53,44,29,44],[53,47,29,47],[53,59,29,59],[54,2,30,0],[54,3,30,1],[54,5,30,3,"PacketType"],[54,15,30,13],[54,20,30,18,"PacketType"],[54,30,30,28],[54,33,30,31],[54,34,30,32],[54,35,30,33],[54,36,30,34],[54,37,30,35],[55,2,31,0],[56,0,32,0],[57,0,33,0],[58,2,34,7],[58,8,34,13,"Encoder"],[58,15,34,20],[58,16,34,21],[59,4,35,4],[60,0,36,0],[61,0,37,0],[62,0,38,0],[63,0,39,0],[64,4,40,4,"constructor"],[64,15,40,15,"constructor"],[64,16,40,16,"replacer"],[64,24,40,24],[64,26,40,26],[65,6,41,8],[65,10,41,12],[65,11,41,13,"replacer"],[65,19,41,21],[65,22,41,24,"replacer"],[65,30,41,32],[66,4,42,4],[67,4,43,4],[68,0,44,0],[69,0,45,0],[70,0,46,0],[71,0,47,0],[72,0,48,0],[73,4,49,4,"encode"],[73,10,49,10,"encode"],[73,11,49,11,"obj"],[73,14,49,14],[73,16,49,16],[74,6,50,8],[74,10,50,12,"obj"],[74,13,50,15],[74,14,50,16,"type"],[74,18,50,20],[74,23,50,25,"PacketType"],[74,33,50,35],[74,34,50,36,"EVENT"],[74,39,50,41],[74,43,50,45,"obj"],[74,46,50,48],[74,47,50,49,"type"],[74,51,50,53],[74,56,50,58,"PacketType"],[74,66,50,68],[74,67,50,69,"ACK"],[74,70,50,72],[74,72,50,74],[75,8,51,12],[75,12,51,16],[75,16,51,16,"hasBinary"],[75,27,51,25],[75,28,51,25,"hasBinary"],[75,37,51,25],[75,39,51,26,"obj"],[75,42,51,29],[75,43,51,30],[75,45,51,32],[76,10,52,16],[76,17,52,23],[76,21,52,27],[76,22,52,28,"encodeAsBinary"],[76,36,52,42],[76,37,52,43],[77,12,53,20,"type"],[77,16,53,24],[77,18,53,26,"obj"],[77,21,53,29],[77,22,53,30,"type"],[77,26,53,34],[77,31,53,39,"PacketType"],[77,41,53,49],[77,42,53,50,"EVENT"],[77,47,53,55],[77,50,54,26,"PacketType"],[77,60,54,36],[77,61,54,37,"BINARY_EVENT"],[77,73,54,49],[77,76,55,26,"PacketType"],[77,86,55,36],[77,87,55,37,"BINARY_ACK"],[77,97,55,47],[78,12,56,20,"nsp"],[78,15,56,23],[78,17,56,25,"obj"],[78,20,56,28],[78,21,56,29,"nsp"],[78,24,56,32],[79,12,57,20,"data"],[79,16,57,24],[79,18,57,26,"obj"],[79,21,57,29],[79,22,57,30,"data"],[79,26,57,34],[80,12,58,20,"id"],[80,14,58,22],[80,16,58,24,"obj"],[80,19,58,27],[80,20,58,28,"id"],[81,10,59,16],[81,11,59,17],[81,12,59,18],[82,8,60,12],[83,6,61,8],[84,6,62,8],[84,13,62,15],[84,14,62,16],[84,18,62,20],[84,19,62,21,"encodeAsString"],[84,33,62,35],[84,34,62,36,"obj"],[84,37,62,39],[84,38,62,40],[84,39,62,41],[85,4,63,4],[86,4,64,4],[87,0,65,0],[88,0,66,0],[89,4,67,4,"encodeAsString"],[89,18,67,18,"encodeAsString"],[89,19,67,19,"obj"],[89,22,67,22],[89,24,67,24],[90,6,68,8],[91,6,69,8],[91,10,69,12,"str"],[91,13,69,15],[91,16,69,18],[91,18,69,20],[91,21,69,23,"obj"],[91,24,69,26],[91,25,69,27,"type"],[91,29,69,31],[92,6,70,8],[93,6,71,8],[93,10,71,12,"obj"],[93,13,71,15],[93,14,71,16,"type"],[93,18,71,20],[93,23,71,25,"PacketType"],[93,33,71,35],[93,34,71,36,"BINARY_EVENT"],[93,46,71,48],[93,50,72,12,"obj"],[93,53,72,15],[93,54,72,16,"type"],[93,58,72,20],[93,63,72,25,"PacketType"],[93,73,72,35],[93,74,72,36,"BINARY_ACK"],[93,84,72,46],[93,86,72,48],[94,8,73,12,"str"],[94,11,73,15],[94,15,73,19,"obj"],[94,18,73,22],[94,19,73,23,"attachments"],[94,30,73,34],[94,33,73,37],[94,36,73,40],[95,6,74,8],[96,6,75,8],[97,6,76,8],[98,6,77,8],[98,10,77,12,"obj"],[98,13,77,15],[98,14,77,16,"nsp"],[98,17,77,19],[98,21,77,23],[98,24,77,26],[98,29,77,31,"obj"],[98,32,77,34],[98,33,77,35,"nsp"],[98,36,77,38],[98,38,77,40],[99,8,78,12,"str"],[99,11,78,15],[99,15,78,19,"obj"],[99,18,78,22],[99,19,78,23,"nsp"],[99,22,78,26],[99,25,78,29],[99,28,78,32],[100,6,79,8],[101,6,80,8],[102,6,81,8],[102,10,81,12],[102,14,81,16],[102,18,81,20,"obj"],[102,21,81,23],[102,22,81,24,"id"],[102,24,81,26],[102,26,81,28],[103,8,82,12,"str"],[103,11,82,15],[103,15,82,19,"obj"],[103,18,82,22],[103,19,82,23,"id"],[103,21,82,25],[104,6,83,8],[105,6,84,8],[106,6,85,8],[106,10,85,12],[106,14,85,16],[106,18,85,20,"obj"],[106,21,85,23],[106,22,85,24,"data"],[106,26,85,28],[106,28,85,30],[107,8,86,12,"str"],[107,11,86,15],[107,15,86,19,"JSON"],[107,19,86,23],[107,20,86,24,"stringify"],[107,29,86,33],[107,30,86,34,"obj"],[107,33,86,37],[107,34,86,38,"data"],[107,38,86,42],[107,40,86,44],[107,44,86,48],[107,45,86,49,"replacer"],[107,53,86,57],[107,54,86,58],[108,6,87,8],[109,6,88,8],[109,13,88,15,"str"],[109,16,88,18],[110,4,89,4],[111,4,90,4],[112,0,91,0],[113,0,92,0],[114,0,93,0],[115,0,94,0],[116,4,95,4,"encodeAsBinary"],[116,18,95,18,"encodeAsBinary"],[116,19,95,19,"obj"],[116,22,95,22],[116,24,95,24],[117,6,96,8],[117,12,96,14,"deconstruction"],[117,26,96,28],[117,29,96,31],[117,33,96,31,"deconstructPacket"],[117,42,96,48],[117,43,96,48,"deconstructPacket"],[117,60,96,48],[117,62,96,49,"obj"],[117,65,96,52],[117,66,96,53],[118,6,97,8],[118,12,97,14,"pack"],[118,16,97,18],[118,19,97,21],[118,23,97,25],[118,24,97,26,"encodeAsString"],[118,38,97,40],[118,39,97,41,"deconstruction"],[118,53,97,55],[118,54,97,56,"packet"],[118,60,97,62],[118,61,97,63],[119,6,98,8],[119,12,98,14,"buffers"],[119,19,98,21],[119,22,98,24,"deconstruction"],[119,36,98,38],[119,37,98,39,"buffers"],[119,44,98,46],[120,6,99,8,"buffers"],[120,13,99,15],[120,14,99,16,"unshift"],[120,21,99,23],[120,22,99,24,"pack"],[120,26,99,28],[120,27,99,29],[120,28,99,30],[120,29,99,31],[121,6,100,8],[121,13,100,15,"buffers"],[121,20,100,22],[121,21,100,23],[121,22,100,24],[122,4,101,4],[123,2,102,0],[124,2,103,0],[125,2,104,0],[125,11,104,9,"isObject"],[125,19,104,17,"isObject"],[125,20,104,18,"value"],[125,25,104,23],[125,27,104,25],[126,4,105,4],[126,11,105,11,"Object"],[126,17,105,17],[126,18,105,18,"prototype"],[126,27,105,27],[126,28,105,28,"toString"],[126,36,105,36],[126,37,105,37,"call"],[126,41,105,41],[126,42,105,42,"value"],[126,47,105,47],[126,48,105,48],[126,53,105,53],[126,70,105,70],[127,2,106,0],[128,2,107,0],[129,0,108,0],[130,0,109,0],[131,0,110,0],[132,0,111,0],[133,2,112,7],[133,8,112,13,"Decoder"],[133,15,112,20],[133,24,112,29,"Emitter"],[133,49,112,36],[133,50,112,36,"Emitter"],[133,57,112,36],[133,58,112,37],[134,4,113,4],[135,0,114,0],[136,0,115,0],[137,0,116,0],[138,0,117,0],[139,4,118,4,"constructor"],[139,15,118,15,"constructor"],[139,16,118,16,"reviver"],[139,23,118,23],[139,25,118,25],[140,6,119,8],[140,11,119,13],[140,12,119,14],[140,13,119,15],[141,6,120,8],[141,10,120,12],[141,11,120,13,"reviver"],[141,18,120,20],[141,21,120,23,"reviver"],[141,28,120,30],[142,4,121,4],[143,4,122,4],[144,0,123,0],[145,0,124,0],[146,0,125,0],[147,0,126,0],[148,4,127,4,"add"],[148,7,127,7,"add"],[148,8,127,8,"obj"],[148,11,127,11],[148,13,127,13],[149,6,128,8],[149,10,128,12,"packet"],[149,16,128,18],[150,6,129,8],[150,10,129,12],[150,17,129,19,"obj"],[150,20,129,22],[150,25,129,27],[150,33,129,35],[150,35,129,37],[151,8,130,12],[151,12,130,16],[151,16,130,20],[151,17,130,21,"reconstructor"],[151,30,130,34],[151,32,130,36],[152,10,131,16],[152,16,131,22],[152,20,131,26,"Error"],[152,25,131,31],[152,26,131,32],[152,75,131,81],[152,76,131,82],[153,8,132,12],[154,8,133,12,"packet"],[154,14,133,18],[154,17,133,21],[154,21,133,25],[154,22,133,26,"decodeString"],[154,34,133,38],[154,35,133,39,"obj"],[154,38,133,42],[154,39,133,43],[155,8,134,12],[155,14,134,18,"isBinaryEvent"],[155,27,134,31],[155,30,134,34,"packet"],[155,36,134,40],[155,37,134,41,"type"],[155,41,134,45],[155,46,134,50,"PacketType"],[155,56,134,60],[155,57,134,61,"BINARY_EVENT"],[155,69,134,73],[156,8,135,12],[156,12,135,16,"isBinaryEvent"],[156,25,135,29],[156,29,135,33,"packet"],[156,35,135,39],[156,36,135,40,"type"],[156,40,135,44],[156,45,135,49,"PacketType"],[156,55,135,59],[156,56,135,60,"BINARY_ACK"],[156,66,135,70],[156,68,135,72],[157,10,136,16,"packet"],[157,16,136,22],[157,17,136,23,"type"],[157,21,136,27],[157,24,136,30,"isBinaryEvent"],[157,37,136,43],[157,40,136,46,"PacketType"],[157,50,136,56],[157,51,136,57,"EVENT"],[157,56,136,62],[157,59,136,65,"PacketType"],[157,69,136,75],[157,70,136,76,"ACK"],[157,73,136,79],[158,10,137,16],[159,10,138,16],[159,14,138,20],[159,15,138,21,"reconstructor"],[159,28,138,34],[159,31,138,37],[159,35,138,41,"BinaryReconstructor"],[159,54,138,60],[159,55,138,61,"packet"],[159,61,138,67],[159,62,138,68],[160,10,139,16],[161,10,140,16],[161,14,140,20,"packet"],[161,20,140,26],[161,21,140,27,"attachments"],[161,32,140,38],[161,37,140,43],[161,38,140,44],[161,40,140,46],[162,12,141,20],[162,17,141,25],[162,18,141,26,"emitReserved"],[162,30,141,38],[162,31,141,39],[162,40,141,48],[162,42,141,50,"packet"],[162,48,141,56],[162,49,141,57],[163,10,142,16],[164,8,143,12],[164,9,143,13],[164,15,144,17],[165,10,145,16],[166,10,146,16],[166,15,146,21],[166,16,146,22,"emitReserved"],[166,28,146,34],[166,29,146,35],[166,38,146,44],[166,40,146,46,"packet"],[166,46,146,52],[166,47,146,53],[167,8,147,12],[168,6,148,8],[168,7,148,9],[168,13,149,13],[168,17,149,17],[168,21,149,17,"isBinary"],[168,32,149,25],[168,33,149,25,"isBinary"],[168,41,149,25],[168,43,149,26,"obj"],[168,46,149,29],[168,47,149,30],[168,51,149,34,"obj"],[168,54,149,37],[168,55,149,38,"base64"],[168,61,149,44],[168,63,149,46],[169,8,150,12],[170,8,151,12],[170,12,151,16],[170,13,151,17],[170,17,151,21],[170,18,151,22,"reconstructor"],[170,31,151,35],[170,33,151,37],[171,10,152,16],[171,16,152,22],[171,20,152,26,"Error"],[171,25,152,31],[171,26,152,32],[171,76,152,82],[171,77,152,83],[172,8,153,12],[172,9,153,13],[172,15,154,17],[173,10,155,16,"packet"],[173,16,155,22],[173,19,155,25],[173,23,155,29],[173,24,155,30,"reconstructor"],[173,37,155,43],[173,38,155,44,"takeBinaryData"],[173,52,155,58],[173,53,155,59,"obj"],[173,56,155,62],[173,57,155,63],[174,10,156,16],[174,14,156,20,"packet"],[174,20,156,26],[174,22,156,28],[175,12,157,20],[176,12,158,20],[176,16,158,24],[176,17,158,25,"reconstructor"],[176,30,158,38],[176,33,158,41],[176,37,158,45],[177,12,159,20],[177,17,159,25],[177,18,159,26,"emitReserved"],[177,30,159,38],[177,31,159,39],[177,40,159,48],[177,42,159,50,"packet"],[177,48,159,56],[177,49,159,57],[178,10,160,16],[179,8,161,12],[180,6,162,8],[180,7,162,9],[180,13,163,13],[181,8,164,12],[181,14,164,18],[181,18,164,22,"Error"],[181,23,164,27],[181,24,164,28],[181,40,164,44],[181,43,164,47,"obj"],[181,46,164,50],[181,47,164,51],[182,6,165,8],[183,4,166,4],[184,4,167,4],[185,0,168,0],[186,0,169,0],[187,0,170,0],[188,0,171,0],[189,0,172,0],[190,4,173,4,"decodeString"],[190,16,173,16,"decodeString"],[190,17,173,17,"str"],[190,20,173,20],[190,22,173,22],[191,6,174,8],[191,10,174,12,"i"],[191,11,174,13],[191,14,174,16],[191,15,174,17],[192,6,175,8],[193,6,176,8],[193,12,176,14,"p"],[193,13,176,15],[193,16,176,18],[194,8,177,12,"type"],[194,12,177,16],[194,14,177,18,"Number"],[194,20,177,24],[194,21,177,25,"str"],[194,24,177,28],[194,25,177,29,"charAt"],[194,31,177,35],[194,32,177,36],[194,33,177,37],[194,34,177,38],[195,6,178,8],[195,7,178,9],[196,6,179,8],[196,10,179,12,"PacketType"],[196,20,179,22],[196,21,179,23,"p"],[196,22,179,24],[196,23,179,25,"type"],[196,27,179,29],[196,28,179,30],[196,33,179,35,"undefined"],[196,42,179,44],[196,44,179,46],[197,8,180,12],[197,14,180,18],[197,18,180,22,"Error"],[197,23,180,27],[197,24,180,28],[197,46,180,50],[197,49,180,53,"p"],[197,50,180,54],[197,51,180,55,"type"],[197,55,180,59],[197,56,180,60],[198,6,181,8],[199,6,182,8],[200,6,183,8],[200,10,183,12,"p"],[200,11,183,13],[200,12,183,14,"type"],[200,16,183,18],[200,21,183,23,"PacketType"],[200,31,183,33],[200,32,183,34,"BINARY_EVENT"],[200,44,183,46],[200,48,184,12,"p"],[200,49,184,13],[200,50,184,14,"type"],[200,54,184,18],[200,59,184,23,"PacketType"],[200,69,184,33],[200,70,184,34,"BINARY_ACK"],[200,80,184,44],[200,82,184,46],[201,8,185,12],[201,14,185,18,"start"],[201,19,185,23],[201,22,185,26,"i"],[201,23,185,27],[201,26,185,30],[201,27,185,31],[202,8,186,12],[202,15,186,19,"str"],[202,18,186,22],[202,19,186,23,"charAt"],[202,25,186,29],[202,26,186,30],[202,28,186,32,"i"],[202,29,186,33],[202,30,186,34],[202,35,186,39],[202,38,186,42],[202,42,186,46,"i"],[202,43,186,47],[202,47,186,51,"str"],[202,50,186,54],[202,51,186,55,"length"],[202,57,186,61],[202,59,186,63],[202,60,186,65],[203,8,187,12],[203,14,187,18,"buf"],[203,17,187,21],[203,20,187,24,"str"],[203,23,187,27],[203,24,187,28,"substring"],[203,33,187,37],[203,34,187,38,"start"],[203,39,187,43],[203,41,187,45,"i"],[203,42,187,46],[203,43,187,47],[204,8,188,12],[204,12,188,16,"buf"],[204,15,188,19],[204,19,188,23,"Number"],[204,25,188,29],[204,26,188,30,"buf"],[204,29,188,33],[204,30,188,34],[204,34,188,38,"str"],[204,37,188,41],[204,38,188,42,"charAt"],[204,44,188,48],[204,45,188,49,"i"],[204,46,188,50],[204,47,188,51],[204,52,188,56],[204,55,188,59],[204,57,188,61],[205,10,189,16],[205,16,189,22],[205,20,189,26,"Error"],[205,25,189,31],[205,26,189,32],[205,47,189,53],[205,48,189,54],[206,8,190,12],[207,8,191,12,"p"],[207,9,191,13],[207,10,191,14,"attachments"],[207,21,191,25],[207,24,191,28,"Number"],[207,30,191,34],[207,31,191,35,"buf"],[207,34,191,38],[207,35,191,39],[208,6,192,8],[209,6,193,8],[210,6,194,8],[210,10,194,12],[210,13,194,15],[210,18,194,20,"str"],[210,21,194,23],[210,22,194,24,"charAt"],[210,28,194,30],[210,29,194,31,"i"],[210,30,194,32],[210,33,194,35],[210,34,194,36],[210,35,194,37],[210,37,194,39],[211,8,195,12],[211,14,195,18,"start"],[211,19,195,23],[211,22,195,26,"i"],[211,23,195,27],[211,26,195,30],[211,27,195,31],[212,8,196,12],[212,15,196,19],[212,17,196,21,"i"],[212,18,196,22],[212,20,196,24],[213,10,197,16],[213,16,197,22,"c"],[213,17,197,23],[213,20,197,26,"str"],[213,23,197,29],[213,24,197,30,"charAt"],[213,30,197,36],[213,31,197,37,"i"],[213,32,197,38],[213,33,197,39],[214,10,198,16],[214,14,198,20],[214,17,198,23],[214,22,198,28,"c"],[214,23,198,29],[214,25,199,20],[215,10,200,16],[215,14,200,20,"i"],[215,15,200,21],[215,20,200,26,"str"],[215,23,200,29],[215,24,200,30,"length"],[215,30,200,36],[215,32,201,20],[216,8,202,12],[217,8,203,12,"p"],[217,9,203,13],[217,10,203,14,"nsp"],[217,13,203,17],[217,16,203,20,"str"],[217,19,203,23],[217,20,203,24,"substring"],[217,29,203,33],[217,30,203,34,"start"],[217,35,203,39],[217,37,203,41,"i"],[217,38,203,42],[217,39,203,43],[218,6,204,8],[218,7,204,9],[218,13,205,13],[219,8,206,12,"p"],[219,9,206,13],[219,10,206,14,"nsp"],[219,13,206,17],[219,16,206,20],[219,19,206,23],[220,6,207,8],[221,6,208,8],[222,6,209,8],[222,12,209,14,"next"],[222,16,209,18],[222,19,209,21,"str"],[222,22,209,24],[222,23,209,25,"charAt"],[222,29,209,31],[222,30,209,32,"i"],[222,31,209,33],[222,34,209,36],[222,35,209,37],[222,36,209,38],[223,6,210,8],[223,10,210,12],[223,12,210,14],[223,17,210,19,"next"],[223,21,210,23],[223,25,210,27,"Number"],[223,31,210,33],[223,32,210,34,"next"],[223,36,210,38],[223,37,210,39],[223,41,210,43,"next"],[223,45,210,47],[223,47,210,49],[224,8,211,12],[224,14,211,18,"start"],[224,19,211,23],[224,22,211,26,"i"],[224,23,211,27],[224,26,211,30],[224,27,211,31],[225,8,212,12],[225,15,212,19],[225,17,212,21,"i"],[225,18,212,22],[225,20,212,24],[226,10,213,16],[226,16,213,22,"c"],[226,17,213,23],[226,20,213,26,"str"],[226,23,213,29],[226,24,213,30,"charAt"],[226,30,213,36],[226,31,213,37,"i"],[226,32,213,38],[226,33,213,39],[227,10,214,16],[227,14,214,20],[227,18,214,24],[227,22,214,28,"c"],[227,23,214,29],[227,27,214,33,"Number"],[227,33,214,39],[227,34,214,40,"c"],[227,35,214,41],[227,36,214,42],[227,40,214,46,"c"],[227,41,214,47],[227,43,214,49],[228,12,215,20],[228,14,215,22,"i"],[228,15,215,23],[229,12,216,20],[230,10,217,16],[231,10,218,16],[231,14,218,20,"i"],[231,15,218,21],[231,20,218,26,"str"],[231,23,218,29],[231,24,218,30,"length"],[231,30,218,36],[231,32,219,20],[232,8,220,12],[233,8,221,12,"p"],[233,9,221,13],[233,10,221,14,"id"],[233,12,221,16],[233,15,221,19,"Number"],[233,21,221,25],[233,22,221,26,"str"],[233,25,221,29],[233,26,221,30,"substring"],[233,35,221,39],[233,36,221,40,"start"],[233,41,221,45],[233,43,221,47,"i"],[233,44,221,48],[233,47,221,51],[233,48,221,52],[233,49,221,53],[233,50,221,54],[234,6,222,8],[235,6,223,8],[236,6,224,8],[236,10,224,12,"str"],[236,13,224,15],[236,14,224,16,"charAt"],[236,20,224,22],[236,21,224,23],[236,23,224,25,"i"],[236,24,224,26],[236,25,224,27],[236,27,224,29],[237,8,225,12],[237,14,225,18,"payload"],[237,21,225,25],[237,24,225,28],[237,28,225,32],[237,29,225,33,"tryParse"],[237,37,225,41],[237,38,225,42,"str"],[237,41,225,45],[237,42,225,46,"substr"],[237,48,225,52],[237,49,225,53,"i"],[237,50,225,54],[237,51,225,55],[237,52,225,56],[238,8,226,12],[238,12,226,16,"Decoder"],[238,19,226,23],[238,20,226,24,"isPayloadValid"],[238,34,226,38],[238,35,226,39,"p"],[238,36,226,40],[238,37,226,41,"type"],[238,41,226,45],[238,43,226,47,"payload"],[238,50,226,54],[238,51,226,55],[238,53,226,57],[239,10,227,16,"p"],[239,11,227,17],[239,12,227,18,"data"],[239,16,227,22],[239,19,227,25,"payload"],[239,26,227,32],[240,8,228,12],[240,9,228,13],[240,15,229,17],[241,10,230,16],[241,16,230,22],[241,20,230,26,"Error"],[241,25,230,31],[241,26,230,32],[241,43,230,49],[241,44,230,50],[242,8,231,12],[243,6,232,8],[244,6,233,8],[244,13,233,15,"p"],[244,14,233,16],[245,4,234,4],[246,4,235,4,"tryParse"],[246,12,235,12,"tryParse"],[246,13,235,13,"str"],[246,16,235,16],[246,18,235,18],[247,6,236,8],[247,10,236,12],[248,8,237,12],[248,15,237,19,"JSON"],[248,19,237,23],[248,20,237,24,"parse"],[248,25,237,29],[248,26,237,30,"str"],[248,29,237,33],[248,31,237,35],[248,35,237,39],[248,36,237,40,"reviver"],[248,43,237,47],[248,44,237,48],[249,6,238,8],[249,7,238,9],[249,8,239,8],[249,15,239,15,"e"],[249,16,239,16],[249,18,239,18],[250,8,240,12],[250,15,240,19],[250,20,240,24],[251,6,241,8],[252,4,242,4],[253,4,243,4],[253,11,243,11,"isPayloadValid"],[253,25,243,25,"isPayloadValid"],[253,26,243,26,"type"],[253,30,243,30],[253,32,243,32,"payload"],[253,39,243,39],[253,41,243,41],[254,6,244,8],[254,14,244,16,"type"],[254,18,244,20],[255,8,245,12],[255,13,245,17,"PacketType"],[255,23,245,27],[255,24,245,28,"CONNECT"],[255,31,245,35],[256,10,246,16],[256,17,246,23,"isObject"],[256,25,246,31],[256,26,246,32,"payload"],[256,33,246,39],[256,34,246,40],[257,8,247,12],[257,13,247,17,"PacketType"],[257,23,247,27],[257,24,247,28,"DISCONNECT"],[257,34,247,38],[258,10,248,16],[258,17,248,23,"payload"],[258,24,248,30],[258,29,248,35,"undefined"],[258,38,248,44],[259,8,249,12],[259,13,249,17,"PacketType"],[259,23,249,27],[259,24,249,28,"CONNECT_ERROR"],[259,37,249,41],[260,10,250,16],[260,17,250,23],[260,24,250,30,"payload"],[260,31,250,37],[260,36,250,42],[260,44,250,50],[260,48,250,54,"isObject"],[260,56,250,62],[260,57,250,63,"payload"],[260,64,250,70],[260,65,250,71],[261,8,251,12],[261,13,251,17,"PacketType"],[261,23,251,27],[261,24,251,28,"EVENT"],[261,29,251,33],[262,8,252,12],[262,13,252,17,"PacketType"],[262,23,252,27],[262,24,252,28,"BINARY_EVENT"],[262,36,252,40],[263,10,253,16],[263,17,253,24,"Array"],[263,22,253,29],[263,23,253,30,"isArray"],[263,30,253,37],[263,31,253,38,"payload"],[263,38,253,45],[263,39,253,46],[263,44,254,21],[263,51,254,28,"payload"],[263,58,254,35],[263,59,254,36],[263,60,254,37],[263,61,254,38],[263,66,254,43],[263,74,254,51],[263,78,255,25],[263,85,255,32,"payload"],[263,92,255,39],[263,93,255,40],[263,94,255,41],[263,95,255,42],[263,100,255,47],[263,108,255,55],[263,112,256,28,"RESERVED_EVENTS"],[263,127,256,43],[263,128,256,44,"indexOf"],[263,135,256,51],[263,136,256,52,"payload"],[263,143,256,59],[263,144,256,60],[263,145,256,61],[263,146,256,62],[263,147,256,63],[263,152,256,68],[263,153,256,69],[263,154,256,71],[263,155,256,72],[264,8,257,12],[264,13,257,17,"PacketType"],[264,23,257,27],[264,24,257,28,"ACK"],[264,27,257,31],[265,8,258,12],[265,13,258,17,"PacketType"],[265,23,258,27],[265,24,258,28,"BINARY_ACK"],[265,34,258,38],[266,10,259,16],[266,17,259,23,"Array"],[266,22,259,28],[266,23,259,29,"isArray"],[266,30,259,36],[266,31,259,37,"payload"],[266,38,259,44],[266,39,259,45],[267,6,260,8],[268,4,261,4],[269,4,262,4],[270,0,263,0],[271,0,264,0],[272,4,265,4,"destroy"],[272,11,265,11,"destroy"],[272,12,265,11],[272,14,265,14],[273,6,266,8],[273,10,266,12],[273,14,266,16],[273,15,266,17,"reconstructor"],[273,28,266,30],[273,30,266,32],[274,8,267,12],[274,12,267,16],[274,13,267,17,"reconstructor"],[274,26,267,30],[274,27,267,31,"finishedReconstruction"],[274,49,267,53],[274,50,267,54],[274,51,267,55],[275,8,268,12],[275,12,268,16],[275,13,268,17,"reconstructor"],[275,26,268,30],[275,29,268,33],[275,33,268,37],[276,6,269,8],[277,4,270,4],[278,2,271,0],[279,2,272,0],[280,0,273,0],[281,0,274,0],[282,0,275,0],[283,0,276,0],[284,0,277,0],[285,0,278,0],[286,0,279,0],[287,2,280,0],[287,8,280,6,"BinaryReconstructor"],[287,27,280,25],[287,28,280,26],[288,4,281,4,"constructor"],[288,15,281,15,"constructor"],[288,16,281,16,"packet"],[288,22,281,22],[288,24,281,24],[289,6,282,8],[289,10,282,12],[289,11,282,13,"packet"],[289,17,282,19],[289,20,282,22,"packet"],[289,26,282,28],[290,6,283,8],[290,10,283,12],[290,11,283,13,"buffers"],[290,18,283,20],[290,21,283,23],[290,23,283,25],[291,6,284,8],[291,10,284,12],[291,11,284,13,"reconPack"],[291,20,284,22],[291,23,284,25,"packet"],[291,29,284,31],[292,4,285,4],[293,4,286,4],[294,0,287,0],[295,0,288,0],[296,0,289,0],[297,0,290,0],[298,0,291,0],[299,0,292,0],[300,0,293,0],[301,4,294,4,"takeBinaryData"],[301,18,294,18,"takeBinaryData"],[301,19,294,19,"binData"],[301,26,294,26],[301,28,294,28],[302,6,295,8],[302,10,295,12],[302,11,295,13,"buffers"],[302,18,295,20],[302,19,295,21,"push"],[302,23,295,25],[302,24,295,26,"binData"],[302,31,295,33],[302,32,295,34],[303,6,296,8],[303,10,296,12],[303,14,296,16],[303,15,296,17,"buffers"],[303,22,296,24],[303,23,296,25,"length"],[303,29,296,31],[303,34,296,36],[303,38,296,40],[303,39,296,41,"reconPack"],[303,48,296,50],[303,49,296,51,"attachments"],[303,60,296,62],[303,62,296,64],[304,8,297,12],[305,8,298,12],[305,14,298,18,"packet"],[305,20,298,24],[305,23,298,27],[305,27,298,27,"reconstructPacket"],[305,36,298,44],[305,37,298,44,"reconstructPacket"],[305,54,298,44],[305,56,298,45],[305,60,298,49],[305,61,298,50,"reconPack"],[305,70,298,59],[305,72,298,61],[305,76,298,65],[305,77,298,66,"buffers"],[305,84,298,73],[305,85,298,74],[306,8,299,12],[306,12,299,16],[306,13,299,17,"finishedReconstruction"],[306,35,299,39],[306,36,299,40],[306,37,299,41],[307,8,300,12],[307,15,300,19,"packet"],[307,21,300,25],[308,6,301,8],[309,6,302,8],[309,13,302,15],[309,17,302,19],[310,4,303,4],[311,4,304,4],[312,0,305,0],[313,0,306,0],[314,4,307,4,"finishedReconstruction"],[314,26,307,26,"finishedReconstruction"],[314,27,307,26],[314,29,307,29],[315,6,308,8],[315,10,308,12],[315,11,308,13,"reconPack"],[315,20,308,22],[315,23,308,25],[315,27,308,29],[316,6,309,8],[316,10,309,12],[316,11,309,13,"buffers"],[316,18,309,20],[316,21,309,23],[316,23,309,25],[317,4,310,4],[318,2,311,0],[319,0,311,1],[319,3]],"functionMap":{"names":["<global>","<anonymous>","Encoder","Encoder#constructor","Encoder#encode","Encoder#encodeAsString","Encoder#encodeAsBinary","isObject","Decoder","Decoder#constructor","Decoder#add","Decoder#decodeString","Decoder#tryParse","Decoder.isPayloadValid","Decoder#destroy","BinaryReconstructor","BinaryReconstructor#constructor","BinaryReconstructor#takeBinaryData","BinaryReconstructor#finishedReconstruction"],"mappings":"AAA;CCqB;CDQ;OEI;ICM;KDE;IEO;KFc;IGI;KHsB;IIM;KJM;CFC;AOE;CPE;OQM;ICM;KDG;IEM;KFuC;IGO;KH6D;IIC;KJO;IKC;KLkB;IMI;KNK;CRC;AeS;ICC;KDI;IES;KFS;IGI;KHG;CfC"},"hasCjsExports":false},"type":"js/module"}]}