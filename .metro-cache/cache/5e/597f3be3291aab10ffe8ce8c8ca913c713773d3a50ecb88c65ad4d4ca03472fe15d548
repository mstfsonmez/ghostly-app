{"dependencies":[{"name":"socket.io-parser","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":46,"index":46}}],"key":"cQaAU0lT2O9qXW5QPLAeCm8S6Aw=","exportNames":["*"],"imports":1}},{"name":"./on.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":47},"end":{"line":2,"column":29,"index":76}}],"key":"XRT79/HgjpzwYcEtMdKPNGwAAJA=","exportNames":["*"],"imports":1}},{"name":"@socket.io/component-emitter","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":77},"end":{"line":3,"column":56,"index":133}}],"key":"nWmouVdWEVSQD2UwM6teY1JyKBM=","exportNames":["*"],"imports":1}},{"name":"debug","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":134},"end":{"line":4,"column":32,"index":166}}],"key":"Nx7LMnUOZdRc8E6QIb5nvmtJE+4=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"Socket\", {\n    enumerable: true,\n    get: function () {\n      return Socket;\n    }\n  });\n  var _socketIoParser = require(_dependencyMap[0], \"socket.io-parser\");\n  var _onJs = require(_dependencyMap[1], \"./on.js\");\n  var _socketIoComponentEmitter = require(_dependencyMap[2], \"@socket.io/component-emitter\");\n  var _debug = require(_dependencyMap[3], \"debug\");\n  var debugModule = _interopDefault(_debug);\n  // debug()\n  const debug = (0, debugModule.default)(\"socket.io-client:socket\"); // debug()\n  /**\n   * Internal events.\n   * These events can't be emitted by the user.\n   */\n  const RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1\n  });\n  /**\n   * A Socket is the fundamental class for interacting with the server.\n   *\n   * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n   *\n   * @example\n   * const socket = io();\n   *\n   * socket.on(\"connect\", () => {\n   *   console.log(\"connected\");\n   * });\n   *\n   * // send an event to the server\n   * socket.emit(\"foo\", \"bar\");\n   *\n   * socket.on(\"foobar\", () => {\n   *   // an event was received from the server\n   * });\n   *\n   * // upon disconnection\n   * socket.on(\"disconnect\", (reason) => {\n   *   console.log(`disconnected due to ${reason}`);\n   * });\n   */\n  class Socket extends _socketIoComponentEmitter.Emitter {\n    /**\n     * `Socket` constructor.\n     */\n    constructor(io, nsp, opts) {\n      super();\n      /**\n       * Whether the socket is currently connected to the server.\n       *\n       * @example\n       * const socket = io();\n       *\n       * socket.on(\"connect\", () => {\n       *   console.log(socket.connected); // true\n       * });\n       *\n       * socket.on(\"disconnect\", () => {\n       *   console.log(socket.connected); // false\n       * });\n       */\n      this.connected = false;\n      /**\n       * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n       * be transmitted by the server.\n       */\n      this.recovered = false;\n      /**\n       * Buffer for packets received before the CONNECT packet\n       */\n      this.receiveBuffer = [];\n      /**\n       * Buffer for packets that will be sent once the socket is connected\n       */\n      this.sendBuffer = [];\n      /**\n       * The queue of packets to be sent with retry in case of failure.\n       *\n       * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n       * @private\n       */\n      this._queue = [];\n      /**\n       * A sequence to generate the ID of the {@link QueuedPacket}.\n       * @private\n       */\n      this._queueSeq = 0;\n      this.ids = 0;\n      /**\n       * A map containing acknowledgement handlers.\n       *\n       * The `withError` attribute is used to differentiate handlers that accept an error as first argument:\n       *\n       * - `socket.emit(\"test\", (err, value) => { ... })` with `ackTimeout` option\n       * - `socket.timeout(5000).emit(\"test\", (err, value) => { ... })`\n       * - `const value = await socket.emitWithAck(\"test\")`\n       *\n       * From those that don't:\n       *\n       * - `socket.emit(\"test\", (value) => { ... });`\n       *\n       * In the first case, the handlers will be called with an error when:\n       *\n       * - the timeout is reached\n       * - the socket gets disconnected\n       *\n       * In the second case, the handlers will be simply discarded upon disconnection, since the client will never receive\n       * an acknowledgement from the server.\n       *\n       * @private\n       */\n      this.acks = {};\n      this.flags = {};\n      this.io = io;\n      this.nsp = nsp;\n      if (opts && opts.auth) {\n        this.auth = opts.auth;\n      }\n      this._opts = Object.assign({}, opts);\n      if (this.io._autoConnect) this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.disconnected); // false\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.disconnected); // true\n     * });\n     */\n    get disconnected() {\n      return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n      if (this.subs) return;\n      const io = this.io;\n      this.subs = [(0, _onJs.on)(io, \"open\", this.onopen.bind(this)), (0, _onJs.on)(io, \"packet\", this.onpacket.bind(this)), (0, _onJs.on)(io, \"error\", this.onerror.bind(this)), (0, _onJs.on)(io, \"close\", this.onclose.bind(this))];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n     *\n     * @example\n     * const socket = io();\n     *\n     * console.log(socket.active); // true\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   if (reason === \"io server disconnect\") {\n     *     // the disconnection was initiated by the server, you need to manually reconnect\n     *     console.log(socket.active); // false\n     *   }\n     *   // else the socket will automatically try to reconnect\n     *   console.log(socket.active); // true\n     * });\n     */\n    get active() {\n      return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @example\n     * const socket = io({\n     *   autoConnect: false\n     * });\n     *\n     * socket.connect();\n     */\n    connect() {\n      if (this.connected) return this;\n      this.subEvents();\n      if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n      if (\"open\" === this.io._readyState) this.onopen();\n      return this;\n    }\n    /**\n     * Alias for {@link connect()}.\n     */\n    open() {\n      return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * socket.send(\"hello\");\n     *\n     * // this is equivalent to\n     * socket.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n    send(...args) {\n      args.unshift(\"message\");\n      this.emit.apply(this, args);\n      return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @example\n     * socket.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the server\n     * socket.emit(\"hello\", \"world\", (val) => {\n     *   // ...\n     * });\n     *\n     * @return self\n     */\n    emit(ev, ...args) {\n      var _a, _b, _c;\n      if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n        throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n      }\n      args.unshift(ev);\n      if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n        this._addToQueue(args);\n        return this;\n      }\n      const packet = {\n        type: _socketIoParser.PacketType.EVENT,\n        data: args\n      };\n      packet.options = {};\n      packet.options.compress = this.flags.compress !== false;\n      // event ack callback\n      if (\"function\" === typeof args[args.length - 1]) {\n        const id = this.ids++;\n        debug(\"emitting packet with ack id %d\", id);\n        const ack = args.pop();\n        this._registerAckCallback(id, ack);\n        packet.id = id;\n      }\n      const isTransportWritable = (_b = (_a = this.io.engine) === null || _a === void 0 ? void 0 : _a.transport) === null || _b === void 0 ? void 0 : _b.writable;\n      const isConnected = this.connected && !((_c = this.io.engine) === null || _c === void 0 ? void 0 : _c._hasPingExpired());\n      const discardPacket = this.flags.volatile && !isTransportWritable;\n      if (discardPacket) {\n        debug(\"discard packet as the transport is not currently writable\");\n      } else if (isConnected) {\n        this.notifyOutgoingListeners(packet);\n        this.packet(packet);\n      } else {\n        this.sendBuffer.push(packet);\n      }\n      this.flags = {};\n      return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n      var _a;\n      const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n      if (timeout === undefined) {\n        this.acks[id] = ack;\n        return;\n      }\n      // @ts-ignore\n      const timer = this.io.setTimeoutFn(() => {\n        delete this.acks[id];\n        for (let i = 0; i < this.sendBuffer.length; i++) {\n          if (this.sendBuffer[i].id === id) {\n            debug(\"removing packet with ack id %d from the buffer\", id);\n            this.sendBuffer.splice(i, 1);\n          }\n        }\n        debug(\"event with ack id %d has timed out after %d ms\", id, timeout);\n        ack.call(this, new Error(\"operation has timed out\"));\n      }, timeout);\n      const fn = (...args) => {\n        // @ts-ignore\n        this.io.clearTimeoutFn(timer);\n        ack.apply(this, args);\n      };\n      fn.withError = true;\n      this.acks[id] = fn;\n    }\n    /**\n     * Emits an event and waits for an acknowledgement\n     *\n     * @example\n     * // without timeout\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\n     *\n     * // with a specific timeout\n     * try {\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n     * } catch (err) {\n     *   // the server did not acknowledge the event in the given delay\n     * }\n     *\n     * @return a Promise that will be fulfilled when the server acknowledges the event\n     */\n    emitWithAck(ev, ...args) {\n      return new Promise((resolve, reject) => {\n        const fn = (arg1, arg2) => {\n          return arg1 ? reject(arg1) : resolve(arg2);\n        };\n        fn.withError = true;\n        args.push(fn);\n        this.emit(ev, ...args);\n      });\n    }\n    /**\n     * Add the packet to the queue.\n     * @param args\n     * @private\n     */\n    _addToQueue(args) {\n      let ack;\n      if (typeof args[args.length - 1] === \"function\") {\n        ack = args.pop();\n      }\n      const packet = {\n        id: this._queueSeq++,\n        tryCount: 0,\n        pending: false,\n        args,\n        flags: Object.assign({\n          fromQueue: true\n        }, this.flags)\n      };\n      args.push((err, ...responseArgs) => {\n        if (packet !== this._queue[0]) {\n          // the packet has already been acknowledged\n          return;\n        }\n        const hasError = err !== null;\n        if (hasError) {\n          if (packet.tryCount > this._opts.retries) {\n            debug(\"packet [%d] is discarded after %d tries\", packet.id, packet.tryCount);\n            this._queue.shift();\n            if (ack) {\n              ack(err);\n            }\n          }\n        } else {\n          debug(\"packet [%d] was successfully sent\", packet.id);\n          this._queue.shift();\n          if (ack) {\n            ack(null, ...responseArgs);\n          }\n        }\n        packet.pending = false;\n        return this._drainQueue();\n      });\n      this._queue.push(packet);\n      this._drainQueue();\n    }\n    /**\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\n     * @param force - whether to resend a packet that has not been acknowledged yet\n     *\n     * @private\n     */\n    _drainQueue(force = false) {\n      debug(\"draining queue\");\n      if (!this.connected || this._queue.length === 0) {\n        return;\n      }\n      const packet = this._queue[0];\n      if (packet.pending && !force) {\n        debug(\"packet [%d] has already been sent and is waiting for an ack\", packet.id);\n        return;\n      }\n      packet.pending = true;\n      packet.tryCount++;\n      debug(\"sending packet [%d] (try n°%d)\", packet.id, packet.tryCount);\n      this.flags = packet.flags;\n      this.emit.apply(this, packet.args);\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n      packet.nsp = this.nsp;\n      this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n      debug(\"transport is open - connecting\");\n      if (typeof this.auth == \"function\") {\n        this.auth(data => {\n          this._sendConnectPacket(data);\n        });\n      } else {\n        this._sendConnectPacket(this.auth);\n      }\n    }\n    /**\n     * Sends a CONNECT packet to initiate the Socket.IO session.\n     *\n     * @param data\n     * @private\n     */\n    _sendConnectPacket(data) {\n      this.packet({\n        type: _socketIoParser.PacketType.CONNECT,\n        data: this._pid ? Object.assign({\n          pid: this._pid,\n          offset: this._lastOffset\n        }, data) : data\n      });\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n      if (!this.connected) {\n        this.emitReserved(\"connect_error\", err);\n      }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n      debug(\"close (%s)\", reason);\n      this.connected = false;\n      delete this.id;\n      this.emitReserved(\"disconnect\", reason, description);\n      this._clearAcks();\n    }\n    /**\n     * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from\n     * the server.\n     *\n     * @private\n     */\n    _clearAcks() {\n      Object.keys(this.acks).forEach(id => {\n        const isBuffered = this.sendBuffer.some(packet => String(packet.id) === id);\n        if (!isBuffered) {\n          // note: handlers that do not accept an error as first argument are ignored here\n          const ack = this.acks[id];\n          delete this.acks[id];\n          if (ack.withError) {\n            ack.call(this, new Error(\"socket has been disconnected\"));\n          }\n        }\n      });\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n      const sameNamespace = packet.nsp === this.nsp;\n      if (!sameNamespace) return;\n      switch (packet.type) {\n        case _socketIoParser.PacketType.CONNECT:\n          if (packet.data && packet.data.sid) {\n            this.onconnect(packet.data.sid, packet.data.pid);\n          } else {\n            this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n          }\n          break;\n        case _socketIoParser.PacketType.EVENT:\n        case _socketIoParser.PacketType.BINARY_EVENT:\n          this.onevent(packet);\n          break;\n        case _socketIoParser.PacketType.ACK:\n        case _socketIoParser.PacketType.BINARY_ACK:\n          this.onack(packet);\n          break;\n        case _socketIoParser.PacketType.DISCONNECT:\n          this.ondisconnect();\n          break;\n        case _socketIoParser.PacketType.CONNECT_ERROR:\n          this.destroy();\n          const err = new Error(packet.data.message);\n          // @ts-ignore\n          err.data = packet.data.data;\n          this.emitReserved(\"connect_error\", err);\n          break;\n      }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n      const args = packet.data || [];\n      debug(\"emitting event %j\", args);\n      if (null != packet.id) {\n        debug(\"attaching ack callback to event\");\n        args.push(this.ack(packet.id));\n      }\n      if (this.connected) {\n        this.emitEvent(args);\n      } else {\n        this.receiveBuffer.push(Object.freeze(args));\n      }\n    }\n    emitEvent(args) {\n      if (this._anyListeners && this._anyListeners.length) {\n        const listeners = this._anyListeners.slice();\n        for (const listener of listeners) {\n          listener.apply(this, args);\n        }\n      }\n      super.emit.apply(this, args);\n      if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n        this._lastOffset = args[args.length - 1];\n      }\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n      const self = this;\n      let sent = false;\n      return function (...args) {\n        // prevent double callbacks\n        if (sent) return;\n        sent = true;\n        debug(\"sending ack %j\", args);\n        self.packet({\n          type: _socketIoParser.PacketType.ACK,\n          id: id,\n          data: args\n        });\n      };\n    }\n    /**\n     * Called upon a server acknowledgement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n      const ack = this.acks[packet.id];\n      if (typeof ack !== \"function\") {\n        debug(\"bad ack %s\", packet.id);\n        return;\n      }\n      delete this.acks[packet.id];\n      debug(\"calling ack %s with %j\", packet.id, packet.data);\n      // @ts-ignore FIXME ack is incorrectly inferred as 'never'\n      if (ack.withError) {\n        packet.data.unshift(null);\n      }\n      // @ts-ignore\n      ack.apply(this, packet.data);\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id, pid) {\n      debug(\"socket connected with id %s\", id);\n      this.id = id;\n      this.recovered = pid && this._pid === pid;\n      this._pid = pid; // defined only if connection state recovery is enabled\n      this.connected = true;\n      this.emitBuffered();\n      this.emitReserved(\"connect\");\n      this._drainQueue(true);\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n      this.receiveBuffer.forEach(args => this.emitEvent(args));\n      this.receiveBuffer = [];\n      this.sendBuffer.forEach(packet => {\n        this.notifyOutgoingListeners(packet);\n        this.packet(packet);\n      });\n      this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n      debug(\"server disconnect (%s)\", this.nsp);\n      this.destroy();\n      this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n      if (this.subs) {\n        // clean subscriptions to avoid reconnections\n        this.subs.forEach(subDestroy => subDestroy());\n        this.subs = undefined;\n      }\n      this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n     *\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   // console.log(reason); prints \"io client disconnect\"\n     * });\n     *\n     * socket.disconnect();\n     *\n     * @return self\n     */\n    disconnect() {\n      if (this.connected) {\n        debug(\"performing disconnect (%s)\", this.nsp);\n        this.packet({\n          type: _socketIoParser.PacketType.DISCONNECT\n        });\n      }\n      // remove socket from pool\n      this.destroy();\n      if (this.connected) {\n        // fire events\n        this.onclose(\"io client disconnect\");\n      }\n      return this;\n    }\n    /**\n     * Alias for {@link disconnect()}.\n     *\n     * @return self\n     */\n    close() {\n      return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * socket.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n    compress(compress) {\n      this.flags.compress = compress;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @example\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n     *\n     * @returns self\n     */\n    get volatile() {\n      this.flags.volatile = true;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * @example\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     *\n     * @returns self\n     */\n    timeout(timeout) {\n      this.flags.timeout = timeout;\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @example\n     * socket.onAny((event, ...args) => {\n     *   console.log(`got ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n      this._anyListeners.push(listener);\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * socket.prependAny((event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n      this._anyListeners.unshift(listener);\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * }\n     *\n     * socket.onAny(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAny(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAny();\n     *\n     * @param listener\n     */\n    offAny(listener) {\n      if (!this._anyListeners) {\n        return this;\n      }\n      if (listener) {\n        const listeners = this._anyListeners;\n        for (let i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyListeners = [];\n      }\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAny() {\n      return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n      this._anyOutgoingListeners.push(listener);\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n      this._anyOutgoingListeners.unshift(listener);\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * }\n     *\n     * socket.onAnyOutgoing(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAnyOutgoing(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAnyOutgoing();\n     *\n     * @param [listener] - the catch-all listener (optional)\n     */\n    offAnyOutgoing(listener) {\n      if (!this._anyOutgoingListeners) {\n        return this;\n      }\n      if (listener) {\n        const listeners = this._anyOutgoingListeners;\n        for (let i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyOutgoingListeners = [];\n      }\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAnyOutgoing() {\n      return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n      if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n        const listeners = this._anyOutgoingListeners.slice();\n        for (const listener of listeners) {\n          listener.apply(this, packet.data);\n        }\n      }\n    }\n  }\n});","lineCount":908,"map":[[12,2,43,0,"Object"],[12,8,43,0],[12,9,43,0,"defineProperty"],[12,23,43,0],[12,24,43,0,"exports"],[12,31,43,0],[13,4,43,0,"enumerable"],[13,14,43,0],[14,4,43,0,"get"],[14,7,43,0],[14,18,43,0,"get"],[14,19,43,0],[15,6,43,0],[15,13,43,0,"Socket"],[15,19,43,0],[16,4,43,0],[17,2,43,0],[18,2,1,0],[18,6,1,0,"_socketIoParser"],[18,21,1,0],[18,24,1,0,"require"],[18,31,1,0],[18,32,1,0,"_dependencyMap"],[18,46,1,0],[19,2,2,0],[19,6,2,0,"_onJs"],[19,11,2,0],[19,14,2,0,"require"],[19,21,2,0],[19,22,2,0,"_dependencyMap"],[19,36,2,0],[20,2,3,0],[20,6,3,0,"_socketIoComponentEmitter"],[20,31,3,0],[20,34,3,0,"require"],[20,41,3,0],[20,42,3,0,"_dependencyMap"],[20,56,3,0],[21,2,4,0],[21,6,4,0,"_debug"],[21,12,4,0],[21,15,4,0,"require"],[21,22,4,0],[21,23,4,0,"_dependencyMap"],[21,37,4,0],[22,2,4,0],[22,6,4,0,"debugModule"],[22,17,4,0],[22,20,4,0,"_interopDefault"],[22,35,4,0],[22,36,4,0,"_debug"],[22,42,4,0],[23,2,4,33],[24,2,5,0],[24,8,5,6,"debug"],[24,13,5,11],[24,16,5,14],[24,20,5,14,"debugModule"],[24,31,5,25],[24,32,5,25,"default"],[24,39,5,25],[24,41,5,26],[24,66,5,51],[24,67,5,52],[24,68,5,53],[24,69,5,54],[25,2,6,0],[26,0,7,0],[27,0,8,0],[28,0,9,0],[29,2,10,0],[29,8,10,6,"RESERVED_EVENTS"],[29,23,10,21],[29,26,10,24,"Object"],[29,32,10,30],[29,33,10,31,"freeze"],[29,39,10,37],[29,40,10,38],[30,4,11,4,"connect"],[30,11,11,11],[30,13,11,13],[30,14,11,14],[31,4,12,4,"connect_error"],[31,17,12,17],[31,19,12,19],[31,20,12,20],[32,4,13,4,"disconnect"],[32,14,13,14],[32,16,13,16],[32,17,13,17],[33,4,14,4,"disconnecting"],[33,17,14,17],[33,19,14,19],[33,20,14,20],[34,4,15,4],[35,4,16,4,"newListener"],[35,15,16,15],[35,17,16,17],[35,18,16,18],[36,4,17,4,"removeListener"],[36,18,17,18],[36,20,17,20],[37,2,18,0],[37,3,18,1],[37,4,18,2],[38,2,19,0],[39,0,20,0],[40,0,21,0],[41,0,22,0],[42,0,23,0],[43,0,24,0],[44,0,25,0],[45,0,26,0],[46,0,27,0],[47,0,28,0],[48,0,29,0],[49,0,30,0],[50,0,31,0],[51,0,32,0],[52,0,33,0],[53,0,34,0],[54,0,35,0],[55,0,36,0],[56,0,37,0],[57,0,38,0],[58,0,39,0],[59,0,40,0],[60,0,41,0],[61,0,42,0],[62,2,43,7],[62,8,43,13,"Socket"],[62,14,43,19],[62,23,43,28,"Emitter"],[62,48,43,35],[62,49,43,35,"Emitter"],[62,56,43,35],[62,57,43,36],[63,4,44,4],[64,0,45,0],[65,0,46,0],[66,4,47,4,"constructor"],[66,15,47,15,"constructor"],[66,16,47,16,"io"],[66,18,47,18],[66,20,47,20,"nsp"],[66,23,47,23],[66,25,47,25,"opts"],[66,29,47,29],[66,31,47,31],[67,6,48,8],[67,11,48,13],[67,12,48,14],[67,13,48,15],[68,6,49,8],[69,0,50,0],[70,0,51,0],[71,0,52,0],[72,0,53,0],[73,0,54,0],[74,0,55,0],[75,0,56,0],[76,0,57,0],[77,0,58,0],[78,0,59,0],[79,0,60,0],[80,0,61,0],[81,0,62,0],[82,6,63,8],[82,10,63,12],[82,11,63,13,"connected"],[82,20,63,22],[82,23,63,25],[82,28,63,30],[83,6,64,8],[84,0,65,0],[85,0,66,0],[86,0,67,0],[87,6,68,8],[87,10,68,12],[87,11,68,13,"recovered"],[87,20,68,22],[87,23,68,25],[87,28,68,30],[88,6,69,8],[89,0,70,0],[90,0,71,0],[91,6,72,8],[91,10,72,12],[91,11,72,13,"receiveBuffer"],[91,24,72,26],[91,27,72,29],[91,29,72,31],[92,6,73,8],[93,0,74,0],[94,0,75,0],[95,6,76,8],[95,10,76,12],[95,11,76,13,"sendBuffer"],[95,21,76,23],[95,24,76,26],[95,26,76,28],[96,6,77,8],[97,0,78,0],[98,0,79,0],[99,0,80,0],[100,0,81,0],[101,0,82,0],[102,6,83,8],[102,10,83,12],[102,11,83,13,"_queue"],[102,17,83,19],[102,20,83,22],[102,22,83,24],[103,6,84,8],[104,0,85,0],[105,0,86,0],[106,0,87,0],[107,6,88,8],[107,10,88,12],[107,11,88,13,"_queueSeq"],[107,20,88,22],[107,23,88,25],[107,24,88,26],[108,6,89,8],[108,10,89,12],[108,11,89,13,"ids"],[108,14,89,16],[108,17,89,19],[108,18,89,20],[109,6,90,8],[110,0,91,0],[111,0,92,0],[112,0,93,0],[113,0,94,0],[114,0,95,0],[115,0,96,0],[116,0,97,0],[117,0,98,0],[118,0,99,0],[119,0,100,0],[120,0,101,0],[121,0,102,0],[122,0,103,0],[123,0,104,0],[124,0,105,0],[125,0,106,0],[126,0,107,0],[127,0,108,0],[128,0,109,0],[129,0,110,0],[130,0,111,0],[131,0,112,0],[132,6,113,8],[132,10,113,12],[132,11,113,13,"acks"],[132,15,113,17],[132,18,113,20],[132,19,113,21],[132,20,113,22],[133,6,114,8],[133,10,114,12],[133,11,114,13,"flags"],[133,16,114,18],[133,19,114,21],[133,20,114,22],[133,21,114,23],[134,6,115,8],[134,10,115,12],[134,11,115,13,"io"],[134,13,115,15],[134,16,115,18,"io"],[134,18,115,20],[135,6,116,8],[135,10,116,12],[135,11,116,13,"nsp"],[135,14,116,16],[135,17,116,19,"nsp"],[135,20,116,22],[136,6,117,8],[136,10,117,12,"opts"],[136,14,117,16],[136,18,117,20,"opts"],[136,22,117,24],[136,23,117,25,"auth"],[136,27,117,29],[136,29,117,31],[137,8,118,12],[137,12,118,16],[137,13,118,17,"auth"],[137,17,118,21],[137,20,118,24,"opts"],[137,24,118,28],[137,25,118,29,"auth"],[137,29,118,33],[138,6,119,8],[139,6,120,8],[139,10,120,12],[139,11,120,13,"_opts"],[139,16,120,18],[139,19,120,21,"Object"],[139,25,120,27],[139,26,120,28,"assign"],[139,32,120,34],[139,33,120,35],[139,34,120,36],[139,35,120,37],[139,37,120,39,"opts"],[139,41,120,43],[139,42,120,44],[140,6,121,8],[140,10,121,12],[140,14,121,16],[140,15,121,17,"io"],[140,17,121,19],[140,18,121,20,"_autoConnect"],[140,30,121,32],[140,32,122,12],[140,36,122,16],[140,37,122,17,"open"],[140,41,122,21],[140,42,122,22],[140,43,122,23],[141,4,123,4],[142,4,124,4],[143,0,125,0],[144,0,126,0],[145,0,127,0],[146,0,128,0],[147,0,129,0],[148,0,130,0],[149,0,131,0],[150,0,132,0],[151,0,133,0],[152,0,134,0],[153,0,135,0],[154,0,136,0],[155,0,137,0],[156,4,138,4],[156,8,138,8,"disconnected"],[156,20,138,20,"disconnected"],[156,21,138,20],[156,23,138,23],[157,6,139,8],[157,13,139,15],[157,14,139,16],[157,18,139,20],[157,19,139,21,"connected"],[157,28,139,30],[158,4,140,4],[159,4,141,4],[160,0,142,0],[161,0,143,0],[162,0,144,0],[163,0,145,0],[164,4,146,4,"subEvents"],[164,13,146,13,"subEvents"],[164,14,146,13],[164,16,146,16],[165,6,147,8],[165,10,147,12],[165,14,147,16],[165,15,147,17,"subs"],[165,19,147,21],[165,21,148,12],[166,6,149,8],[166,12,149,14,"io"],[166,14,149,16],[166,17,149,19],[166,21,149,23],[166,22,149,24,"io"],[166,24,149,26],[167,6,150,8],[167,10,150,12],[167,11,150,13,"subs"],[167,15,150,17],[167,18,150,20],[167,19,151,12],[167,23,151,12,"on"],[167,28,151,14],[167,29,151,14,"on"],[167,31,151,14],[167,33,151,15,"io"],[167,35,151,17],[167,37,151,19],[167,43,151,25],[167,45,151,27],[167,49,151,31],[167,50,151,32,"onopen"],[167,56,151,38],[167,57,151,39,"bind"],[167,61,151,43],[167,62,151,44],[167,66,151,48],[167,67,151,49],[167,68,151,50],[167,70,152,12],[167,74,152,12,"on"],[167,79,152,14],[167,80,152,14,"on"],[167,82,152,14],[167,84,152,15,"io"],[167,86,152,17],[167,88,152,19],[167,96,152,27],[167,98,152,29],[167,102,152,33],[167,103,152,34,"onpacket"],[167,111,152,42],[167,112,152,43,"bind"],[167,116,152,47],[167,117,152,48],[167,121,152,52],[167,122,152,53],[167,123,152,54],[167,125,153,12],[167,129,153,12,"on"],[167,134,153,14],[167,135,153,14,"on"],[167,137,153,14],[167,139,153,15,"io"],[167,141,153,17],[167,143,153,19],[167,150,153,26],[167,152,153,28],[167,156,153,32],[167,157,153,33,"onerror"],[167,164,153,40],[167,165,153,41,"bind"],[167,169,153,45],[167,170,153,46],[167,174,153,50],[167,175,153,51],[167,176,153,52],[167,178,154,12],[167,182,154,12,"on"],[167,187,154,14],[167,188,154,14,"on"],[167,190,154,14],[167,192,154,15,"io"],[167,194,154,17],[167,196,154,19],[167,203,154,26],[167,205,154,28],[167,209,154,32],[167,210,154,33,"onclose"],[167,217,154,40],[167,218,154,41,"bind"],[167,222,154,45],[167,223,154,46],[167,227,154,50],[167,228,154,51],[167,229,154,52],[167,230,155,9],[168,4,156,4],[169,4,157,4],[170,0,158,0],[171,0,159,0],[172,0,160,0],[173,0,161,0],[174,0,162,0],[175,0,163,0],[176,0,164,0],[177,0,165,0],[178,0,166,0],[179,0,167,0],[180,0,168,0],[181,0,169,0],[182,0,170,0],[183,0,171,0],[184,0,172,0],[185,0,173,0],[186,4,174,4],[186,8,174,8,"active"],[186,14,174,14,"active"],[186,15,174,14],[186,17,174,17],[187,6,175,8],[187,13,175,15],[187,14,175,16],[187,15,175,17],[187,19,175,21],[187,20,175,22,"subs"],[187,24,175,26],[188,4,176,4],[189,4,177,4],[190,0,178,0],[191,0,179,0],[192,0,180,0],[193,0,181,0],[194,0,182,0],[195,0,183,0],[196,0,184,0],[197,0,185,0],[198,0,186,0],[199,4,187,4,"connect"],[199,11,187,11,"connect"],[199,12,187,11],[199,14,187,14],[200,6,188,8],[200,10,188,12],[200,14,188,16],[200,15,188,17,"connected"],[200,24,188,26],[200,26,189,12],[200,33,189,19],[200,37,189,23],[201,6,190,8],[201,10,190,12],[201,11,190,13,"subEvents"],[201,20,190,22],[201,21,190,23],[201,22,190,24],[202,6,191,8],[202,10,191,12],[202,11,191,13],[202,15,191,17],[202,16,191,18,"io"],[202,18,191,20],[202,19,191,21],[202,34,191,36],[202,35,191,37],[202,37,192,12],[202,41,192,16],[202,42,192,17,"io"],[202,44,192,19],[202,45,192,20,"open"],[202,49,192,24],[202,50,192,25],[202,51,192,26],[202,52,192,27],[202,53,192,28],[203,6,193,8],[203,10,193,12],[203,16,193,18],[203,21,193,23],[203,25,193,27],[203,26,193,28,"io"],[203,28,193,30],[203,29,193,31,"_readyState"],[203,40,193,42],[203,42,194,12],[203,46,194,16],[203,47,194,17,"onopen"],[203,53,194,23],[203,54,194,24],[203,55,194,25],[204,6,195,8],[204,13,195,15],[204,17,195,19],[205,4,196,4],[206,4,197,4],[207,0,198,0],[208,0,199,0],[209,4,200,4,"open"],[209,8,200,8,"open"],[209,9,200,8],[209,11,200,11],[210,6,201,8],[210,13,201,15],[210,17,201,19],[210,18,201,20,"connect"],[210,25,201,27],[210,26,201,28],[210,27,201,29],[211,4,202,4],[212,4,203,4],[213,0,204,0],[214,0,205,0],[215,0,206,0],[216,0,207,0],[217,0,208,0],[218,0,209,0],[219,0,210,0],[220,0,211,0],[221,0,212,0],[222,0,213,0],[223,0,214,0],[224,0,215,0],[225,0,216,0],[226,0,217,0],[227,4,218,4,"send"],[227,8,218,8,"send"],[227,9,218,9],[227,12,218,12,"args"],[227,16,218,16],[227,18,218,18],[228,6,219,8,"args"],[228,10,219,12],[228,11,219,13,"unshift"],[228,18,219,20],[228,19,219,21],[228,28,219,30],[228,29,219,31],[229,6,220,8],[229,10,220,12],[229,11,220,13,"emit"],[229,15,220,17],[229,16,220,18,"apply"],[229,21,220,23],[229,22,220,24],[229,26,220,28],[229,28,220,30,"args"],[229,32,220,34],[229,33,220,35],[230,6,221,8],[230,13,221,15],[230,17,221,19],[231,4,222,4],[232,4,223,4],[233,0,224,0],[234,0,225,0],[235,0,226,0],[236,0,227,0],[237,0,228,0],[238,0,229,0],[239,0,230,0],[240,0,231,0],[241,0,232,0],[242,0,233,0],[243,0,234,0],[244,0,235,0],[245,0,236,0],[246,0,237,0],[247,0,238,0],[248,0,239,0],[249,4,240,4,"emit"],[249,8,240,8,"emit"],[249,9,240,9,"ev"],[249,11,240,11],[249,13,240,13],[249,16,240,16,"args"],[249,20,240,20],[249,22,240,22],[250,6,241,8],[250,10,241,12,"_a"],[250,12,241,14],[250,14,241,16,"_b"],[250,16,241,18],[250,18,241,20,"_c"],[250,20,241,22],[251,6,242,8],[251,10,242,12,"RESERVED_EVENTS"],[251,25,242,27],[251,26,242,28,"hasOwnProperty"],[251,40,242,42],[251,41,242,43,"ev"],[251,43,242,45],[251,44,242,46],[251,46,242,48],[252,8,243,12],[252,14,243,18],[252,18,243,22,"Error"],[252,23,243,27],[252,24,243,28],[252,27,243,31],[252,30,243,34,"ev"],[252,32,243,36],[252,33,243,37,"toString"],[252,41,243,45],[252,42,243,46],[252,43,243,47],[252,46,243,50],[252,74,243,78],[252,75,243,79],[253,6,244,8],[254,6,245,8,"args"],[254,10,245,12],[254,11,245,13,"unshift"],[254,18,245,20],[254,19,245,21,"ev"],[254,21,245,23],[254,22,245,24],[255,6,246,8],[255,10,246,12],[255,14,246,16],[255,15,246,17,"_opts"],[255,20,246,22],[255,21,246,23,"retries"],[255,28,246,30],[255,32,246,34],[255,33,246,35],[255,37,246,39],[255,38,246,40,"flags"],[255,43,246,45],[255,44,246,46,"fromQueue"],[255,53,246,55],[255,57,246,59],[255,58,246,60],[255,62,246,64],[255,63,246,65,"flags"],[255,68,246,70],[255,69,246,71,"volatile"],[255,77,246,79],[255,79,246,81],[256,8,247,12],[256,12,247,16],[256,13,247,17,"_addToQueue"],[256,24,247,28],[256,25,247,29,"args"],[256,29,247,33],[256,30,247,34],[257,8,248,12],[257,15,248,19],[257,19,248,23],[258,6,249,8],[259,6,250,8],[259,12,250,14,"packet"],[259,18,250,20],[259,21,250,23],[260,8,251,12,"type"],[260,12,251,16],[260,14,251,18,"PacketType"],[260,29,251,28],[260,30,251,28,"PacketType"],[260,40,251,28],[260,41,251,29,"EVENT"],[260,46,251,34],[261,8,252,12,"data"],[261,12,252,16],[261,14,252,18,"args"],[262,6,253,8],[262,7,253,9],[263,6,254,8,"packet"],[263,12,254,14],[263,13,254,15,"options"],[263,20,254,22],[263,23,254,25],[263,24,254,26],[263,25,254,27],[264,6,255,8,"packet"],[264,12,255,14],[264,13,255,15,"options"],[264,20,255,22],[264,21,255,23,"compress"],[264,29,255,31],[264,32,255,34],[264,36,255,38],[264,37,255,39,"flags"],[264,42,255,44],[264,43,255,45,"compress"],[264,51,255,53],[264,56,255,58],[264,61,255,63],[265,6,256,8],[266,6,257,8],[266,10,257,12],[266,20,257,22],[266,25,257,27],[266,32,257,34,"args"],[266,36,257,38],[266,37,257,39,"args"],[266,41,257,43],[266,42,257,44,"length"],[266,48,257,50],[266,51,257,53],[266,52,257,54],[266,53,257,55],[266,55,257,57],[267,8,258,12],[267,14,258,18,"id"],[267,16,258,20],[267,19,258,23],[267,23,258,27],[267,24,258,28,"ids"],[267,27,258,31],[267,29,258,33],[268,8,259,12,"debug"],[268,13,259,17],[268,14,259,18],[268,46,259,50],[268,48,259,52,"id"],[268,50,259,54],[268,51,259,55],[269,8,260,12],[269,14,260,18,"ack"],[269,17,260,21],[269,20,260,24,"args"],[269,24,260,28],[269,25,260,29,"pop"],[269,28,260,32],[269,29,260,33],[269,30,260,34],[270,8,261,12],[270,12,261,16],[270,13,261,17,"_registerAckCallback"],[270,33,261,37],[270,34,261,38,"id"],[270,36,261,40],[270,38,261,42,"ack"],[270,41,261,45],[270,42,261,46],[271,8,262,12,"packet"],[271,14,262,18],[271,15,262,19,"id"],[271,17,262,21],[271,20,262,24,"id"],[271,22,262,26],[272,6,263,8],[273,6,264,8],[273,12,264,14,"isTransportWritable"],[273,31,264,33],[273,34,264,36],[273,35,264,37,"_b"],[273,37,264,39],[273,40,264,42],[273,41,264,43,"_a"],[273,43,264,45],[273,46,264,48],[273,50,264,52],[273,51,264,53,"io"],[273,53,264,55],[273,54,264,56,"engine"],[273,60,264,62],[273,66,264,68],[273,70,264,72],[273,74,264,76,"_a"],[273,76,264,78],[273,81,264,83],[273,86,264,88],[273,87,264,89],[273,90,264,92],[273,95,264,97],[273,96,264,98],[273,99,264,101,"_a"],[273,101,264,103],[273,102,264,104,"transport"],[273,111,264,113],[273,117,264,119],[273,121,264,123],[273,125,264,127,"_b"],[273,127,264,129],[273,132,264,134],[273,137,264,139],[273,138,264,140],[273,141,264,143],[273,146,264,148],[273,147,264,149],[273,150,264,152,"_b"],[273,152,264,154],[273,153,264,155,"writable"],[273,161,264,163],[274,6,265,8],[274,12,265,14,"isConnected"],[274,23,265,25],[274,26,265,28],[274,30,265,32],[274,31,265,33,"connected"],[274,40,265,42],[274,44,265,46],[274,46,265,48],[274,47,265,49,"_c"],[274,49,265,51],[274,52,265,54],[274,56,265,58],[274,57,265,59,"io"],[274,59,265,61],[274,60,265,62,"engine"],[274,66,265,68],[274,72,265,74],[274,76,265,78],[274,80,265,82,"_c"],[274,82,265,84],[274,87,265,89],[274,92,265,94],[274,93,265,95],[274,96,265,98],[274,101,265,103],[274,102,265,104],[274,105,265,107,"_c"],[274,107,265,109],[274,108,265,110,"_hasPingExpired"],[274,123,265,125],[274,124,265,126],[274,125,265,127],[274,126,265,128],[275,6,266,8],[275,12,266,14,"discardPacket"],[275,25,266,27],[275,28,266,30],[275,32,266,34],[275,33,266,35,"flags"],[275,38,266,40],[275,39,266,41,"volatile"],[275,47,266,49],[275,51,266,53],[275,52,266,54,"isTransportWritable"],[275,71,266,73],[276,6,267,8],[276,10,267,12,"discardPacket"],[276,23,267,25],[276,25,267,27],[277,8,268,12,"debug"],[277,13,268,17],[277,14,268,18],[277,73,268,77],[277,74,268,78],[278,6,269,8],[278,7,269,9],[278,13,270,13],[278,17,270,17,"isConnected"],[278,28,270,28],[278,30,270,30],[279,8,271,12],[279,12,271,16],[279,13,271,17,"notifyOutgoingListeners"],[279,36,271,40],[279,37,271,41,"packet"],[279,43,271,47],[279,44,271,48],[280,8,272,12],[280,12,272,16],[280,13,272,17,"packet"],[280,19,272,23],[280,20,272,24,"packet"],[280,26,272,30],[280,27,272,31],[281,6,273,8],[281,7,273,9],[281,13,274,13],[282,8,275,12],[282,12,275,16],[282,13,275,17,"sendBuffer"],[282,23,275,27],[282,24,275,28,"push"],[282,28,275,32],[282,29,275,33,"packet"],[282,35,275,39],[282,36,275,40],[283,6,276,8],[284,6,277,8],[284,10,277,12],[284,11,277,13,"flags"],[284,16,277,18],[284,19,277,21],[284,20,277,22],[284,21,277,23],[285,6,278,8],[285,13,278,15],[285,17,278,19],[286,4,279,4],[287,4,280,4],[288,0,281,0],[289,0,282,0],[290,4,283,4,"_registerAckCallback"],[290,24,283,24,"_registerAckCallback"],[290,25,283,25,"id"],[290,27,283,27],[290,29,283,29,"ack"],[290,32,283,32],[290,34,283,34],[291,6,284,8],[291,10,284,12,"_a"],[291,12,284,14],[292,6,285,8],[292,12,285,14,"timeout"],[292,19,285,21],[292,22,285,24],[292,23,285,25,"_a"],[292,25,285,27],[292,28,285,30],[292,32,285,34],[292,33,285,35,"flags"],[292,38,285,40],[292,39,285,41,"timeout"],[292,46,285,48],[292,52,285,54],[292,56,285,58],[292,60,285,62,"_a"],[292,62,285,64],[292,67,285,69],[292,72,285,74],[292,73,285,75],[292,76,285,78,"_a"],[292,78,285,80],[292,81,285,83],[292,85,285,87],[292,86,285,88,"_opts"],[292,91,285,93],[292,92,285,94,"ackTimeout"],[292,102,285,104],[293,6,286,8],[293,10,286,12,"timeout"],[293,17,286,19],[293,22,286,24,"undefined"],[293,31,286,33],[293,33,286,35],[294,8,287,12],[294,12,287,16],[294,13,287,17,"acks"],[294,17,287,21],[294,18,287,22,"id"],[294,20,287,24],[294,21,287,25],[294,24,287,28,"ack"],[294,27,287,31],[295,8,288,12],[296,6,289,8],[297,6,290,8],[298,6,291,8],[298,12,291,14,"timer"],[298,17,291,19],[298,20,291,22],[298,24,291,26],[298,25,291,27,"io"],[298,27,291,29],[298,28,291,30,"setTimeoutFn"],[298,40,291,42],[298,41,291,43],[298,47,291,49],[299,8,292,12],[299,15,292,19],[299,19,292,23],[299,20,292,24,"acks"],[299,24,292,28],[299,25,292,29,"id"],[299,27,292,31],[299,28,292,32],[300,8,293,12],[300,13,293,17],[300,17,293,21,"i"],[300,18,293,22],[300,21,293,25],[300,22,293,26],[300,24,293,28,"i"],[300,25,293,29],[300,28,293,32],[300,32,293,36],[300,33,293,37,"sendBuffer"],[300,43,293,47],[300,44,293,48,"length"],[300,50,293,54],[300,52,293,56,"i"],[300,53,293,57],[300,55,293,59],[300,57,293,61],[301,10,294,16],[301,14,294,20],[301,18,294,24],[301,19,294,25,"sendBuffer"],[301,29,294,35],[301,30,294,36,"i"],[301,31,294,37],[301,32,294,38],[301,33,294,39,"id"],[301,35,294,41],[301,40,294,46,"id"],[301,42,294,48],[301,44,294,50],[302,12,295,20,"debug"],[302,17,295,25],[302,18,295,26],[302,66,295,74],[302,68,295,76,"id"],[302,70,295,78],[302,71,295,79],[303,12,296,20],[303,16,296,24],[303,17,296,25,"sendBuffer"],[303,27,296,35],[303,28,296,36,"splice"],[303,34,296,42],[303,35,296,43,"i"],[303,36,296,44],[303,38,296,46],[303,39,296,47],[303,40,296,48],[304,10,297,16],[305,8,298,12],[306,8,299,12,"debug"],[306,13,299,17],[306,14,299,18],[306,62,299,66],[306,64,299,68,"id"],[306,66,299,70],[306,68,299,72,"timeout"],[306,75,299,79],[306,76,299,80],[307,8,300,12,"ack"],[307,11,300,15],[307,12,300,16,"call"],[307,16,300,20],[307,17,300,21],[307,21,300,25],[307,23,300,27],[307,27,300,31,"Error"],[307,32,300,36],[307,33,300,37],[307,58,300,62],[307,59,300,63],[307,60,300,64],[308,6,301,8],[308,7,301,9],[308,9,301,11,"timeout"],[308,16,301,18],[308,17,301,19],[309,6,302,8],[309,12,302,14,"fn"],[309,14,302,16],[309,17,302,19,"fn"],[309,18,302,20],[309,21,302,23,"args"],[309,25,302,27],[309,30,302,32],[310,8,303,12],[311,8,304,12],[311,12,304,16],[311,13,304,17,"io"],[311,15,304,19],[311,16,304,20,"clearTimeoutFn"],[311,30,304,34],[311,31,304,35,"timer"],[311,36,304,40],[311,37,304,41],[312,8,305,12,"ack"],[312,11,305,15],[312,12,305,16,"apply"],[312,17,305,21],[312,18,305,22],[312,22,305,26],[312,24,305,28,"args"],[312,28,305,32],[312,29,305,33],[313,6,306,8],[313,7,306,9],[314,6,307,8,"fn"],[314,8,307,10],[314,9,307,11,"withError"],[314,18,307,20],[314,21,307,23],[314,25,307,27],[315,6,308,8],[315,10,308,12],[315,11,308,13,"acks"],[315,15,308,17],[315,16,308,18,"id"],[315,18,308,20],[315,19,308,21],[315,22,308,24,"fn"],[315,24,308,26],[316,4,309,4],[317,4,310,4],[318,0,311,0],[319,0,312,0],[320,0,313,0],[321,0,314,0],[322,0,315,0],[323,0,316,0],[324,0,317,0],[325,0,318,0],[326,0,319,0],[327,0,320,0],[328,0,321,0],[329,0,322,0],[330,0,323,0],[331,0,324,0],[332,0,325,0],[333,4,326,4,"emitWithAck"],[333,15,326,15,"emitWithAck"],[333,16,326,16,"ev"],[333,18,326,18],[333,20,326,20],[333,23,326,23,"args"],[333,27,326,27],[333,29,326,29],[334,6,327,8],[334,13,327,15],[334,17,327,19,"Promise"],[334,24,327,26],[334,25,327,27],[334,26,327,28,"resolve"],[334,33,327,35],[334,35,327,37,"reject"],[334,41,327,43],[334,46,327,48],[335,8,328,12],[335,14,328,18,"fn"],[335,16,328,20],[335,19,328,23,"fn"],[335,20,328,24,"arg1"],[335,24,328,28],[335,26,328,30,"arg2"],[335,30,328,34],[335,35,328,39],[336,10,329,16],[336,17,329,23,"arg1"],[336,21,329,27],[336,24,329,30,"reject"],[336,30,329,36],[336,31,329,37,"arg1"],[336,35,329,41],[336,36,329,42],[336,39,329,45,"resolve"],[336,46,329,52],[336,47,329,53,"arg2"],[336,51,329,57],[336,52,329,58],[337,8,330,12],[337,9,330,13],[338,8,331,12,"fn"],[338,10,331,14],[338,11,331,15,"withError"],[338,20,331,24],[338,23,331,27],[338,27,331,31],[339,8,332,12,"args"],[339,12,332,16],[339,13,332,17,"push"],[339,17,332,21],[339,18,332,22,"fn"],[339,20,332,24],[339,21,332,25],[340,8,333,12],[340,12,333,16],[340,13,333,17,"emit"],[340,17,333,21],[340,18,333,22,"ev"],[340,20,333,24],[340,22,333,26],[340,25,333,29,"args"],[340,29,333,33],[340,30,333,34],[341,6,334,8],[341,7,334,9],[341,8,334,10],[342,4,335,4],[343,4,336,4],[344,0,337,0],[345,0,338,0],[346,0,339,0],[347,0,340,0],[348,4,341,4,"_addToQueue"],[348,15,341,15,"_addToQueue"],[348,16,341,16,"args"],[348,20,341,20],[348,22,341,22],[349,6,342,8],[349,10,342,12,"ack"],[349,13,342,15],[350,6,343,8],[350,10,343,12],[350,17,343,19,"args"],[350,21,343,23],[350,22,343,24,"args"],[350,26,343,28],[350,27,343,29,"length"],[350,33,343,35],[350,36,343,38],[350,37,343,39],[350,38,343,40],[350,43,343,45],[350,53,343,55],[350,55,343,57],[351,8,344,12,"ack"],[351,11,344,15],[351,14,344,18,"args"],[351,18,344,22],[351,19,344,23,"pop"],[351,22,344,26],[351,23,344,27],[351,24,344,28],[352,6,345,8],[353,6,346,8],[353,12,346,14,"packet"],[353,18,346,20],[353,21,346,23],[354,8,347,12,"id"],[354,10,347,14],[354,12,347,16],[354,16,347,20],[354,17,347,21,"_queueSeq"],[354,26,347,30],[354,28,347,32],[355,8,348,12,"tryCount"],[355,16,348,20],[355,18,348,22],[355,19,348,23],[356,8,349,12,"pending"],[356,15,349,19],[356,17,349,21],[356,22,349,26],[357,8,350,12,"args"],[357,12,350,16],[358,8,351,12,"flags"],[358,13,351,17],[358,15,351,19,"Object"],[358,21,351,25],[358,22,351,26,"assign"],[358,28,351,32],[358,29,351,33],[359,10,351,35,"fromQueue"],[359,19,351,44],[359,21,351,46],[360,8,351,51],[360,9,351,52],[360,11,351,54],[360,15,351,58],[360,16,351,59,"flags"],[360,21,351,64],[361,6,352,8],[361,7,352,9],[362,6,353,8,"args"],[362,10,353,12],[362,11,353,13,"push"],[362,15,353,17],[362,16,353,18],[362,17,353,19,"err"],[362,20,353,22],[362,22,353,24],[362,25,353,27,"responseArgs"],[362,37,353,39],[362,42,353,44],[363,8,354,12],[363,12,354,16,"packet"],[363,18,354,22],[363,23,354,27],[363,27,354,31],[363,28,354,32,"_queue"],[363,34,354,38],[363,35,354,39],[363,36,354,40],[363,37,354,41],[363,39,354,43],[364,10,355,16],[365,10,356,16],[366,8,357,12],[367,8,358,12],[367,14,358,18,"hasError"],[367,22,358,26],[367,25,358,29,"err"],[367,28,358,32],[367,33,358,37],[367,37,358,41],[368,8,359,12],[368,12,359,16,"hasError"],[368,20,359,24],[368,22,359,26],[369,10,360,16],[369,14,360,20,"packet"],[369,20,360,26],[369,21,360,27,"tryCount"],[369,29,360,35],[369,32,360,38],[369,36,360,42],[369,37,360,43,"_opts"],[369,42,360,48],[369,43,360,49,"retries"],[369,50,360,56],[369,52,360,58],[370,12,361,20,"debug"],[370,17,361,25],[370,18,361,26],[370,59,361,67],[370,61,361,69,"packet"],[370,67,361,75],[370,68,361,76,"id"],[370,70,361,78],[370,72,361,80,"packet"],[370,78,361,86],[370,79,361,87,"tryCount"],[370,87,361,95],[370,88,361,96],[371,12,362,20],[371,16,362,24],[371,17,362,25,"_queue"],[371,23,362,31],[371,24,362,32,"shift"],[371,29,362,37],[371,30,362,38],[371,31,362,39],[372,12,363,20],[372,16,363,24,"ack"],[372,19,363,27],[372,21,363,29],[373,14,364,24,"ack"],[373,17,364,27],[373,18,364,28,"err"],[373,21,364,31],[373,22,364,32],[374,12,365,20],[375,10,366,16],[376,8,367,12],[376,9,367,13],[376,15,368,17],[377,10,369,16,"debug"],[377,15,369,21],[377,16,369,22],[377,51,369,57],[377,53,369,59,"packet"],[377,59,369,65],[377,60,369,66,"id"],[377,62,369,68],[377,63,369,69],[378,10,370,16],[378,14,370,20],[378,15,370,21,"_queue"],[378,21,370,27],[378,22,370,28,"shift"],[378,27,370,33],[378,28,370,34],[378,29,370,35],[379,10,371,16],[379,14,371,20,"ack"],[379,17,371,23],[379,19,371,25],[380,12,372,20,"ack"],[380,15,372,23],[380,16,372,24],[380,20,372,28],[380,22,372,30],[380,25,372,33,"responseArgs"],[380,37,372,45],[380,38,372,46],[381,10,373,16],[382,8,374,12],[383,8,375,12,"packet"],[383,14,375,18],[383,15,375,19,"pending"],[383,22,375,26],[383,25,375,29],[383,30,375,34],[384,8,376,12],[384,15,376,19],[384,19,376,23],[384,20,376,24,"_drainQueue"],[384,31,376,35],[384,32,376,36],[384,33,376,37],[385,6,377,8],[385,7,377,9],[385,8,377,10],[386,6,378,8],[386,10,378,12],[386,11,378,13,"_queue"],[386,17,378,19],[386,18,378,20,"push"],[386,22,378,24],[386,23,378,25,"packet"],[386,29,378,31],[386,30,378,32],[387,6,379,8],[387,10,379,12],[387,11,379,13,"_drainQueue"],[387,22,379,24],[387,23,379,25],[387,24,379,26],[388,4,380,4],[389,4,381,4],[390,0,382,0],[391,0,383,0],[392,0,384,0],[393,0,385,0],[394,0,386,0],[395,4,387,4,"_drainQueue"],[395,15,387,15,"_drainQueue"],[395,16,387,16,"force"],[395,21,387,21],[395,24,387,24],[395,29,387,29],[395,31,387,31],[396,6,388,8,"debug"],[396,11,388,13],[396,12,388,14],[396,28,388,30],[396,29,388,31],[397,6,389,8],[397,10,389,12],[397,11,389,13],[397,15,389,17],[397,16,389,18,"connected"],[397,25,389,27],[397,29,389,31],[397,33,389,35],[397,34,389,36,"_queue"],[397,40,389,42],[397,41,389,43,"length"],[397,47,389,49],[397,52,389,54],[397,53,389,55],[397,55,389,57],[398,8,390,12],[399,6,391,8],[400,6,392,8],[400,12,392,14,"packet"],[400,18,392,20],[400,21,392,23],[400,25,392,27],[400,26,392,28,"_queue"],[400,32,392,34],[400,33,392,35],[400,34,392,36],[400,35,392,37],[401,6,393,8],[401,10,393,12,"packet"],[401,16,393,18],[401,17,393,19,"pending"],[401,24,393,26],[401,28,393,30],[401,29,393,31,"force"],[401,34,393,36],[401,36,393,38],[402,8,394,12,"debug"],[402,13,394,17],[402,14,394,18],[402,75,394,79],[402,77,394,81,"packet"],[402,83,394,87],[402,84,394,88,"id"],[402,86,394,90],[402,87,394,91],[403,8,395,12],[404,6,396,8],[405,6,397,8,"packet"],[405,12,397,14],[405,13,397,15,"pending"],[405,20,397,22],[405,23,397,25],[405,27,397,29],[406,6,398,8,"packet"],[406,12,398,14],[406,13,398,15,"tryCount"],[406,21,398,23],[406,23,398,25],[407,6,399,8,"debug"],[407,11,399,13],[407,12,399,14],[407,44,399,46],[407,46,399,48,"packet"],[407,52,399,54],[407,53,399,55,"id"],[407,55,399,57],[407,57,399,59,"packet"],[407,63,399,65],[407,64,399,66,"tryCount"],[407,72,399,74],[407,73,399,75],[408,6,400,8],[408,10,400,12],[408,11,400,13,"flags"],[408,16,400,18],[408,19,400,21,"packet"],[408,25,400,27],[408,26,400,28,"flags"],[408,31,400,33],[409,6,401,8],[409,10,401,12],[409,11,401,13,"emit"],[409,15,401,17],[409,16,401,18,"apply"],[409,21,401,23],[409,22,401,24],[409,26,401,28],[409,28,401,30,"packet"],[409,34,401,36],[409,35,401,37,"args"],[409,39,401,41],[409,40,401,42],[410,4,402,4],[411,4,403,4],[412,0,404,0],[413,0,405,0],[414,0,406,0],[415,0,407,0],[416,0,408,0],[417,4,409,4,"packet"],[417,10,409,10,"packet"],[417,11,409,11,"packet"],[417,17,409,17],[417,19,409,19],[418,6,410,8,"packet"],[418,12,410,14],[418,13,410,15,"nsp"],[418,16,410,18],[418,19,410,21],[418,23,410,25],[418,24,410,26,"nsp"],[418,27,410,29],[419,6,411,8],[419,10,411,12],[419,11,411,13,"io"],[419,13,411,15],[419,14,411,16,"_packet"],[419,21,411,23],[419,22,411,24,"packet"],[419,28,411,30],[419,29,411,31],[420,4,412,4],[421,4,413,4],[422,0,414,0],[423,0,415,0],[424,0,416,0],[425,0,417,0],[426,4,418,4,"onopen"],[426,10,418,10,"onopen"],[426,11,418,10],[426,13,418,13],[427,6,419,8,"debug"],[427,11,419,13],[427,12,419,14],[427,44,419,46],[427,45,419,47],[428,6,420,8],[428,10,420,12],[428,17,420,19],[428,21,420,23],[428,22,420,24,"auth"],[428,26,420,28],[428,30,420,32],[428,40,420,42],[428,42,420,44],[429,8,421,12],[429,12,421,16],[429,13,421,17,"auth"],[429,17,421,21],[429,18,421,23,"data"],[429,22,421,27],[429,26,421,32],[430,10,422,16],[430,14,422,20],[430,15,422,21,"_sendConnectPacket"],[430,33,422,39],[430,34,422,40,"data"],[430,38,422,44],[430,39,422,45],[431,8,423,12],[431,9,423,13],[431,10,423,14],[432,6,424,8],[432,7,424,9],[432,13,425,13],[433,8,426,12],[433,12,426,16],[433,13,426,17,"_sendConnectPacket"],[433,31,426,35],[433,32,426,36],[433,36,426,40],[433,37,426,41,"auth"],[433,41,426,45],[433,42,426,46],[434,6,427,8],[435,4,428,4],[436,4,429,4],[437,0,430,0],[438,0,431,0],[439,0,432,0],[440,0,433,0],[441,0,434,0],[442,4,435,4,"_sendConnectPacket"],[442,22,435,22,"_sendConnectPacket"],[442,23,435,23,"data"],[442,27,435,27],[442,29,435,29],[443,6,436,8],[443,10,436,12],[443,11,436,13,"packet"],[443,17,436,19],[443,18,436,20],[444,8,437,12,"type"],[444,12,437,16],[444,14,437,18,"PacketType"],[444,29,437,28],[444,30,437,28,"PacketType"],[444,40,437,28],[444,41,437,29,"CONNECT"],[444,48,437,36],[445,8,438,12,"data"],[445,12,438,16],[445,14,438,18],[445,18,438,22],[445,19,438,23,"_pid"],[445,23,438,27],[445,26,439,18,"Object"],[445,32,439,24],[445,33,439,25,"assign"],[445,39,439,31],[445,40,439,32],[446,10,439,34,"pid"],[446,13,439,37],[446,15,439,39],[446,19,439,43],[446,20,439,44,"_pid"],[446,24,439,48],[447,10,439,50,"offset"],[447,16,439,56],[447,18,439,58],[447,22,439,62],[447,23,439,63,"_lastOffset"],[448,8,439,75],[448,9,439,76],[448,11,439,78,"data"],[448,15,439,82],[448,16,439,83],[448,19,440,18,"data"],[449,6,441,8],[449,7,441,9],[449,8,441,10],[450,4,442,4],[451,4,443,4],[452,0,444,0],[453,0,445,0],[454,0,446,0],[455,0,447,0],[456,0,448,0],[457,4,449,4,"onerror"],[457,11,449,11,"onerror"],[457,12,449,12,"err"],[457,15,449,15],[457,17,449,17],[458,6,450,8],[458,10,450,12],[458,11,450,13],[458,15,450,17],[458,16,450,18,"connected"],[458,25,450,27],[458,27,450,29],[459,8,451,12],[459,12,451,16],[459,13,451,17,"emitReserved"],[459,25,451,29],[459,26,451,30],[459,41,451,45],[459,43,451,47,"err"],[459,46,451,50],[459,47,451,51],[460,6,452,8],[461,4,453,4],[462,4,454,4],[463,0,455,0],[464,0,456,0],[465,0,457,0],[466,0,458,0],[467,0,459,0],[468,0,460,0],[469,4,461,4,"onclose"],[469,11,461,11,"onclose"],[469,12,461,12,"reason"],[469,18,461,18],[469,20,461,20,"description"],[469,31,461,31],[469,33,461,33],[470,6,462,8,"debug"],[470,11,462,13],[470,12,462,14],[470,24,462,26],[470,26,462,28,"reason"],[470,32,462,34],[470,33,462,35],[471,6,463,8],[471,10,463,12],[471,11,463,13,"connected"],[471,20,463,22],[471,23,463,25],[471,28,463,30],[472,6,464,8],[472,13,464,15],[472,17,464,19],[472,18,464,20,"id"],[472,20,464,22],[473,6,465,8],[473,10,465,12],[473,11,465,13,"emitReserved"],[473,23,465,25],[473,24,465,26],[473,36,465,38],[473,38,465,40,"reason"],[473,44,465,46],[473,46,465,48,"description"],[473,57,465,59],[473,58,465,60],[474,6,466,8],[474,10,466,12],[474,11,466,13,"_clearAcks"],[474,21,466,23],[474,22,466,24],[474,23,466,25],[475,4,467,4],[476,4,468,4],[477,0,469,0],[478,0,470,0],[479,0,471,0],[480,0,472,0],[481,0,473,0],[482,4,474,4,"_clearAcks"],[482,14,474,14,"_clearAcks"],[482,15,474,14],[482,17,474,17],[483,6,475,8,"Object"],[483,12,475,14],[483,13,475,15,"keys"],[483,17,475,19],[483,18,475,20],[483,22,475,24],[483,23,475,25,"acks"],[483,27,475,29],[483,28,475,30],[483,29,475,31,"forEach"],[483,36,475,38],[483,37,475,40,"id"],[483,39,475,42],[483,43,475,47],[484,8,476,12],[484,14,476,18,"isBuffered"],[484,24,476,28],[484,27,476,31],[484,31,476,35],[484,32,476,36,"sendBuffer"],[484,42,476,46],[484,43,476,47,"some"],[484,47,476,51],[484,48,476,53,"packet"],[484,54,476,59],[484,58,476,64,"String"],[484,64,476,70],[484,65,476,71,"packet"],[484,71,476,77],[484,72,476,78,"id"],[484,74,476,80],[484,75,476,81],[484,80,476,86,"id"],[484,82,476,88],[484,83,476,89],[485,8,477,12],[485,12,477,16],[485,13,477,17,"isBuffered"],[485,23,477,27],[485,25,477,29],[486,10,478,16],[487,10,479,16],[487,16,479,22,"ack"],[487,19,479,25],[487,22,479,28],[487,26,479,32],[487,27,479,33,"acks"],[487,31,479,37],[487,32,479,38,"id"],[487,34,479,40],[487,35,479,41],[488,10,480,16],[488,17,480,23],[488,21,480,27],[488,22,480,28,"acks"],[488,26,480,32],[488,27,480,33,"id"],[488,29,480,35],[488,30,480,36],[489,10,481,16],[489,14,481,20,"ack"],[489,17,481,23],[489,18,481,24,"withError"],[489,27,481,33],[489,29,481,35],[490,12,482,20,"ack"],[490,15,482,23],[490,16,482,24,"call"],[490,20,482,28],[490,21,482,29],[490,25,482,33],[490,27,482,35],[490,31,482,39,"Error"],[490,36,482,44],[490,37,482,45],[490,67,482,75],[490,68,482,76],[490,69,482,77],[491,10,483,16],[492,8,484,12],[493,6,485,8],[493,7,485,9],[493,8,485,10],[494,4,486,4],[495,4,487,4],[496,0,488,0],[497,0,489,0],[498,0,490,0],[499,0,491,0],[500,0,492,0],[501,4,493,4,"onpacket"],[501,12,493,12,"onpacket"],[501,13,493,13,"packet"],[501,19,493,19],[501,21,493,21],[502,6,494,8],[502,12,494,14,"sameNamespace"],[502,25,494,27],[502,28,494,30,"packet"],[502,34,494,36],[502,35,494,37,"nsp"],[502,38,494,40],[502,43,494,45],[502,47,494,49],[502,48,494,50,"nsp"],[502,51,494,53],[503,6,495,8],[503,10,495,12],[503,11,495,13,"sameNamespace"],[503,24,495,26],[503,26,496,12],[504,6,497,8],[504,14,497,16,"packet"],[504,20,497,22],[504,21,497,23,"type"],[504,25,497,27],[505,8,498,12],[505,13,498,17,"PacketType"],[505,28,498,27],[505,29,498,27,"PacketType"],[505,39,498,27],[505,40,498,28,"CONNECT"],[505,47,498,35],[506,10,499,16],[506,14,499,20,"packet"],[506,20,499,26],[506,21,499,27,"data"],[506,25,499,31],[506,29,499,35,"packet"],[506,35,499,41],[506,36,499,42,"data"],[506,40,499,46],[506,41,499,47,"sid"],[506,44,499,50],[506,46,499,52],[507,12,500,20],[507,16,500,24],[507,17,500,25,"onconnect"],[507,26,500,34],[507,27,500,35,"packet"],[507,33,500,41],[507,34,500,42,"data"],[507,38,500,46],[507,39,500,47,"sid"],[507,42,500,50],[507,44,500,52,"packet"],[507,50,500,58],[507,51,500,59,"data"],[507,55,500,63],[507,56,500,64,"pid"],[507,59,500,67],[507,60,500,68],[508,10,501,16],[508,11,501,17],[508,17,502,21],[509,12,503,20],[509,16,503,24],[509,17,503,25,"emitReserved"],[509,29,503,37],[509,30,503,38],[509,45,503,53],[509,47,503,55],[509,51,503,59,"Error"],[509,56,503,64],[509,57,503,65],[509,244,503,252],[509,245,503,253],[509,246,503,254],[510,10,504,16],[511,10,505,16],[512,8,506,12],[512,13,506,17,"PacketType"],[512,28,506,27],[512,29,506,27,"PacketType"],[512,39,506,27],[512,40,506,28,"EVENT"],[512,45,506,33],[513,8,507,12],[513,13,507,17,"PacketType"],[513,28,507,27],[513,29,507,27,"PacketType"],[513,39,507,27],[513,40,507,28,"BINARY_EVENT"],[513,52,507,40],[514,10,508,16],[514,14,508,20],[514,15,508,21,"onevent"],[514,22,508,28],[514,23,508,29,"packet"],[514,29,508,35],[514,30,508,36],[515,10,509,16],[516,8,510,12],[516,13,510,17,"PacketType"],[516,28,510,27],[516,29,510,27,"PacketType"],[516,39,510,27],[516,40,510,28,"ACK"],[516,43,510,31],[517,8,511,12],[517,13,511,17,"PacketType"],[517,28,511,27],[517,29,511,27,"PacketType"],[517,39,511,27],[517,40,511,28,"BINARY_ACK"],[517,50,511,38],[518,10,512,16],[518,14,512,20],[518,15,512,21,"onack"],[518,20,512,26],[518,21,512,27,"packet"],[518,27,512,33],[518,28,512,34],[519,10,513,16],[520,8,514,12],[520,13,514,17,"PacketType"],[520,28,514,27],[520,29,514,27,"PacketType"],[520,39,514,27],[520,40,514,28,"DISCONNECT"],[520,50,514,38],[521,10,515,16],[521,14,515,20],[521,15,515,21,"ondisconnect"],[521,27,515,33],[521,28,515,34],[521,29,515,35],[522,10,516,16],[523,8,517,12],[523,13,517,17,"PacketType"],[523,28,517,27],[523,29,517,27,"PacketType"],[523,39,517,27],[523,40,517,28,"CONNECT_ERROR"],[523,53,517,41],[524,10,518,16],[524,14,518,20],[524,15,518,21,"destroy"],[524,22,518,28],[524,23,518,29],[524,24,518,30],[525,10,519,16],[525,16,519,22,"err"],[525,19,519,25],[525,22,519,28],[525,26,519,32,"Error"],[525,31,519,37],[525,32,519,38,"packet"],[525,38,519,44],[525,39,519,45,"data"],[525,43,519,49],[525,44,519,50,"message"],[525,51,519,57],[525,52,519,58],[526,10,520,16],[527,10,521,16,"err"],[527,13,521,19],[527,14,521,20,"data"],[527,18,521,24],[527,21,521,27,"packet"],[527,27,521,33],[527,28,521,34,"data"],[527,32,521,38],[527,33,521,39,"data"],[527,37,521,43],[528,10,522,16],[528,14,522,20],[528,15,522,21,"emitReserved"],[528,27,522,33],[528,28,522,34],[528,43,522,49],[528,45,522,51,"err"],[528,48,522,54],[528,49,522,55],[529,10,523,16],[530,6,524,8],[531,4,525,4],[532,4,526,4],[533,0,527,0],[534,0,528,0],[535,0,529,0],[536,0,530,0],[537,0,531,0],[538,4,532,4,"onevent"],[538,11,532,11,"onevent"],[538,12,532,12,"packet"],[538,18,532,18],[538,20,532,20],[539,6,533,8],[539,12,533,14,"args"],[539,16,533,18],[539,19,533,21,"packet"],[539,25,533,27],[539,26,533,28,"data"],[539,30,533,32],[539,34,533,36],[539,36,533,38],[540,6,534,8,"debug"],[540,11,534,13],[540,12,534,14],[540,31,534,33],[540,33,534,35,"args"],[540,37,534,39],[540,38,534,40],[541,6,535,8],[541,10,535,12],[541,14,535,16],[541,18,535,20,"packet"],[541,24,535,26],[541,25,535,27,"id"],[541,27,535,29],[541,29,535,31],[542,8,536,12,"debug"],[542,13,536,17],[542,14,536,18],[542,47,536,51],[542,48,536,52],[543,8,537,12,"args"],[543,12,537,16],[543,13,537,17,"push"],[543,17,537,21],[543,18,537,22],[543,22,537,26],[543,23,537,27,"ack"],[543,26,537,30],[543,27,537,31,"packet"],[543,33,537,37],[543,34,537,38,"id"],[543,36,537,40],[543,37,537,41],[543,38,537,42],[544,6,538,8],[545,6,539,8],[545,10,539,12],[545,14,539,16],[545,15,539,17,"connected"],[545,24,539,26],[545,26,539,28],[546,8,540,12],[546,12,540,16],[546,13,540,17,"emitEvent"],[546,22,540,26],[546,23,540,27,"args"],[546,27,540,31],[546,28,540,32],[547,6,541,8],[547,7,541,9],[547,13,542,13],[548,8,543,12],[548,12,543,16],[548,13,543,17,"receiveBuffer"],[548,26,543,30],[548,27,543,31,"push"],[548,31,543,35],[548,32,543,36,"Object"],[548,38,543,42],[548,39,543,43,"freeze"],[548,45,543,49],[548,46,543,50,"args"],[548,50,543,54],[548,51,543,55],[548,52,543,56],[549,6,544,8],[550,4,545,4],[551,4,546,4,"emitEvent"],[551,13,546,13,"emitEvent"],[551,14,546,14,"args"],[551,18,546,18],[551,20,546,20],[552,6,547,8],[552,10,547,12],[552,14,547,16],[552,15,547,17,"_anyListeners"],[552,28,547,30],[552,32,547,34],[552,36,547,38],[552,37,547,39,"_anyListeners"],[552,50,547,52],[552,51,547,53,"length"],[552,57,547,59],[552,59,547,61],[553,8,548,12],[553,14,548,18,"listeners"],[553,23,548,27],[553,26,548,30],[553,30,548,34],[553,31,548,35,"_anyListeners"],[553,44,548,48],[553,45,548,49,"slice"],[553,50,548,54],[553,51,548,55],[553,52,548,56],[554,8,549,12],[554,13,549,17],[554,19,549,23,"listener"],[554,27,549,31],[554,31,549,35,"listeners"],[554,40,549,44],[554,42,549,46],[555,10,550,16,"listener"],[555,18,550,24],[555,19,550,25,"apply"],[555,24,550,30],[555,25,550,31],[555,29,550,35],[555,31,550,37,"args"],[555,35,550,41],[555,36,550,42],[556,8,551,12],[557,6,552,8],[558,6,553,8],[558,11,553,13],[558,12,553,14,"emit"],[558,16,553,18],[558,17,553,19,"apply"],[558,22,553,24],[558,23,553,25],[558,27,553,29],[558,29,553,31,"args"],[558,33,553,35],[558,34,553,36],[559,6,554,8],[559,10,554,12],[559,14,554,16],[559,15,554,17,"_pid"],[559,19,554,21],[559,23,554,25,"args"],[559,27,554,29],[559,28,554,30,"length"],[559,34,554,36],[559,38,554,40],[559,45,554,47,"args"],[559,49,554,51],[559,50,554,52,"args"],[559,54,554,56],[559,55,554,57,"length"],[559,61,554,63],[559,64,554,66],[559,65,554,67],[559,66,554,68],[559,71,554,73],[559,79,554,81],[559,81,554,83],[560,8,555,12],[560,12,555,16],[560,13,555,17,"_lastOffset"],[560,24,555,28],[560,27,555,31,"args"],[560,31,555,35],[560,32,555,36,"args"],[560,36,555,40],[560,37,555,41,"length"],[560,43,555,47],[560,46,555,50],[560,47,555,51],[560,48,555,52],[561,6,556,8],[562,4,557,4],[563,4,558,4],[564,0,559,0],[565,0,560,0],[566,0,561,0],[567,0,562,0],[568,4,563,4,"ack"],[568,7,563,7,"ack"],[568,8,563,8,"id"],[568,10,563,10],[568,12,563,12],[569,6,564,8],[569,12,564,14,"self"],[569,16,564,18],[569,19,564,21],[569,23,564,25],[570,6,565,8],[570,10,565,12,"sent"],[570,14,565,16],[570,17,565,19],[570,22,565,24],[571,6,566,8],[571,13,566,15],[571,23,566,25],[571,26,566,28,"args"],[571,30,566,32],[571,32,566,34],[572,8,567,12],[573,8,568,12],[573,12,568,16,"sent"],[573,16,568,20],[573,18,569,16],[574,8,570,12,"sent"],[574,12,570,16],[574,15,570,19],[574,19,570,23],[575,8,571,12,"debug"],[575,13,571,17],[575,14,571,18],[575,30,571,34],[575,32,571,36,"args"],[575,36,571,40],[575,37,571,41],[576,8,572,12,"self"],[576,12,572,16],[576,13,572,17,"packet"],[576,19,572,23],[576,20,572,24],[577,10,573,16,"type"],[577,14,573,20],[577,16,573,22,"PacketType"],[577,31,573,32],[577,32,573,32,"PacketType"],[577,42,573,32],[577,43,573,33,"ACK"],[577,46,573,36],[578,10,574,16,"id"],[578,12,574,18],[578,14,574,20,"id"],[578,16,574,22],[579,10,575,16,"data"],[579,14,575,20],[579,16,575,22,"args"],[580,8,576,12],[580,9,576,13],[580,10,576,14],[581,6,577,8],[581,7,577,9],[582,4,578,4],[583,4,579,4],[584,0,580,0],[585,0,581,0],[586,0,582,0],[587,0,583,0],[588,0,584,0],[589,4,585,4,"onack"],[589,9,585,9,"onack"],[589,10,585,10,"packet"],[589,16,585,16],[589,18,585,18],[590,6,586,8],[590,12,586,14,"ack"],[590,15,586,17],[590,18,586,20],[590,22,586,24],[590,23,586,25,"acks"],[590,27,586,29],[590,28,586,30,"packet"],[590,34,586,36],[590,35,586,37,"id"],[590,37,586,39],[590,38,586,40],[591,6,587,8],[591,10,587,12],[591,17,587,19,"ack"],[591,20,587,22],[591,25,587,27],[591,35,587,37],[591,37,587,39],[592,8,588,12,"debug"],[592,13,588,17],[592,14,588,18],[592,26,588,30],[592,28,588,32,"packet"],[592,34,588,38],[592,35,588,39,"id"],[592,37,588,41],[592,38,588,42],[593,8,589,12],[594,6,590,8],[595,6,591,8],[595,13,591,15],[595,17,591,19],[595,18,591,20,"acks"],[595,22,591,24],[595,23,591,25,"packet"],[595,29,591,31],[595,30,591,32,"id"],[595,32,591,34],[595,33,591,35],[596,6,592,8,"debug"],[596,11,592,13],[596,12,592,14],[596,36,592,38],[596,38,592,40,"packet"],[596,44,592,46],[596,45,592,47,"id"],[596,47,592,49],[596,49,592,51,"packet"],[596,55,592,57],[596,56,592,58,"data"],[596,60,592,62],[596,61,592,63],[597,6,593,8],[598,6,594,8],[598,10,594,12,"ack"],[598,13,594,15],[598,14,594,16,"withError"],[598,23,594,25],[598,25,594,27],[599,8,595,12,"packet"],[599,14,595,18],[599,15,595,19,"data"],[599,19,595,23],[599,20,595,24,"unshift"],[599,27,595,31],[599,28,595,32],[599,32,595,36],[599,33,595,37],[600,6,596,8],[601,6,597,8],[602,6,598,8,"ack"],[602,9,598,11],[602,10,598,12,"apply"],[602,15,598,17],[602,16,598,18],[602,20,598,22],[602,22,598,24,"packet"],[602,28,598,30],[602,29,598,31,"data"],[602,33,598,35],[602,34,598,36],[603,4,599,4],[604,4,600,4],[605,0,601,0],[606,0,602,0],[607,0,603,0],[608,0,604,0],[609,4,605,4,"onconnect"],[609,13,605,13,"onconnect"],[609,14,605,14,"id"],[609,16,605,16],[609,18,605,18,"pid"],[609,21,605,21],[609,23,605,23],[610,6,606,8,"debug"],[610,11,606,13],[610,12,606,14],[610,41,606,43],[610,43,606,45,"id"],[610,45,606,47],[610,46,606,48],[611,6,607,8],[611,10,607,12],[611,11,607,13,"id"],[611,13,607,15],[611,16,607,18,"id"],[611,18,607,20],[612,6,608,8],[612,10,608,12],[612,11,608,13,"recovered"],[612,20,608,22],[612,23,608,25,"pid"],[612,26,608,28],[612,30,608,32],[612,34,608,36],[612,35,608,37,"_pid"],[612,39,608,41],[612,44,608,46,"pid"],[612,47,608,49],[613,6,609,8],[613,10,609,12],[613,11,609,13,"_pid"],[613,15,609,17],[613,18,609,20,"pid"],[613,21,609,23],[613,22,609,24],[613,23,609,25],[614,6,610,8],[614,10,610,12],[614,11,610,13,"connected"],[614,20,610,22],[614,23,610,25],[614,27,610,29],[615,6,611,8],[615,10,611,12],[615,11,611,13,"emitBuffered"],[615,23,611,25],[615,24,611,26],[615,25,611,27],[616,6,612,8],[616,10,612,12],[616,11,612,13,"emitReserved"],[616,23,612,25],[616,24,612,26],[616,33,612,35],[616,34,612,36],[617,6,613,8],[617,10,613,12],[617,11,613,13,"_drainQueue"],[617,22,613,24],[617,23,613,25],[617,27,613,29],[617,28,613,30],[618,4,614,4],[619,4,615,4],[620,0,616,0],[621,0,617,0],[622,0,618,0],[623,0,619,0],[624,4,620,4,"emitBuffered"],[624,16,620,16,"emitBuffered"],[624,17,620,16],[624,19,620,19],[625,6,621,8],[625,10,621,12],[625,11,621,13,"receiveBuffer"],[625,24,621,26],[625,25,621,27,"forEach"],[625,32,621,34],[625,33,621,36,"args"],[625,37,621,40],[625,41,621,45],[625,45,621,49],[625,46,621,50,"emitEvent"],[625,55,621,59],[625,56,621,60,"args"],[625,60,621,64],[625,61,621,65],[625,62,621,66],[626,6,622,8],[626,10,622,12],[626,11,622,13,"receiveBuffer"],[626,24,622,26],[626,27,622,29],[626,29,622,31],[627,6,623,8],[627,10,623,12],[627,11,623,13,"sendBuffer"],[627,21,623,23],[627,22,623,24,"forEach"],[627,29,623,31],[627,30,623,33,"packet"],[627,36,623,39],[627,40,623,44],[628,8,624,12],[628,12,624,16],[628,13,624,17,"notifyOutgoingListeners"],[628,36,624,40],[628,37,624,41,"packet"],[628,43,624,47],[628,44,624,48],[629,8,625,12],[629,12,625,16],[629,13,625,17,"packet"],[629,19,625,23],[629,20,625,24,"packet"],[629,26,625,30],[629,27,625,31],[630,6,626,8],[630,7,626,9],[630,8,626,10],[631,6,627,8],[631,10,627,12],[631,11,627,13,"sendBuffer"],[631,21,627,23],[631,24,627,26],[631,26,627,28],[632,4,628,4],[633,4,629,4],[634,0,630,0],[635,0,631,0],[636,0,632,0],[637,0,633,0],[638,4,634,4,"ondisconnect"],[638,16,634,16,"ondisconnect"],[638,17,634,16],[638,19,634,19],[639,6,635,8,"debug"],[639,11,635,13],[639,12,635,14],[639,36,635,38],[639,38,635,40],[639,42,635,44],[639,43,635,45,"nsp"],[639,46,635,48],[639,47,635,49],[640,6,636,8],[640,10,636,12],[640,11,636,13,"destroy"],[640,18,636,20],[640,19,636,21],[640,20,636,22],[641,6,637,8],[641,10,637,12],[641,11,637,13,"onclose"],[641,18,637,20],[641,19,637,21],[641,41,637,43],[641,42,637,44],[642,4,638,4],[643,4,639,4],[644,0,640,0],[645,0,641,0],[646,0,642,0],[647,0,643,0],[648,0,644,0],[649,0,645,0],[650,4,646,4,"destroy"],[650,11,646,11,"destroy"],[650,12,646,11],[650,14,646,14],[651,6,647,8],[651,10,647,12],[651,14,647,16],[651,15,647,17,"subs"],[651,19,647,21],[651,21,647,23],[652,8,648,12],[653,8,649,12],[653,12,649,16],[653,13,649,17,"subs"],[653,17,649,21],[653,18,649,22,"forEach"],[653,25,649,29],[653,26,649,31,"subDestroy"],[653,36,649,41],[653,40,649,46,"subDestroy"],[653,50,649,56],[653,51,649,57],[653,52,649,58],[653,53,649,59],[654,8,650,12],[654,12,650,16],[654,13,650,17,"subs"],[654,17,650,21],[654,20,650,24,"undefined"],[654,29,650,33],[655,6,651,8],[656,6,652,8],[656,10,652,12],[656,11,652,13,"io"],[656,13,652,15],[656,14,652,16],[656,24,652,26],[656,25,652,27],[656,26,652,28],[656,30,652,32],[656,31,652,33],[657,4,653,4],[658,4,654,4],[659,0,655,0],[660,0,656,0],[661,0,657,0],[662,0,658,0],[663,0,659,0],[664,0,660,0],[665,0,661,0],[666,0,662,0],[667,0,663,0],[668,0,664,0],[669,0,665,0],[670,0,666,0],[671,0,667,0],[672,0,668,0],[673,0,669,0],[674,4,670,4,"disconnect"],[674,14,670,14,"disconnect"],[674,15,670,14],[674,17,670,17],[675,6,671,8],[675,10,671,12],[675,14,671,16],[675,15,671,17,"connected"],[675,24,671,26],[675,26,671,28],[676,8,672,12,"debug"],[676,13,672,17],[676,14,672,18],[676,42,672,46],[676,44,672,48],[676,48,672,52],[676,49,672,53,"nsp"],[676,52,672,56],[676,53,672,57],[677,8,673,12],[677,12,673,16],[677,13,673,17,"packet"],[677,19,673,23],[677,20,673,24],[678,10,673,26,"type"],[678,14,673,30],[678,16,673,32,"PacketType"],[678,31,673,42],[678,32,673,42,"PacketType"],[678,42,673,42],[678,43,673,43,"DISCONNECT"],[679,8,673,54],[679,9,673,55],[679,10,673,56],[680,6,674,8],[681,6,675,8],[682,6,676,8],[682,10,676,12],[682,11,676,13,"destroy"],[682,18,676,20],[682,19,676,21],[682,20,676,22],[683,6,677,8],[683,10,677,12],[683,14,677,16],[683,15,677,17,"connected"],[683,24,677,26],[683,26,677,28],[684,8,678,12],[685,8,679,12],[685,12,679,16],[685,13,679,17,"onclose"],[685,20,679,24],[685,21,679,25],[685,43,679,47],[685,44,679,48],[686,6,680,8],[687,6,681,8],[687,13,681,15],[687,17,681,19],[688,4,682,4],[689,4,683,4],[690,0,684,0],[691,0,685,0],[692,0,686,0],[693,0,687,0],[694,4,688,4,"close"],[694,9,688,9,"close"],[694,10,688,9],[694,12,688,12],[695,6,689,8],[695,13,689,15],[695,17,689,19],[695,18,689,20,"disconnect"],[695,28,689,30],[695,29,689,31],[695,30,689,32],[696,4,690,4],[697,4,691,4],[698,0,692,0],[699,0,693,0],[700,0,694,0],[701,0,695,0],[702,0,696,0],[703,0,697,0],[704,0,698,0],[705,0,699,0],[706,4,700,4,"compress"],[706,12,700,12,"compress"],[706,13,700,13,"compress"],[706,21,700,21],[706,23,700,23],[707,6,701,8],[707,10,701,12],[707,11,701,13,"flags"],[707,16,701,18],[707,17,701,19,"compress"],[707,25,701,27],[707,28,701,30,"compress"],[707,36,701,38],[708,6,702,8],[708,13,702,15],[708,17,702,19],[709,4,703,4],[710,4,704,4],[711,0,705,0],[712,0,706,0],[713,0,707,0],[714,0,708,0],[715,0,709,0],[716,0,710,0],[717,0,711,0],[718,0,712,0],[719,4,713,4],[719,8,713,8,"volatile"],[719,16,713,16,"volatile"],[719,17,713,16],[719,19,713,19],[720,6,714,8],[720,10,714,12],[720,11,714,13,"flags"],[720,16,714,18],[720,17,714,19,"volatile"],[720,25,714,27],[720,28,714,30],[720,32,714,34],[721,6,715,8],[721,13,715,15],[721,17,715,19],[722,4,716,4],[723,4,717,4],[724,0,718,0],[725,0,719,0],[726,0,720,0],[727,0,721,0],[728,0,722,0],[729,0,723,0],[730,0,724,0],[731,0,725,0],[732,0,726,0],[733,0,727,0],[734,0,728,0],[735,0,729,0],[736,4,730,4,"timeout"],[736,11,730,11,"timeout"],[736,12,730,12,"timeout"],[736,19,730,19],[736,21,730,21],[737,6,731,8],[737,10,731,12],[737,11,731,13,"flags"],[737,16,731,18],[737,17,731,19,"timeout"],[737,24,731,26],[737,27,731,29,"timeout"],[737,34,731,36],[738,6,732,8],[738,13,732,15],[738,17,732,19],[739,4,733,4],[740,4,734,4],[741,0,735,0],[742,0,736,0],[743,0,737,0],[744,0,738,0],[745,0,739,0],[746,0,740,0],[747,0,741,0],[748,0,742,0],[749,0,743,0],[750,0,744,0],[751,4,745,4,"onAny"],[751,9,745,9,"onAny"],[751,10,745,10,"listener"],[751,18,745,18],[751,20,745,20],[752,6,746,8],[752,10,746,12],[752,11,746,13,"_anyListeners"],[752,24,746,26],[752,27,746,29],[752,31,746,33],[752,32,746,34,"_anyListeners"],[752,45,746,47],[752,49,746,51],[752,51,746,53],[753,6,747,8],[753,10,747,12],[753,11,747,13,"_anyListeners"],[753,24,747,26],[753,25,747,27,"push"],[753,29,747,31],[753,30,747,32,"listener"],[753,38,747,40],[753,39,747,41],[754,6,748,8],[754,13,748,15],[754,17,748,19],[755,4,749,4],[756,4,750,4],[757,0,751,0],[758,0,752,0],[759,0,753,0],[760,0,754,0],[761,0,755,0],[762,0,756,0],[763,0,757,0],[764,0,758,0],[765,0,759,0],[766,0,760,0],[767,4,761,4,"prependAny"],[767,14,761,14,"prependAny"],[767,15,761,15,"listener"],[767,23,761,23],[767,25,761,25],[768,6,762,8],[768,10,762,12],[768,11,762,13,"_anyListeners"],[768,24,762,26],[768,27,762,29],[768,31,762,33],[768,32,762,34,"_anyListeners"],[768,45,762,47],[768,49,762,51],[768,51,762,53],[769,6,763,8],[769,10,763,12],[769,11,763,13,"_anyListeners"],[769,24,763,26],[769,25,763,27,"unshift"],[769,32,763,34],[769,33,763,35,"listener"],[769,41,763,43],[769,42,763,44],[770,6,764,8],[770,13,764,15],[770,17,764,19],[771,4,765,4],[772,4,766,4],[773,0,767,0],[774,0,768,0],[775,0,769,0],[776,0,770,0],[777,0,771,0],[778,0,772,0],[779,0,773,0],[780,0,774,0],[781,0,775,0],[782,0,776,0],[783,0,777,0],[784,0,778,0],[785,0,779,0],[786,0,780,0],[787,0,781,0],[788,0,782,0],[789,0,783,0],[790,4,784,4,"offAny"],[790,10,784,10,"offAny"],[790,11,784,11,"listener"],[790,19,784,19],[790,21,784,21],[791,6,785,8],[791,10,785,12],[791,11,785,13],[791,15,785,17],[791,16,785,18,"_anyListeners"],[791,29,785,31],[791,31,785,33],[792,8,786,12],[792,15,786,19],[792,19,786,23],[793,6,787,8],[794,6,788,8],[794,10,788,12,"listener"],[794,18,788,20],[794,20,788,22],[795,8,789,12],[795,14,789,18,"listeners"],[795,23,789,27],[795,26,789,30],[795,30,789,34],[795,31,789,35,"_anyListeners"],[795,44,789,48],[796,8,790,12],[796,13,790,17],[796,17,790,21,"i"],[796,18,790,22],[796,21,790,25],[796,22,790,26],[796,24,790,28,"i"],[796,25,790,29],[796,28,790,32,"listeners"],[796,37,790,41],[796,38,790,42,"length"],[796,44,790,48],[796,46,790,50,"i"],[796,47,790,51],[796,49,790,53],[796,51,790,55],[797,10,791,16],[797,14,791,20,"listener"],[797,22,791,28],[797,27,791,33,"listeners"],[797,36,791,42],[797,37,791,43,"i"],[797,38,791,44],[797,39,791,45],[797,41,791,47],[798,12,792,20,"listeners"],[798,21,792,29],[798,22,792,30,"splice"],[798,28,792,36],[798,29,792,37,"i"],[798,30,792,38],[798,32,792,40],[798,33,792,41],[798,34,792,42],[799,12,793,20],[799,19,793,27],[799,23,793,31],[800,10,794,16],[801,8,795,12],[802,6,796,8],[802,7,796,9],[802,13,797,13],[803,8,798,12],[803,12,798,16],[803,13,798,17,"_anyListeners"],[803,26,798,30],[803,29,798,33],[803,31,798,35],[804,6,799,8],[805,6,800,8],[805,13,800,15],[805,17,800,19],[806,4,801,4],[807,4,802,4],[808,0,803,0],[809,0,804,0],[810,0,805,0],[811,4,806,4,"listenersAny"],[811,16,806,16,"listenersAny"],[811,17,806,16],[811,19,806,19],[812,6,807,8],[812,13,807,15],[812,17,807,19],[812,18,807,20,"_anyListeners"],[812,31,807,33],[812,35,807,37],[812,37,807,39],[813,4,808,4],[814,4,809,4],[815,0,810,0],[816,0,811,0],[817,0,812,0],[818,0,813,0],[819,0,814,0],[820,0,815,0],[821,0,816,0],[822,0,817,0],[823,0,818,0],[824,0,819,0],[825,0,820,0],[826,0,821,0],[827,4,822,4,"onAnyOutgoing"],[827,17,822,17,"onAnyOutgoing"],[827,18,822,18,"listener"],[827,26,822,26],[827,28,822,28],[828,6,823,8],[828,10,823,12],[828,11,823,13,"_anyOutgoingListeners"],[828,32,823,34],[828,35,823,37],[828,39,823,41],[828,40,823,42,"_anyOutgoingListeners"],[828,61,823,63],[828,65,823,67],[828,67,823,69],[829,6,824,8],[829,10,824,12],[829,11,824,13,"_anyOutgoingListeners"],[829,32,824,34],[829,33,824,35,"push"],[829,37,824,39],[829,38,824,40,"listener"],[829,46,824,48],[829,47,824,49],[830,6,825,8],[830,13,825,15],[830,17,825,19],[831,4,826,4],[832,4,827,4],[833,0,828,0],[834,0,829,0],[835,0,830,0],[836,0,831,0],[837,0,832,0],[838,0,833,0],[839,0,834,0],[840,0,835,0],[841,0,836,0],[842,0,837,0],[843,0,838,0],[844,0,839,0],[845,4,840,4,"prependAnyOutgoing"],[845,22,840,22,"prependAnyOutgoing"],[845,23,840,23,"listener"],[845,31,840,31],[845,33,840,33],[846,6,841,8],[846,10,841,12],[846,11,841,13,"_anyOutgoingListeners"],[846,32,841,34],[846,35,841,37],[846,39,841,41],[846,40,841,42,"_anyOutgoingListeners"],[846,61,841,63],[846,65,841,67],[846,67,841,69],[847,6,842,8],[847,10,842,12],[847,11,842,13,"_anyOutgoingListeners"],[847,32,842,34],[847,33,842,35,"unshift"],[847,40,842,42],[847,41,842,43,"listener"],[847,49,842,51],[847,50,842,52],[848,6,843,8],[848,13,843,15],[848,17,843,19],[849,4,844,4],[850,4,845,4],[851,0,846,0],[852,0,847,0],[853,0,848,0],[854,0,849,0],[855,0,850,0],[856,0,851,0],[857,0,852,0],[858,0,853,0],[859,0,854,0],[860,0,855,0],[861,0,856,0],[862,0,857,0],[863,0,858,0],[864,0,859,0],[865,0,860,0],[866,0,861,0],[867,0,862,0],[868,4,863,4,"offAnyOutgoing"],[868,18,863,18,"offAnyOutgoing"],[868,19,863,19,"listener"],[868,27,863,27],[868,29,863,29],[869,6,864,8],[869,10,864,12],[869,11,864,13],[869,15,864,17],[869,16,864,18,"_anyOutgoingListeners"],[869,37,864,39],[869,39,864,41],[870,8,865,12],[870,15,865,19],[870,19,865,23],[871,6,866,8],[872,6,867,8],[872,10,867,12,"listener"],[872,18,867,20],[872,20,867,22],[873,8,868,12],[873,14,868,18,"listeners"],[873,23,868,27],[873,26,868,30],[873,30,868,34],[873,31,868,35,"_anyOutgoingListeners"],[873,52,868,56],[874,8,869,12],[874,13,869,17],[874,17,869,21,"i"],[874,18,869,22],[874,21,869,25],[874,22,869,26],[874,24,869,28,"i"],[874,25,869,29],[874,28,869,32,"listeners"],[874,37,869,41],[874,38,869,42,"length"],[874,44,869,48],[874,46,869,50,"i"],[874,47,869,51],[874,49,869,53],[874,51,869,55],[875,10,870,16],[875,14,870,20,"listener"],[875,22,870,28],[875,27,870,33,"listeners"],[875,36,870,42],[875,37,870,43,"i"],[875,38,870,44],[875,39,870,45],[875,41,870,47],[876,12,871,20,"listeners"],[876,21,871,29],[876,22,871,30,"splice"],[876,28,871,36],[876,29,871,37,"i"],[876,30,871,38],[876,32,871,40],[876,33,871,41],[876,34,871,42],[877,12,872,20],[877,19,872,27],[877,23,872,31],[878,10,873,16],[879,8,874,12],[880,6,875,8],[880,7,875,9],[880,13,876,13],[881,8,877,12],[881,12,877,16],[881,13,877,17,"_anyOutgoingListeners"],[881,34,877,38],[881,37,877,41],[881,39,877,43],[882,6,878,8],[883,6,879,8],[883,13,879,15],[883,17,879,19],[884,4,880,4],[885,4,881,4],[886,0,882,0],[887,0,883,0],[888,0,884,0],[889,4,885,4,"listenersAnyOutgoing"],[889,24,885,24,"listenersAnyOutgoing"],[889,25,885,24],[889,27,885,27],[890,6,886,8],[890,13,886,15],[890,17,886,19],[890,18,886,20,"_anyOutgoingListeners"],[890,39,886,41],[890,43,886,45],[890,45,886,47],[891,4,887,4],[892,4,888,4],[893,0,889,0],[894,0,890,0],[895,0,891,0],[896,0,892,0],[897,0,893,0],[898,0,894,0],[899,4,895,4,"notifyOutgoingListeners"],[899,27,895,27,"notifyOutgoingListeners"],[899,28,895,28,"packet"],[899,34,895,34],[899,36,895,36],[900,6,896,8],[900,10,896,12],[900,14,896,16],[900,15,896,17,"_anyOutgoingListeners"],[900,36,896,38],[900,40,896,42],[900,44,896,46],[900,45,896,47,"_anyOutgoingListeners"],[900,66,896,68],[900,67,896,69,"length"],[900,73,896,75],[900,75,896,77],[901,8,897,12],[901,14,897,18,"listeners"],[901,23,897,27],[901,26,897,30],[901,30,897,34],[901,31,897,35,"_anyOutgoingListeners"],[901,52,897,56],[901,53,897,57,"slice"],[901,58,897,62],[901,59,897,63],[901,60,897,64],[902,8,898,12],[902,13,898,17],[902,19,898,23,"listener"],[902,27,898,31],[902,31,898,35,"listeners"],[902,40,898,44],[902,42,898,46],[903,10,899,16,"listener"],[903,18,899,24],[903,19,899,25,"apply"],[903,24,899,30],[903,25,899,31],[903,29,899,35],[903,31,899,37,"packet"],[903,37,899,43],[903,38,899,44,"data"],[903,42,899,48],[903,43,899,49],[904,8,900,12],[905,6,901,8],[906,4,902,4],[907,2,903,0],[908,0,903,1],[908,3]],"functionMap":{"names":["<global>","Socket","Socket#constructor","Socket#get__disconnected","Socket#subEvents","Socket#get__active","Socket#connect","Socket#open","Socket#send","Socket#emit","Socket#_registerAckCallback","io.setTimeoutFn$argument_0","fn","Socket#emitWithAck","Promise$argument_0","Socket#_addToQueue","args.push$argument_0","Socket#_drainQueue","Socket#packet","Socket#onopen","auth$argument_0","Socket#_sendConnectPacket","Socket#onerror","Socket#onclose","Socket#_clearAcks","Object.keys.forEach$argument_0","sendBuffer.some$argument_0","Socket#onpacket","Socket#onevent","Socket#emitEvent","Socket#ack","<anonymous>","Socket#onack","Socket#onconnect","Socket#emitBuffered","receiveBuffer.forEach$argument_0","sendBuffer.forEach$argument_0","Socket#ondisconnect","Socket#destroy","subs.forEach$argument_0","Socket#disconnect","Socket#close","Socket#compress","Socket#get__volatile","Socket#timeout","Socket#onAny","Socket#prependAny","Socket#offAny","Socket#listenersAny","Socket#onAnyOutgoing","Socket#prependAnyOutgoing","Socket#offAnyOutgoing","Socket#listenersAnyOutgoing","Socket#notifyOutgoingListeners"],"mappings":"AAA;OC0C;ICI;KD4E;IEe;KFE;IGM;KHU;IIkB;KJE;IKW;KLS;IMI;KNE;IOgB;KPI;IQkB;KRuC;ISI;2CCQ;SDU;mBEC;SFI;KTG;IYiB;2BCC;uBFC;aEE;SDI;KZC;IcM;kBCY;SDwB;KdG;IgBO;KhBe;IiBO;KjBG;IkBM;sBCG;aDE;KlBK;IoBO;KpBO;IqBO;KrBI;IsBQ;KtBM;IuBO;uCCC;oDCC,oCD;SDS;KvBC;I0BO;K1BgC;I2BO;K3Ba;I4BC;K5BW;I6BM;eCG;SDW;K7BC;I+BO;K/Bc;IgCM;KhCS;IiCM;mCCC,8BD;gCEE;SFG;KjCE;IoCM;KpCI;IqCQ;8BCG,4BD;KrCI;IuCiB;KvCY;IwCM;KxCE;IyCU;KzCG;I0CU;K1CG;I2Cc;K3CG;I4CY;K5CI;I6CY;K7CI;I8CmB;K9CiB;I+CK;K/CE;IgDc;KhDI;IiDc;KjDI;IkDmB;KlDiB;ImDK;KnDE;IoDQ;KpDO;CDC"},"hasCjsExports":false},"type":"js/module"}]}