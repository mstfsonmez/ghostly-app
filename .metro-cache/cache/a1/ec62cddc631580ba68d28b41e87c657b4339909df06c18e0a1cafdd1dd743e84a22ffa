{"dependencies":[{"name":"stream","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":19,"index":110},"end":{"line":5,"column":36,"index":127}}],"key":"ywjhWBPQUrHXIfwGsbgNg7Szt/A=","exportNames":["*"],"imports":1}},{"name":"crypto","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":27,"index":156},"end":{"line":6,"column":44,"index":173}}],"key":"qkQHogusroKbdlr5of4h1Mv5pUg=","exportNames":["*"],"imports":1}},{"name":"./permessage-deflate","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":26,"index":202},"end":{"line":8,"column":57,"index":233}}],"key":"Q2Pva8QskhgfG9XaS7nBCDBdIDE=","exportNames":["*"],"imports":1}},{"name":"./constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":25,"index":260},"end":{"line":9,"column":47,"index":282}}],"key":"3z43bJyk/UB4EKjDCOXTFak09do=","exportNames":["*"],"imports":1}},{"name":"./validation","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":30,"index":314},"end":{"line":10,"column":53,"index":337}}],"key":"DtGlBq654swJEbIf2z6Mk/R87pk=","exportNames":["*"],"imports":1}},{"name":"./buffer-util","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":11,"column":38,"index":377},"end":{"line":11,"column":62,"index":401}}],"key":"FKD7Yg4fnu7BzoYB+P98shiBLdA=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex\" }] */\n\n  'use strict';\n\n  const {\n    Duplex\n  } = require(_dependencyMap[0], \"stream\");\n  const {\n    randomFillSync\n  } = require(_dependencyMap[1], \"crypto\");\n  const PerMessageDeflate = require(_dependencyMap[2], \"./permessage-deflate\");\n  const {\n    EMPTY_BUFFER\n  } = require(_dependencyMap[3], \"./constants\");\n  const {\n    isValidStatusCode\n  } = require(_dependencyMap[4], \"./validation\");\n  const {\n    mask: applyMask,\n    toBuffer\n  } = require(_dependencyMap[5], \"./buffer-util\");\n  const kByteLength = Symbol('kByteLength');\n  const maskBuffer = Buffer.alloc(4);\n  const RANDOM_POOL_SIZE = 8 * 1024;\n  let randomPool;\n  let randomPoolPointer = RANDOM_POOL_SIZE;\n\n  /**\n   * HyBi Sender implementation.\n   */\n  class Sender {\n    /**\n     * Creates a Sender instance.\n     *\n     * @param {Duplex} socket The connection socket\n     * @param {Object} [extensions] An object containing the negotiated extensions\n     * @param {Function} [generateMask] The function used to generate the masking\n     *     key\n     */\n    constructor(socket, extensions, generateMask) {\n      this._extensions = extensions || {};\n      if (generateMask) {\n        this._generateMask = generateMask;\n        this._maskBuffer = Buffer.alloc(4);\n      }\n      this._socket = socket;\n      this._firstFragment = true;\n      this._compress = false;\n      this._bufferedBytes = 0;\n      this._deflating = false;\n      this._queue = [];\n    }\n\n    /**\n     * Frames a piece of data according to the HyBi WebSocket protocol.\n     *\n     * @param {(Buffer|String)} data The data to frame\n     * @param {Object} options Options object\n     * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n     *     FIN bit\n     * @param {Function} [options.generateMask] The function used to generate the\n     *     masking key\n     * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n     *     `data`\n     * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n     *     key\n     * @param {Number} options.opcode The opcode\n     * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n     *     modified\n     * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n     *     RSV1 bit\n     * @return {(Buffer|String)[]} The framed data\n     * @public\n     */\n    static frame(data, options) {\n      let mask;\n      let merge = false;\n      let offset = 2;\n      let skipMasking = false;\n      if (options.mask) {\n        mask = options.maskBuffer || maskBuffer;\n        if (options.generateMask) {\n          options.generateMask(mask);\n        } else {\n          if (randomPoolPointer === RANDOM_POOL_SIZE) {\n            /* istanbul ignore else  */\n            if (randomPool === undefined) {\n              //\n              // This is lazily initialized because server-sent frames must not\n              // be masked so it may never be used.\n              //\n              randomPool = Buffer.alloc(RANDOM_POOL_SIZE);\n            }\n            randomFillSync(randomPool, 0, RANDOM_POOL_SIZE);\n            randomPoolPointer = 0;\n          }\n          mask[0] = randomPool[randomPoolPointer++];\n          mask[1] = randomPool[randomPoolPointer++];\n          mask[2] = randomPool[randomPoolPointer++];\n          mask[3] = randomPool[randomPoolPointer++];\n        }\n        skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;\n        offset = 6;\n      }\n      let dataLength;\n      if (typeof data === 'string') {\n        if ((!options.mask || skipMasking) && options[kByteLength] !== undefined) {\n          dataLength = options[kByteLength];\n        } else {\n          data = Buffer.from(data);\n          dataLength = data.length;\n        }\n      } else {\n        dataLength = data.length;\n        merge = options.mask && options.readOnly && !skipMasking;\n      }\n      let payloadLength = dataLength;\n      if (dataLength >= 65536) {\n        offset += 8;\n        payloadLength = 127;\n      } else if (dataLength > 125) {\n        offset += 2;\n        payloadLength = 126;\n      }\n      const target = Buffer.allocUnsafe(merge ? dataLength + offset : offset);\n      target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n      if (options.rsv1) target[0] |= 0x40;\n      target[1] = payloadLength;\n      if (payloadLength === 126) {\n        target.writeUInt16BE(dataLength, 2);\n      } else if (payloadLength === 127) {\n        target[2] = target[3] = 0;\n        target.writeUIntBE(dataLength, 4, 6);\n      }\n      if (!options.mask) return [target, data];\n      target[1] |= 0x80;\n      target[offset - 4] = mask[0];\n      target[offset - 3] = mask[1];\n      target[offset - 2] = mask[2];\n      target[offset - 1] = mask[3];\n      if (skipMasking) return [target, data];\n      if (merge) {\n        applyMask(data, mask, target, offset, dataLength);\n        return [target];\n      }\n      applyMask(data, mask, data, 0, dataLength);\n      return [target, data];\n    }\n\n    /**\n     * Sends a close message to the other peer.\n     *\n     * @param {Number} [code] The status code component of the body\n     * @param {(String|Buffer)} [data] The message component of the body\n     * @param {Boolean} [mask=false] Specifies whether or not to mask the message\n     * @param {Function} [cb] Callback\n     * @public\n     */\n    close(code, data, mask, cb) {\n      let buf;\n      if (code === undefined) {\n        buf = EMPTY_BUFFER;\n      } else if (typeof code !== 'number' || !isValidStatusCode(code)) {\n        throw new TypeError('First argument must be a valid error code number');\n      } else if (data === undefined || !data.length) {\n        buf = Buffer.allocUnsafe(2);\n        buf.writeUInt16BE(code, 0);\n      } else {\n        const length = Buffer.byteLength(data);\n        if (length > 123) {\n          throw new RangeError('The message must not be greater than 123 bytes');\n        }\n        buf = Buffer.allocUnsafe(2 + length);\n        buf.writeUInt16BE(code, 0);\n        if (typeof data === 'string') {\n          buf.write(data, 2);\n        } else {\n          buf.set(data, 2);\n        }\n      }\n      const options = {\n        [kByteLength]: buf.length,\n        fin: true,\n        generateMask: this._generateMask,\n        mask,\n        maskBuffer: this._maskBuffer,\n        opcode: 0x08,\n        readOnly: false,\n        rsv1: false\n      };\n      if (this._deflating) {\n        this.enqueue([this.dispatch, buf, false, options, cb]);\n      } else {\n        this.sendFrame(Sender.frame(buf, options), cb);\n      }\n    }\n\n    /**\n     * Sends a ping message to the other peer.\n     *\n     * @param {*} data The message to send\n     * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n     * @param {Function} [cb] Callback\n     * @public\n     */\n    ping(data, mask, cb) {\n      let byteLength;\n      let readOnly;\n      if (typeof data === 'string') {\n        byteLength = Buffer.byteLength(data);\n        readOnly = false;\n      } else {\n        data = toBuffer(data);\n        byteLength = data.length;\n        readOnly = toBuffer.readOnly;\n      }\n      if (byteLength > 125) {\n        throw new RangeError('The data size must not be greater than 125 bytes');\n      }\n      const options = {\n        [kByteLength]: byteLength,\n        fin: true,\n        generateMask: this._generateMask,\n        mask,\n        maskBuffer: this._maskBuffer,\n        opcode: 0x09,\n        readOnly,\n        rsv1: false\n      };\n      if (this._deflating) {\n        this.enqueue([this.dispatch, data, false, options, cb]);\n      } else {\n        this.sendFrame(Sender.frame(data, options), cb);\n      }\n    }\n\n    /**\n     * Sends a pong message to the other peer.\n     *\n     * @param {*} data The message to send\n     * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n     * @param {Function} [cb] Callback\n     * @public\n     */\n    pong(data, mask, cb) {\n      let byteLength;\n      let readOnly;\n      if (typeof data === 'string') {\n        byteLength = Buffer.byteLength(data);\n        readOnly = false;\n      } else {\n        data = toBuffer(data);\n        byteLength = data.length;\n        readOnly = toBuffer.readOnly;\n      }\n      if (byteLength > 125) {\n        throw new RangeError('The data size must not be greater than 125 bytes');\n      }\n      const options = {\n        [kByteLength]: byteLength,\n        fin: true,\n        generateMask: this._generateMask,\n        mask,\n        maskBuffer: this._maskBuffer,\n        opcode: 0x0a,\n        readOnly,\n        rsv1: false\n      };\n      if (this._deflating) {\n        this.enqueue([this.dispatch, data, false, options, cb]);\n      } else {\n        this.sendFrame(Sender.frame(data, options), cb);\n      }\n    }\n\n    /**\n     * Sends a data message to the other peer.\n     *\n     * @param {*} data The message to send\n     * @param {Object} options Options object\n     * @param {Boolean} [options.binary=false] Specifies whether `data` is binary\n     *     or text\n     * @param {Boolean} [options.compress=false] Specifies whether or not to\n     *     compress `data`\n     * @param {Boolean} [options.fin=false] Specifies whether the fragment is the\n     *     last one\n     * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n     *     `data`\n     * @param {Function} [cb] Callback\n     * @public\n     */\n    send(data, options, cb) {\n      const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n      let opcode = options.binary ? 2 : 1;\n      let rsv1 = options.compress;\n      let byteLength;\n      let readOnly;\n      if (typeof data === 'string') {\n        byteLength = Buffer.byteLength(data);\n        readOnly = false;\n      } else {\n        data = toBuffer(data);\n        byteLength = data.length;\n        readOnly = toBuffer.readOnly;\n      }\n      if (this._firstFragment) {\n        this._firstFragment = false;\n        if (rsv1 && perMessageDeflate && perMessageDeflate.params[perMessageDeflate._isServer ? 'server_no_context_takeover' : 'client_no_context_takeover']) {\n          rsv1 = byteLength >= perMessageDeflate._threshold;\n        }\n        this._compress = rsv1;\n      } else {\n        rsv1 = false;\n        opcode = 0;\n      }\n      if (options.fin) this._firstFragment = true;\n      if (perMessageDeflate) {\n        const opts = {\n          [kByteLength]: byteLength,\n          fin: options.fin,\n          generateMask: this._generateMask,\n          mask: options.mask,\n          maskBuffer: this._maskBuffer,\n          opcode,\n          readOnly,\n          rsv1\n        };\n        if (this._deflating) {\n          this.enqueue([this.dispatch, data, this._compress, opts, cb]);\n        } else {\n          this.dispatch(data, this._compress, opts, cb);\n        }\n      } else {\n        this.sendFrame(Sender.frame(data, {\n          [kByteLength]: byteLength,\n          fin: options.fin,\n          generateMask: this._generateMask,\n          mask: options.mask,\n          maskBuffer: this._maskBuffer,\n          opcode,\n          readOnly,\n          rsv1: false\n        }), cb);\n      }\n    }\n\n    /**\n     * Dispatches a message.\n     *\n     * @param {(Buffer|String)} data The message to send\n     * @param {Boolean} [compress=false] Specifies whether or not to compress\n     *     `data`\n     * @param {Object} options Options object\n     * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n     *     FIN bit\n     * @param {Function} [options.generateMask] The function used to generate the\n     *     masking key\n     * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n     *     `data`\n     * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n     *     key\n     * @param {Number} options.opcode The opcode\n     * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n     *     modified\n     * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n     *     RSV1 bit\n     * @param {Function} [cb] Callback\n     * @private\n     */\n    dispatch(data, compress, options, cb) {\n      if (!compress) {\n        this.sendFrame(Sender.frame(data, options), cb);\n        return;\n      }\n      const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n      this._bufferedBytes += options[kByteLength];\n      this._deflating = true;\n      perMessageDeflate.compress(data, options.fin, (_, buf) => {\n        if (this._socket.destroyed) {\n          const err = new Error('The socket was closed while data was being compressed');\n          if (typeof cb === 'function') cb(err);\n          for (let i = 0; i < this._queue.length; i++) {\n            const params = this._queue[i];\n            const callback = params[params.length - 1];\n            if (typeof callback === 'function') callback(err);\n          }\n          return;\n        }\n        this._bufferedBytes -= options[kByteLength];\n        this._deflating = false;\n        options.readOnly = false;\n        this.sendFrame(Sender.frame(buf, options), cb);\n        this.dequeue();\n      });\n    }\n\n    /**\n     * Executes queued send operations.\n     *\n     * @private\n     */\n    dequeue() {\n      while (!this._deflating && this._queue.length) {\n        const params = this._queue.shift();\n        this._bufferedBytes -= params[3][kByteLength];\n        Reflect.apply(params[0], this, params.slice(1));\n      }\n    }\n\n    /**\n     * Enqueues a send operation.\n     *\n     * @param {Array} params Send operation parameters.\n     * @private\n     */\n    enqueue(params) {\n      this._bufferedBytes += params[3][kByteLength];\n      this._queue.push(params);\n    }\n\n    /**\n     * Sends a frame.\n     *\n     * @param {Buffer[]} list The frame to send\n     * @param {Function} [cb] Callback\n     * @private\n     */\n    sendFrame(list, cb) {\n      if (list.length === 2) {\n        this._socket.cork();\n        this._socket.write(list[0]);\n        this._socket.write(list[1], cb);\n        this._socket.uncork();\n      } else {\n        this._socket.write(list[0], cb);\n      }\n    }\n  }\n  module.exports = Sender;\n});","lineCount":441,"map":[[2,2,1,0],[4,2,3,0],[4,14,3,12],[6,2,5,0],[6,8,5,6],[7,4,5,8,"Duplex"],[8,2,5,15],[8,3,5,16],[8,6,5,19,"require"],[8,13,5,26],[8,14,5,26,"_dependencyMap"],[8,28,5,26],[8,41,5,35],[8,42,5,36],[9,2,6,0],[9,8,6,6],[10,4,6,8,"randomFillSync"],[11,2,6,23],[11,3,6,24],[11,6,6,27,"require"],[11,13,6,34],[11,14,6,34,"_dependencyMap"],[11,28,6,34],[11,41,6,43],[11,42,6,44],[12,2,8,0],[12,8,8,6,"PerMessageDeflate"],[12,25,8,23],[12,28,8,26,"require"],[12,35,8,33],[12,36,8,33,"_dependencyMap"],[12,50,8,33],[12,77,8,56],[12,78,8,57],[13,2,9,0],[13,8,9,6],[14,4,9,8,"EMPTY_BUFFER"],[15,2,9,21],[15,3,9,22],[15,6,9,25,"require"],[15,13,9,32],[15,14,9,32,"_dependencyMap"],[15,28,9,32],[15,46,9,46],[15,47,9,47],[16,2,10,0],[16,8,10,6],[17,4,10,8,"isValidStatusCode"],[18,2,10,26],[18,3,10,27],[18,6,10,30,"require"],[18,13,10,37],[18,14,10,37,"_dependencyMap"],[18,28,10,37],[18,47,10,52],[18,48,10,53],[19,2,11,0],[19,8,11,6],[20,4,11,8,"mask"],[20,8,11,12],[20,10,11,14,"applyMask"],[20,19,11,23],[21,4,11,25,"toBuffer"],[22,2,11,34],[22,3,11,35],[22,6,11,38,"require"],[22,13,11,45],[22,14,11,45,"_dependencyMap"],[22,28,11,45],[22,48,11,61],[22,49,11,62],[23,2,13,0],[23,8,13,6,"kByteLength"],[23,19,13,17],[23,22,13,20,"Symbol"],[23,28,13,26],[23,29,13,27],[23,42,13,40],[23,43,13,41],[24,2,14,0],[24,8,14,6,"maskBuffer"],[24,18,14,16],[24,21,14,19,"Buffer"],[24,27,14,25],[24,28,14,26,"alloc"],[24,33,14,31],[24,34,14,32],[24,35,14,33],[24,36,14,34],[25,2,15,0],[25,8,15,6,"RANDOM_POOL_SIZE"],[25,24,15,22],[25,27,15,25],[25,28,15,26],[25,31,15,29],[25,35,15,33],[26,2,16,0],[26,6,16,4,"randomPool"],[26,16,16,14],[27,2,17,0],[27,6,17,4,"randomPoolPointer"],[27,23,17,21],[27,26,17,24,"RANDOM_POOL_SIZE"],[27,42,17,40],[29,2,19,0],[30,0,20,0],[31,0,21,0],[32,2,22,0],[32,8,22,6,"Sender"],[32,14,22,12],[32,15,22,13],[33,4,23,2],[34,0,24,0],[35,0,25,0],[36,0,26,0],[37,0,27,0],[38,0,28,0],[39,0,29,0],[40,0,30,0],[41,4,31,2,"constructor"],[41,15,31,13,"constructor"],[41,16,31,14,"socket"],[41,22,31,20],[41,24,31,22,"extensions"],[41,34,31,32],[41,36,31,34,"generateMask"],[41,48,31,46],[41,50,31,48],[42,6,32,4],[42,10,32,8],[42,11,32,9,"_extensions"],[42,22,32,20],[42,25,32,23,"extensions"],[42,35,32,33],[42,39,32,37],[42,40,32,38],[42,41,32,39],[43,6,34,4],[43,10,34,8,"generateMask"],[43,22,34,20],[43,24,34,22],[44,8,35,6],[44,12,35,10],[44,13,35,11,"_generateMask"],[44,26,35,24],[44,29,35,27,"generateMask"],[44,41,35,39],[45,8,36,6],[45,12,36,10],[45,13,36,11,"_maskBuffer"],[45,24,36,22],[45,27,36,25,"Buffer"],[45,33,36,31],[45,34,36,32,"alloc"],[45,39,36,37],[45,40,36,38],[45,41,36,39],[45,42,36,40],[46,6,37,4],[47,6,39,4],[47,10,39,8],[47,11,39,9,"_socket"],[47,18,39,16],[47,21,39,19,"socket"],[47,27,39,25],[48,6,41,4],[48,10,41,8],[48,11,41,9,"_firstFragment"],[48,25,41,23],[48,28,41,26],[48,32,41,30],[49,6,42,4],[49,10,42,8],[49,11,42,9,"_compress"],[49,20,42,18],[49,23,42,21],[49,28,42,26],[50,6,44,4],[50,10,44,8],[50,11,44,9,"_bufferedBytes"],[50,25,44,23],[50,28,44,26],[50,29,44,27],[51,6,45,4],[51,10,45,8],[51,11,45,9,"_deflating"],[51,21,45,19],[51,24,45,22],[51,29,45,27],[52,6,46,4],[52,10,46,8],[52,11,46,9,"_queue"],[52,17,46,15],[52,20,46,18],[52,22,46,20],[53,4,47,2],[55,4,49,2],[56,0,50,0],[57,0,51,0],[58,0,52,0],[59,0,53,0],[60,0,54,0],[61,0,55,0],[62,0,56,0],[63,0,57,0],[64,0,58,0],[65,0,59,0],[66,0,60,0],[67,0,61,0],[68,0,62,0],[69,0,63,0],[70,0,64,0],[71,0,65,0],[72,0,66,0],[73,0,67,0],[74,0,68,0],[75,0,69,0],[76,4,70,2],[76,11,70,9,"frame"],[76,16,70,14,"frame"],[76,17,70,15,"data"],[76,21,70,19],[76,23,70,21,"options"],[76,30,70,28],[76,32,70,30],[77,6,71,4],[77,10,71,8,"mask"],[77,14,71,12],[78,6,72,4],[78,10,72,8,"merge"],[78,15,72,13],[78,18,72,16],[78,23,72,21],[79,6,73,4],[79,10,73,8,"offset"],[79,16,73,14],[79,19,73,17],[79,20,73,18],[80,6,74,4],[80,10,74,8,"skipMasking"],[80,21,74,19],[80,24,74,22],[80,29,74,27],[81,6,76,4],[81,10,76,8,"options"],[81,17,76,15],[81,18,76,16,"mask"],[81,22,76,20],[81,24,76,22],[82,8,77,6,"mask"],[82,12,77,10],[82,15,77,13,"options"],[82,22,77,20],[82,23,77,21,"maskBuffer"],[82,33,77,31],[82,37,77,35,"maskBuffer"],[82,47,77,45],[83,8,79,6],[83,12,79,10,"options"],[83,19,79,17],[83,20,79,18,"generateMask"],[83,32,79,30],[83,34,79,32],[84,10,80,8,"options"],[84,17,80,15],[84,18,80,16,"generateMask"],[84,30,80,28],[84,31,80,29,"mask"],[84,35,80,33],[84,36,80,34],[85,8,81,6],[85,9,81,7],[85,15,81,13],[86,10,82,8],[86,14,82,12,"randomPoolPointer"],[86,31,82,29],[86,36,82,34,"RANDOM_POOL_SIZE"],[86,52,82,50],[86,54,82,52],[87,12,83,10],[88,12,84,10],[88,16,84,14,"randomPool"],[88,26,84,24],[88,31,84,29,"undefined"],[88,40,84,38],[88,42,84,40],[89,14,85,12],[90,14,86,12],[91,14,87,12],[92,14,88,12],[93,14,89,12,"randomPool"],[93,24,89,22],[93,27,89,25,"Buffer"],[93,33,89,31],[93,34,89,32,"alloc"],[93,39,89,37],[93,40,89,38,"RANDOM_POOL_SIZE"],[93,56,89,54],[93,57,89,55],[94,12,90,10],[95,12,92,10,"randomFillSync"],[95,26,92,24],[95,27,92,25,"randomPool"],[95,37,92,35],[95,39,92,37],[95,40,92,38],[95,42,92,40,"RANDOM_POOL_SIZE"],[95,58,92,56],[95,59,92,57],[96,12,93,10,"randomPoolPointer"],[96,29,93,27],[96,32,93,30],[96,33,93,31],[97,10,94,8],[98,10,96,8,"mask"],[98,14,96,12],[98,15,96,13],[98,16,96,14],[98,17,96,15],[98,20,96,18,"randomPool"],[98,30,96,28],[98,31,96,29,"randomPoolPointer"],[98,48,96,46],[98,50,96,48],[98,51,96,49],[99,10,97,8,"mask"],[99,14,97,12],[99,15,97,13],[99,16,97,14],[99,17,97,15],[99,20,97,18,"randomPool"],[99,30,97,28],[99,31,97,29,"randomPoolPointer"],[99,48,97,46],[99,50,97,48],[99,51,97,49],[100,10,98,8,"mask"],[100,14,98,12],[100,15,98,13],[100,16,98,14],[100,17,98,15],[100,20,98,18,"randomPool"],[100,30,98,28],[100,31,98,29,"randomPoolPointer"],[100,48,98,46],[100,50,98,48],[100,51,98,49],[101,10,99,8,"mask"],[101,14,99,12],[101,15,99,13],[101,16,99,14],[101,17,99,15],[101,20,99,18,"randomPool"],[101,30,99,28],[101,31,99,29,"randomPoolPointer"],[101,48,99,46],[101,50,99,48],[101,51,99,49],[102,8,100,6],[103,8,102,6,"skipMasking"],[103,19,102,17],[103,22,102,20],[103,23,102,21,"mask"],[103,27,102,25],[103,28,102,26],[103,29,102,27],[103,30,102,28],[103,33,102,31,"mask"],[103,37,102,35],[103,38,102,36],[103,39,102,37],[103,40,102,38],[103,43,102,41,"mask"],[103,47,102,45],[103,48,102,46],[103,49,102,47],[103,50,102,48],[103,53,102,51,"mask"],[103,57,102,55],[103,58,102,56],[103,59,102,57],[103,60,102,58],[103,66,102,64],[103,67,102,65],[104,8,103,6,"offset"],[104,14,103,12],[104,17,103,15],[104,18,103,16],[105,6,104,4],[106,6,106,4],[106,10,106,8,"dataLength"],[106,20,106,18],[107,6,108,4],[107,10,108,8],[107,17,108,15,"data"],[107,21,108,19],[107,26,108,24],[107,34,108,32],[107,36,108,34],[108,8,109,6],[108,12,110,8],[108,13,110,9],[108,14,110,10,"options"],[108,21,110,17],[108,22,110,18,"mask"],[108,26,110,22],[108,30,110,26,"skipMasking"],[108,41,110,37],[108,46,111,8,"options"],[108,53,111,15],[108,54,111,16,"kByteLength"],[108,65,111,27],[108,66,111,28],[108,71,111,33,"undefined"],[108,80,111,42],[108,82,112,8],[109,10,113,8,"dataLength"],[109,20,113,18],[109,23,113,21,"options"],[109,30,113,28],[109,31,113,29,"kByteLength"],[109,42,113,40],[109,43,113,41],[110,8,114,6],[110,9,114,7],[110,15,114,13],[111,10,115,8,"data"],[111,14,115,12],[111,17,115,15,"Buffer"],[111,23,115,21],[111,24,115,22,"from"],[111,28,115,26],[111,29,115,27,"data"],[111,33,115,31],[111,34,115,32],[112,10,116,8,"dataLength"],[112,20,116,18],[112,23,116,21,"data"],[112,27,116,25],[112,28,116,26,"length"],[112,34,116,32],[113,8,117,6],[114,6,118,4],[114,7,118,5],[114,13,118,11],[115,8,119,6,"dataLength"],[115,18,119,16],[115,21,119,19,"data"],[115,25,119,23],[115,26,119,24,"length"],[115,32,119,30],[116,8,120,6,"merge"],[116,13,120,11],[116,16,120,14,"options"],[116,23,120,21],[116,24,120,22,"mask"],[116,28,120,26],[116,32,120,30,"options"],[116,39,120,37],[116,40,120,38,"readOnly"],[116,48,120,46],[116,52,120,50],[116,53,120,51,"skipMasking"],[116,64,120,62],[117,6,121,4],[118,6,123,4],[118,10,123,8,"payloadLength"],[118,23,123,21],[118,26,123,24,"dataLength"],[118,36,123,34],[119,6,125,4],[119,10,125,8,"dataLength"],[119,20,125,18],[119,24,125,22],[119,29,125,27],[119,31,125,29],[120,8,126,6,"offset"],[120,14,126,12],[120,18,126,16],[120,19,126,17],[121,8,127,6,"payloadLength"],[121,21,127,19],[121,24,127,22],[121,27,127,25],[122,6,128,4],[122,7,128,5],[122,13,128,11],[122,17,128,15,"dataLength"],[122,27,128,25],[122,30,128,28],[122,33,128,31],[122,35,128,33],[123,8,129,6,"offset"],[123,14,129,12],[123,18,129,16],[123,19,129,17],[124,8,130,6,"payloadLength"],[124,21,130,19],[124,24,130,22],[124,27,130,25],[125,6,131,4],[126,6,133,4],[126,12,133,10,"target"],[126,18,133,16],[126,21,133,19,"Buffer"],[126,27,133,25],[126,28,133,26,"allocUnsafe"],[126,39,133,37],[126,40,133,38,"merge"],[126,45,133,43],[126,48,133,46,"dataLength"],[126,58,133,56],[126,61,133,59,"offset"],[126,67,133,65],[126,70,133,68,"offset"],[126,76,133,74],[126,77,133,75],[127,6,135,4,"target"],[127,12,135,10],[127,13,135,11],[127,14,135,12],[127,15,135,13],[127,18,135,16,"options"],[127,25,135,23],[127,26,135,24,"fin"],[127,29,135,27],[127,32,135,30,"options"],[127,39,135,37],[127,40,135,38,"opcode"],[127,46,135,44],[127,49,135,47],[127,53,135,51],[127,56,135,54,"options"],[127,63,135,61],[127,64,135,62,"opcode"],[127,70,135,68],[128,6,136,4],[128,10,136,8,"options"],[128,17,136,15],[128,18,136,16,"rsv1"],[128,22,136,20],[128,24,136,22,"target"],[128,30,136,28],[128,31,136,29],[128,32,136,30],[128,33,136,31],[128,37,136,35],[128,41,136,39],[129,6,138,4,"target"],[129,12,138,10],[129,13,138,11],[129,14,138,12],[129,15,138,13],[129,18,138,16,"payloadLength"],[129,31,138,29],[130,6,140,4],[130,10,140,8,"payloadLength"],[130,23,140,21],[130,28,140,26],[130,31,140,29],[130,33,140,31],[131,8,141,6,"target"],[131,14,141,12],[131,15,141,13,"writeUInt16BE"],[131,28,141,26],[131,29,141,27,"dataLength"],[131,39,141,37],[131,41,141,39],[131,42,141,40],[131,43,141,41],[132,6,142,4],[132,7,142,5],[132,13,142,11],[132,17,142,15,"payloadLength"],[132,30,142,28],[132,35,142,33],[132,38,142,36],[132,40,142,38],[133,8,143,6,"target"],[133,14,143,12],[133,15,143,13],[133,16,143,14],[133,17,143,15],[133,20,143,18,"target"],[133,26,143,24],[133,27,143,25],[133,28,143,26],[133,29,143,27],[133,32,143,30],[133,33,143,31],[134,8,144,6,"target"],[134,14,144,12],[134,15,144,13,"writeUIntBE"],[134,26,144,24],[134,27,144,25,"dataLength"],[134,37,144,35],[134,39,144,37],[134,40,144,38],[134,42,144,40],[134,43,144,41],[134,44,144,42],[135,6,145,4],[136,6,147,4],[136,10,147,8],[136,11,147,9,"options"],[136,18,147,16],[136,19,147,17,"mask"],[136,23,147,21],[136,25,147,23],[136,32,147,30],[136,33,147,31,"target"],[136,39,147,37],[136,41,147,39,"data"],[136,45,147,43],[136,46,147,44],[137,6,149,4,"target"],[137,12,149,10],[137,13,149,11],[137,14,149,12],[137,15,149,13],[137,19,149,17],[137,23,149,21],[138,6,150,4,"target"],[138,12,150,10],[138,13,150,11,"offset"],[138,19,150,17],[138,22,150,20],[138,23,150,21],[138,24,150,22],[138,27,150,25,"mask"],[138,31,150,29],[138,32,150,30],[138,33,150,31],[138,34,150,32],[139,6,151,4,"target"],[139,12,151,10],[139,13,151,11,"offset"],[139,19,151,17],[139,22,151,20],[139,23,151,21],[139,24,151,22],[139,27,151,25,"mask"],[139,31,151,29],[139,32,151,30],[139,33,151,31],[139,34,151,32],[140,6,152,4,"target"],[140,12,152,10],[140,13,152,11,"offset"],[140,19,152,17],[140,22,152,20],[140,23,152,21],[140,24,152,22],[140,27,152,25,"mask"],[140,31,152,29],[140,32,152,30],[140,33,152,31],[140,34,152,32],[141,6,153,4,"target"],[141,12,153,10],[141,13,153,11,"offset"],[141,19,153,17],[141,22,153,20],[141,23,153,21],[141,24,153,22],[141,27,153,25,"mask"],[141,31,153,29],[141,32,153,30],[141,33,153,31],[141,34,153,32],[142,6,155,4],[142,10,155,8,"skipMasking"],[142,21,155,19],[142,23,155,21],[142,30,155,28],[142,31,155,29,"target"],[142,37,155,35],[142,39,155,37,"data"],[142,43,155,41],[142,44,155,42],[143,6,157,4],[143,10,157,8,"merge"],[143,15,157,13],[143,17,157,15],[144,8,158,6,"applyMask"],[144,17,158,15],[144,18,158,16,"data"],[144,22,158,20],[144,24,158,22,"mask"],[144,28,158,26],[144,30,158,28,"target"],[144,36,158,34],[144,38,158,36,"offset"],[144,44,158,42],[144,46,158,44,"dataLength"],[144,56,158,54],[144,57,158,55],[145,8,159,6],[145,15,159,13],[145,16,159,14,"target"],[145,22,159,20],[145,23,159,21],[146,6,160,4],[147,6,162,4,"applyMask"],[147,15,162,13],[147,16,162,14,"data"],[147,20,162,18],[147,22,162,20,"mask"],[147,26,162,24],[147,28,162,26,"data"],[147,32,162,30],[147,34,162,32],[147,35,162,33],[147,37,162,35,"dataLength"],[147,47,162,45],[147,48,162,46],[148,6,163,4],[148,13,163,11],[148,14,163,12,"target"],[148,20,163,18],[148,22,163,20,"data"],[148,26,163,24],[148,27,163,25],[149,4,164,2],[151,4,166,2],[152,0,167,0],[153,0,168,0],[154,0,169,0],[155,0,170,0],[156,0,171,0],[157,0,172,0],[158,0,173,0],[159,0,174,0],[160,4,175,2,"close"],[160,9,175,7,"close"],[160,10,175,8,"code"],[160,14,175,12],[160,16,175,14,"data"],[160,20,175,18],[160,22,175,20,"mask"],[160,26,175,24],[160,28,175,26,"cb"],[160,30,175,28],[160,32,175,30],[161,6,176,4],[161,10,176,8,"buf"],[161,13,176,11],[162,6,178,4],[162,10,178,8,"code"],[162,14,178,12],[162,19,178,17,"undefined"],[162,28,178,26],[162,30,178,28],[163,8,179,6,"buf"],[163,11,179,9],[163,14,179,12,"EMPTY_BUFFER"],[163,26,179,24],[164,6,180,4],[164,7,180,5],[164,13,180,11],[164,17,180,15],[164,24,180,22,"code"],[164,28,180,26],[164,33,180,31],[164,41,180,39],[164,45,180,43],[164,46,180,44,"isValidStatusCode"],[164,63,180,61],[164,64,180,62,"code"],[164,68,180,66],[164,69,180,67],[164,71,180,69],[165,8,181,6],[165,14,181,12],[165,18,181,16,"TypeError"],[165,27,181,25],[165,28,181,26],[165,78,181,76],[165,79,181,77],[166,6,182,4],[166,7,182,5],[166,13,182,11],[166,17,182,15,"data"],[166,21,182,19],[166,26,182,24,"undefined"],[166,35,182,33],[166,39,182,37],[166,40,182,38,"data"],[166,44,182,42],[166,45,182,43,"length"],[166,51,182,49],[166,53,182,51],[167,8,183,6,"buf"],[167,11,183,9],[167,14,183,12,"Buffer"],[167,20,183,18],[167,21,183,19,"allocUnsafe"],[167,32,183,30],[167,33,183,31],[167,34,183,32],[167,35,183,33],[168,8,184,6,"buf"],[168,11,184,9],[168,12,184,10,"writeUInt16BE"],[168,25,184,23],[168,26,184,24,"code"],[168,30,184,28],[168,32,184,30],[168,33,184,31],[168,34,184,32],[169,6,185,4],[169,7,185,5],[169,13,185,11],[170,8,186,6],[170,14,186,12,"length"],[170,20,186,18],[170,23,186,21,"Buffer"],[170,29,186,27],[170,30,186,28,"byteLength"],[170,40,186,38],[170,41,186,39,"data"],[170,45,186,43],[170,46,186,44],[171,8,188,6],[171,12,188,10,"length"],[171,18,188,16],[171,21,188,19],[171,24,188,22],[171,26,188,24],[172,10,189,8],[172,16,189,14],[172,20,189,18,"RangeError"],[172,30,189,28],[172,31,189,29],[172,79,189,77],[172,80,189,78],[173,8,190,6],[174,8,192,6,"buf"],[174,11,192,9],[174,14,192,12,"Buffer"],[174,20,192,18],[174,21,192,19,"allocUnsafe"],[174,32,192,30],[174,33,192,31],[174,34,192,32],[174,37,192,35,"length"],[174,43,192,41],[174,44,192,42],[175,8,193,6,"buf"],[175,11,193,9],[175,12,193,10,"writeUInt16BE"],[175,25,193,23],[175,26,193,24,"code"],[175,30,193,28],[175,32,193,30],[175,33,193,31],[175,34,193,32],[176,8,195,6],[176,12,195,10],[176,19,195,17,"data"],[176,23,195,21],[176,28,195,26],[176,36,195,34],[176,38,195,36],[177,10,196,8,"buf"],[177,13,196,11],[177,14,196,12,"write"],[177,19,196,17],[177,20,196,18,"data"],[177,24,196,22],[177,26,196,24],[177,27,196,25],[177,28,196,26],[178,8,197,6],[178,9,197,7],[178,15,197,13],[179,10,198,8,"buf"],[179,13,198,11],[179,14,198,12,"set"],[179,17,198,15],[179,18,198,16,"data"],[179,22,198,20],[179,24,198,22],[179,25,198,23],[179,26,198,24],[180,8,199,6],[181,6,200,4],[182,6,202,4],[182,12,202,10,"options"],[182,19,202,17],[182,22,202,20],[183,8,203,6],[183,9,203,7,"kByteLength"],[183,20,203,18],[183,23,203,21,"buf"],[183,26,203,24],[183,27,203,25,"length"],[183,33,203,31],[184,8,204,6,"fin"],[184,11,204,9],[184,13,204,11],[184,17,204,15],[185,8,205,6,"generateMask"],[185,20,205,18],[185,22,205,20],[185,26,205,24],[185,27,205,25,"_generateMask"],[185,40,205,38],[186,8,206,6,"mask"],[186,12,206,10],[187,8,207,6,"maskBuffer"],[187,18,207,16],[187,20,207,18],[187,24,207,22],[187,25,207,23,"_maskBuffer"],[187,36,207,34],[188,8,208,6,"opcode"],[188,14,208,12],[188,16,208,14],[188,20,208,18],[189,8,209,6,"readOnly"],[189,16,209,14],[189,18,209,16],[189,23,209,21],[190,8,210,6,"rsv1"],[190,12,210,10],[190,14,210,12],[191,6,211,4],[191,7,211,5],[192,6,213,4],[192,10,213,8],[192,14,213,12],[192,15,213,13,"_deflating"],[192,25,213,23],[192,27,213,25],[193,8,214,6],[193,12,214,10],[193,13,214,11,"enqueue"],[193,20,214,18],[193,21,214,19],[193,22,214,20],[193,26,214,24],[193,27,214,25,"dispatch"],[193,35,214,33],[193,37,214,35,"buf"],[193,40,214,38],[193,42,214,40],[193,47,214,45],[193,49,214,47,"options"],[193,56,214,54],[193,58,214,56,"cb"],[193,60,214,58],[193,61,214,59],[193,62,214,60],[194,6,215,4],[194,7,215,5],[194,13,215,11],[195,8,216,6],[195,12,216,10],[195,13,216,11,"sendFrame"],[195,22,216,20],[195,23,216,21,"Sender"],[195,29,216,27],[195,30,216,28,"frame"],[195,35,216,33],[195,36,216,34,"buf"],[195,39,216,37],[195,41,216,39,"options"],[195,48,216,46],[195,49,216,47],[195,51,216,49,"cb"],[195,53,216,51],[195,54,216,52],[196,6,217,4],[197,4,218,2],[199,4,220,2],[200,0,221,0],[201,0,222,0],[202,0,223,0],[203,0,224,0],[204,0,225,0],[205,0,226,0],[206,0,227,0],[207,4,228,2,"ping"],[207,8,228,6,"ping"],[207,9,228,7,"data"],[207,13,228,11],[207,15,228,13,"mask"],[207,19,228,17],[207,21,228,19,"cb"],[207,23,228,21],[207,25,228,23],[208,6,229,4],[208,10,229,8,"byteLength"],[208,20,229,18],[209,6,230,4],[209,10,230,8,"readOnly"],[209,18,230,16],[210,6,232,4],[210,10,232,8],[210,17,232,15,"data"],[210,21,232,19],[210,26,232,24],[210,34,232,32],[210,36,232,34],[211,8,233,6,"byteLength"],[211,18,233,16],[211,21,233,19,"Buffer"],[211,27,233,25],[211,28,233,26,"byteLength"],[211,38,233,36],[211,39,233,37,"data"],[211,43,233,41],[211,44,233,42],[212,8,234,6,"readOnly"],[212,16,234,14],[212,19,234,17],[212,24,234,22],[213,6,235,4],[213,7,235,5],[213,13,235,11],[214,8,236,6,"data"],[214,12,236,10],[214,15,236,13,"toBuffer"],[214,23,236,21],[214,24,236,22,"data"],[214,28,236,26],[214,29,236,27],[215,8,237,6,"byteLength"],[215,18,237,16],[215,21,237,19,"data"],[215,25,237,23],[215,26,237,24,"length"],[215,32,237,30],[216,8,238,6,"readOnly"],[216,16,238,14],[216,19,238,17,"toBuffer"],[216,27,238,25],[216,28,238,26,"readOnly"],[216,36,238,34],[217,6,239,4],[218,6,241,4],[218,10,241,8,"byteLength"],[218,20,241,18],[218,23,241,21],[218,26,241,24],[218,28,241,26],[219,8,242,6],[219,14,242,12],[219,18,242,16,"RangeError"],[219,28,242,26],[219,29,242,27],[219,79,242,77],[219,80,242,78],[220,6,243,4],[221,6,245,4],[221,12,245,10,"options"],[221,19,245,17],[221,22,245,20],[222,8,246,6],[222,9,246,7,"kByteLength"],[222,20,246,18],[222,23,246,21,"byteLength"],[222,33,246,31],[223,8,247,6,"fin"],[223,11,247,9],[223,13,247,11],[223,17,247,15],[224,8,248,6,"generateMask"],[224,20,248,18],[224,22,248,20],[224,26,248,24],[224,27,248,25,"_generateMask"],[224,40,248,38],[225,8,249,6,"mask"],[225,12,249,10],[226,8,250,6,"maskBuffer"],[226,18,250,16],[226,20,250,18],[226,24,250,22],[226,25,250,23,"_maskBuffer"],[226,36,250,34],[227,8,251,6,"opcode"],[227,14,251,12],[227,16,251,14],[227,20,251,18],[228,8,252,6,"readOnly"],[228,16,252,14],[229,8,253,6,"rsv1"],[229,12,253,10],[229,14,253,12],[230,6,254,4],[230,7,254,5],[231,6,256,4],[231,10,256,8],[231,14,256,12],[231,15,256,13,"_deflating"],[231,25,256,23],[231,27,256,25],[232,8,257,6],[232,12,257,10],[232,13,257,11,"enqueue"],[232,20,257,18],[232,21,257,19],[232,22,257,20],[232,26,257,24],[232,27,257,25,"dispatch"],[232,35,257,33],[232,37,257,35,"data"],[232,41,257,39],[232,43,257,41],[232,48,257,46],[232,50,257,48,"options"],[232,57,257,55],[232,59,257,57,"cb"],[232,61,257,59],[232,62,257,60],[232,63,257,61],[233,6,258,4],[233,7,258,5],[233,13,258,11],[234,8,259,6],[234,12,259,10],[234,13,259,11,"sendFrame"],[234,22,259,20],[234,23,259,21,"Sender"],[234,29,259,27],[234,30,259,28,"frame"],[234,35,259,33],[234,36,259,34,"data"],[234,40,259,38],[234,42,259,40,"options"],[234,49,259,47],[234,50,259,48],[234,52,259,50,"cb"],[234,54,259,52],[234,55,259,53],[235,6,260,4],[236,4,261,2],[238,4,263,2],[239,0,264,0],[240,0,265,0],[241,0,266,0],[242,0,267,0],[243,0,268,0],[244,0,269,0],[245,0,270,0],[246,4,271,2,"pong"],[246,8,271,6,"pong"],[246,9,271,7,"data"],[246,13,271,11],[246,15,271,13,"mask"],[246,19,271,17],[246,21,271,19,"cb"],[246,23,271,21],[246,25,271,23],[247,6,272,4],[247,10,272,8,"byteLength"],[247,20,272,18],[248,6,273,4],[248,10,273,8,"readOnly"],[248,18,273,16],[249,6,275,4],[249,10,275,8],[249,17,275,15,"data"],[249,21,275,19],[249,26,275,24],[249,34,275,32],[249,36,275,34],[250,8,276,6,"byteLength"],[250,18,276,16],[250,21,276,19,"Buffer"],[250,27,276,25],[250,28,276,26,"byteLength"],[250,38,276,36],[250,39,276,37,"data"],[250,43,276,41],[250,44,276,42],[251,8,277,6,"readOnly"],[251,16,277,14],[251,19,277,17],[251,24,277,22],[252,6,278,4],[252,7,278,5],[252,13,278,11],[253,8,279,6,"data"],[253,12,279,10],[253,15,279,13,"toBuffer"],[253,23,279,21],[253,24,279,22,"data"],[253,28,279,26],[253,29,279,27],[254,8,280,6,"byteLength"],[254,18,280,16],[254,21,280,19,"data"],[254,25,280,23],[254,26,280,24,"length"],[254,32,280,30],[255,8,281,6,"readOnly"],[255,16,281,14],[255,19,281,17,"toBuffer"],[255,27,281,25],[255,28,281,26,"readOnly"],[255,36,281,34],[256,6,282,4],[257,6,284,4],[257,10,284,8,"byteLength"],[257,20,284,18],[257,23,284,21],[257,26,284,24],[257,28,284,26],[258,8,285,6],[258,14,285,12],[258,18,285,16,"RangeError"],[258,28,285,26],[258,29,285,27],[258,79,285,77],[258,80,285,78],[259,6,286,4],[260,6,288,4],[260,12,288,10,"options"],[260,19,288,17],[260,22,288,20],[261,8,289,6],[261,9,289,7,"kByteLength"],[261,20,289,18],[261,23,289,21,"byteLength"],[261,33,289,31],[262,8,290,6,"fin"],[262,11,290,9],[262,13,290,11],[262,17,290,15],[263,8,291,6,"generateMask"],[263,20,291,18],[263,22,291,20],[263,26,291,24],[263,27,291,25,"_generateMask"],[263,40,291,38],[264,8,292,6,"mask"],[264,12,292,10],[265,8,293,6,"maskBuffer"],[265,18,293,16],[265,20,293,18],[265,24,293,22],[265,25,293,23,"_maskBuffer"],[265,36,293,34],[266,8,294,6,"opcode"],[266,14,294,12],[266,16,294,14],[266,20,294,18],[267,8,295,6,"readOnly"],[267,16,295,14],[268,8,296,6,"rsv1"],[268,12,296,10],[268,14,296,12],[269,6,297,4],[269,7,297,5],[270,6,299,4],[270,10,299,8],[270,14,299,12],[270,15,299,13,"_deflating"],[270,25,299,23],[270,27,299,25],[271,8,300,6],[271,12,300,10],[271,13,300,11,"enqueue"],[271,20,300,18],[271,21,300,19],[271,22,300,20],[271,26,300,24],[271,27,300,25,"dispatch"],[271,35,300,33],[271,37,300,35,"data"],[271,41,300,39],[271,43,300,41],[271,48,300,46],[271,50,300,48,"options"],[271,57,300,55],[271,59,300,57,"cb"],[271,61,300,59],[271,62,300,60],[271,63,300,61],[272,6,301,4],[272,7,301,5],[272,13,301,11],[273,8,302,6],[273,12,302,10],[273,13,302,11,"sendFrame"],[273,22,302,20],[273,23,302,21,"Sender"],[273,29,302,27],[273,30,302,28,"frame"],[273,35,302,33],[273,36,302,34,"data"],[273,40,302,38],[273,42,302,40,"options"],[273,49,302,47],[273,50,302,48],[273,52,302,50,"cb"],[273,54,302,52],[273,55,302,53],[274,6,303,4],[275,4,304,2],[277,4,306,2],[278,0,307,0],[279,0,308,0],[280,0,309,0],[281,0,310,0],[282,0,311,0],[283,0,312,0],[284,0,313,0],[285,0,314,0],[286,0,315,0],[287,0,316,0],[288,0,317,0],[289,0,318,0],[290,0,319,0],[291,0,320,0],[292,0,321,0],[293,4,322,2,"send"],[293,8,322,6,"send"],[293,9,322,7,"data"],[293,13,322,11],[293,15,322,13,"options"],[293,22,322,20],[293,24,322,22,"cb"],[293,26,322,24],[293,28,322,26],[294,6,323,4],[294,12,323,10,"perMessageDeflate"],[294,29,323,27],[294,32,323,30],[294,36,323,34],[294,37,323,35,"_extensions"],[294,48,323,46],[294,49,323,47,"PerMessageDeflate"],[294,66,323,64],[294,67,323,65,"extensionName"],[294,80,323,78],[294,81,323,79],[295,6,324,4],[295,10,324,8,"opcode"],[295,16,324,14],[295,19,324,17,"options"],[295,26,324,24],[295,27,324,25,"binary"],[295,33,324,31],[295,36,324,34],[295,37,324,35],[295,40,324,38],[295,41,324,39],[296,6,325,4],[296,10,325,8,"rsv1"],[296,14,325,12],[296,17,325,15,"options"],[296,24,325,22],[296,25,325,23,"compress"],[296,33,325,31],[297,6,327,4],[297,10,327,8,"byteLength"],[297,20,327,18],[298,6,328,4],[298,10,328,8,"readOnly"],[298,18,328,16],[299,6,330,4],[299,10,330,8],[299,17,330,15,"data"],[299,21,330,19],[299,26,330,24],[299,34,330,32],[299,36,330,34],[300,8,331,6,"byteLength"],[300,18,331,16],[300,21,331,19,"Buffer"],[300,27,331,25],[300,28,331,26,"byteLength"],[300,38,331,36],[300,39,331,37,"data"],[300,43,331,41],[300,44,331,42],[301,8,332,6,"readOnly"],[301,16,332,14],[301,19,332,17],[301,24,332,22],[302,6,333,4],[302,7,333,5],[302,13,333,11],[303,8,334,6,"data"],[303,12,334,10],[303,15,334,13,"toBuffer"],[303,23,334,21],[303,24,334,22,"data"],[303,28,334,26],[303,29,334,27],[304,8,335,6,"byteLength"],[304,18,335,16],[304,21,335,19,"data"],[304,25,335,23],[304,26,335,24,"length"],[304,32,335,30],[305,8,336,6,"readOnly"],[305,16,336,14],[305,19,336,17,"toBuffer"],[305,27,336,25],[305,28,336,26,"readOnly"],[305,36,336,34],[306,6,337,4],[307,6,339,4],[307,10,339,8],[307,14,339,12],[307,15,339,13,"_firstFragment"],[307,29,339,27],[307,31,339,29],[308,8,340,6],[308,12,340,10],[308,13,340,11,"_firstFragment"],[308,27,340,25],[308,30,340,28],[308,35,340,33],[309,8,341,6],[309,12,342,8,"rsv1"],[309,16,342,12],[309,20,343,8,"perMessageDeflate"],[309,37,343,25],[309,41,344,8,"perMessageDeflate"],[309,58,344,25],[309,59,344,26,"params"],[309,65,344,32],[309,66,345,10,"perMessageDeflate"],[309,83,345,27],[309,84,345,28,"_isServer"],[309,93,345,37],[309,96,346,14],[309,124,346,42],[309,127,347,14],[309,155,347,42],[309,156,348,9],[309,158,349,8],[310,10,350,8,"rsv1"],[310,14,350,12],[310,17,350,15,"byteLength"],[310,27,350,25],[310,31,350,29,"perMessageDeflate"],[310,48,350,46],[310,49,350,47,"_threshold"],[310,59,350,57],[311,8,351,6],[312,8,352,6],[312,12,352,10],[312,13,352,11,"_compress"],[312,22,352,20],[312,25,352,23,"rsv1"],[312,29,352,27],[313,6,353,4],[313,7,353,5],[313,13,353,11],[314,8,354,6,"rsv1"],[314,12,354,10],[314,15,354,13],[314,20,354,18],[315,8,355,6,"opcode"],[315,14,355,12],[315,17,355,15],[315,18,355,16],[316,6,356,4],[317,6,358,4],[317,10,358,8,"options"],[317,17,358,15],[317,18,358,16,"fin"],[317,21,358,19],[317,23,358,21],[317,27,358,25],[317,28,358,26,"_firstFragment"],[317,42,358,40],[317,45,358,43],[317,49,358,47],[318,6,360,4],[318,10,360,8,"perMessageDeflate"],[318,27,360,25],[318,29,360,27],[319,8,361,6],[319,14,361,12,"opts"],[319,18,361,16],[319,21,361,19],[320,10,362,8],[320,11,362,9,"kByteLength"],[320,22,362,20],[320,25,362,23,"byteLength"],[320,35,362,33],[321,10,363,8,"fin"],[321,13,363,11],[321,15,363,13,"options"],[321,22,363,20],[321,23,363,21,"fin"],[321,26,363,24],[322,10,364,8,"generateMask"],[322,22,364,20],[322,24,364,22],[322,28,364,26],[322,29,364,27,"_generateMask"],[322,42,364,40],[323,10,365,8,"mask"],[323,14,365,12],[323,16,365,14,"options"],[323,23,365,21],[323,24,365,22,"mask"],[323,28,365,26],[324,10,366,8,"maskBuffer"],[324,20,366,18],[324,22,366,20],[324,26,366,24],[324,27,366,25,"_maskBuffer"],[324,38,366,36],[325,10,367,8,"opcode"],[325,16,367,14],[326,10,368,8,"readOnly"],[326,18,368,16],[327,10,369,8,"rsv1"],[328,8,370,6],[328,9,370,7],[329,8,372,6],[329,12,372,10],[329,16,372,14],[329,17,372,15,"_deflating"],[329,27,372,25],[329,29,372,27],[330,10,373,8],[330,14,373,12],[330,15,373,13,"enqueue"],[330,22,373,20],[330,23,373,21],[330,24,373,22],[330,28,373,26],[330,29,373,27,"dispatch"],[330,37,373,35],[330,39,373,37,"data"],[330,43,373,41],[330,45,373,43],[330,49,373,47],[330,50,373,48,"_compress"],[330,59,373,57],[330,61,373,59,"opts"],[330,65,373,63],[330,67,373,65,"cb"],[330,69,373,67],[330,70,373,68],[330,71,373,69],[331,8,374,6],[331,9,374,7],[331,15,374,13],[332,10,375,8],[332,14,375,12],[332,15,375,13,"dispatch"],[332,23,375,21],[332,24,375,22,"data"],[332,28,375,26],[332,30,375,28],[332,34,375,32],[332,35,375,33,"_compress"],[332,44,375,42],[332,46,375,44,"opts"],[332,50,375,48],[332,52,375,50,"cb"],[332,54,375,52],[332,55,375,53],[333,8,376,6],[334,6,377,4],[334,7,377,5],[334,13,377,11],[335,8,378,6],[335,12,378,10],[335,13,378,11,"sendFrame"],[335,22,378,20],[335,23,379,8,"Sender"],[335,29,379,14],[335,30,379,15,"frame"],[335,35,379,20],[335,36,379,21,"data"],[335,40,379,25],[335,42,379,27],[336,10,380,10],[336,11,380,11,"kByteLength"],[336,22,380,22],[336,25,380,25,"byteLength"],[336,35,380,35],[337,10,381,10,"fin"],[337,13,381,13],[337,15,381,15,"options"],[337,22,381,22],[337,23,381,23,"fin"],[337,26,381,26],[338,10,382,10,"generateMask"],[338,22,382,22],[338,24,382,24],[338,28,382,28],[338,29,382,29,"_generateMask"],[338,42,382,42],[339,10,383,10,"mask"],[339,14,383,14],[339,16,383,16,"options"],[339,23,383,23],[339,24,383,24,"mask"],[339,28,383,28],[340,10,384,10,"maskBuffer"],[340,20,384,20],[340,22,384,22],[340,26,384,26],[340,27,384,27,"_maskBuffer"],[340,38,384,38],[341,10,385,10,"opcode"],[341,16,385,16],[342,10,386,10,"readOnly"],[342,18,386,18],[343,10,387,10,"rsv1"],[343,14,387,14],[343,16,387,16],[344,8,388,8],[344,9,388,9],[344,10,388,10],[344,12,389,8,"cb"],[344,14,390,6],[344,15,390,7],[345,6,391,4],[346,4,392,2],[348,4,394,2],[349,0,395,0],[350,0,396,0],[351,0,397,0],[352,0,398,0],[353,0,399,0],[354,0,400,0],[355,0,401,0],[356,0,402,0],[357,0,403,0],[358,0,404,0],[359,0,405,0],[360,0,406,0],[361,0,407,0],[362,0,408,0],[363,0,409,0],[364,0,410,0],[365,0,411,0],[366,0,412,0],[367,0,413,0],[368,0,414,0],[369,0,415,0],[370,0,416,0],[371,4,417,2,"dispatch"],[371,12,417,10,"dispatch"],[371,13,417,11,"data"],[371,17,417,15],[371,19,417,17,"compress"],[371,27,417,25],[371,29,417,27,"options"],[371,36,417,34],[371,38,417,36,"cb"],[371,40,417,38],[371,42,417,40],[372,6,418,4],[372,10,418,8],[372,11,418,9,"compress"],[372,19,418,17],[372,21,418,19],[373,8,419,6],[373,12,419,10],[373,13,419,11,"sendFrame"],[373,22,419,20],[373,23,419,21,"Sender"],[373,29,419,27],[373,30,419,28,"frame"],[373,35,419,33],[373,36,419,34,"data"],[373,40,419,38],[373,42,419,40,"options"],[373,49,419,47],[373,50,419,48],[373,52,419,50,"cb"],[373,54,419,52],[373,55,419,53],[374,8,420,6],[375,6,421,4],[376,6,423,4],[376,12,423,10,"perMessageDeflate"],[376,29,423,27],[376,32,423,30],[376,36,423,34],[376,37,423,35,"_extensions"],[376,48,423,46],[376,49,423,47,"PerMessageDeflate"],[376,66,423,64],[376,67,423,65,"extensionName"],[376,80,423,78],[376,81,423,79],[377,6,425,4],[377,10,425,8],[377,11,425,9,"_bufferedBytes"],[377,25,425,23],[377,29,425,27,"options"],[377,36,425,34],[377,37,425,35,"kByteLength"],[377,48,425,46],[377,49,425,47],[378,6,426,4],[378,10,426,8],[378,11,426,9,"_deflating"],[378,21,426,19],[378,24,426,22],[378,28,426,26],[379,6,427,4,"perMessageDeflate"],[379,23,427,21],[379,24,427,22,"compress"],[379,32,427,30],[379,33,427,31,"data"],[379,37,427,35],[379,39,427,37,"options"],[379,46,427,44],[379,47,427,45,"fin"],[379,50,427,48],[379,52,427,50],[379,53,427,51,"_"],[379,54,427,52],[379,56,427,54,"buf"],[379,59,427,57],[379,64,427,62],[380,8,428,6],[380,12,428,10],[380,16,428,14],[380,17,428,15,"_socket"],[380,24,428,22],[380,25,428,23,"destroyed"],[380,34,428,32],[380,36,428,34],[381,10,429,8],[381,16,429,14,"err"],[381,19,429,17],[381,22,429,20],[381,26,429,24,"Error"],[381,31,429,29],[381,32,430,10],[381,87,431,8],[381,88,431,9],[382,10,433,8],[382,14,433,12],[382,21,433,19,"cb"],[382,23,433,21],[382,28,433,26],[382,38,433,36],[382,40,433,38,"cb"],[382,42,433,40],[382,43,433,41,"err"],[382,46,433,44],[382,47,433,45],[383,10,435,8],[383,15,435,13],[383,19,435,17,"i"],[383,20,435,18],[383,23,435,21],[383,24,435,22],[383,26,435,24,"i"],[383,27,435,25],[383,30,435,28],[383,34,435,32],[383,35,435,33,"_queue"],[383,41,435,39],[383,42,435,40,"length"],[383,48,435,46],[383,50,435,48,"i"],[383,51,435,49],[383,53,435,51],[383,55,435,53],[384,12,436,10],[384,18,436,16,"params"],[384,24,436,22],[384,27,436,25],[384,31,436,29],[384,32,436,30,"_queue"],[384,38,436,36],[384,39,436,37,"i"],[384,40,436,38],[384,41,436,39],[385,12,437,10],[385,18,437,16,"callback"],[385,26,437,24],[385,29,437,27,"params"],[385,35,437,33],[385,36,437,34,"params"],[385,42,437,40],[385,43,437,41,"length"],[385,49,437,47],[385,52,437,50],[385,53,437,51],[385,54,437,52],[386,12,439,10],[386,16,439,14],[386,23,439,21,"callback"],[386,31,439,29],[386,36,439,34],[386,46,439,44],[386,48,439,46,"callback"],[386,56,439,54],[386,57,439,55,"err"],[386,60,439,58],[386,61,439,59],[387,10,440,8],[388,10,442,8],[389,8,443,6],[390,8,445,6],[390,12,445,10],[390,13,445,11,"_bufferedBytes"],[390,27,445,25],[390,31,445,29,"options"],[390,38,445,36],[390,39,445,37,"kByteLength"],[390,50,445,48],[390,51,445,49],[391,8,446,6],[391,12,446,10],[391,13,446,11,"_deflating"],[391,23,446,21],[391,26,446,24],[391,31,446,29],[392,8,447,6,"options"],[392,15,447,13],[392,16,447,14,"readOnly"],[392,24,447,22],[392,27,447,25],[392,32,447,30],[393,8,448,6],[393,12,448,10],[393,13,448,11,"sendFrame"],[393,22,448,20],[393,23,448,21,"Sender"],[393,29,448,27],[393,30,448,28,"frame"],[393,35,448,33],[393,36,448,34,"buf"],[393,39,448,37],[393,41,448,39,"options"],[393,48,448,46],[393,49,448,47],[393,51,448,49,"cb"],[393,53,448,51],[393,54,448,52],[394,8,449,6],[394,12,449,10],[394,13,449,11,"dequeue"],[394,20,449,18],[394,21,449,19],[394,22,449,20],[395,6,450,4],[395,7,450,5],[395,8,450,6],[396,4,451,2],[398,4,453,2],[399,0,454,0],[400,0,455,0],[401,0,456,0],[402,0,457,0],[403,4,458,2,"dequeue"],[403,11,458,9,"dequeue"],[403,12,458,9],[403,14,458,12],[404,6,459,4],[404,13,459,11],[404,14,459,12],[404,18,459,16],[404,19,459,17,"_deflating"],[404,29,459,27],[404,33,459,31],[404,37,459,35],[404,38,459,36,"_queue"],[404,44,459,42],[404,45,459,43,"length"],[404,51,459,49],[404,53,459,51],[405,8,460,6],[405,14,460,12,"params"],[405,20,460,18],[405,23,460,21],[405,27,460,25],[405,28,460,26,"_queue"],[405,34,460,32],[405,35,460,33,"shift"],[405,40,460,38],[405,41,460,39],[405,42,460,40],[406,8,462,6],[406,12,462,10],[406,13,462,11,"_bufferedBytes"],[406,27,462,25],[406,31,462,29,"params"],[406,37,462,35],[406,38,462,36],[406,39,462,37],[406,40,462,38],[406,41,462,39,"kByteLength"],[406,52,462,50],[406,53,462,51],[407,8,463,6,"Reflect"],[407,15,463,13],[407,16,463,14,"apply"],[407,21,463,19],[407,22,463,20,"params"],[407,28,463,26],[407,29,463,27],[407,30,463,28],[407,31,463,29],[407,33,463,31],[407,37,463,35],[407,39,463,37,"params"],[407,45,463,43],[407,46,463,44,"slice"],[407,51,463,49],[407,52,463,50],[407,53,463,51],[407,54,463,52],[407,55,463,53],[408,6,464,4],[409,4,465,2],[411,4,467,2],[412,0,468,0],[413,0,469,0],[414,0,470,0],[415,0,471,0],[416,0,472,0],[417,4,473,2,"enqueue"],[417,11,473,9,"enqueue"],[417,12,473,10,"params"],[417,18,473,16],[417,20,473,18],[418,6,474,4],[418,10,474,8],[418,11,474,9,"_bufferedBytes"],[418,25,474,23],[418,29,474,27,"params"],[418,35,474,33],[418,36,474,34],[418,37,474,35],[418,38,474,36],[418,39,474,37,"kByteLength"],[418,50,474,48],[418,51,474,49],[419,6,475,4],[419,10,475,8],[419,11,475,9,"_queue"],[419,17,475,15],[419,18,475,16,"push"],[419,22,475,20],[419,23,475,21,"params"],[419,29,475,27],[419,30,475,28],[420,4,476,2],[422,4,478,2],[423,0,479,0],[424,0,480,0],[425,0,481,0],[426,0,482,0],[427,0,483,0],[428,0,484,0],[429,4,485,2,"sendFrame"],[429,13,485,11,"sendFrame"],[429,14,485,12,"list"],[429,18,485,16],[429,20,485,18,"cb"],[429,22,485,20],[429,24,485,22],[430,6,486,4],[430,10,486,8,"list"],[430,14,486,12],[430,15,486,13,"length"],[430,21,486,19],[430,26,486,24],[430,27,486,25],[430,29,486,27],[431,8,487,6],[431,12,487,10],[431,13,487,11,"_socket"],[431,20,487,18],[431,21,487,19,"cork"],[431,25,487,23],[431,26,487,24],[431,27,487,25],[432,8,488,6],[432,12,488,10],[432,13,488,11,"_socket"],[432,20,488,18],[432,21,488,19,"write"],[432,26,488,24],[432,27,488,25,"list"],[432,31,488,29],[432,32,488,30],[432,33,488,31],[432,34,488,32],[432,35,488,33],[433,8,489,6],[433,12,489,10],[433,13,489,11,"_socket"],[433,20,489,18],[433,21,489,19,"write"],[433,26,489,24],[433,27,489,25,"list"],[433,31,489,29],[433,32,489,30],[433,33,489,31],[433,34,489,32],[433,36,489,34,"cb"],[433,38,489,36],[433,39,489,37],[434,8,490,6],[434,12,490,10],[434,13,490,11,"_socket"],[434,20,490,18],[434,21,490,19,"uncork"],[434,27,490,25],[434,28,490,26],[434,29,490,27],[435,6,491,4],[435,7,491,5],[435,13,491,11],[436,8,492,6],[436,12,492,10],[436,13,492,11,"_socket"],[436,20,492,18],[436,21,492,19,"write"],[436,26,492,24],[436,27,492,25,"list"],[436,31,492,29],[436,32,492,30],[436,33,492,31],[436,34,492,32],[436,36,492,34,"cb"],[436,38,492,36],[436,39,492,37],[437,6,493,4],[438,4,494,2],[439,2,495,0],[440,2,497,0,"module"],[440,8,497,6],[440,9,497,7,"exports"],[440,16,497,14],[440,19,497,17,"Sender"],[440,25,497,23],[441,0,497,24],[441,3]],"functionMap":{"names":["<global>","Sender","Sender#constructor","Sender.frame","Sender#close","Sender#ping","Sender#pong","Sender#send","Sender#dispatch","perMessageDeflate.compress$argument_2","Sender#dequeue","Sender#enqueue","Sender#sendFrame"],"mappings":"AAA;ACqB;ECS;GDgB;EEuB;GF8F;EGW;GH2C;EIU;GJiC;EKU;GLiC;EMkB;GNsE;EOyB;kDCU;KDuB;GPC;ESO;GTO;EUQ;GVG;EWS;GXS;CDC"},"hasCjsExports":true},"type":"js/module"}]}