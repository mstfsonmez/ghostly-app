{"dependencies":[{"name":"events","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":21,"index":137},"end":{"line":5,"column":38,"index":154}}],"key":"JsYPPZbiyTKGtgYi4nFi37XasmQ=","exportNames":["*"],"imports":1}},{"name":"http","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":13,"index":169},"end":{"line":6,"column":28,"index":184}}],"key":"yxqbxLTX0paWNp+looPTDqSlUdI=","exportNames":["*"],"imports":1}},{"name":"stream","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":19,"index":205},"end":{"line":7,"column":36,"index":222}}],"key":"ywjhWBPQUrHXIfwGsbgNg7Szt/A=","exportNames":["*"],"imports":1}},{"name":"crypto","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":23,"index":247},"end":{"line":8,"column":40,"index":264}}],"key":"qkQHogusroKbdlr5of4h1Mv5pUg=","exportNames":["*"],"imports":1}},{"name":"./extension","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":18,"index":285},"end":{"line":10,"column":40,"index":307}}],"key":"j9VWPq7/dbuGxKTZLdSJJsd9Szs=","exportNames":["*"],"imports":1}},{"name":"./permessage-deflate","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":11,"column":26,"index":335},"end":{"line":11,"column":57,"index":366}}],"key":"Q2Pva8QskhgfG9XaS7nBCDBdIDE=","exportNames":["*"],"imports":1}},{"name":"./subprotocol","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":12,"column":20,"index":388},"end":{"line":12,"column":44,"index":412}}],"key":"KMLfux5H1PsSLbU84XlKzaDVUSA=","exportNames":["*"],"imports":1}},{"name":"./websocket","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":13,"column":18,"index":432},"end":{"line":13,"column":40,"index":454}}],"key":"Z9tk37I35leCkp6BqPC1DlwoIEg=","exportNames":["*"],"imports":1}},{"name":"./constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":14,"column":29,"index":485},"end":{"line":14,"column":51,"index":507}}],"key":"3z43bJyk/UB4EKjDCOXTFak09do=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex$\", \"caughtErrors\": \"none\" }] */\n\n  'use strict';\n\n  const EventEmitter = require(_dependencyMap[0], \"events\");\n  const http = require(_dependencyMap[1], \"http\");\n  const {\n    Duplex\n  } = require(_dependencyMap[2], \"stream\");\n  const {\n    createHash\n  } = require(_dependencyMap[3], \"crypto\");\n  const extension = require(_dependencyMap[4], \"./extension\");\n  const PerMessageDeflate = require(_dependencyMap[5], \"./permessage-deflate\");\n  const subprotocol = require(_dependencyMap[6], \"./subprotocol\");\n  const WebSocket = require(_dependencyMap[7], \"./websocket\");\n  const {\n    GUID,\n    kWebSocket\n  } = require(_dependencyMap[8], \"./constants\");\n  const keyRegex = /^[+/0-9A-Za-z]{22}==$/;\n  const RUNNING = 0;\n  const CLOSING = 1;\n  const CLOSED = 2;\n\n  /**\n   * Class representing a WebSocket server.\n   *\n   * @extends EventEmitter\n   */\n  class WebSocketServer extends EventEmitter {\n    /**\n     * Create a `WebSocketServer` instance.\n     *\n     * @param {Object} options Configuration options\n     * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether\n     *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted\n     *     multiple times in the same tick\n     * @param {Boolean} [options.autoPong=true] Specifies whether or not to\n     *     automatically send a pong in response to a ping\n     * @param {Number} [options.backlog=511] The maximum length of the queue of\n     *     pending connections\n     * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\n     *     track clients\n     * @param {Function} [options.handleProtocols] A hook to handle protocols\n     * @param {String} [options.host] The hostname where to bind the server\n     * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n     *     size\n     * @param {Boolean} [options.noServer=false] Enable no server mode\n     * @param {String} [options.path] Accept only connections matching this path\n     * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\n     *     permessage-deflate\n     * @param {Number} [options.port] The port where to bind the server\n     * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\n     *     server to use\n     * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n     *     not to skip UTF-8 validation for text and close messages\n     * @param {Function} [options.verifyClient] A hook to reject connections\n     * @param {Function} [options.WebSocket=WebSocket] Specifies the `WebSocket`\n     *     class to use. It must be the `WebSocket` class or class that extends it\n     * @param {Function} [callback] A listener for the `listening` event\n     */\n    constructor(options, callback) {\n      super();\n      options = {\n        allowSynchronousEvents: true,\n        autoPong: true,\n        maxPayload: 100 * 1024 * 1024,\n        skipUTF8Validation: false,\n        perMessageDeflate: false,\n        handleProtocols: null,\n        clientTracking: true,\n        verifyClient: null,\n        noServer: false,\n        backlog: null,\n        // use default (511 as implemented in net.js)\n        server: null,\n        host: null,\n        path: null,\n        port: null,\n        WebSocket,\n        ...options\n      };\n      if (options.port == null && !options.server && !options.noServer || options.port != null && (options.server || options.noServer) || options.server && options.noServer) {\n        throw new TypeError('One and only one of the \"port\", \"server\", or \"noServer\" options ' + 'must be specified');\n      }\n      if (options.port != null) {\n        this._server = http.createServer((req, res) => {\n          const body = http.STATUS_CODES[426];\n          res.writeHead(426, {\n            'Content-Length': body.length,\n            'Content-Type': 'text/plain'\n          });\n          res.end(body);\n        });\n        this._server.listen(options.port, options.host, options.backlog, callback);\n      } else if (options.server) {\n        this._server = options.server;\n      }\n      if (this._server) {\n        const emitConnection = this.emit.bind(this, 'connection');\n        this._removeListeners = addListeners(this._server, {\n          listening: this.emit.bind(this, 'listening'),\n          error: this.emit.bind(this, 'error'),\n          upgrade: (req, socket, head) => {\n            this.handleUpgrade(req, socket, head, emitConnection);\n          }\n        });\n      }\n      if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n      if (options.clientTracking) {\n        this.clients = new Set();\n        this._shouldEmitClose = false;\n      }\n      this.options = options;\n      this._state = RUNNING;\n    }\n\n    /**\n     * Returns the bound address, the address family name, and port of the server\n     * as reported by the operating system if listening on an IP socket.\n     * If the server is listening on a pipe or UNIX domain socket, the name is\n     * returned as a string.\n     *\n     * @return {(Object|String|null)} The address of the server\n     * @public\n     */\n    address() {\n      if (this.options.noServer) {\n        throw new Error('The server is operating in \"noServer\" mode');\n      }\n      if (!this._server) return null;\n      return this._server.address();\n    }\n\n    /**\n     * Stop the server from accepting new connections and emit the `'close'` event\n     * when all existing connections are closed.\n     *\n     * @param {Function} [cb] A one-time listener for the `'close'` event\n     * @public\n     */\n    close(cb) {\n      if (this._state === CLOSED) {\n        if (cb) {\n          this.once('close', () => {\n            cb(new Error('The server is not running'));\n          });\n        }\n        process.nextTick(emitClose, this);\n        return;\n      }\n      if (cb) this.once('close', cb);\n      if (this._state === CLOSING) return;\n      this._state = CLOSING;\n      if (this.options.noServer || this.options.server) {\n        if (this._server) {\n          this._removeListeners();\n          this._removeListeners = this._server = null;\n        }\n        if (this.clients) {\n          if (!this.clients.size) {\n            process.nextTick(emitClose, this);\n          } else {\n            this._shouldEmitClose = true;\n          }\n        } else {\n          process.nextTick(emitClose, this);\n        }\n      } else {\n        const server = this._server;\n        this._removeListeners();\n        this._removeListeners = this._server = null;\n\n        //\n        // The HTTP/S server was created internally. Close it, and rely on its\n        // `'close'` event.\n        //\n        server.close(() => {\n          emitClose(this);\n        });\n      }\n    }\n\n    /**\n     * See if a given request should be handled by this server instance.\n     *\n     * @param {http.IncomingMessage} req Request object to inspect\n     * @return {Boolean} `true` if the request is valid, else `false`\n     * @public\n     */\n    shouldHandle(req) {\n      if (this.options.path) {\n        const index = req.url.indexOf('?');\n        const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n        if (pathname !== this.options.path) return false;\n      }\n      return true;\n    }\n\n    /**\n     * Handle a HTTP Upgrade request.\n     *\n     * @param {http.IncomingMessage} req The request object\n     * @param {Duplex} socket The network socket between the server and client\n     * @param {Buffer} head The first packet of the upgraded stream\n     * @param {Function} cb Callback\n     * @public\n     */\n    handleUpgrade(req, socket, head, cb) {\n      socket.on('error', socketOnError);\n      const key = req.headers['sec-websocket-key'];\n      const upgrade = req.headers.upgrade;\n      const version = +req.headers['sec-websocket-version'];\n      if (req.method !== 'GET') {\n        const message = 'Invalid HTTP method';\n        abortHandshakeOrEmitwsClientError(this, req, socket, 405, message);\n        return;\n      }\n      if (upgrade === undefined || upgrade.toLowerCase() !== 'websocket') {\n        const message = 'Invalid Upgrade header';\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n        return;\n      }\n      if (key === undefined || !keyRegex.test(key)) {\n        const message = 'Missing or invalid Sec-WebSocket-Key header';\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n        return;\n      }\n      if (version !== 8 && version !== 13) {\n        const message = 'Missing or invalid Sec-WebSocket-Version header';\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n        return;\n      }\n      if (!this.shouldHandle(req)) {\n        abortHandshake(socket, 400);\n        return;\n      }\n      const secWebSocketProtocol = req.headers['sec-websocket-protocol'];\n      let protocols = new Set();\n      if (secWebSocketProtocol !== undefined) {\n        try {\n          protocols = subprotocol.parse(secWebSocketProtocol);\n        } catch (err) {\n          const message = 'Invalid Sec-WebSocket-Protocol header';\n          abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n          return;\n        }\n      }\n      const secWebSocketExtensions = req.headers['sec-websocket-extensions'];\n      const extensions = {};\n      if (this.options.perMessageDeflate && secWebSocketExtensions !== undefined) {\n        const perMessageDeflate = new PerMessageDeflate(this.options.perMessageDeflate, true, this.options.maxPayload);\n        try {\n          const offers = extension.parse(secWebSocketExtensions);\n          if (offers[PerMessageDeflate.extensionName]) {\n            perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n            extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n          }\n        } catch (err) {\n          const message = 'Invalid or unacceptable Sec-WebSocket-Extensions header';\n          abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n          return;\n        }\n      }\n\n      //\n      // Optionally call external client verification handler.\n      //\n      if (this.options.verifyClient) {\n        const info = {\n          origin: req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n          secure: !!(req.socket.authorized || req.socket.encrypted),\n          req\n        };\n        if (this.options.verifyClient.length === 2) {\n          this.options.verifyClient(info, (verified, code, message, headers) => {\n            if (!verified) {\n              return abortHandshake(socket, code || 401, message, headers);\n            }\n            this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);\n          });\n          return;\n        }\n        if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n      }\n      this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);\n    }\n\n    /**\n     * Upgrade the connection to WebSocket.\n     *\n     * @param {Object} extensions The accepted extensions\n     * @param {String} key The value of the `Sec-WebSocket-Key` header\n     * @param {Set} protocols The subprotocols\n     * @param {http.IncomingMessage} req The request object\n     * @param {Duplex} socket The network socket between the server and client\n     * @param {Buffer} head The first packet of the upgraded stream\n     * @param {Function} cb Callback\n     * @throws {Error} If called more than once with the same socket\n     * @private\n     */\n    completeUpgrade(extensions, key, protocols, req, socket, head, cb) {\n      //\n      // Destroy the socket if the client has already sent a FIN packet.\n      //\n      if (!socket.readable || !socket.writable) return socket.destroy();\n      if (socket[kWebSocket]) {\n        throw new Error('server.handleUpgrade() was called more than once with the same ' + 'socket, possibly due to a misconfiguration');\n      }\n      if (this._state > RUNNING) return abortHandshake(socket, 503);\n      const digest = createHash('sha1').update(key + GUID).digest('base64');\n      const headers = ['HTTP/1.1 101 Switching Protocols', 'Upgrade: websocket', 'Connection: Upgrade', `Sec-WebSocket-Accept: ${digest}`];\n      const ws = new this.options.WebSocket(null, undefined, this.options);\n      if (protocols.size) {\n        //\n        // Optionally call external protocol selection handler.\n        //\n        const protocol = this.options.handleProtocols ? this.options.handleProtocols(protocols, req) : protocols.values().next().value;\n        if (protocol) {\n          headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n          ws._protocol = protocol;\n        }\n      }\n      if (extensions[PerMessageDeflate.extensionName]) {\n        const params = extensions[PerMessageDeflate.extensionName].params;\n        const value = extension.format({\n          [PerMessageDeflate.extensionName]: [params]\n        });\n        headers.push(`Sec-WebSocket-Extensions: ${value}`);\n        ws._extensions = extensions;\n      }\n\n      //\n      // Allow external modification/inspection of handshake headers.\n      //\n      this.emit('headers', headers, req);\n      socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n      socket.removeListener('error', socketOnError);\n      ws.setSocket(socket, head, {\n        allowSynchronousEvents: this.options.allowSynchronousEvents,\n        maxPayload: this.options.maxPayload,\n        skipUTF8Validation: this.options.skipUTF8Validation\n      });\n      if (this.clients) {\n        this.clients.add(ws);\n        ws.on('close', () => {\n          this.clients.delete(ws);\n          if (this._shouldEmitClose && !this.clients.size) {\n            process.nextTick(emitClose, this);\n          }\n        });\n      }\n      cb(ws, req);\n    }\n  }\n  module.exports = WebSocketServer;\n\n  /**\n   * Add event listeners on an `EventEmitter` using a map of <event, listener>\n   * pairs.\n   *\n   * @param {EventEmitter} server The event emitter\n   * @param {Object.<String, Function>} map The listeners to add\n   * @return {Function} A function that will remove the added listeners when\n   *     called\n   * @private\n   */\n  function addListeners(server, map) {\n    for (const event of Object.keys(map)) server.on(event, map[event]);\n    return function removeListeners() {\n      for (const event of Object.keys(map)) {\n        server.removeListener(event, map[event]);\n      }\n    };\n  }\n\n  /**\n   * Emit a `'close'` event on an `EventEmitter`.\n   *\n   * @param {EventEmitter} server The event emitter\n   * @private\n   */\n  function emitClose(server) {\n    server._state = CLOSED;\n    server.emit('close');\n  }\n\n  /**\n   * Handle socket errors.\n   *\n   * @private\n   */\n  function socketOnError() {\n    this.destroy();\n  }\n\n  /**\n   * Close the connection when preconditions are not fulfilled.\n   *\n   * @param {Duplex} socket The socket of the upgrade request\n   * @param {Number} code The HTTP response status code\n   * @param {String} [message] The HTTP response body\n   * @param {Object} [headers] Additional HTTP response headers\n   * @private\n   */\n  function abortHandshake(socket, code, message, headers) {\n    //\n    // The socket is writable unless the user destroyed or ended it before calling\n    // `server.handleUpgrade()` or in the `verifyClient` function, which is a user\n    // error. Handling this does not make much sense as the worst that can happen\n    // is that some of the data written by the user might be discarded due to the\n    // call to `socket.end()` below, which triggers an `'error'` event that in\n    // turn causes the socket to be destroyed.\n    //\n    message = message || http.STATUS_CODES[code];\n    headers = {\n      Connection: 'close',\n      'Content-Type': 'text/html',\n      'Content-Length': Buffer.byteLength(message),\n      ...headers\n    };\n    socket.once('finish', socket.destroy);\n    socket.end(`HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` + Object.keys(headers).map(h => `${h}: ${headers[h]}`).join('\\r\\n') + '\\r\\n\\r\\n' + message);\n  }\n\n  /**\n   * Emit a `'wsClientError'` event on a `WebSocketServer` if there is at least\n   * one listener for it, otherwise call `abortHandshake()`.\n   *\n   * @param {WebSocketServer} server The WebSocket server\n   * @param {http.IncomingMessage} req The request object\n   * @param {Duplex} socket The socket of the upgrade request\n   * @param {Number} code The HTTP response status code\n   * @param {String} message The HTTP response body\n   * @private\n   */\n  function abortHandshakeOrEmitwsClientError(server, req, socket, code, message) {\n    if (server.listenerCount('wsClientError')) {\n      const err = new Error(message);\n      Error.captureStackTrace(err, abortHandshakeOrEmitwsClientError);\n      server.emit('wsClientError', err, socket, req);\n    } else {\n      abortHandshake(socket, code, message);\n    }\n  }\n});","lineCount":448,"map":[[2,2,1,0],[4,2,3,0],[4,14,3,12],[6,2,5,0],[6,8,5,6,"EventEmitter"],[6,20,5,18],[6,23,5,21,"require"],[6,30,5,28],[6,31,5,28,"_dependencyMap"],[6,45,5,28],[6,58,5,37],[6,59,5,38],[7,2,6,0],[7,8,6,6,"http"],[7,12,6,10],[7,15,6,13,"require"],[7,22,6,20],[7,23,6,20,"_dependencyMap"],[7,37,6,20],[7,48,6,27],[7,49,6,28],[8,2,7,0],[8,8,7,6],[9,4,7,8,"Duplex"],[10,2,7,15],[10,3,7,16],[10,6,7,19,"require"],[10,13,7,26],[10,14,7,26,"_dependencyMap"],[10,28,7,26],[10,41,7,35],[10,42,7,36],[11,2,8,0],[11,8,8,6],[12,4,8,8,"createHash"],[13,2,8,19],[13,3,8,20],[13,6,8,23,"require"],[13,13,8,30],[13,14,8,30,"_dependencyMap"],[13,28,8,30],[13,41,8,39],[13,42,8,40],[14,2,10,0],[14,8,10,6,"extension"],[14,17,10,15],[14,20,10,18,"require"],[14,27,10,25],[14,28,10,25,"_dependencyMap"],[14,42,10,25],[14,60,10,39],[14,61,10,40],[15,2,11,0],[15,8,11,6,"PerMessageDeflate"],[15,25,11,23],[15,28,11,26,"require"],[15,35,11,33],[15,36,11,33,"_dependencyMap"],[15,50,11,33],[15,77,11,56],[15,78,11,57],[16,2,12,0],[16,8,12,6,"subprotocol"],[16,19,12,17],[16,22,12,20,"require"],[16,29,12,27],[16,30,12,27,"_dependencyMap"],[16,44,12,27],[16,64,12,43],[16,65,12,44],[17,2,13,0],[17,8,13,6,"WebSocket"],[17,17,13,15],[17,20,13,18,"require"],[17,27,13,25],[17,28,13,25,"_dependencyMap"],[17,42,13,25],[17,60,13,39],[17,61,13,40],[18,2,14,0],[18,8,14,6],[19,4,14,8,"GUID"],[19,8,14,12],[20,4,14,14,"kWebSocket"],[21,2,14,25],[21,3,14,26],[21,6,14,29,"require"],[21,13,14,36],[21,14,14,36,"_dependencyMap"],[21,28,14,36],[21,46,14,50],[21,47,14,51],[22,2,16,0],[22,8,16,6,"keyRegex"],[22,16,16,14],[22,19,16,17],[22,42,16,40],[23,2,18,0],[23,8,18,6,"RUNNING"],[23,15,18,13],[23,18,18,16],[23,19,18,17],[24,2,19,0],[24,8,19,6,"CLOSING"],[24,15,19,13],[24,18,19,16],[24,19,19,17],[25,2,20,0],[25,8,20,6,"CLOSED"],[25,14,20,12],[25,17,20,15],[25,18,20,16],[27,2,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,2,27,0],[32,8,27,6,"WebSocketServer"],[32,23,27,21],[32,32,27,30,"EventEmitter"],[32,44,27,42],[32,45,27,43],[33,4,28,2],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,0,39,0],[45,0,40,0],[46,0,41,0],[47,0,42,0],[48,0,43,0],[49,0,44,0],[50,0,45,0],[51,0,46,0],[52,0,47,0],[53,0,48,0],[54,0,49,0],[55,0,50,0],[56,0,51,0],[57,0,52,0],[58,0,53,0],[59,0,54,0],[60,0,55,0],[61,0,56,0],[62,0,57,0],[63,0,58,0],[64,4,59,2,"constructor"],[64,15,59,13,"constructor"],[64,16,59,14,"options"],[64,23,59,21],[64,25,59,23,"callback"],[64,33,59,31],[64,35,59,33],[65,6,60,4],[65,11,60,9],[65,12,60,10],[65,13,60,11],[66,6,62,4,"options"],[66,13,62,11],[66,16,62,14],[67,8,63,6,"allowSynchronousEvents"],[67,30,63,28],[67,32,63,30],[67,36,63,34],[68,8,64,6,"autoPong"],[68,16,64,14],[68,18,64,16],[68,22,64,20],[69,8,65,6,"maxPayload"],[69,18,65,16],[69,20,65,18],[69,23,65,21],[69,26,65,24],[69,30,65,28],[69,33,65,31],[69,37,65,35],[70,8,66,6,"skipUTF8Validation"],[70,26,66,24],[70,28,66,26],[70,33,66,31],[71,8,67,6,"perMessageDeflate"],[71,25,67,23],[71,27,67,25],[71,32,67,30],[72,8,68,6,"handleProtocols"],[72,23,68,21],[72,25,68,23],[72,29,68,27],[73,8,69,6,"clientTracking"],[73,22,69,20],[73,24,69,22],[73,28,69,26],[74,8,70,6,"verifyClient"],[74,20,70,18],[74,22,70,20],[74,26,70,24],[75,8,71,6,"noServer"],[75,16,71,14],[75,18,71,16],[75,23,71,21],[76,8,72,6,"backlog"],[76,15,72,13],[76,17,72,15],[76,21,72,19],[77,8,72,21],[78,8,73,6,"server"],[78,14,73,12],[78,16,73,14],[78,20,73,18],[79,8,74,6,"host"],[79,12,74,10],[79,14,74,12],[79,18,74,16],[80,8,75,6,"path"],[80,12,75,10],[80,14,75,12],[80,18,75,16],[81,8,76,6,"port"],[81,12,76,10],[81,14,76,12],[81,18,76,16],[82,8,77,6,"WebSocket"],[82,17,77,15],[83,8,78,6],[83,11,78,9,"options"],[84,6,79,4],[84,7,79,5],[85,6,81,4],[85,10,82,7,"options"],[85,17,82,14],[85,18,82,15,"port"],[85,22,82,19],[85,26,82,23],[85,30,82,27],[85,34,82,31],[85,35,82,32,"options"],[85,42,82,39],[85,43,82,40,"server"],[85,49,82,46],[85,53,82,50],[85,54,82,51,"options"],[85,61,82,58],[85,62,82,59,"noServer"],[85,70,82,67],[85,74,83,7,"options"],[85,81,83,14],[85,82,83,15,"port"],[85,86,83,19],[85,90,83,23],[85,94,83,27],[85,99,83,32,"options"],[85,106,83,39],[85,107,83,40,"server"],[85,113,83,46],[85,117,83,50,"options"],[85,124,83,57],[85,125,83,58,"noServer"],[85,133,83,66],[85,134,83,68],[85,138,84,7,"options"],[85,145,84,14],[85,146,84,15,"server"],[85,152,84,21],[85,156,84,25,"options"],[85,163,84,32],[85,164,84,33,"noServer"],[85,172,84,42],[85,174,85,6],[86,8,86,6],[86,14,86,12],[86,18,86,16,"TypeError"],[86,27,86,25],[86,28,87,8],[86,94,87,74],[86,97,88,10],[86,116,89,6],[86,117,89,7],[87,6,90,4],[88,6,92,4],[88,10,92,8,"options"],[88,17,92,15],[88,18,92,16,"port"],[88,22,92,20],[88,26,92,24],[88,30,92,28],[88,32,92,30],[89,8,93,6],[89,12,93,10],[89,13,93,11,"_server"],[89,20,93,18],[89,23,93,21,"http"],[89,27,93,25],[89,28,93,26,"createServer"],[89,40,93,38],[89,41,93,39],[89,42,93,40,"req"],[89,45,93,43],[89,47,93,45,"res"],[89,50,93,48],[89,55,93,53],[90,10,94,8],[90,16,94,14,"body"],[90,20,94,18],[90,23,94,21,"http"],[90,27,94,25],[90,28,94,26,"STATUS_CODES"],[90,40,94,38],[90,41,94,39],[90,44,94,42],[90,45,94,43],[91,10,96,8,"res"],[91,13,96,11],[91,14,96,12,"writeHead"],[91,23,96,21],[91,24,96,22],[91,27,96,25],[91,29,96,27],[92,12,97,10],[92,28,97,26],[92,30,97,28,"body"],[92,34,97,32],[92,35,97,33,"length"],[92,41,97,39],[93,12,98,10],[93,26,98,24],[93,28,98,26],[94,10,99,8],[94,11,99,9],[94,12,99,10],[95,10,100,8,"res"],[95,13,100,11],[95,14,100,12,"end"],[95,17,100,15],[95,18,100,16,"body"],[95,22,100,20],[95,23,100,21],[96,8,101,6],[96,9,101,7],[96,10,101,8],[97,8,102,6],[97,12,102,10],[97,13,102,11,"_server"],[97,20,102,18],[97,21,102,19,"listen"],[97,27,102,25],[97,28,103,8,"options"],[97,35,103,15],[97,36,103,16,"port"],[97,40,103,20],[97,42,104,8,"options"],[97,49,104,15],[97,50,104,16,"host"],[97,54,104,20],[97,56,105,8,"options"],[97,63,105,15],[97,64,105,16,"backlog"],[97,71,105,23],[97,73,106,8,"callback"],[97,81,107,6],[97,82,107,7],[98,6,108,4],[98,7,108,5],[98,13,108,11],[98,17,108,15,"options"],[98,24,108,22],[98,25,108,23,"server"],[98,31,108,29],[98,33,108,31],[99,8,109,6],[99,12,109,10],[99,13,109,11,"_server"],[99,20,109,18],[99,23,109,21,"options"],[99,30,109,28],[99,31,109,29,"server"],[99,37,109,35],[100,6,110,4],[101,6,112,4],[101,10,112,8],[101,14,112,12],[101,15,112,13,"_server"],[101,22,112,20],[101,24,112,22],[102,8,113,6],[102,14,113,12,"emitConnection"],[102,28,113,26],[102,31,113,29],[102,35,113,33],[102,36,113,34,"emit"],[102,40,113,38],[102,41,113,39,"bind"],[102,45,113,43],[102,46,113,44],[102,50,113,48],[102,52,113,50],[102,64,113,62],[102,65,113,63],[103,8,115,6],[103,12,115,10],[103,13,115,11,"_removeListeners"],[103,29,115,27],[103,32,115,30,"addListeners"],[103,44,115,42],[103,45,115,43],[103,49,115,47],[103,50,115,48,"_server"],[103,57,115,55],[103,59,115,57],[104,10,116,8,"listening"],[104,19,116,17],[104,21,116,19],[104,25,116,23],[104,26,116,24,"emit"],[104,30,116,28],[104,31,116,29,"bind"],[104,35,116,33],[104,36,116,34],[104,40,116,38],[104,42,116,40],[104,53,116,51],[104,54,116,52],[105,10,117,8,"error"],[105,15,117,13],[105,17,117,15],[105,21,117,19],[105,22,117,20,"emit"],[105,26,117,24],[105,27,117,25,"bind"],[105,31,117,29],[105,32,117,30],[105,36,117,34],[105,38,117,36],[105,45,117,43],[105,46,117,44],[106,10,118,8,"upgrade"],[106,17,118,15],[106,19,118,17,"upgrade"],[106,20,118,18,"req"],[106,23,118,21],[106,25,118,23,"socket"],[106,31,118,29],[106,33,118,31,"head"],[106,37,118,35],[106,42,118,40],[107,12,119,10],[107,16,119,14],[107,17,119,15,"handleUpgrade"],[107,30,119,28],[107,31,119,29,"req"],[107,34,119,32],[107,36,119,34,"socket"],[107,42,119,40],[107,44,119,42,"head"],[107,48,119,46],[107,50,119,48,"emitConnection"],[107,64,119,62],[107,65,119,63],[108,10,120,8],[109,8,121,6],[109,9,121,7],[109,10,121,8],[110,6,122,4],[111,6,124,4],[111,10,124,8,"options"],[111,17,124,15],[111,18,124,16,"perMessageDeflate"],[111,35,124,33],[111,40,124,38],[111,44,124,42],[111,46,124,44,"options"],[111,53,124,51],[111,54,124,52,"perMessageDeflate"],[111,71,124,69],[111,74,124,72],[111,75,124,73],[111,76,124,74],[112,6,125,4],[112,10,125,8,"options"],[112,17,125,15],[112,18,125,16,"clientTracking"],[112,32,125,30],[112,34,125,32],[113,8,126,6],[113,12,126,10],[113,13,126,11,"clients"],[113,20,126,18],[113,23,126,21],[113,27,126,25,"Set"],[113,30,126,28],[113,31,126,29],[113,32,126,30],[114,8,127,6],[114,12,127,10],[114,13,127,11,"_shouldEmitClose"],[114,29,127,27],[114,32,127,30],[114,37,127,35],[115,6,128,4],[116,6,130,4],[116,10,130,8],[116,11,130,9,"options"],[116,18,130,16],[116,21,130,19,"options"],[116,28,130,26],[117,6,131,4],[117,10,131,8],[117,11,131,9,"_state"],[117,17,131,15],[117,20,131,18,"RUNNING"],[117,27,131,25],[118,4,132,2],[120,4,134,2],[121,0,135,0],[122,0,136,0],[123,0,137,0],[124,0,138,0],[125,0,139,0],[126,0,140,0],[127,0,141,0],[128,0,142,0],[129,4,143,2,"address"],[129,11,143,9,"address"],[129,12,143,9],[129,14,143,12],[130,6,144,4],[130,10,144,8],[130,14,144,12],[130,15,144,13,"options"],[130,22,144,20],[130,23,144,21,"noServer"],[130,31,144,29],[130,33,144,31],[131,8,145,6],[131,14,145,12],[131,18,145,16,"Error"],[131,23,145,21],[131,24,145,22],[131,68,145,66],[131,69,145,67],[132,6,146,4],[133,6,148,4],[133,10,148,8],[133,11,148,9],[133,15,148,13],[133,16,148,14,"_server"],[133,23,148,21],[133,25,148,23],[133,32,148,30],[133,36,148,34],[134,6,149,4],[134,13,149,11],[134,17,149,15],[134,18,149,16,"_server"],[134,25,149,23],[134,26,149,24,"address"],[134,33,149,31],[134,34,149,32],[134,35,149,33],[135,4,150,2],[137,4,152,2],[138,0,153,0],[139,0,154,0],[140,0,155,0],[141,0,156,0],[142,0,157,0],[143,0,158,0],[144,4,159,2,"close"],[144,9,159,7,"close"],[144,10,159,8,"cb"],[144,12,159,10],[144,14,159,12],[145,6,160,4],[145,10,160,8],[145,14,160,12],[145,15,160,13,"_state"],[145,21,160,19],[145,26,160,24,"CLOSED"],[145,32,160,30],[145,34,160,32],[146,8,161,6],[146,12,161,10,"cb"],[146,14,161,12],[146,16,161,14],[147,10,162,8],[147,14,162,12],[147,15,162,13,"once"],[147,19,162,17],[147,20,162,18],[147,27,162,25],[147,29,162,27],[147,35,162,33],[148,12,163,10,"cb"],[148,14,163,12],[148,15,163,13],[148,19,163,17,"Error"],[148,24,163,22],[148,25,163,23],[148,52,163,50],[148,53,163,51],[148,54,163,52],[149,10,164,8],[149,11,164,9],[149,12,164,10],[150,8,165,6],[151,8,167,6,"process"],[151,15,167,13],[151,16,167,14,"nextTick"],[151,24,167,22],[151,25,167,23,"emitClose"],[151,34,167,32],[151,36,167,34],[151,40,167,38],[151,41,167,39],[152,8,168,6],[153,6,169,4],[154,6,171,4],[154,10,171,8,"cb"],[154,12,171,10],[154,14,171,12],[154,18,171,16],[154,19,171,17,"once"],[154,23,171,21],[154,24,171,22],[154,31,171,29],[154,33,171,31,"cb"],[154,35,171,33],[154,36,171,34],[155,6,173,4],[155,10,173,8],[155,14,173,12],[155,15,173,13,"_state"],[155,21,173,19],[155,26,173,24,"CLOSING"],[155,33,173,31],[155,35,173,33],[156,6,174,4],[156,10,174,8],[156,11,174,9,"_state"],[156,17,174,15],[156,20,174,18,"CLOSING"],[156,27,174,25],[157,6,176,4],[157,10,176,8],[157,14,176,12],[157,15,176,13,"options"],[157,22,176,20],[157,23,176,21,"noServer"],[157,31,176,29],[157,35,176,33],[157,39,176,37],[157,40,176,38,"options"],[157,47,176,45],[157,48,176,46,"server"],[157,54,176,52],[157,56,176,54],[158,8,177,6],[158,12,177,10],[158,16,177,14],[158,17,177,15,"_server"],[158,24,177,22],[158,26,177,24],[159,10,178,8],[159,14,178,12],[159,15,178,13,"_removeListeners"],[159,31,178,29],[159,32,178,30],[159,33,178,31],[160,10,179,8],[160,14,179,12],[160,15,179,13,"_removeListeners"],[160,31,179,29],[160,34,179,32],[160,38,179,36],[160,39,179,37,"_server"],[160,46,179,44],[160,49,179,47],[160,53,179,51],[161,8,180,6],[162,8,182,6],[162,12,182,10],[162,16,182,14],[162,17,182,15,"clients"],[162,24,182,22],[162,26,182,24],[163,10,183,8],[163,14,183,12],[163,15,183,13],[163,19,183,17],[163,20,183,18,"clients"],[163,27,183,25],[163,28,183,26,"size"],[163,32,183,30],[163,34,183,32],[164,12,184,10,"process"],[164,19,184,17],[164,20,184,18,"nextTick"],[164,28,184,26],[164,29,184,27,"emitClose"],[164,38,184,36],[164,40,184,38],[164,44,184,42],[164,45,184,43],[165,10,185,8],[165,11,185,9],[165,17,185,15],[166,12,186,10],[166,16,186,14],[166,17,186,15,"_shouldEmitClose"],[166,33,186,31],[166,36,186,34],[166,40,186,38],[167,10,187,8],[168,8,188,6],[168,9,188,7],[168,15,188,13],[169,10,189,8,"process"],[169,17,189,15],[169,18,189,16,"nextTick"],[169,26,189,24],[169,27,189,25,"emitClose"],[169,36,189,34],[169,38,189,36],[169,42,189,40],[169,43,189,41],[170,8,190,6],[171,6,191,4],[171,7,191,5],[171,13,191,11],[172,8,192,6],[172,14,192,12,"server"],[172,20,192,18],[172,23,192,21],[172,27,192,25],[172,28,192,26,"_server"],[172,35,192,33],[173,8,194,6],[173,12,194,10],[173,13,194,11,"_removeListeners"],[173,29,194,27],[173,30,194,28],[173,31,194,29],[174,8,195,6],[174,12,195,10],[174,13,195,11,"_removeListeners"],[174,29,195,27],[174,32,195,30],[174,36,195,34],[174,37,195,35,"_server"],[174,44,195,42],[174,47,195,45],[174,51,195,49],[176,8,197,6],[177,8,198,6],[178,8,199,6],[179,8,200,6],[180,8,201,6,"server"],[180,14,201,12],[180,15,201,13,"close"],[180,20,201,18],[180,21,201,19],[180,27,201,25],[181,10,202,8,"emitClose"],[181,19,202,17],[181,20,202,18],[181,24,202,22],[181,25,202,23],[182,8,203,6],[182,9,203,7],[182,10,203,8],[183,6,204,4],[184,4,205,2],[186,4,207,2],[187,0,208,0],[188,0,209,0],[189,0,210,0],[190,0,211,0],[191,0,212,0],[192,0,213,0],[193,4,214,2,"shouldHandle"],[193,16,214,14,"shouldHandle"],[193,17,214,15,"req"],[193,20,214,18],[193,22,214,20],[194,6,215,4],[194,10,215,8],[194,14,215,12],[194,15,215,13,"options"],[194,22,215,20],[194,23,215,21,"path"],[194,27,215,25],[194,29,215,27],[195,8,216,6],[195,14,216,12,"index"],[195,19,216,17],[195,22,216,20,"req"],[195,25,216,23],[195,26,216,24,"url"],[195,29,216,27],[195,30,216,28,"indexOf"],[195,37,216,35],[195,38,216,36],[195,41,216,39],[195,42,216,40],[196,8,217,6],[196,14,217,12,"pathname"],[196,22,217,20],[196,25,217,23,"index"],[196,30,217,28],[196,35,217,33],[196,36,217,34],[196,37,217,35],[196,40,217,38,"req"],[196,43,217,41],[196,44,217,42,"url"],[196,47,217,45],[196,48,217,46,"slice"],[196,53,217,51],[196,54,217,52],[196,55,217,53],[196,57,217,55,"index"],[196,62,217,60],[196,63,217,61],[196,66,217,64,"req"],[196,69,217,67],[196,70,217,68,"url"],[196,73,217,71],[197,8,219,6],[197,12,219,10,"pathname"],[197,20,219,18],[197,25,219,23],[197,29,219,27],[197,30,219,28,"options"],[197,37,219,35],[197,38,219,36,"path"],[197,42,219,40],[197,44,219,42],[197,51,219,49],[197,56,219,54],[198,6,220,4],[199,6,222,4],[199,13,222,11],[199,17,222,15],[200,4,223,2],[202,4,225,2],[203,0,226,0],[204,0,227,0],[205,0,228,0],[206,0,229,0],[207,0,230,0],[208,0,231,0],[209,0,232,0],[210,0,233,0],[211,4,234,2,"handleUpgrade"],[211,17,234,15,"handleUpgrade"],[211,18,234,16,"req"],[211,21,234,19],[211,23,234,21,"socket"],[211,29,234,27],[211,31,234,29,"head"],[211,35,234,33],[211,37,234,35,"cb"],[211,39,234,37],[211,41,234,39],[212,6,235,4,"socket"],[212,12,235,10],[212,13,235,11,"on"],[212,15,235,13],[212,16,235,14],[212,23,235,21],[212,25,235,23,"socketOnError"],[212,38,235,36],[212,39,235,37],[213,6,237,4],[213,12,237,10,"key"],[213,15,237,13],[213,18,237,16,"req"],[213,21,237,19],[213,22,237,20,"headers"],[213,29,237,27],[213,30,237,28],[213,49,237,47],[213,50,237,48],[214,6,238,4],[214,12,238,10,"upgrade"],[214,19,238,17],[214,22,238,20,"req"],[214,25,238,23],[214,26,238,24,"headers"],[214,33,238,31],[214,34,238,32,"upgrade"],[214,41,238,39],[215,6,239,4],[215,12,239,10,"version"],[215,19,239,17],[215,22,239,20],[215,23,239,21,"req"],[215,26,239,24],[215,27,239,25,"headers"],[215,34,239,32],[215,35,239,33],[215,58,239,56],[215,59,239,57],[216,6,241,4],[216,10,241,8,"req"],[216,13,241,11],[216,14,241,12,"method"],[216,20,241,18],[216,25,241,23],[216,30,241,28],[216,32,241,30],[217,8,242,6],[217,14,242,12,"message"],[217,21,242,19],[217,24,242,22],[217,45,242,43],[218,8,243,6,"abortHandshakeOrEmitwsClientError"],[218,41,243,39],[218,42,243,40],[218,46,243,44],[218,48,243,46,"req"],[218,51,243,49],[218,53,243,51,"socket"],[218,59,243,57],[218,61,243,59],[218,64,243,62],[218,66,243,64,"message"],[218,73,243,71],[218,74,243,72],[219,8,244,6],[220,6,245,4],[221,6,247,4],[221,10,247,8,"upgrade"],[221,17,247,15],[221,22,247,20,"undefined"],[221,31,247,29],[221,35,247,33,"upgrade"],[221,42,247,40],[221,43,247,41,"toLowerCase"],[221,54,247,52],[221,55,247,53],[221,56,247,54],[221,61,247,59],[221,72,247,70],[221,74,247,72],[222,8,248,6],[222,14,248,12,"message"],[222,21,248,19],[222,24,248,22],[222,48,248,46],[223,8,249,6,"abortHandshakeOrEmitwsClientError"],[223,41,249,39],[223,42,249,40],[223,46,249,44],[223,48,249,46,"req"],[223,51,249,49],[223,53,249,51,"socket"],[223,59,249,57],[223,61,249,59],[223,64,249,62],[223,66,249,64,"message"],[223,73,249,71],[223,74,249,72],[224,8,250,6],[225,6,251,4],[226,6,253,4],[226,10,253,8,"key"],[226,13,253,11],[226,18,253,16,"undefined"],[226,27,253,25],[226,31,253,29],[226,32,253,30,"keyRegex"],[226,40,253,38],[226,41,253,39,"test"],[226,45,253,43],[226,46,253,44,"key"],[226,49,253,47],[226,50,253,48],[226,52,253,50],[227,8,254,6],[227,14,254,12,"message"],[227,21,254,19],[227,24,254,22],[227,69,254,67],[228,8,255,6,"abortHandshakeOrEmitwsClientError"],[228,41,255,39],[228,42,255,40],[228,46,255,44],[228,48,255,46,"req"],[228,51,255,49],[228,53,255,51,"socket"],[228,59,255,57],[228,61,255,59],[228,64,255,62],[228,66,255,64,"message"],[228,73,255,71],[228,74,255,72],[229,8,256,6],[230,6,257,4],[231,6,259,4],[231,10,259,8,"version"],[231,17,259,15],[231,22,259,20],[231,23,259,21],[231,27,259,25,"version"],[231,34,259,32],[231,39,259,37],[231,41,259,39],[231,43,259,41],[232,8,260,6],[232,14,260,12,"message"],[232,21,260,19],[232,24,260,22],[232,73,260,71],[233,8,261,6,"abortHandshakeOrEmitwsClientError"],[233,41,261,39],[233,42,261,40],[233,46,261,44],[233,48,261,46,"req"],[233,51,261,49],[233,53,261,51,"socket"],[233,59,261,57],[233,61,261,59],[233,64,261,62],[233,66,261,64,"message"],[233,73,261,71],[233,74,261,72],[234,8,262,6],[235,6,263,4],[236,6,265,4],[236,10,265,8],[236,11,265,9],[236,15,265,13],[236,16,265,14,"shouldHandle"],[236,28,265,26],[236,29,265,27,"req"],[236,32,265,30],[236,33,265,31],[236,35,265,33],[237,8,266,6,"abortHandshake"],[237,22,266,20],[237,23,266,21,"socket"],[237,29,266,27],[237,31,266,29],[237,34,266,32],[237,35,266,33],[238,8,267,6],[239,6,268,4],[240,6,270,4],[240,12,270,10,"secWebSocketProtocol"],[240,32,270,30],[240,35,270,33,"req"],[240,38,270,36],[240,39,270,37,"headers"],[240,46,270,44],[240,47,270,45],[240,71,270,69],[240,72,270,70],[241,6,271,4],[241,10,271,8,"protocols"],[241,19,271,17],[241,22,271,20],[241,26,271,24,"Set"],[241,29,271,27],[241,30,271,28],[241,31,271,29],[242,6,273,4],[242,10,273,8,"secWebSocketProtocol"],[242,30,273,28],[242,35,273,33,"undefined"],[242,44,273,42],[242,46,273,44],[243,8,274,6],[243,12,274,10],[244,10,275,8,"protocols"],[244,19,275,17],[244,22,275,20,"subprotocol"],[244,33,275,31],[244,34,275,32,"parse"],[244,39,275,37],[244,40,275,38,"secWebSocketProtocol"],[244,60,275,58],[244,61,275,59],[245,8,276,6],[245,9,276,7],[245,10,276,8],[245,17,276,15,"err"],[245,20,276,18],[245,22,276,20],[246,10,277,8],[246,16,277,14,"message"],[246,23,277,21],[246,26,277,24],[246,65,277,63],[247,10,278,8,"abortHandshakeOrEmitwsClientError"],[247,43,278,41],[247,44,278,42],[247,48,278,46],[247,50,278,48,"req"],[247,53,278,51],[247,55,278,53,"socket"],[247,61,278,59],[247,63,278,61],[247,66,278,64],[247,68,278,66,"message"],[247,75,278,73],[247,76,278,74],[248,10,279,8],[249,8,280,6],[250,6,281,4],[251,6,283,4],[251,12,283,10,"secWebSocketExtensions"],[251,34,283,32],[251,37,283,35,"req"],[251,40,283,38],[251,41,283,39,"headers"],[251,48,283,46],[251,49,283,47],[251,75,283,73],[251,76,283,74],[252,6,284,4],[252,12,284,10,"extensions"],[252,22,284,20],[252,25,284,23],[252,26,284,24],[252,27,284,25],[253,6,286,4],[253,10,287,6],[253,14,287,10],[253,15,287,11,"options"],[253,22,287,18],[253,23,287,19,"perMessageDeflate"],[253,40,287,36],[253,44,288,6,"secWebSocketExtensions"],[253,66,288,28],[253,71,288,33,"undefined"],[253,80,288,42],[253,82,289,6],[254,8,290,6],[254,14,290,12,"perMessageDeflate"],[254,31,290,29],[254,34,290,32],[254,38,290,36,"PerMessageDeflate"],[254,55,290,53],[254,56,291,8],[254,60,291,12],[254,61,291,13,"options"],[254,68,291,20],[254,69,291,21,"perMessageDeflate"],[254,86,291,38],[254,88,292,8],[254,92,292,12],[254,94,293,8],[254,98,293,12],[254,99,293,13,"options"],[254,106,293,20],[254,107,293,21,"maxPayload"],[254,117,294,6],[254,118,294,7],[255,8,296,6],[255,12,296,10],[256,10,297,8],[256,16,297,14,"offers"],[256,22,297,20],[256,25,297,23,"extension"],[256,34,297,32],[256,35,297,33,"parse"],[256,40,297,38],[256,41,297,39,"secWebSocketExtensions"],[256,63,297,61],[256,64,297,62],[257,10,299,8],[257,14,299,12,"offers"],[257,20,299,18],[257,21,299,19,"PerMessageDeflate"],[257,38,299,36],[257,39,299,37,"extensionName"],[257,52,299,50],[257,53,299,51],[257,55,299,53],[258,12,300,10,"perMessageDeflate"],[258,29,300,27],[258,30,300,28,"accept"],[258,36,300,34],[258,37,300,35,"offers"],[258,43,300,41],[258,44,300,42,"PerMessageDeflate"],[258,61,300,59],[258,62,300,60,"extensionName"],[258,75,300,73],[258,76,300,74],[258,77,300,75],[259,12,301,10,"extensions"],[259,22,301,20],[259,23,301,21,"PerMessageDeflate"],[259,40,301,38],[259,41,301,39,"extensionName"],[259,54,301,52],[259,55,301,53],[259,58,301,56,"perMessageDeflate"],[259,75,301,73],[260,10,302,8],[261,8,303,6],[261,9,303,7],[261,10,303,8],[261,17,303,15,"err"],[261,20,303,18],[261,22,303,20],[262,10,304,8],[262,16,304,14,"message"],[262,23,304,21],[262,26,305,10],[262,83,305,67],[263,10,306,8,"abortHandshakeOrEmitwsClientError"],[263,43,306,41],[263,44,306,42],[263,48,306,46],[263,50,306,48,"req"],[263,53,306,51],[263,55,306,53,"socket"],[263,61,306,59],[263,63,306,61],[263,66,306,64],[263,68,306,66,"message"],[263,75,306,73],[263,76,306,74],[264,10,307,8],[265,8,308,6],[266,6,309,4],[268,6,311,4],[269,6,312,4],[270,6,313,4],[271,6,314,4],[271,10,314,8],[271,14,314,12],[271,15,314,13,"options"],[271,22,314,20],[271,23,314,21,"verifyClient"],[271,35,314,33],[271,37,314,35],[272,8,315,6],[272,14,315,12,"info"],[272,18,315,16],[272,21,315,19],[273,10,316,8,"origin"],[273,16,316,14],[273,18,317,10,"req"],[273,21,317,13],[273,22,317,14,"headers"],[273,29,317,21],[273,30,317,22],[273,33,317,25,"version"],[273,40,317,32],[273,45,317,37],[273,46,317,38],[273,49,317,41],[273,71,317,63],[273,74,317,66],[273,82,317,74],[273,84,317,76],[273,85,317,77],[274,10,318,8,"secure"],[274,16,318,14],[274,18,318,16],[274,19,318,17],[274,21,318,19,"req"],[274,24,318,22],[274,25,318,23,"socket"],[274,31,318,29],[274,32,318,30,"authorized"],[274,42,318,40],[274,46,318,44,"req"],[274,49,318,47],[274,50,318,48,"socket"],[274,56,318,54],[274,57,318,55,"encrypted"],[274,66,318,64],[274,67,318,65],[275,10,319,8,"req"],[276,8,320,6],[276,9,320,7],[277,8,322,6],[277,12,322,10],[277,16,322,14],[277,17,322,15,"options"],[277,24,322,22],[277,25,322,23,"verifyClient"],[277,37,322,35],[277,38,322,36,"length"],[277,44,322,42],[277,49,322,47],[277,50,322,48],[277,52,322,50],[278,10,323,8],[278,14,323,12],[278,15,323,13,"options"],[278,22,323,20],[278,23,323,21,"verifyClient"],[278,35,323,33],[278,36,323,34,"info"],[278,40,323,38],[278,42,323,40],[278,43,323,41,"verified"],[278,51,323,49],[278,53,323,51,"code"],[278,57,323,55],[278,59,323,57,"message"],[278,66,323,64],[278,68,323,66,"headers"],[278,75,323,73],[278,80,323,78],[279,12,324,10],[279,16,324,14],[279,17,324,15,"verified"],[279,25,324,23],[279,27,324,25],[280,14,325,12],[280,21,325,19,"abortHandshake"],[280,35,325,33],[280,36,325,34,"socket"],[280,42,325,40],[280,44,325,42,"code"],[280,48,325,46],[280,52,325,50],[280,55,325,53],[280,57,325,55,"message"],[280,64,325,62],[280,66,325,64,"headers"],[280,73,325,71],[280,74,325,72],[281,12,326,10],[282,12,328,10],[282,16,328,14],[282,17,328,15,"completeUpgrade"],[282,32,328,30],[282,33,329,12,"extensions"],[282,43,329,22],[282,45,330,12,"key"],[282,48,330,15],[282,50,331,12,"protocols"],[282,59,331,21],[282,61,332,12,"req"],[282,64,332,15],[282,66,333,12,"socket"],[282,72,333,18],[282,74,334,12,"head"],[282,78,334,16],[282,80,335,12,"cb"],[282,82,336,10],[282,83,336,11],[283,10,337,8],[283,11,337,9],[283,12,337,10],[284,10,338,8],[285,8,339,6],[286,8,341,6],[286,12,341,10],[286,13,341,11],[286,17,341,15],[286,18,341,16,"options"],[286,25,341,23],[286,26,341,24,"verifyClient"],[286,38,341,36],[286,39,341,37,"info"],[286,43,341,41],[286,44,341,42],[286,46,341,44],[286,53,341,51,"abortHandshake"],[286,67,341,65],[286,68,341,66,"socket"],[286,74,341,72],[286,76,341,74],[286,79,341,77],[286,80,341,78],[287,6,342,4],[288,6,344,4],[288,10,344,8],[288,11,344,9,"completeUpgrade"],[288,26,344,24],[288,27,344,25,"extensions"],[288,37,344,35],[288,39,344,37,"key"],[288,42,344,40],[288,44,344,42,"protocols"],[288,53,344,51],[288,55,344,53,"req"],[288,58,344,56],[288,60,344,58,"socket"],[288,66,344,64],[288,68,344,66,"head"],[288,72,344,70],[288,74,344,72,"cb"],[288,76,344,74],[288,77,344,75],[289,4,345,2],[291,4,347,2],[292,0,348,0],[293,0,349,0],[294,0,350,0],[295,0,351,0],[296,0,352,0],[297,0,353,0],[298,0,354,0],[299,0,355,0],[300,0,356,0],[301,0,357,0],[302,0,358,0],[303,0,359,0],[304,4,360,2,"completeUpgrade"],[304,19,360,17,"completeUpgrade"],[304,20,360,18,"extensions"],[304,30,360,28],[304,32,360,30,"key"],[304,35,360,33],[304,37,360,35,"protocols"],[304,46,360,44],[304,48,360,46,"req"],[304,51,360,49],[304,53,360,51,"socket"],[304,59,360,57],[304,61,360,59,"head"],[304,65,360,63],[304,67,360,65,"cb"],[304,69,360,67],[304,71,360,69],[305,6,361,4],[306,6,362,4],[307,6,363,4],[308,6,364,4],[308,10,364,8],[308,11,364,9,"socket"],[308,17,364,15],[308,18,364,16,"readable"],[308,26,364,24],[308,30,364,28],[308,31,364,29,"socket"],[308,37,364,35],[308,38,364,36,"writable"],[308,46,364,44],[308,48,364,46],[308,55,364,53,"socket"],[308,61,364,59],[308,62,364,60,"destroy"],[308,69,364,67],[308,70,364,68],[308,71,364,69],[309,6,366,4],[309,10,366,8,"socket"],[309,16,366,14],[309,17,366,15,"kWebSocket"],[309,27,366,25],[309,28,366,26],[309,30,366,28],[310,8,367,6],[310,14,367,12],[310,18,367,16,"Error"],[310,23,367,21],[310,24,368,8],[310,89,368,73],[310,92,369,10],[310,136,370,6],[310,137,370,7],[311,6,371,4],[312,6,373,4],[312,10,373,8],[312,14,373,12],[312,15,373,13,"_state"],[312,21,373,19],[312,24,373,22,"RUNNING"],[312,31,373,29],[312,33,373,31],[312,40,373,38,"abortHandshake"],[312,54,373,52],[312,55,373,53,"socket"],[312,61,373,59],[312,63,373,61],[312,66,373,64],[312,67,373,65],[313,6,375,4],[313,12,375,10,"digest"],[313,18,375,16],[313,21,375,19,"createHash"],[313,31,375,29],[313,32,375,30],[313,38,375,36],[313,39,375,37],[313,40,376,7,"update"],[313,46,376,13],[313,47,376,14,"key"],[313,50,376,17],[313,53,376,20,"GUID"],[313,57,376,24],[313,58,376,25],[313,59,377,7,"digest"],[313,65,377,13],[313,66,377,14],[313,74,377,22],[313,75,377,23],[314,6,379,4],[314,12,379,10,"headers"],[314,19,379,17],[314,22,379,20],[314,23,380,6],[314,57,380,40],[314,59,381,6],[314,79,381,26],[314,81,382,6],[314,102,382,27],[314,104,383,6],[314,129,383,31,"digest"],[314,135,383,37],[314,137,383,39],[314,138,384,5],[315,6,386,4],[315,12,386,10,"ws"],[315,14,386,12],[315,17,386,15],[315,21,386,19],[315,25,386,23],[315,26,386,24,"options"],[315,33,386,31],[315,34,386,32,"WebSocket"],[315,43,386,41],[315,44,386,42],[315,48,386,46],[315,50,386,48,"undefined"],[315,59,386,57],[315,61,386,59],[315,65,386,63],[315,66,386,64,"options"],[315,73,386,71],[315,74,386,72],[316,6,388,4],[316,10,388,8,"protocols"],[316,19,388,17],[316,20,388,18,"size"],[316,24,388,22],[316,26,388,24],[317,8,389,6],[318,8,390,6],[319,8,391,6],[320,8,392,6],[320,14,392,12,"protocol"],[320,22,392,20],[320,25,392,23],[320,29,392,27],[320,30,392,28,"options"],[320,37,392,35],[320,38,392,36,"handleProtocols"],[320,53,392,51],[320,56,393,10],[320,60,393,14],[320,61,393,15,"options"],[320,68,393,22],[320,69,393,23,"handleProtocols"],[320,84,393,38],[320,85,393,39,"protocols"],[320,94,393,48],[320,96,393,50,"req"],[320,99,393,53],[320,100,393,54],[320,103,394,10,"protocols"],[320,112,394,19],[320,113,394,20,"values"],[320,119,394,26],[320,120,394,27],[320,121,394,28],[320,122,394,29,"next"],[320,126,394,33],[320,127,394,34],[320,128,394,35],[320,129,394,36,"value"],[320,134,394,41],[321,8,396,6],[321,12,396,10,"protocol"],[321,20,396,18],[321,22,396,20],[322,10,397,8,"headers"],[322,17,397,15],[322,18,397,16,"push"],[322,22,397,20],[322,23,397,21],[322,50,397,48,"protocol"],[322,58,397,56],[322,60,397,58],[322,61,397,59],[323,10,398,8,"ws"],[323,12,398,10],[323,13,398,11,"_protocol"],[323,22,398,20],[323,25,398,23,"protocol"],[323,33,398,31],[324,8,399,6],[325,6,400,4],[326,6,402,4],[326,10,402,8,"extensions"],[326,20,402,18],[326,21,402,19,"PerMessageDeflate"],[326,38,402,36],[326,39,402,37,"extensionName"],[326,52,402,50],[326,53,402,51],[326,55,402,53],[327,8,403,6],[327,14,403,12,"params"],[327,20,403,18],[327,23,403,21,"extensions"],[327,33,403,31],[327,34,403,32,"PerMessageDeflate"],[327,51,403,49],[327,52,403,50,"extensionName"],[327,65,403,63],[327,66,403,64],[327,67,403,65,"params"],[327,73,403,71],[328,8,404,6],[328,14,404,12,"value"],[328,19,404,17],[328,22,404,20,"extension"],[328,31,404,29],[328,32,404,30,"format"],[328,38,404,36],[328,39,404,37],[329,10,405,8],[329,11,405,9,"PerMessageDeflate"],[329,28,405,26],[329,29,405,27,"extensionName"],[329,42,405,40],[329,45,405,43],[329,46,405,44,"params"],[329,52,405,50],[330,8,406,6],[330,9,406,7],[330,10,406,8],[331,8,407,6,"headers"],[331,15,407,13],[331,16,407,14,"push"],[331,20,407,18],[331,21,407,19],[331,50,407,48,"value"],[331,55,407,53],[331,57,407,55],[331,58,407,56],[332,8,408,6,"ws"],[332,10,408,8],[332,11,408,9,"_extensions"],[332,22,408,20],[332,25,408,23,"extensions"],[332,35,408,33],[333,6,409,4],[335,6,411,4],[336,6,412,4],[337,6,413,4],[338,6,414,4],[338,10,414,8],[338,11,414,9,"emit"],[338,15,414,13],[338,16,414,14],[338,25,414,23],[338,27,414,25,"headers"],[338,34,414,32],[338,36,414,34,"req"],[338,39,414,37],[338,40,414,38],[339,6,416,4,"socket"],[339,12,416,10],[339,13,416,11,"write"],[339,18,416,16],[339,19,416,17,"headers"],[339,26,416,24],[339,27,416,25,"concat"],[339,33,416,31],[339,34,416,32],[339,40,416,38],[339,41,416,39],[339,42,416,40,"join"],[339,46,416,44],[339,47,416,45],[339,53,416,51],[339,54,416,52],[339,55,416,53],[340,6,417,4,"socket"],[340,12,417,10],[340,13,417,11,"removeListener"],[340,27,417,25],[340,28,417,26],[340,35,417,33],[340,37,417,35,"socketOnError"],[340,50,417,48],[340,51,417,49],[341,6,419,4,"ws"],[341,8,419,6],[341,9,419,7,"setSocket"],[341,18,419,16],[341,19,419,17,"socket"],[341,25,419,23],[341,27,419,25,"head"],[341,31,419,29],[341,33,419,31],[342,8,420,6,"allowSynchronousEvents"],[342,30,420,28],[342,32,420,30],[342,36,420,34],[342,37,420,35,"options"],[342,44,420,42],[342,45,420,43,"allowSynchronousEvents"],[342,67,420,65],[343,8,421,6,"maxPayload"],[343,18,421,16],[343,20,421,18],[343,24,421,22],[343,25,421,23,"options"],[343,32,421,30],[343,33,421,31,"maxPayload"],[343,43,421,41],[344,8,422,6,"skipUTF8Validation"],[344,26,422,24],[344,28,422,26],[344,32,422,30],[344,33,422,31,"options"],[344,40,422,38],[344,41,422,39,"skipUTF8Validation"],[345,6,423,4],[345,7,423,5],[345,8,423,6],[346,6,425,4],[346,10,425,8],[346,14,425,12],[346,15,425,13,"clients"],[346,22,425,20],[346,24,425,22],[347,8,426,6],[347,12,426,10],[347,13,426,11,"clients"],[347,20,426,18],[347,21,426,19,"add"],[347,24,426,22],[347,25,426,23,"ws"],[347,27,426,25],[347,28,426,26],[348,8,427,6,"ws"],[348,10,427,8],[348,11,427,9,"on"],[348,13,427,11],[348,14,427,12],[348,21,427,19],[348,23,427,21],[348,29,427,27],[349,10,428,8],[349,14,428,12],[349,15,428,13,"clients"],[349,22,428,20],[349,23,428,21,"delete"],[349,29,428,27],[349,30,428,28,"ws"],[349,32,428,30],[349,33,428,31],[350,10,430,8],[350,14,430,12],[350,18,430,16],[350,19,430,17,"_shouldEmitClose"],[350,35,430,33],[350,39,430,37],[350,40,430,38],[350,44,430,42],[350,45,430,43,"clients"],[350,52,430,50],[350,53,430,51,"size"],[350,57,430,55],[350,59,430,57],[351,12,431,10,"process"],[351,19,431,17],[351,20,431,18,"nextTick"],[351,28,431,26],[351,29,431,27,"emitClose"],[351,38,431,36],[351,40,431,38],[351,44,431,42],[351,45,431,43],[352,10,432,8],[353,8,433,6],[353,9,433,7],[353,10,433,8],[354,6,434,4],[355,6,436,4,"cb"],[355,8,436,6],[355,9,436,7,"ws"],[355,11,436,9],[355,13,436,11,"req"],[355,16,436,14],[355,17,436,15],[356,4,437,2],[357,2,438,0],[358,2,440,0,"module"],[358,8,440,6],[358,9,440,7,"exports"],[358,16,440,14],[358,19,440,17,"WebSocketServer"],[358,34,440,32],[360,2,442,0],[361,0,443,0],[362,0,444,0],[363,0,445,0],[364,0,446,0],[365,0,447,0],[366,0,448,0],[367,0,449,0],[368,0,450,0],[369,0,451,0],[370,2,452,0],[370,11,452,9,"addListeners"],[370,23,452,21,"addListeners"],[370,24,452,22,"server"],[370,30,452,28],[370,32,452,30,"map"],[370,35,452,33],[370,37,452,35],[371,4,453,2],[371,9,453,7],[371,15,453,13,"event"],[371,20,453,18],[371,24,453,22,"Object"],[371,30,453,28],[371,31,453,29,"keys"],[371,35,453,33],[371,36,453,34,"map"],[371,39,453,37],[371,40,453,38],[371,42,453,40,"server"],[371,48,453,46],[371,49,453,47,"on"],[371,51,453,49],[371,52,453,50,"event"],[371,57,453,55],[371,59,453,57,"map"],[371,62,453,60],[371,63,453,61,"event"],[371,68,453,66],[371,69,453,67],[371,70,453,68],[372,4,455,2],[372,11,455,9],[372,20,455,18,"removeListeners"],[372,35,455,33,"removeListeners"],[372,36,455,33],[372,38,455,36],[373,6,456,4],[373,11,456,9],[373,17,456,15,"event"],[373,22,456,20],[373,26,456,24,"Object"],[373,32,456,30],[373,33,456,31,"keys"],[373,37,456,35],[373,38,456,36,"map"],[373,41,456,39],[373,42,456,40],[373,44,456,42],[374,8,457,6,"server"],[374,14,457,12],[374,15,457,13,"removeListener"],[374,29,457,27],[374,30,457,28,"event"],[374,35,457,33],[374,37,457,35,"map"],[374,40,457,38],[374,41,457,39,"event"],[374,46,457,44],[374,47,457,45],[374,48,457,46],[375,6,458,4],[376,4,459,2],[376,5,459,3],[377,2,460,0],[379,2,462,0],[380,0,463,0],[381,0,464,0],[382,0,465,0],[383,0,466,0],[384,0,467,0],[385,2,468,0],[385,11,468,9,"emitClose"],[385,20,468,18,"emitClose"],[385,21,468,19,"server"],[385,27,468,25],[385,29,468,27],[386,4,469,2,"server"],[386,10,469,8],[386,11,469,9,"_state"],[386,17,469,15],[386,20,469,18,"CLOSED"],[386,26,469,24],[387,4,470,2,"server"],[387,10,470,8],[387,11,470,9,"emit"],[387,15,470,13],[387,16,470,14],[387,23,470,21],[387,24,470,22],[388,2,471,0],[390,2,473,0],[391,0,474,0],[392,0,475,0],[393,0,476,0],[394,0,477,0],[395,2,478,0],[395,11,478,9,"socketOnError"],[395,24,478,22,"socketOnError"],[395,25,478,22],[395,27,478,25],[396,4,479,2],[396,8,479,6],[396,9,479,7,"destroy"],[396,16,479,14],[396,17,479,15],[396,18,479,16],[397,2,480,0],[399,2,482,0],[400,0,483,0],[401,0,484,0],[402,0,485,0],[403,0,486,0],[404,0,487,0],[405,0,488,0],[406,0,489,0],[407,0,490,0],[408,2,491,0],[408,11,491,9,"abortHandshake"],[408,25,491,23,"abortHandshake"],[408,26,491,24,"socket"],[408,32,491,30],[408,34,491,32,"code"],[408,38,491,36],[408,40,491,38,"message"],[408,47,491,45],[408,49,491,47,"headers"],[408,56,491,54],[408,58,491,56],[409,4,492,2],[410,4,493,2],[411,4,494,2],[412,4,495,2],[413,4,496,2],[414,4,497,2],[415,4,498,2],[416,4,499,2],[417,4,500,2,"message"],[417,11,500,9],[417,14,500,12,"message"],[417,21,500,19],[417,25,500,23,"http"],[417,29,500,27],[417,30,500,28,"STATUS_CODES"],[417,42,500,40],[417,43,500,41,"code"],[417,47,500,45],[417,48,500,46],[418,4,501,2,"headers"],[418,11,501,9],[418,14,501,12],[419,6,502,4,"Connection"],[419,16,502,14],[419,18,502,16],[419,25,502,23],[420,6,503,4],[420,20,503,18],[420,22,503,20],[420,33,503,31],[421,6,504,4],[421,22,504,20],[421,24,504,22,"Buffer"],[421,30,504,28],[421,31,504,29,"byteLength"],[421,41,504,39],[421,42,504,40,"message"],[421,49,504,47],[421,50,504,48],[422,6,505,4],[422,9,505,7,"headers"],[423,4,506,2],[423,5,506,3],[424,4,508,2,"socket"],[424,10,508,8],[424,11,508,9,"once"],[424,15,508,13],[424,16,508,14],[424,24,508,22],[424,26,508,24,"socket"],[424,32,508,30],[424,33,508,31,"destroy"],[424,40,508,38],[424,41,508,39],[425,4,510,2,"socket"],[425,10,510,8],[425,11,510,9,"end"],[425,14,510,12],[425,15,511,4],[425,27,511,16,"code"],[425,31,511,20],[425,35,511,24,"http"],[425,39,511,28],[425,40,511,29,"STATUS_CODES"],[425,52,511,41],[425,53,511,42,"code"],[425,57,511,46],[425,58,511,47],[425,64,511,53],[425,67,512,6,"Object"],[425,73,512,12],[425,74,512,13,"keys"],[425,78,512,17],[425,79,512,18,"headers"],[425,86,512,25],[425,87,512,26],[425,88,513,9,"map"],[425,91,513,12],[425,92,513,14,"h"],[425,93,513,15],[425,97,513,20],[425,100,513,23,"h"],[425,101,513,24],[425,106,513,29,"headers"],[425,113,513,36],[425,114,513,37,"h"],[425,115,513,38],[425,116,513,39],[425,118,513,41],[425,119,513,42],[425,120,514,9,"join"],[425,124,514,13],[425,125,514,14],[425,131,514,20],[425,132,514,21],[425,135,515,6],[425,145,515,16],[425,148,516,6,"message"],[425,155,517,2],[425,156,517,3],[426,2,518,0],[428,2,520,0],[429,0,521,0],[430,0,522,0],[431,0,523,0],[432,0,524,0],[433,0,525,0],[434,0,526,0],[435,0,527,0],[436,0,528,0],[437,0,529,0],[438,0,530,0],[439,2,531,0],[439,11,531,9,"abortHandshakeOrEmitwsClientError"],[439,44,531,42,"abortHandshakeOrEmitwsClientError"],[439,45,531,43,"server"],[439,51,531,49],[439,53,531,51,"req"],[439,56,531,54],[439,58,531,56,"socket"],[439,64,531,62],[439,66,531,64,"code"],[439,70,531,68],[439,72,531,70,"message"],[439,79,531,77],[439,81,531,79],[440,4,532,2],[440,8,532,6,"server"],[440,14,532,12],[440,15,532,13,"listenerCount"],[440,28,532,26],[440,29,532,27],[440,44,532,42],[440,45,532,43],[440,47,532,45],[441,6,533,4],[441,12,533,10,"err"],[441,15,533,13],[441,18,533,16],[441,22,533,20,"Error"],[441,27,533,25],[441,28,533,26,"message"],[441,35,533,33],[441,36,533,34],[442,6,534,4,"Error"],[442,11,534,9],[442,12,534,10,"captureStackTrace"],[442,29,534,27],[442,30,534,28,"err"],[442,33,534,31],[442,35,534,33,"abortHandshakeOrEmitwsClientError"],[442,68,534,66],[442,69,534,67],[443,6,536,4,"server"],[443,12,536,10],[443,13,536,11,"emit"],[443,17,536,15],[443,18,536,16],[443,33,536,31],[443,35,536,33,"err"],[443,38,536,36],[443,40,536,38,"socket"],[443,46,536,44],[443,48,536,46,"req"],[443,51,536,49],[443,52,536,50],[444,4,537,2],[444,5,537,3],[444,11,537,9],[445,6,538,4,"abortHandshake"],[445,20,538,18],[445,21,538,19,"socket"],[445,27,538,25],[445,29,538,27,"code"],[445,33,538,31],[445,35,538,33,"message"],[445,42,538,40],[445,43,538,41],[446,4,539,2],[447,2,540,0],[448,0,540,1],[448,3]],"functionMap":{"names":["<global>","WebSocketServer","WebSocketServer#constructor","http.createServer$argument_0","addListeners$argument_1.upgrade","WebSocketServer#address","WebSocketServer#close","once$argument_1","server.close$argument_0","WebSocketServer#shouldHandle","WebSocketServer#handleUpgrade","options.verifyClient$argument_1","WebSocketServer#completeUpgrade","ws.on$argument_1","addListeners","removeListeners","emitClose","socketOnError","abortHandshake","Object.keys.map$argument_0","abortHandshakeOrEmitwsClientError"],"mappings":"AAA;AC0B;ECgC;uCCkC;ODQ;iBEiB;SFE;GDY;EIW;GJO;EKS;2BCG;SDE;mBEqC;OFE;GLE;EQS;GRS;ESW;wCCyF;SDc;GTQ;EWe;qBCmE;ODM;GXI;CDC;Acc;SCG;GDI;CdC;AgBQ;ChBG;AiBO;CjBE;AkBW;aCsB,4BD;ClBK;AoBa;CpBS"},"hasCjsExports":true},"type":"js/module"}]}