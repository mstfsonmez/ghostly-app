{"dependencies":[{"name":"@socket.io/component-emitter","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":55,"index":55}}],"key":"nWmouVdWEVSQD2UwM6teY1JyKBM=","exportNames":["*"],"imports":1}},{"name":"./binary.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":56},"end":{"line":2,"column":67,"index":123}}],"key":"n3k3ricg147CfAsjRPov5+2UD6U=","exportNames":["*"],"imports":1}},{"name":"./is-binary.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":124},"end":{"line":3,"column":53,"index":177}}],"key":"nI6Cd4R9sJDIQIUaBK8/eqMqCAI=","exportNames":["*"],"imports":1}},{"name":"debug","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":178},"end":{"line":4,"column":32,"index":210}}],"key":"Nx7LMnUOZdRc8E6QIb5nvmtJE+4=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"protocol\", {\n    enumerable: true,\n    get: function () {\n      return protocol;\n    }\n  });\n  Object.defineProperty(exports, \"PacketType\", {\n    enumerable: true,\n    get: function () {\n      return PacketType;\n    }\n  });\n  Object.defineProperty(exports, \"Encoder\", {\n    enumerable: true,\n    get: function () {\n      return Encoder;\n    }\n  });\n  Object.defineProperty(exports, \"Decoder\", {\n    enumerable: true,\n    get: function () {\n      return Decoder;\n    }\n  });\n  var _socketIoComponentEmitter = require(_dependencyMap[0], \"@socket.io/component-emitter\");\n  var _binaryJs = require(_dependencyMap[1], \"./binary.js\");\n  var _isBinaryJs = require(_dependencyMap[2], \"./is-binary.js\");\n  var _debug = require(_dependencyMap[3], \"debug\");\n  var debugModule = _interopDefault(_debug);\n  // debug()\n  const debug = (0, debugModule.default)(\"socket.io-parser\"); // debug()\n  /**\n   * These strings must not be used as event names, as they have a special meaning.\n   */\n  const RESERVED_EVENTS = [\"connect\", \"connect_error\", \"disconnect\", \"disconnecting\", \"newListener\", \"removeListener\" // used by the Node.js EventEmitter\n  ];\n  /**\n   * Protocol version.\n   *\n   * @public\n   */\n  const protocol = 5;\n  var PacketType;\n  (function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n  })(PacketType || (PacketType = {}));\n  /**\n   * A socket.io Encoder instance\n   */\n  class Encoder {\n    /**\n     * Encoder constructor\n     *\n     * @param {function} replacer - custom replacer to pass down to JSON.parse\n     */\n    constructor(replacer) {\n      this.replacer = replacer;\n    }\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    encode(obj) {\n      debug(\"encoding packet %j\", obj);\n      if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n        if ((0, _isBinaryJs.hasBinary)(obj)) {\n          return this.encodeAsBinary({\n            type: obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK,\n            nsp: obj.nsp,\n            data: obj.data,\n            id: obj.id\n          });\n        }\n      }\n      return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n    encodeAsString(obj) {\n      // first is type\n      let str = \"\" + obj.type;\n      // attachments if we have them\n      if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {\n        str += obj.attachments + \"-\";\n      }\n      // if we have a namespace other than `/`\n      // we append it followed by a comma `,`\n      if (obj.nsp && \"/\" !== obj.nsp) {\n        str += obj.nsp + \",\";\n      }\n      // immediately followed by the id\n      if (null != obj.id) {\n        str += obj.id;\n      }\n      // json data\n      if (null != obj.data) {\n        str += JSON.stringify(obj.data, this.replacer);\n      }\n      debug(\"encoded %j as %s\", obj, str);\n      return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n    encodeAsBinary(obj) {\n      const deconstruction = (0, _binaryJs.deconstructPacket)(obj);\n      const pack = this.encodeAsString(deconstruction.packet);\n      const buffers = deconstruction.buffers;\n      buffers.unshift(pack); // add packet info to beginning of data list\n      return buffers; // write all the buffers\n    }\n  }\n  // see https://stackoverflow.com/questions/8511281/check-if-a-value-is-an-object-in-javascript\n  function isObject(value) {\n    return Object.prototype.toString.call(value) === \"[object Object]\";\n  }\n  /**\n   * A socket.io Decoder instance\n   *\n   * @return {Object} decoder\n   */\n  class Decoder extends _socketIoComponentEmitter.Emitter {\n    /**\n     * Decoder constructor\n     *\n     * @param {function} reviver - custom reviver to pass down to JSON.stringify\n     */\n    constructor(reviver) {\n      super();\n      this.reviver = reviver;\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    add(obj) {\n      let packet;\n      if (typeof obj === \"string\") {\n        if (this.reconstructor) {\n          throw new Error(\"got plaintext data when reconstructing a packet\");\n        }\n        packet = this.decodeString(obj);\n        const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;\n        if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {\n          packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;\n          // binary packet's json\n          this.reconstructor = new BinaryReconstructor(packet);\n          // no attachments, labeled binary but no binary data to follow\n          if (packet.attachments === 0) {\n            super.emitReserved(\"decoded\", packet);\n          }\n        } else {\n          // non-binary full packet\n          super.emitReserved(\"decoded\", packet);\n        }\n      } else if ((0, _isBinaryJs.isBinary)(obj) || obj.base64) {\n        // raw binary data\n        if (!this.reconstructor) {\n          throw new Error(\"got binary data when not reconstructing a packet\");\n        } else {\n          packet = this.reconstructor.takeBinaryData(obj);\n          if (packet) {\n            // received final buffer\n            this.reconstructor = null;\n            super.emitReserved(\"decoded\", packet);\n          }\n        }\n      } else {\n        throw new Error(\"Unknown type: \" + obj);\n      }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n    decodeString(str) {\n      let i = 0;\n      // look up type\n      const p = {\n        type: Number(str.charAt(0))\n      };\n      if (PacketType[p.type] === undefined) {\n        throw new Error(\"unknown packet type \" + p.type);\n      }\n      // look up attachments if type binary\n      if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {\n        const start = i + 1;\n        while (str.charAt(++i) !== \"-\" && i != str.length) {}\n        const buf = str.substring(start, i);\n        if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n          throw new Error(\"Illegal attachments\");\n        }\n        p.attachments = Number(buf);\n      }\n      // look up namespace (if any)\n      if (\"/\" === str.charAt(i + 1)) {\n        const start = i + 1;\n        while (++i) {\n          const c = str.charAt(i);\n          if (\",\" === c) break;\n          if (i === str.length) break;\n        }\n        p.nsp = str.substring(start, i);\n      } else {\n        p.nsp = \"/\";\n      }\n      // look up id\n      const next = str.charAt(i + 1);\n      if (\"\" !== next && Number(next) == next) {\n        const start = i + 1;\n        while (++i) {\n          const c = str.charAt(i);\n          if (null == c || Number(c) != c) {\n            --i;\n            break;\n          }\n          if (i === str.length) break;\n        }\n        p.id = Number(str.substring(start, i + 1));\n      }\n      // look up json data\n      if (str.charAt(++i)) {\n        const payload = this.tryParse(str.substr(i));\n        if (Decoder.isPayloadValid(p.type, payload)) {\n          p.data = payload;\n        } else {\n          throw new Error(\"invalid payload\");\n        }\n      }\n      debug(\"decoded %s as %j\", str, p);\n      return p;\n    }\n    tryParse(str) {\n      try {\n        return JSON.parse(str, this.reviver);\n      } catch (e) {\n        return false;\n      }\n    }\n    static isPayloadValid(type, payload) {\n      switch (type) {\n        case PacketType.CONNECT:\n          return isObject(payload);\n        case PacketType.DISCONNECT:\n          return payload === undefined;\n        case PacketType.CONNECT_ERROR:\n          return typeof payload === \"string\" || isObject(payload);\n        case PacketType.EVENT:\n        case PacketType.BINARY_EVENT:\n          return Array.isArray(payload) && (typeof payload[0] === \"number\" || typeof payload[0] === \"string\" && RESERVED_EVENTS.indexOf(payload[0]) === -1);\n        case PacketType.ACK:\n        case PacketType.BINARY_ACK:\n          return Array.isArray(payload);\n      }\n    }\n    /**\n     * Deallocates a parser's resources\n     */\n    destroy() {\n      if (this.reconstructor) {\n        this.reconstructor.finishedReconstruction();\n        this.reconstructor = null;\n      }\n    }\n  }\n  /**\n   * A manager of a binary event's 'buffer sequence'. Should\n   * be constructed whenever a packet of type BINARY_EVENT is\n   * decoded.\n   *\n   * @param {Object} packet\n   * @return {BinaryReconstructor} initialized reconstructor\n   */\n  class BinaryReconstructor {\n    constructor(packet) {\n      this.packet = packet;\n      this.buffers = [];\n      this.reconPack = packet;\n    }\n    /**\n     * Method to be called when binary data received from connection\n     * after a BINARY_EVENT packet.\n     *\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n     * @return {null | Object} returns null if more binary data is expected or\n     *   a reconstructed packet object if all buffers have been received.\n     */\n    takeBinaryData(binData) {\n      this.buffers.push(binData);\n      if (this.buffers.length === this.reconPack.attachments) {\n        // done with buffer list\n        const packet = (0, _binaryJs.reconstructPacket)(this.reconPack, this.buffers);\n        this.finishedReconstruction();\n        return packet;\n      }\n      return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n    finishedReconstruction() {\n      this.reconPack = null;\n      this.buffers = [];\n    }\n  }\n});","lineCount":331,"map":[[12,2,22,0,"Object"],[12,8,22,0],[12,9,22,0,"defineProperty"],[12,23,22,0],[12,24,22,0,"exports"],[12,31,22,0],[13,4,22,0,"enumerable"],[13,14,22,0],[14,4,22,0,"get"],[14,7,22,0],[14,18,22,0,"get"],[14,19,22,0],[15,6,22,0],[15,13,22,0,"protocol"],[15,21,22,0],[16,4,22,0],[17,2,22,0],[18,2,23,0,"Object"],[18,8,23,0],[18,9,23,0,"defineProperty"],[18,23,23,0],[18,24,23,0,"exports"],[18,31,23,0],[19,4,23,0,"enumerable"],[19,14,23,0],[20,4,23,0,"get"],[20,7,23,0],[20,18,23,0,"get"],[20,19,23,0],[21,6,23,0],[21,13,23,0,"PacketType"],[21,23,23,0],[22,4,23,0],[23,2,23,0],[24,2,36,0,"Object"],[24,8,36,0],[24,9,36,0,"defineProperty"],[24,23,36,0],[24,24,36,0,"exports"],[24,31,36,0],[25,4,36,0,"enumerable"],[25,14,36,0],[26,4,36,0,"get"],[26,7,36,0],[26,18,36,0,"get"],[26,19,36,0],[27,6,36,0],[27,13,36,0,"Encoder"],[27,20,36,0],[28,4,36,0],[29,2,36,0],[30,2,116,0,"Object"],[30,8,116,0],[30,9,116,0,"defineProperty"],[30,23,116,0],[30,24,116,0,"exports"],[30,31,116,0],[31,4,116,0,"enumerable"],[31,14,116,0],[32,4,116,0,"get"],[32,7,116,0],[32,18,116,0,"get"],[32,19,116,0],[33,6,116,0],[33,13,116,0,"Decoder"],[33,20,116,0],[34,4,116,0],[35,2,116,0],[36,2,1,0],[36,6,1,0,"_socketIoComponentEmitter"],[36,31,1,0],[36,34,1,0,"require"],[36,41,1,0],[36,42,1,0,"_dependencyMap"],[36,56,1,0],[37,2,2,0],[37,6,2,0,"_binaryJs"],[37,15,2,0],[37,18,2,0,"require"],[37,25,2,0],[37,26,2,0,"_dependencyMap"],[37,40,2,0],[38,2,3,0],[38,6,3,0,"_isBinaryJs"],[38,17,3,0],[38,20,3,0,"require"],[38,27,3,0],[38,28,3,0,"_dependencyMap"],[38,42,3,0],[39,2,4,0],[39,6,4,0,"_debug"],[39,12,4,0],[39,15,4,0,"require"],[39,22,4,0],[39,23,4,0,"_dependencyMap"],[39,37,4,0],[40,2,4,0],[40,6,4,0,"debugModule"],[40,17,4,0],[40,20,4,0,"_interopDefault"],[40,35,4,0],[40,36,4,0,"_debug"],[40,42,4,0],[41,2,4,33],[42,2,5,0],[42,8,5,6,"debug"],[42,13,5,11],[42,16,5,14],[42,20,5,14,"debugModule"],[42,31,5,25],[42,32,5,25,"default"],[42,39,5,25],[42,41,5,26],[42,59,5,44],[42,60,5,45],[42,61,5,46],[42,62,5,47],[43,2,6,0],[44,0,7,0],[45,0,8,0],[46,2,9,0],[46,8,9,6,"RESERVED_EVENTS"],[46,23,9,21],[46,26,9,24],[46,27,10,4],[46,36,10,13],[46,38,11,4],[46,53,11,19],[46,55,12,4],[46,67,12,16],[46,69,13,4],[46,84,13,19],[46,86,14,4],[46,99,14,17],[46,101,15,4],[46,117,15,20],[46,118,15,22],[47,2,15,22],[47,3,16,1],[48,2,17,0],[49,0,18,0],[50,0,19,0],[51,0,20,0],[52,0,21,0],[53,2,22,7],[53,8,22,13,"protocol"],[53,16,22,21],[53,19,22,24],[53,20,22,25],[54,2,23,7],[54,6,23,11,"PacketType"],[54,16,23,21],[55,2,24,0],[55,3,24,1],[55,13,24,11,"PacketType"],[55,23,24,21],[55,25,24,23],[56,4,25,4,"PacketType"],[56,14,25,14],[56,15,25,15,"PacketType"],[56,25,25,25],[56,26,25,26],[56,35,25,35],[56,36,25,36],[56,39,25,39],[56,40,25,40],[56,41,25,41],[56,44,25,44],[56,53,25,53],[57,4,26,4,"PacketType"],[57,14,26,14],[57,15,26,15,"PacketType"],[57,25,26,25],[57,26,26,26],[57,38,26,38],[57,39,26,39],[57,42,26,42],[57,43,26,43],[57,44,26,44],[57,47,26,47],[57,59,26,59],[58,4,27,4,"PacketType"],[58,14,27,14],[58,15,27,15,"PacketType"],[58,25,27,25],[58,26,27,26],[58,33,27,33],[58,34,27,34],[58,37,27,37],[58,38,27,38],[58,39,27,39],[58,42,27,42],[58,49,27,49],[59,4,28,4,"PacketType"],[59,14,28,14],[59,15,28,15,"PacketType"],[59,25,28,25],[59,26,28,26],[59,31,28,31],[59,32,28,32],[59,35,28,35],[59,36,28,36],[59,37,28,37],[59,40,28,40],[59,45,28,45],[60,4,29,4,"PacketType"],[60,14,29,14],[60,15,29,15,"PacketType"],[60,25,29,25],[60,26,29,26],[60,41,29,41],[60,42,29,42],[60,45,29,45],[60,46,29,46],[60,47,29,47],[60,50,29,50],[60,65,29,65],[61,4,30,4,"PacketType"],[61,14,30,14],[61,15,30,15,"PacketType"],[61,25,30,25],[61,26,30,26],[61,40,30,40],[61,41,30,41],[61,44,30,44],[61,45,30,45],[61,46,30,46],[61,49,30,49],[61,63,30,63],[62,4,31,4,"PacketType"],[62,14,31,14],[62,15,31,15,"PacketType"],[62,25,31,25],[62,26,31,26],[62,38,31,38],[62,39,31,39],[62,42,31,42],[62,43,31,43],[62,44,31,44],[62,47,31,47],[62,59,31,59],[63,2,32,0],[63,3,32,1],[63,5,32,3,"PacketType"],[63,15,32,13],[63,20,32,18,"PacketType"],[63,30,32,28],[63,33,32,31],[63,34,32,32],[63,35,32,33],[63,36,32,34],[63,37,32,35],[64,2,33,0],[65,0,34,0],[66,0,35,0],[67,2,36,7],[67,8,36,13,"Encoder"],[67,15,36,20],[67,16,36,21],[68,4,37,4],[69,0,38,0],[70,0,39,0],[71,0,40,0],[72,0,41,0],[73,4,42,4,"constructor"],[73,15,42,15,"constructor"],[73,16,42,16,"replacer"],[73,24,42,24],[73,26,42,26],[74,6,43,8],[74,10,43,12],[74,11,43,13,"replacer"],[74,19,43,21],[74,22,43,24,"replacer"],[74,30,43,32],[75,4,44,4],[76,4,45,4],[77,0,46,0],[78,0,47,0],[79,0,48,0],[80,0,49,0],[81,0,50,0],[82,4,51,4,"encode"],[82,10,51,10,"encode"],[82,11,51,11,"obj"],[82,14,51,14],[82,16,51,16],[83,6,52,8,"debug"],[83,11,52,13],[83,12,52,14],[83,32,52,34],[83,34,52,36,"obj"],[83,37,52,39],[83,38,52,40],[84,6,53,8],[84,10,53,12,"obj"],[84,13,53,15],[84,14,53,16,"type"],[84,18,53,20],[84,23,53,25,"PacketType"],[84,33,53,35],[84,34,53,36,"EVENT"],[84,39,53,41],[84,43,53,45,"obj"],[84,46,53,48],[84,47,53,49,"type"],[84,51,53,53],[84,56,53,58,"PacketType"],[84,66,53,68],[84,67,53,69,"ACK"],[84,70,53,72],[84,72,53,74],[85,8,54,12],[85,12,54,16],[85,16,54,16,"hasBinary"],[85,27,54,25],[85,28,54,25,"hasBinary"],[85,37,54,25],[85,39,54,26,"obj"],[85,42,54,29],[85,43,54,30],[85,45,54,32],[86,10,55,16],[86,17,55,23],[86,21,55,27],[86,22,55,28,"encodeAsBinary"],[86,36,55,42],[86,37,55,43],[87,12,56,20,"type"],[87,16,56,24],[87,18,56,26,"obj"],[87,21,56,29],[87,22,56,30,"type"],[87,26,56,34],[87,31,56,39,"PacketType"],[87,41,56,49],[87,42,56,50,"EVENT"],[87,47,56,55],[87,50,57,26,"PacketType"],[87,60,57,36],[87,61,57,37,"BINARY_EVENT"],[87,73,57,49],[87,76,58,26,"PacketType"],[87,86,58,36],[87,87,58,37,"BINARY_ACK"],[87,97,58,47],[88,12,59,20,"nsp"],[88,15,59,23],[88,17,59,25,"obj"],[88,20,59,28],[88,21,59,29,"nsp"],[88,24,59,32],[89,12,60,20,"data"],[89,16,60,24],[89,18,60,26,"obj"],[89,21,60,29],[89,22,60,30,"data"],[89,26,60,34],[90,12,61,20,"id"],[90,14,61,22],[90,16,61,24,"obj"],[90,19,61,27],[90,20,61,28,"id"],[91,10,62,16],[91,11,62,17],[91,12,62,18],[92,8,63,12],[93,6,64,8],[94,6,65,8],[94,13,65,15],[94,14,65,16],[94,18,65,20],[94,19,65,21,"encodeAsString"],[94,33,65,35],[94,34,65,36,"obj"],[94,37,65,39],[94,38,65,40],[94,39,65,41],[95,4,66,4],[96,4,67,4],[97,0,68,0],[98,0,69,0],[99,4,70,4,"encodeAsString"],[99,18,70,18,"encodeAsString"],[99,19,70,19,"obj"],[99,22,70,22],[99,24,70,24],[100,6,71,8],[101,6,72,8],[101,10,72,12,"str"],[101,13,72,15],[101,16,72,18],[101,18,72,20],[101,21,72,23,"obj"],[101,24,72,26],[101,25,72,27,"type"],[101,29,72,31],[102,6,73,8],[103,6,74,8],[103,10,74,12,"obj"],[103,13,74,15],[103,14,74,16,"type"],[103,18,74,20],[103,23,74,25,"PacketType"],[103,33,74,35],[103,34,74,36,"BINARY_EVENT"],[103,46,74,48],[103,50,75,12,"obj"],[103,53,75,15],[103,54,75,16,"type"],[103,58,75,20],[103,63,75,25,"PacketType"],[103,73,75,35],[103,74,75,36,"BINARY_ACK"],[103,84,75,46],[103,86,75,48],[104,8,76,12,"str"],[104,11,76,15],[104,15,76,19,"obj"],[104,18,76,22],[104,19,76,23,"attachments"],[104,30,76,34],[104,33,76,37],[104,36,76,40],[105,6,77,8],[106,6,78,8],[107,6,79,8],[108,6,80,8],[108,10,80,12,"obj"],[108,13,80,15],[108,14,80,16,"nsp"],[108,17,80,19],[108,21,80,23],[108,24,80,26],[108,29,80,31,"obj"],[108,32,80,34],[108,33,80,35,"nsp"],[108,36,80,38],[108,38,80,40],[109,8,81,12,"str"],[109,11,81,15],[109,15,81,19,"obj"],[109,18,81,22],[109,19,81,23,"nsp"],[109,22,81,26],[109,25,81,29],[109,28,81,32],[110,6,82,8],[111,6,83,8],[112,6,84,8],[112,10,84,12],[112,14,84,16],[112,18,84,20,"obj"],[112,21,84,23],[112,22,84,24,"id"],[112,24,84,26],[112,26,84,28],[113,8,85,12,"str"],[113,11,85,15],[113,15,85,19,"obj"],[113,18,85,22],[113,19,85,23,"id"],[113,21,85,25],[114,6,86,8],[115,6,87,8],[116,6,88,8],[116,10,88,12],[116,14,88,16],[116,18,88,20,"obj"],[116,21,88,23],[116,22,88,24,"data"],[116,26,88,28],[116,28,88,30],[117,8,89,12,"str"],[117,11,89,15],[117,15,89,19,"JSON"],[117,19,89,23],[117,20,89,24,"stringify"],[117,29,89,33],[117,30,89,34,"obj"],[117,33,89,37],[117,34,89,38,"data"],[117,38,89,42],[117,40,89,44],[117,44,89,48],[117,45,89,49,"replacer"],[117,53,89,57],[117,54,89,58],[118,6,90,8],[119,6,91,8,"debug"],[119,11,91,13],[119,12,91,14],[119,30,91,32],[119,32,91,34,"obj"],[119,35,91,37],[119,37,91,39,"str"],[119,40,91,42],[119,41,91,43],[120,6,92,8],[120,13,92,15,"str"],[120,16,92,18],[121,4,93,4],[122,4,94,4],[123,0,95,0],[124,0,96,0],[125,0,97,0],[126,0,98,0],[127,4,99,4,"encodeAsBinary"],[127,18,99,18,"encodeAsBinary"],[127,19,99,19,"obj"],[127,22,99,22],[127,24,99,24],[128,6,100,8],[128,12,100,14,"deconstruction"],[128,26,100,28],[128,29,100,31],[128,33,100,31,"deconstructPacket"],[128,42,100,48],[128,43,100,48,"deconstructPacket"],[128,60,100,48],[128,62,100,49,"obj"],[128,65,100,52],[128,66,100,53],[129,6,101,8],[129,12,101,14,"pack"],[129,16,101,18],[129,19,101,21],[129,23,101,25],[129,24,101,26,"encodeAsString"],[129,38,101,40],[129,39,101,41,"deconstruction"],[129,53,101,55],[129,54,101,56,"packet"],[129,60,101,62],[129,61,101,63],[130,6,102,8],[130,12,102,14,"buffers"],[130,19,102,21],[130,22,102,24,"deconstruction"],[130,36,102,38],[130,37,102,39,"buffers"],[130,44,102,46],[131,6,103,8,"buffers"],[131,13,103,15],[131,14,103,16,"unshift"],[131,21,103,23],[131,22,103,24,"pack"],[131,26,103,28],[131,27,103,29],[131,28,103,30],[131,29,103,31],[132,6,104,8],[132,13,104,15,"buffers"],[132,20,104,22],[132,21,104,23],[132,22,104,24],[133,4,105,4],[134,2,106,0],[135,2,107,0],[136,2,108,0],[136,11,108,9,"isObject"],[136,19,108,17,"isObject"],[136,20,108,18,"value"],[136,25,108,23],[136,27,108,25],[137,4,109,4],[137,11,109,11,"Object"],[137,17,109,17],[137,18,109,18,"prototype"],[137,27,109,27],[137,28,109,28,"toString"],[137,36,109,36],[137,37,109,37,"call"],[137,41,109,41],[137,42,109,42,"value"],[137,47,109,47],[137,48,109,48],[137,53,109,53],[137,70,109,70],[138,2,110,0],[139,2,111,0],[140,0,112,0],[141,0,113,0],[142,0,114,0],[143,0,115,0],[144,2,116,7],[144,8,116,13,"Decoder"],[144,15,116,20],[144,24,116,29,"Emitter"],[144,49,116,36],[144,50,116,36,"Emitter"],[144,57,116,36],[144,58,116,37],[145,4,117,4],[146,0,118,0],[147,0,119,0],[148,0,120,0],[149,0,121,0],[150,4,122,4,"constructor"],[150,15,122,15,"constructor"],[150,16,122,16,"reviver"],[150,23,122,23],[150,25,122,25],[151,6,123,8],[151,11,123,13],[151,12,123,14],[151,13,123,15],[152,6,124,8],[152,10,124,12],[152,11,124,13,"reviver"],[152,18,124,20],[152,21,124,23,"reviver"],[152,28,124,30],[153,4,125,4],[154,4,126,4],[155,0,127,0],[156,0,128,0],[157,0,129,0],[158,0,130,0],[159,4,131,4,"add"],[159,7,131,7,"add"],[159,8,131,8,"obj"],[159,11,131,11],[159,13,131,13],[160,6,132,8],[160,10,132,12,"packet"],[160,16,132,18],[161,6,133,8],[161,10,133,12],[161,17,133,19,"obj"],[161,20,133,22],[161,25,133,27],[161,33,133,35],[161,35,133,37],[162,8,134,12],[162,12,134,16],[162,16,134,20],[162,17,134,21,"reconstructor"],[162,30,134,34],[162,32,134,36],[163,10,135,16],[163,16,135,22],[163,20,135,26,"Error"],[163,25,135,31],[163,26,135,32],[163,75,135,81],[163,76,135,82],[164,8,136,12],[165,8,137,12,"packet"],[165,14,137,18],[165,17,137,21],[165,21,137,25],[165,22,137,26,"decodeString"],[165,34,137,38],[165,35,137,39,"obj"],[165,38,137,42],[165,39,137,43],[166,8,138,12],[166,14,138,18,"isBinaryEvent"],[166,27,138,31],[166,30,138,34,"packet"],[166,36,138,40],[166,37,138,41,"type"],[166,41,138,45],[166,46,138,50,"PacketType"],[166,56,138,60],[166,57,138,61,"BINARY_EVENT"],[166,69,138,73],[167,8,139,12],[167,12,139,16,"isBinaryEvent"],[167,25,139,29],[167,29,139,33,"packet"],[167,35,139,39],[167,36,139,40,"type"],[167,40,139,44],[167,45,139,49,"PacketType"],[167,55,139,59],[167,56,139,60,"BINARY_ACK"],[167,66,139,70],[167,68,139,72],[168,10,140,16,"packet"],[168,16,140,22],[168,17,140,23,"type"],[168,21,140,27],[168,24,140,30,"isBinaryEvent"],[168,37,140,43],[168,40,140,46,"PacketType"],[168,50,140,56],[168,51,140,57,"EVENT"],[168,56,140,62],[168,59,140,65,"PacketType"],[168,69,140,75],[168,70,140,76,"ACK"],[168,73,140,79],[169,10,141,16],[170,10,142,16],[170,14,142,20],[170,15,142,21,"reconstructor"],[170,28,142,34],[170,31,142,37],[170,35,142,41,"BinaryReconstructor"],[170,54,142,60],[170,55,142,61,"packet"],[170,61,142,67],[170,62,142,68],[171,10,143,16],[172,10,144,16],[172,14,144,20,"packet"],[172,20,144,26],[172,21,144,27,"attachments"],[172,32,144,38],[172,37,144,43],[172,38,144,44],[172,40,144,46],[173,12,145,20],[173,17,145,25],[173,18,145,26,"emitReserved"],[173,30,145,38],[173,31,145,39],[173,40,145,48],[173,42,145,50,"packet"],[173,48,145,56],[173,49,145,57],[174,10,146,16],[175,8,147,12],[175,9,147,13],[175,15,148,17],[176,10,149,16],[177,10,150,16],[177,15,150,21],[177,16,150,22,"emitReserved"],[177,28,150,34],[177,29,150,35],[177,38,150,44],[177,40,150,46,"packet"],[177,46,150,52],[177,47,150,53],[178,8,151,12],[179,6,152,8],[179,7,152,9],[179,13,153,13],[179,17,153,17],[179,21,153,17,"isBinary"],[179,32,153,25],[179,33,153,25,"isBinary"],[179,41,153,25],[179,43,153,26,"obj"],[179,46,153,29],[179,47,153,30],[179,51,153,34,"obj"],[179,54,153,37],[179,55,153,38,"base64"],[179,61,153,44],[179,63,153,46],[180,8,154,12],[181,8,155,12],[181,12,155,16],[181,13,155,17],[181,17,155,21],[181,18,155,22,"reconstructor"],[181,31,155,35],[181,33,155,37],[182,10,156,16],[182,16,156,22],[182,20,156,26,"Error"],[182,25,156,31],[182,26,156,32],[182,76,156,82],[182,77,156,83],[183,8,157,12],[183,9,157,13],[183,15,158,17],[184,10,159,16,"packet"],[184,16,159,22],[184,19,159,25],[184,23,159,29],[184,24,159,30,"reconstructor"],[184,37,159,43],[184,38,159,44,"takeBinaryData"],[184,52,159,58],[184,53,159,59,"obj"],[184,56,159,62],[184,57,159,63],[185,10,160,16],[185,14,160,20,"packet"],[185,20,160,26],[185,22,160,28],[186,12,161,20],[187,12,162,20],[187,16,162,24],[187,17,162,25,"reconstructor"],[187,30,162,38],[187,33,162,41],[187,37,162,45],[188,12,163,20],[188,17,163,25],[188,18,163,26,"emitReserved"],[188,30,163,38],[188,31,163,39],[188,40,163,48],[188,42,163,50,"packet"],[188,48,163,56],[188,49,163,57],[189,10,164,16],[190,8,165,12],[191,6,166,8],[191,7,166,9],[191,13,167,13],[192,8,168,12],[192,14,168,18],[192,18,168,22,"Error"],[192,23,168,27],[192,24,168,28],[192,40,168,44],[192,43,168,47,"obj"],[192,46,168,50],[192,47,168,51],[193,6,169,8],[194,4,170,4],[195,4,171,4],[196,0,172,0],[197,0,173,0],[198,0,174,0],[199,0,175,0],[200,0,176,0],[201,4,177,4,"decodeString"],[201,16,177,16,"decodeString"],[201,17,177,17,"str"],[201,20,177,20],[201,22,177,22],[202,6,178,8],[202,10,178,12,"i"],[202,11,178,13],[202,14,178,16],[202,15,178,17],[203,6,179,8],[204,6,180,8],[204,12,180,14,"p"],[204,13,180,15],[204,16,180,18],[205,8,181,12,"type"],[205,12,181,16],[205,14,181,18,"Number"],[205,20,181,24],[205,21,181,25,"str"],[205,24,181,28],[205,25,181,29,"charAt"],[205,31,181,35],[205,32,181,36],[205,33,181,37],[205,34,181,38],[206,6,182,8],[206,7,182,9],[207,6,183,8],[207,10,183,12,"PacketType"],[207,20,183,22],[207,21,183,23,"p"],[207,22,183,24],[207,23,183,25,"type"],[207,27,183,29],[207,28,183,30],[207,33,183,35,"undefined"],[207,42,183,44],[207,44,183,46],[208,8,184,12],[208,14,184,18],[208,18,184,22,"Error"],[208,23,184,27],[208,24,184,28],[208,46,184,50],[208,49,184,53,"p"],[208,50,184,54],[208,51,184,55,"type"],[208,55,184,59],[208,56,184,60],[209,6,185,8],[210,6,186,8],[211,6,187,8],[211,10,187,12,"p"],[211,11,187,13],[211,12,187,14,"type"],[211,16,187,18],[211,21,187,23,"PacketType"],[211,31,187,33],[211,32,187,34,"BINARY_EVENT"],[211,44,187,46],[211,48,188,12,"p"],[211,49,188,13],[211,50,188,14,"type"],[211,54,188,18],[211,59,188,23,"PacketType"],[211,69,188,33],[211,70,188,34,"BINARY_ACK"],[211,80,188,44],[211,82,188,46],[212,8,189,12],[212,14,189,18,"start"],[212,19,189,23],[212,22,189,26,"i"],[212,23,189,27],[212,26,189,30],[212,27,189,31],[213,8,190,12],[213,15,190,19,"str"],[213,18,190,22],[213,19,190,23,"charAt"],[213,25,190,29],[213,26,190,30],[213,28,190,32,"i"],[213,29,190,33],[213,30,190,34],[213,35,190,39],[213,38,190,42],[213,42,190,46,"i"],[213,43,190,47],[213,47,190,51,"str"],[213,50,190,54],[213,51,190,55,"length"],[213,57,190,61],[213,59,190,63],[213,60,190,65],[214,8,191,12],[214,14,191,18,"buf"],[214,17,191,21],[214,20,191,24,"str"],[214,23,191,27],[214,24,191,28,"substring"],[214,33,191,37],[214,34,191,38,"start"],[214,39,191,43],[214,41,191,45,"i"],[214,42,191,46],[214,43,191,47],[215,8,192,12],[215,12,192,16,"buf"],[215,15,192,19],[215,19,192,23,"Number"],[215,25,192,29],[215,26,192,30,"buf"],[215,29,192,33],[215,30,192,34],[215,34,192,38,"str"],[215,37,192,41],[215,38,192,42,"charAt"],[215,44,192,48],[215,45,192,49,"i"],[215,46,192,50],[215,47,192,51],[215,52,192,56],[215,55,192,59],[215,57,192,61],[216,10,193,16],[216,16,193,22],[216,20,193,26,"Error"],[216,25,193,31],[216,26,193,32],[216,47,193,53],[216,48,193,54],[217,8,194,12],[218,8,195,12,"p"],[218,9,195,13],[218,10,195,14,"attachments"],[218,21,195,25],[218,24,195,28,"Number"],[218,30,195,34],[218,31,195,35,"buf"],[218,34,195,38],[218,35,195,39],[219,6,196,8],[220,6,197,8],[221,6,198,8],[221,10,198,12],[221,13,198,15],[221,18,198,20,"str"],[221,21,198,23],[221,22,198,24,"charAt"],[221,28,198,30],[221,29,198,31,"i"],[221,30,198,32],[221,33,198,35],[221,34,198,36],[221,35,198,37],[221,37,198,39],[222,8,199,12],[222,14,199,18,"start"],[222,19,199,23],[222,22,199,26,"i"],[222,23,199,27],[222,26,199,30],[222,27,199,31],[223,8,200,12],[223,15,200,19],[223,17,200,21,"i"],[223,18,200,22],[223,20,200,24],[224,10,201,16],[224,16,201,22,"c"],[224,17,201,23],[224,20,201,26,"str"],[224,23,201,29],[224,24,201,30,"charAt"],[224,30,201,36],[224,31,201,37,"i"],[224,32,201,38],[224,33,201,39],[225,10,202,16],[225,14,202,20],[225,17,202,23],[225,22,202,28,"c"],[225,23,202,29],[225,25,203,20],[226,10,204,16],[226,14,204,20,"i"],[226,15,204,21],[226,20,204,26,"str"],[226,23,204,29],[226,24,204,30,"length"],[226,30,204,36],[226,32,205,20],[227,8,206,12],[228,8,207,12,"p"],[228,9,207,13],[228,10,207,14,"nsp"],[228,13,207,17],[228,16,207,20,"str"],[228,19,207,23],[228,20,207,24,"substring"],[228,29,207,33],[228,30,207,34,"start"],[228,35,207,39],[228,37,207,41,"i"],[228,38,207,42],[228,39,207,43],[229,6,208,8],[229,7,208,9],[229,13,209,13],[230,8,210,12,"p"],[230,9,210,13],[230,10,210,14,"nsp"],[230,13,210,17],[230,16,210,20],[230,19,210,23],[231,6,211,8],[232,6,212,8],[233,6,213,8],[233,12,213,14,"next"],[233,16,213,18],[233,19,213,21,"str"],[233,22,213,24],[233,23,213,25,"charAt"],[233,29,213,31],[233,30,213,32,"i"],[233,31,213,33],[233,34,213,36],[233,35,213,37],[233,36,213,38],[234,6,214,8],[234,10,214,12],[234,12,214,14],[234,17,214,19,"next"],[234,21,214,23],[234,25,214,27,"Number"],[234,31,214,33],[234,32,214,34,"next"],[234,36,214,38],[234,37,214,39],[234,41,214,43,"next"],[234,45,214,47],[234,47,214,49],[235,8,215,12],[235,14,215,18,"start"],[235,19,215,23],[235,22,215,26,"i"],[235,23,215,27],[235,26,215,30],[235,27,215,31],[236,8,216,12],[236,15,216,19],[236,17,216,21,"i"],[236,18,216,22],[236,20,216,24],[237,10,217,16],[237,16,217,22,"c"],[237,17,217,23],[237,20,217,26,"str"],[237,23,217,29],[237,24,217,30,"charAt"],[237,30,217,36],[237,31,217,37,"i"],[237,32,217,38],[237,33,217,39],[238,10,218,16],[238,14,218,20],[238,18,218,24],[238,22,218,28,"c"],[238,23,218,29],[238,27,218,33,"Number"],[238,33,218,39],[238,34,218,40,"c"],[238,35,218,41],[238,36,218,42],[238,40,218,46,"c"],[238,41,218,47],[238,43,218,49],[239,12,219,20],[239,14,219,22,"i"],[239,15,219,23],[240,12,220,20],[241,10,221,16],[242,10,222,16],[242,14,222,20,"i"],[242,15,222,21],[242,20,222,26,"str"],[242,23,222,29],[242,24,222,30,"length"],[242,30,222,36],[242,32,223,20],[243,8,224,12],[244,8,225,12,"p"],[244,9,225,13],[244,10,225,14,"id"],[244,12,225,16],[244,15,225,19,"Number"],[244,21,225,25],[244,22,225,26,"str"],[244,25,225,29],[244,26,225,30,"substring"],[244,35,225,39],[244,36,225,40,"start"],[244,41,225,45],[244,43,225,47,"i"],[244,44,225,48],[244,47,225,51],[244,48,225,52],[244,49,225,53],[244,50,225,54],[245,6,226,8],[246,6,227,8],[247,6,228,8],[247,10,228,12,"str"],[247,13,228,15],[247,14,228,16,"charAt"],[247,20,228,22],[247,21,228,23],[247,23,228,25,"i"],[247,24,228,26],[247,25,228,27],[247,27,228,29],[248,8,229,12],[248,14,229,18,"payload"],[248,21,229,25],[248,24,229,28],[248,28,229,32],[248,29,229,33,"tryParse"],[248,37,229,41],[248,38,229,42,"str"],[248,41,229,45],[248,42,229,46,"substr"],[248,48,229,52],[248,49,229,53,"i"],[248,50,229,54],[248,51,229,55],[248,52,229,56],[249,8,230,12],[249,12,230,16,"Decoder"],[249,19,230,23],[249,20,230,24,"isPayloadValid"],[249,34,230,38],[249,35,230,39,"p"],[249,36,230,40],[249,37,230,41,"type"],[249,41,230,45],[249,43,230,47,"payload"],[249,50,230,54],[249,51,230,55],[249,53,230,57],[250,10,231,16,"p"],[250,11,231,17],[250,12,231,18,"data"],[250,16,231,22],[250,19,231,25,"payload"],[250,26,231,32],[251,8,232,12],[251,9,232,13],[251,15,233,17],[252,10,234,16],[252,16,234,22],[252,20,234,26,"Error"],[252,25,234,31],[252,26,234,32],[252,43,234,49],[252,44,234,50],[253,8,235,12],[254,6,236,8],[255,6,237,8,"debug"],[255,11,237,13],[255,12,237,14],[255,30,237,32],[255,32,237,34,"str"],[255,35,237,37],[255,37,237,39,"p"],[255,38,237,40],[255,39,237,41],[256,6,238,8],[256,13,238,15,"p"],[256,14,238,16],[257,4,239,4],[258,4,240,4,"tryParse"],[258,12,240,12,"tryParse"],[258,13,240,13,"str"],[258,16,240,16],[258,18,240,18],[259,6,241,8],[259,10,241,12],[260,8,242,12],[260,15,242,19,"JSON"],[260,19,242,23],[260,20,242,24,"parse"],[260,25,242,29],[260,26,242,30,"str"],[260,29,242,33],[260,31,242,35],[260,35,242,39],[260,36,242,40,"reviver"],[260,43,242,47],[260,44,242,48],[261,6,243,8],[261,7,243,9],[261,8,244,8],[261,15,244,15,"e"],[261,16,244,16],[261,18,244,18],[262,8,245,12],[262,15,245,19],[262,20,245,24],[263,6,246,8],[264,4,247,4],[265,4,248,4],[265,11,248,11,"isPayloadValid"],[265,25,248,25,"isPayloadValid"],[265,26,248,26,"type"],[265,30,248,30],[265,32,248,32,"payload"],[265,39,248,39],[265,41,248,41],[266,6,249,8],[266,14,249,16,"type"],[266,18,249,20],[267,8,250,12],[267,13,250,17,"PacketType"],[267,23,250,27],[267,24,250,28,"CONNECT"],[267,31,250,35],[268,10,251,16],[268,17,251,23,"isObject"],[268,25,251,31],[268,26,251,32,"payload"],[268,33,251,39],[268,34,251,40],[269,8,252,12],[269,13,252,17,"PacketType"],[269,23,252,27],[269,24,252,28,"DISCONNECT"],[269,34,252,38],[270,10,253,16],[270,17,253,23,"payload"],[270,24,253,30],[270,29,253,35,"undefined"],[270,38,253,44],[271,8,254,12],[271,13,254,17,"PacketType"],[271,23,254,27],[271,24,254,28,"CONNECT_ERROR"],[271,37,254,41],[272,10,255,16],[272,17,255,23],[272,24,255,30,"payload"],[272,31,255,37],[272,36,255,42],[272,44,255,50],[272,48,255,54,"isObject"],[272,56,255,62],[272,57,255,63,"payload"],[272,64,255,70],[272,65,255,71],[273,8,256,12],[273,13,256,17,"PacketType"],[273,23,256,27],[273,24,256,28,"EVENT"],[273,29,256,33],[274,8,257,12],[274,13,257,17,"PacketType"],[274,23,257,27],[274,24,257,28,"BINARY_EVENT"],[274,36,257,40],[275,10,258,16],[275,17,258,24,"Array"],[275,22,258,29],[275,23,258,30,"isArray"],[275,30,258,37],[275,31,258,38,"payload"],[275,38,258,45],[275,39,258,46],[275,44,259,21],[275,51,259,28,"payload"],[275,58,259,35],[275,59,259,36],[275,60,259,37],[275,61,259,38],[275,66,259,43],[275,74,259,51],[275,78,260,25],[275,85,260,32,"payload"],[275,92,260,39],[275,93,260,40],[275,94,260,41],[275,95,260,42],[275,100,260,47],[275,108,260,55],[275,112,261,28,"RESERVED_EVENTS"],[275,127,261,43],[275,128,261,44,"indexOf"],[275,135,261,51],[275,136,261,52,"payload"],[275,143,261,59],[275,144,261,60],[275,145,261,61],[275,146,261,62],[275,147,261,63],[275,152,261,68],[275,153,261,69],[275,154,261,71],[275,155,261,72],[276,8,262,12],[276,13,262,17,"PacketType"],[276,23,262,27],[276,24,262,28,"ACK"],[276,27,262,31],[277,8,263,12],[277,13,263,17,"PacketType"],[277,23,263,27],[277,24,263,28,"BINARY_ACK"],[277,34,263,38],[278,10,264,16],[278,17,264,23,"Array"],[278,22,264,28],[278,23,264,29,"isArray"],[278,30,264,36],[278,31,264,37,"payload"],[278,38,264,44],[278,39,264,45],[279,6,265,8],[280,4,266,4],[281,4,267,4],[282,0,268,0],[283,0,269,0],[284,4,270,4,"destroy"],[284,11,270,11,"destroy"],[284,12,270,11],[284,14,270,14],[285,6,271,8],[285,10,271,12],[285,14,271,16],[285,15,271,17,"reconstructor"],[285,28,271,30],[285,30,271,32],[286,8,272,12],[286,12,272,16],[286,13,272,17,"reconstructor"],[286,26,272,30],[286,27,272,31,"finishedReconstruction"],[286,49,272,53],[286,50,272,54],[286,51,272,55],[287,8,273,12],[287,12,273,16],[287,13,273,17,"reconstructor"],[287,26,273,30],[287,29,273,33],[287,33,273,37],[288,6,274,8],[289,4,275,4],[290,2,276,0],[291,2,277,0],[292,0,278,0],[293,0,279,0],[294,0,280,0],[295,0,281,0],[296,0,282,0],[297,0,283,0],[298,0,284,0],[299,2,285,0],[299,8,285,6,"BinaryReconstructor"],[299,27,285,25],[299,28,285,26],[300,4,286,4,"constructor"],[300,15,286,15,"constructor"],[300,16,286,16,"packet"],[300,22,286,22],[300,24,286,24],[301,6,287,8],[301,10,287,12],[301,11,287,13,"packet"],[301,17,287,19],[301,20,287,22,"packet"],[301,26,287,28],[302,6,288,8],[302,10,288,12],[302,11,288,13,"buffers"],[302,18,288,20],[302,21,288,23],[302,23,288,25],[303,6,289,8],[303,10,289,12],[303,11,289,13,"reconPack"],[303,20,289,22],[303,23,289,25,"packet"],[303,29,289,31],[304,4,290,4],[305,4,291,4],[306,0,292,0],[307,0,293,0],[308,0,294,0],[309,0,295,0],[310,0,296,0],[311,0,297,0],[312,0,298,0],[313,4,299,4,"takeBinaryData"],[313,18,299,18,"takeBinaryData"],[313,19,299,19,"binData"],[313,26,299,26],[313,28,299,28],[314,6,300,8],[314,10,300,12],[314,11,300,13,"buffers"],[314,18,300,20],[314,19,300,21,"push"],[314,23,300,25],[314,24,300,26,"binData"],[314,31,300,33],[314,32,300,34],[315,6,301,8],[315,10,301,12],[315,14,301,16],[315,15,301,17,"buffers"],[315,22,301,24],[315,23,301,25,"length"],[315,29,301,31],[315,34,301,36],[315,38,301,40],[315,39,301,41,"reconPack"],[315,48,301,50],[315,49,301,51,"attachments"],[315,60,301,62],[315,62,301,64],[316,8,302,12],[317,8,303,12],[317,14,303,18,"packet"],[317,20,303,24],[317,23,303,27],[317,27,303,27,"reconstructPacket"],[317,36,303,44],[317,37,303,44,"reconstructPacket"],[317,54,303,44],[317,56,303,45],[317,60,303,49],[317,61,303,50,"reconPack"],[317,70,303,59],[317,72,303,61],[317,76,303,65],[317,77,303,66,"buffers"],[317,84,303,73],[317,85,303,74],[318,8,304,12],[318,12,304,16],[318,13,304,17,"finishedReconstruction"],[318,35,304,39],[318,36,304,40],[318,37,304,41],[319,8,305,12],[319,15,305,19,"packet"],[319,21,305,25],[320,6,306,8],[321,6,307,8],[321,13,307,15],[321,17,307,19],[322,4,308,4],[323,4,309,4],[324,0,310,0],[325,0,311,0],[326,4,312,4,"finishedReconstruction"],[326,26,312,26,"finishedReconstruction"],[326,27,312,26],[326,29,312,29],[327,6,313,8],[327,10,313,12],[327,11,313,13,"reconPack"],[327,20,313,22],[327,23,313,25],[327,27,313,29],[328,6,314,8],[328,10,314,12],[328,11,314,13,"buffers"],[328,18,314,20],[328,21,314,23],[328,23,314,25],[329,4,315,4],[330,2,316,0],[331,0,316,1],[331,3]],"functionMap":{"names":["<global>","<anonymous>","Encoder","Encoder#constructor","Encoder#encode","Encoder#encodeAsString","Encoder#encodeAsBinary","isObject","Decoder","Decoder#constructor","Decoder#add","Decoder#decodeString","Decoder#tryParse","Decoder.isPayloadValid","Decoder#destroy","BinaryReconstructor","BinaryReconstructor#constructor","BinaryReconstructor#takeBinaryData","BinaryReconstructor#finishedReconstruction"],"mappings":"AAA;CCuB;CDQ;OEI;ICM;KDE;IEO;KFe;IGI;KHuB;IIM;KJM;CFC;AOE;CPE;OQM;ICM;KDG;IEM;KFuC;IGO;KH8D;IIC;KJO;IKC;KLkB;IMI;KNK;CRC;AeS;ICC;KDI;IES;KFS;IGI;KHG;CfC"},"hasCjsExports":false},"type":"js/module"}]}