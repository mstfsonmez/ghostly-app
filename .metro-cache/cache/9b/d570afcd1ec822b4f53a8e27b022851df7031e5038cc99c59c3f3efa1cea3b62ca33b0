{"dependencies":[{"name":"./transports/index.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":73,"index":73}}],"key":"7CLKJUHLWOUmn3xjjCK2YLx/ESU=","exportNames":["*"],"imports":1}},{"name":"./util.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":74},"end":{"line":2,"column":62,"index":136}}],"key":"+UpHPazG/Yk8JnTjB6d2Eo+vUl4=","exportNames":["*"],"imports":1}},{"name":"./contrib/parseqs.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":137},"end":{"line":3,"column":46,"index":183}}],"key":"BJ+q1MtlpK8TmoXWscM6udPVjkM=","exportNames":["*"],"imports":1}},{"name":"./contrib/parseuri.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":184},"end":{"line":4,"column":46,"index":230}}],"key":"5FHL6vc7rbDf51XGIsZLRdNOJXo=","exportNames":["*"],"imports":1}},{"name":"@socket.io/component-emitter","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":231},"end":{"line":5,"column":55,"index":286}}],"key":"nWmouVdWEVSQD2UwM6teY1JyKBM=","exportNames":["*"],"imports":1}},{"name":"engine.io-parser","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":287},"end":{"line":6,"column":44,"index":331}}],"key":"IB5HY76c7xC+tDEPCV8b/nK76DU=","exportNames":["*"],"imports":1}},{"name":"./globals.node.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":332},"end":{"line":7,"column":82,"index":414}}],"key":"9IvwYHBhshdIr/kWH4ou0H+0FaM=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  Object.defineProperty(exports, \"SocketWithoutUpgrade\", {\n    enumerable: true,\n    get: function () {\n      return SocketWithoutUpgrade;\n    }\n  });\n  Object.defineProperty(exports, \"SocketWithUpgrade\", {\n    enumerable: true,\n    get: function () {\n      return SocketWithUpgrade;\n    }\n  });\n  Object.defineProperty(exports, \"Socket\", {\n    enumerable: true,\n    get: function () {\n      return Socket;\n    }\n  });\n  var _transportsIndexJs = require(_dependencyMap[0], \"./transports/index.js\");\n  var _utilJs = require(_dependencyMap[1], \"./util.js\");\n  var _contribParseqsJs = require(_dependencyMap[2], \"./contrib/parseqs.js\");\n  var _contribParseuriJs = require(_dependencyMap[3], \"./contrib/parseuri.js\");\n  var _socketIoComponentEmitter = require(_dependencyMap[4], \"@socket.io/component-emitter\");\n  var _engineIoParser = require(_dependencyMap[5], \"engine.io-parser\");\n  var _globalsNodeJs = require(_dependencyMap[6], \"./globals.node.js\");\n  const withEventListeners = typeof addEventListener === \"function\" && typeof removeEventListener === \"function\";\n  const OFFLINE_EVENT_LISTENERS = [];\n  if (withEventListeners) {\n    // within a ServiceWorker, any event handler for the 'offline' event must be added on the initial evaluation of the\n    // script, so we create one single event listener here which will forward the event to the socket instances\n    addEventListener(\"offline\", () => {\n      OFFLINE_EVENT_LISTENERS.forEach(listener => listener());\n    }, false);\n  }\n  /**\n   * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n   * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n   *\n   * This class comes without upgrade mechanism, which means that it will keep the first low-level transport that\n   * successfully establishes the connection.\n   *\n   * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n   *\n   * @example\n   * import { SocketWithoutUpgrade, WebSocket } from \"engine.io-client\";\n   *\n   * const socket = new SocketWithoutUpgrade({\n   *   transports: [WebSocket]\n   * });\n   *\n   * socket.on(\"open\", () => {\n   *   socket.send(\"hello\");\n   * });\n   *\n   * @see SocketWithUpgrade\n   * @see Socket\n   */\n  class SocketWithoutUpgrade extends _socketIoComponentEmitter.Emitter {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri - uri or options\n     * @param {Object} opts - options\n     */\n    constructor(uri, opts) {\n      super();\n      this.binaryType = _globalsNodeJs.defaultBinaryType;\n      this.writeBuffer = [];\n      this._prevBufferLen = 0;\n      this._pingInterval = -1;\n      this._pingTimeout = -1;\n      this._maxPayload = -1;\n      /**\n       * The expiration timestamp of the {@link _pingTimeoutTimer} object is tracked, in case the timer is throttled and the\n       * callback is not fired on time. This can happen for example when a laptop is suspended or when a phone is locked.\n       */\n      this._pingTimeoutTime = Infinity;\n      if (uri && \"object\" === typeof uri) {\n        opts = uri;\n        uri = null;\n      }\n      if (uri) {\n        const parsedUri = (0, _contribParseuriJs.parse)(uri);\n        opts.hostname = parsedUri.host;\n        opts.secure = parsedUri.protocol === \"https\" || parsedUri.protocol === \"wss\";\n        opts.port = parsedUri.port;\n        if (parsedUri.query) opts.query = parsedUri.query;\n      } else if (opts.host) {\n        opts.hostname = (0, _contribParseuriJs.parse)(opts.host).host;\n      }\n      (0, _utilJs.installTimerFunctions)(this, opts);\n      this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n      if (opts.hostname && !opts.port) {\n        // if no port is specified manually, use the protocol default\n        opts.port = this.secure ? \"443\" : \"80\";\n      }\n      this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n      this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : this.secure ? \"443\" : \"80\");\n      this.transports = [];\n      this._transportsByName = {};\n      opts.transports.forEach(t => {\n        const transportName = t.prototype.name;\n        this.transports.push(transportName);\n        this._transportsByName[transportName] = t;\n      });\n      this.opts = Object.assign({\n        path: \"/engine.io\",\n        agent: false,\n        withCredentials: false,\n        upgrade: true,\n        timestampParam: \"t\",\n        rememberUpgrade: false,\n        addTrailingSlash: true,\n        rejectUnauthorized: true,\n        perMessageDeflate: {\n          threshold: 1024\n        },\n        transportOptions: {},\n        closeOnBeforeunload: false\n      }, opts);\n      this.opts.path = this.opts.path.replace(/\\/$/, \"\") + (this.opts.addTrailingSlash ? \"/\" : \"\");\n      if (typeof this.opts.query === \"string\") {\n        this.opts.query = (0, _contribParseqsJs.decode)(this.opts.query);\n      }\n      if (withEventListeners) {\n        if (this.opts.closeOnBeforeunload) {\n          // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n          // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n          // closed/reloaded)\n          this._beforeunloadEventListener = () => {\n            if (this.transport) {\n              // silently close the transport\n              this.transport.removeAllListeners();\n              this.transport.close();\n            }\n          };\n          addEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n        }\n        if (this.hostname !== \"localhost\") {\n          this._offlineEventListener = () => {\n            this._onClose(\"transport close\", {\n              description: \"network connection lost\"\n            });\n          };\n          OFFLINE_EVENT_LISTENERS.push(this._offlineEventListener);\n        }\n      }\n      if (this.opts.withCredentials) {\n        this._cookieJar = (0, _globalsNodeJs.createCookieJar)();\n      }\n      this._open();\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} name - transport name\n     * @return {Transport}\n     * @private\n     */\n    createTransport(name) {\n      const query = Object.assign({}, this.opts.query);\n      // append engine.io protocol identifier\n      query.EIO = _engineIoParser.protocol;\n      // transport name\n      query.transport = name;\n      // session id if we already have one\n      if (this.id) query.sid = this.id;\n      const opts = Object.assign({}, this.opts, {\n        query,\n        socket: this,\n        hostname: this.hostname,\n        secure: this.secure,\n        port: this.port\n      }, this.opts.transportOptions[name]);\n      return new this._transportsByName[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @private\n     */\n    _open() {\n      if (this.transports.length === 0) {\n        // Emit error on next tick so it can be listened to\n        this.setTimeoutFn(() => {\n          this.emitReserved(\"error\", \"No transports available\");\n        }, 0);\n        return;\n      }\n      const transportName = this.opts.rememberUpgrade && SocketWithoutUpgrade.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1 ? \"websocket\" : this.transports[0];\n      this.readyState = \"opening\";\n      const transport = this.createTransport(transportName);\n      transport.open();\n      this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @private\n     */\n    setTransport(transport) {\n      if (this.transport) {\n        this.transport.removeAllListeners();\n      }\n      // set up transport\n      this.transport = transport;\n      // set up transport listeners\n      transport.on(\"drain\", this._onDrain.bind(this)).on(\"packet\", this._onPacket.bind(this)).on(\"error\", this._onError.bind(this)).on(\"close\", reason => this._onClose(\"transport close\", reason));\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @private\n     */\n    onOpen() {\n      this.readyState = \"open\";\n      SocketWithoutUpgrade.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n      this.emitReserved(\"open\");\n      this.flush();\n    }\n    /**\n     * Handles a packet.\n     *\n     * @private\n     */\n    _onPacket(packet) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        this.emitReserved(\"packet\", packet);\n        // Socket is live - any packet counts\n        this.emitReserved(\"heartbeat\");\n        switch (packet.type) {\n          case \"open\":\n            this.onHandshake(JSON.parse(packet.data));\n            break;\n          case \"ping\":\n            this._sendPacket(\"pong\");\n            this.emitReserved(\"ping\");\n            this.emitReserved(\"pong\");\n            this._resetPingTimeout();\n            break;\n          case \"error\":\n            const err = new Error(\"server error\");\n            // @ts-ignore\n            err.code = packet.data;\n            this._onError(err);\n            break;\n          case \"message\":\n            this.emitReserved(\"data\", packet.data);\n            this.emitReserved(\"message\", packet.data);\n            break;\n        }\n      } else {}\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @private\n     */\n    onHandshake(data) {\n      this.emitReserved(\"handshake\", data);\n      this.id = data.sid;\n      this.transport.query.sid = data.sid;\n      this._pingInterval = data.pingInterval;\n      this._pingTimeout = data.pingTimeout;\n      this._maxPayload = data.maxPayload;\n      this.onOpen();\n      // In case open handler closes socket\n      if (\"closed\" === this.readyState) return;\n      this._resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @private\n     */\n    _resetPingTimeout() {\n      this.clearTimeoutFn(this._pingTimeoutTimer);\n      const delay = this._pingInterval + this._pingTimeout;\n      this._pingTimeoutTime = Date.now() + delay;\n      this._pingTimeoutTimer = this.setTimeoutFn(() => {\n        this._onClose(\"ping timeout\");\n      }, delay);\n      if (this.opts.autoUnref) {\n        this._pingTimeoutTimer.unref();\n      }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @private\n     */\n    _onDrain() {\n      this.writeBuffer.splice(0, this._prevBufferLen);\n      // setting prevBufferLen = 0 is very important\n      // for example, when upgrading, upgrade packet is sent over,\n      // and a nonzero prevBufferLen could cause problems on `drain`\n      this._prevBufferLen = 0;\n      if (0 === this.writeBuffer.length) {\n        this.emitReserved(\"drain\");\n      } else {\n        this.flush();\n      }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @private\n     */\n    flush() {\n      if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n        const packets = this._getWritablePackets();\n        this.transport.send(packets);\n        // keep track of current length of writeBuffer\n        // splice writeBuffer and callbackBuffer on `drain`\n        this._prevBufferLen = packets.length;\n        this.emitReserved(\"flush\");\n      }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n    _getWritablePackets() {\n      const shouldCheckPayloadSize = this._maxPayload && this.transport.name === \"polling\" && this.writeBuffer.length > 1;\n      if (!shouldCheckPayloadSize) {\n        return this.writeBuffer;\n      }\n      let payloadSize = 1; // first packet type\n      for (let i = 0; i < this.writeBuffer.length; i++) {\n        const data = this.writeBuffer[i].data;\n        if (data) {\n          payloadSize += (0, _utilJs.byteLength)(data);\n        }\n        if (i > 0 && payloadSize > this._maxPayload) {\n          return this.writeBuffer.slice(0, i);\n        }\n        payloadSize += 2; // separator + packet type\n      }\n      return this.writeBuffer;\n    }\n    /**\n     * Checks whether the heartbeat timer has expired but the socket has not yet been notified.\n     *\n     * Note: this method is private for now because it does not really fit the WebSocket API, but if we put it in the\n     * `write()` method then the message would not be buffered by the Socket.IO client.\n     *\n     * @return {boolean}\n     * @private\n     */\n    /* private */\n    _hasPingExpired() {\n      if (!this._pingTimeoutTime) return true;\n      const hasExpired = Date.now() > this._pingTimeoutTime;\n      if (hasExpired) {\n        this._pingTimeoutTime = 0;\n        (0, _globalsNodeJs.nextTick)(() => {\n          this._onClose(\"ping timeout\");\n        }, this.setTimeoutFn);\n      }\n      return hasExpired;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n    write(msg, options, fn) {\n      this._sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n    /**\n     * Sends a message. Alias of {@link Socket#write}.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n    send(msg, options, fn) {\n      this._sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} type: packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @private\n     */\n    _sendPacket(type, data, options, fn) {\n      if (\"function\" === typeof data) {\n        fn = data;\n        data = undefined;\n      }\n      if (\"function\" === typeof options) {\n        fn = options;\n        options = null;\n      }\n      if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n        return;\n      }\n      options = options || {};\n      options.compress = false !== options.compress;\n      const packet = {\n        type: type,\n        data: data,\n        options: options\n      };\n      this.emitReserved(\"packetCreate\", packet);\n      this.writeBuffer.push(packet);\n      if (fn) this.once(\"flush\", fn);\n      this.flush();\n    }\n    /**\n     * Closes the connection.\n     */\n    close() {\n      const close = () => {\n        this._onClose(\"forced close\");\n        this.transport.close();\n      };\n      const cleanupAndClose = () => {\n        this.off(\"upgrade\", cleanupAndClose);\n        this.off(\"upgradeError\", cleanupAndClose);\n        close();\n      };\n      const waitForUpgrade = () => {\n        // wait for upgrade to finish since we can't send packets while pausing a transport\n        this.once(\"upgrade\", cleanupAndClose);\n        this.once(\"upgradeError\", cleanupAndClose);\n      };\n      if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n        this.readyState = \"closing\";\n        if (this.writeBuffer.length) {\n          this.once(\"drain\", () => {\n            if (this.upgrading) {\n              waitForUpgrade();\n            } else {\n              close();\n            }\n          });\n        } else if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      }\n      return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @private\n     */\n    _onError(err) {\n      SocketWithoutUpgrade.priorWebsocketSuccess = false;\n      if (this.opts.tryAllTransports && this.transports.length > 1 && this.readyState === \"opening\") {\n        this.transports.shift();\n        return this._open();\n      }\n      this.emitReserved(\"error\", err);\n      this._onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @private\n     */\n    _onClose(reason, description) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        // clear timers\n        this.clearTimeoutFn(this._pingTimeoutTimer);\n        // stop event from firing again for transport\n        this.transport.removeAllListeners(\"close\");\n        // ensure transport won't stay open\n        this.transport.close();\n        // ignore further transport communication\n        this.transport.removeAllListeners();\n        if (withEventListeners) {\n          if (this._beforeunloadEventListener) {\n            removeEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n          }\n          if (this._offlineEventListener) {\n            const i = OFFLINE_EVENT_LISTENERS.indexOf(this._offlineEventListener);\n            if (i !== -1) {\n              OFFLINE_EVENT_LISTENERS.splice(i, 1);\n            }\n          }\n        }\n        // set ready state\n        this.readyState = \"closed\";\n        // clear session id\n        this.id = null;\n        // emit close event\n        this.emitReserved(\"close\", reason, description);\n        // clean buffers after, so users can still\n        // grab the buffers on `close` event\n        this.writeBuffer = [];\n        this._prevBufferLen = 0;\n      }\n    }\n  }\n  SocketWithoutUpgrade.protocol = _engineIoParser.protocol;\n  /**\n   * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n   * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n   *\n   * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n   * low-level transport, it will try to upgrade to a better transport.\n   *\n   * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n   *\n   * @example\n   * import { SocketWithUpgrade, WebSocket } from \"engine.io-client\";\n   *\n   * const socket = new SocketWithUpgrade({\n   *   transports: [WebSocket]\n   * });\n   *\n   * socket.on(\"open\", () => {\n   *   socket.send(\"hello\");\n   * });\n   *\n   * @see SocketWithoutUpgrade\n   * @see Socket\n   */\n  class SocketWithUpgrade extends SocketWithoutUpgrade {\n    constructor() {\n      super(...arguments);\n      this._upgrades = [];\n    }\n    onOpen() {\n      super.onOpen();\n      if (\"open\" === this.readyState && this.opts.upgrade) {\n        for (let i = 0; i < this._upgrades.length; i++) {\n          this._probe(this._upgrades[i]);\n        }\n      }\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} name - transport name\n     * @private\n     */\n    _probe(name) {\n      let transport = this.createTransport(name);\n      let failed = false;\n      SocketWithoutUpgrade.priorWebsocketSuccess = false;\n      const onTransportOpen = () => {\n        if (failed) return;\n        transport.send([{\n          type: \"ping\",\n          data: \"probe\"\n        }]);\n        transport.once(\"packet\", msg => {\n          if (failed) return;\n          if (\"pong\" === msg.type && \"probe\" === msg.data) {\n            this.upgrading = true;\n            this.emitReserved(\"upgrading\", transport);\n            if (!transport) return;\n            SocketWithoutUpgrade.priorWebsocketSuccess = \"websocket\" === transport.name;\n            this.transport.pause(() => {\n              if (failed) return;\n              if (\"closed\" === this.readyState) return;\n              cleanup();\n              this.setTransport(transport);\n              transport.send([{\n                type: \"upgrade\"\n              }]);\n              this.emitReserved(\"upgrade\", transport);\n              transport = null;\n              this.upgrading = false;\n              this.flush();\n            });\n          } else {\n            const err = new Error(\"probe error\");\n            // @ts-ignore\n            err.transport = transport.name;\n            this.emitReserved(\"upgradeError\", err);\n          }\n        });\n      };\n      function freezeTransport() {\n        if (failed) return;\n        // Any callback called by transport should be ignored since now\n        failed = true;\n        cleanup();\n        transport.close();\n        transport = null;\n      }\n      // Handle any error that happens while probing\n      const onerror = err => {\n        const error = new Error(\"probe error: \" + err);\n        // @ts-ignore\n        error.transport = transport.name;\n        freezeTransport();\n        this.emitReserved(\"upgradeError\", error);\n      };\n      function onTransportClose() {\n        onerror(\"transport closed\");\n      }\n      // When the socket is closed while we're probing\n      function onclose() {\n        onerror(\"socket closed\");\n      }\n      // When the socket is upgraded while we're probing\n      function onupgrade(to) {\n        if (transport && to.name !== transport.name) {\n          freezeTransport();\n        }\n      }\n      // Remove all listeners on the transport and on self\n      const cleanup = () => {\n        transport.removeListener(\"open\", onTransportOpen);\n        transport.removeListener(\"error\", onerror);\n        transport.removeListener(\"close\", onTransportClose);\n        this.off(\"close\", onclose);\n        this.off(\"upgrading\", onupgrade);\n      };\n      transport.once(\"open\", onTransportOpen);\n      transport.once(\"error\", onerror);\n      transport.once(\"close\", onTransportClose);\n      this.once(\"close\", onclose);\n      this.once(\"upgrading\", onupgrade);\n      if (this._upgrades.indexOf(\"webtransport\") !== -1 && name !== \"webtransport\") {\n        // favor WebTransport\n        this.setTimeoutFn(() => {\n          if (!failed) {\n            transport.open();\n          }\n        }, 200);\n      } else {\n        transport.open();\n      }\n    }\n    onHandshake(data) {\n      this._upgrades = this._filterUpgrades(data.upgrades);\n      super.onHandshake(data);\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} upgrades - server upgrades\n     * @private\n     */\n    _filterUpgrades(upgrades) {\n      const filteredUpgrades = [];\n      for (let i = 0; i < upgrades.length; i++) {\n        if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n      }\n      return filteredUpgrades;\n    }\n  }\n  /**\n   * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n   * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n   *\n   * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n   * low-level transport, it will try to upgrade to a better transport.\n   *\n   * @example\n   * import { Socket } from \"engine.io-client\";\n   *\n   * const socket = new Socket();\n   *\n   * socket.on(\"open\", () => {\n   *   socket.send(\"hello\");\n   * });\n   *\n   * @see SocketWithoutUpgrade\n   * @see SocketWithUpgrade\n   */\n  class Socket extends SocketWithUpgrade {\n    constructor(uri, opts = {}) {\n      const o = typeof uri === \"object\" ? uri : opts;\n      if (!o.transports || o.transports && typeof o.transports[0] === \"string\") {\n        o.transports = (o.transports || [\"polling\", \"websocket\", \"webtransport\"]).map(transportName => _transportsIndexJs.transports[transportName]).filter(t => !!t);\n      }\n      super(uri, o);\n    }\n  }\n});","lineCount":697,"map":[[7,2,41,0,"Object"],[7,8,41,0],[7,9,41,0,"defineProperty"],[7,23,41,0],[7,24,41,0,"exports"],[7,31,41,0],[8,4,41,0,"enumerable"],[8,14,41,0],[9,4,41,0,"get"],[9,7,41,0],[9,18,41,0,"get"],[9,19,41,0],[10,6,41,0],[10,13,41,0,"SocketWithoutUpgrade"],[10,33,41,0],[11,4,41,0],[12,2,41,0],[13,2,563,0,"Object"],[13,8,563,0],[13,9,563,0,"defineProperty"],[13,23,563,0],[13,24,563,0,"exports"],[13,31,563,0],[14,4,563,0,"enumerable"],[14,14,563,0],[15,4,563,0,"get"],[15,7,563,0],[15,18,563,0,"get"],[15,19,563,0],[16,6,563,0],[16,13,563,0,"SocketWithUpgrade"],[16,30,563,0],[17,4,563,0],[18,2,563,0],[19,2,716,0,"Object"],[19,8,716,0],[19,9,716,0,"defineProperty"],[19,23,716,0],[19,24,716,0,"exports"],[19,31,716,0],[20,4,716,0,"enumerable"],[20,14,716,0],[21,4,716,0,"get"],[21,7,716,0],[21,18,716,0,"get"],[21,19,716,0],[22,6,716,0],[22,13,716,0,"Socket"],[22,19,716,0],[23,4,716,0],[24,2,716,0],[25,2,1,0],[25,6,1,0,"_transportsIndexJs"],[25,24,1,0],[25,27,1,0,"require"],[25,34,1,0],[25,35,1,0,"_dependencyMap"],[25,49,1,0],[26,2,2,0],[26,6,2,0,"_utilJs"],[26,13,2,0],[26,16,2,0,"require"],[26,23,2,0],[26,24,2,0,"_dependencyMap"],[26,38,2,0],[27,2,3,0],[27,6,3,0,"_contribParseqsJs"],[27,23,3,0],[27,26,3,0,"require"],[27,33,3,0],[27,34,3,0,"_dependencyMap"],[27,48,3,0],[28,2,4,0],[28,6,4,0,"_contribParseuriJs"],[28,24,4,0],[28,27,4,0,"require"],[28,34,4,0],[28,35,4,0,"_dependencyMap"],[28,49,4,0],[29,2,5,0],[29,6,5,0,"_socketIoComponentEmitter"],[29,31,5,0],[29,34,5,0,"require"],[29,41,5,0],[29,42,5,0,"_dependencyMap"],[29,56,5,0],[30,2,6,0],[30,6,6,0,"_engineIoParser"],[30,21,6,0],[30,24,6,0,"require"],[30,31,6,0],[30,32,6,0,"_dependencyMap"],[30,46,6,0],[31,2,7,0],[31,6,7,0,"_globalsNodeJs"],[31,20,7,0],[31,23,7,0,"require"],[31,30,7,0],[31,31,7,0,"_dependencyMap"],[31,45,7,0],[32,2,8,0],[32,8,8,6,"withEventListeners"],[32,26,8,24],[32,29,8,27],[32,36,8,34,"addEventListener"],[32,52,8,50],[32,57,8,55],[32,67,8,65],[32,71,9,4],[32,78,9,11,"removeEventListener"],[32,97,9,30],[32,102,9,35],[32,112,9,45],[33,2,10,0],[33,8,10,6,"OFFLINE_EVENT_LISTENERS"],[33,31,10,29],[33,34,10,32],[33,36,10,34],[34,2,11,0],[34,6,11,4,"withEventListeners"],[34,24,11,22],[34,26,11,24],[35,4,12,4],[36,4,13,4],[37,4,14,4,"addEventListener"],[37,20,14,20],[37,21,14,21],[37,30,14,30],[37,32,14,32],[37,38,14,38],[38,6,15,8,"OFFLINE_EVENT_LISTENERS"],[38,29,15,31],[38,30,15,32,"forEach"],[38,37,15,39],[38,38,15,41,"listener"],[38,46,15,49],[38,50,15,54,"listener"],[38,58,15,62],[38,59,15,63],[38,60,15,64],[38,61,15,65],[39,4,16,4],[39,5,16,5],[39,7,16,7],[39,12,16,12],[39,13,16,13],[40,2,17,0],[41,2,18,0],[42,0,19,0],[43,0,20,0],[44,0,21,0],[45,0,22,0],[46,0,23,0],[47,0,24,0],[48,0,25,0],[49,0,26,0],[50,0,27,0],[51,0,28,0],[52,0,29,0],[53,0,30,0],[54,0,31,0],[55,0,32,0],[56,0,33,0],[57,0,34,0],[58,0,35,0],[59,0,36,0],[60,0,37,0],[61,0,38,0],[62,0,39,0],[63,0,40,0],[64,2,41,7],[64,8,41,13,"SocketWithoutUpgrade"],[64,28,41,33],[64,37,41,42,"Emitter"],[64,62,41,49],[64,63,41,49,"Emitter"],[64,70,41,49],[64,71,41,50],[65,4,42,4],[66,0,43,0],[67,0,44,0],[68,0,45,0],[69,0,46,0],[70,0,47,0],[71,4,48,4,"constructor"],[71,15,48,15,"constructor"],[71,16,48,16,"uri"],[71,19,48,19],[71,21,48,21,"opts"],[71,25,48,25],[71,27,48,27],[72,6,49,8],[72,11,49,13],[72,12,49,14],[72,13,49,15],[73,6,50,8],[73,10,50,12],[73,11,50,13,"binaryType"],[73,21,50,23],[73,24,50,26,"defaultBinaryType"],[73,38,50,43],[73,39,50,43,"defaultBinaryType"],[73,56,50,43],[74,6,51,8],[74,10,51,12],[74,11,51,13,"writeBuffer"],[74,22,51,24],[74,25,51,27],[74,27,51,29],[75,6,52,8],[75,10,52,12],[75,11,52,13,"_prevBufferLen"],[75,25,52,27],[75,28,52,30],[75,29,52,31],[76,6,53,8],[76,10,53,12],[76,11,53,13,"_pingInterval"],[76,24,53,26],[76,27,53,29],[76,28,53,30],[76,29,53,31],[77,6,54,8],[77,10,54,12],[77,11,54,13,"_pingTimeout"],[77,23,54,25],[77,26,54,28],[77,27,54,29],[77,28,54,30],[78,6,55,8],[78,10,55,12],[78,11,55,13,"_maxPayload"],[78,22,55,24],[78,25,55,27],[78,26,55,28],[78,27,55,29],[79,6,56,8],[80,0,57,0],[81,0,58,0],[82,0,59,0],[83,6,60,8],[83,10,60,12],[83,11,60,13,"_pingTimeoutTime"],[83,27,60,29],[83,30,60,32,"Infinity"],[83,38,60,40],[84,6,61,8],[84,10,61,12,"uri"],[84,13,61,15],[84,17,61,19],[84,25,61,27],[84,30,61,32],[84,37,61,39,"uri"],[84,40,61,42],[84,42,61,44],[85,8,62,12,"opts"],[85,12,62,16],[85,15,62,19,"uri"],[85,18,62,22],[86,8,63,12,"uri"],[86,11,63,15],[86,14,63,18],[86,18,63,22],[87,6,64,8],[88,6,65,8],[88,10,65,12,"uri"],[88,13,65,15],[88,15,65,17],[89,8,66,12],[89,14,66,18,"parsedUri"],[89,23,66,27],[89,26,66,30],[89,30,66,30,"parse"],[89,48,66,35],[89,49,66,35,"parse"],[89,54,66,35],[89,56,66,36,"uri"],[89,59,66,39],[89,60,66,40],[90,8,67,12,"opts"],[90,12,67,16],[90,13,67,17,"hostname"],[90,21,67,25],[90,24,67,28,"parsedUri"],[90,33,67,37],[90,34,67,38,"host"],[90,38,67,42],[91,8,68,12,"opts"],[91,12,68,16],[91,13,68,17,"secure"],[91,19,68,23],[91,22,69,16,"parsedUri"],[91,31,69,25],[91,32,69,26,"protocol"],[91,40,69,34],[91,45,69,39],[91,52,69,46],[91,56,69,50,"parsedUri"],[91,65,69,59],[91,66,69,60,"protocol"],[91,74,69,68],[91,79,69,73],[91,84,69,78],[92,8,70,12,"opts"],[92,12,70,16],[92,13,70,17,"port"],[92,17,70,21],[92,20,70,24,"parsedUri"],[92,29,70,33],[92,30,70,34,"port"],[92,34,70,38],[93,8,71,12],[93,12,71,16,"parsedUri"],[93,21,71,25],[93,22,71,26,"query"],[93,27,71,31],[93,29,72,16,"opts"],[93,33,72,20],[93,34,72,21,"query"],[93,39,72,26],[93,42,72,29,"parsedUri"],[93,51,72,38],[93,52,72,39,"query"],[93,57,72,44],[94,6,73,8],[94,7,73,9],[94,13,74,13],[94,17,74,17,"opts"],[94,21,74,21],[94,22,74,22,"host"],[94,26,74,26],[94,28,74,28],[95,8,75,12,"opts"],[95,12,75,16],[95,13,75,17,"hostname"],[95,21,75,25],[95,24,75,28],[95,28,75,28,"parse"],[95,46,75,33],[95,47,75,33,"parse"],[95,52,75,33],[95,54,75,34,"opts"],[95,58,75,38],[95,59,75,39,"host"],[95,63,75,43],[95,64,75,44],[95,65,75,45,"host"],[95,69,75,49],[96,6,76,8],[97,6,77,8],[97,10,77,8,"installTimerFunctions"],[97,17,77,29],[97,18,77,29,"installTimerFunctions"],[97,39,77,29],[97,41,77,30],[97,45,77,34],[97,47,77,36,"opts"],[97,51,77,40],[97,52,77,41],[98,6,78,8],[98,10,78,12],[98,11,78,13,"secure"],[98,17,78,19],[98,20,79,12],[98,24,79,16],[98,28,79,20,"opts"],[98,32,79,24],[98,33,79,25,"secure"],[98,39,79,31],[98,42,80,18,"opts"],[98,46,80,22],[98,47,80,23,"secure"],[98,53,80,29],[98,56,81,18],[98,63,81,25,"location"],[98,71,81,33],[98,76,81,38],[98,87,81,49],[98,91,81,53],[98,99,81,61],[98,104,81,66,"location"],[98,112,81,74],[98,113,81,75,"protocol"],[98,121,81,83],[99,6,82,8],[99,10,82,12,"opts"],[99,14,82,16],[99,15,82,17,"hostname"],[99,23,82,25],[99,27,82,29],[99,28,82,30,"opts"],[99,32,82,34],[99,33,82,35,"port"],[99,37,82,39],[99,39,82,41],[100,8,83,12],[101,8,84,12,"opts"],[101,12,84,16],[101,13,84,17,"port"],[101,17,84,21],[101,20,84,24],[101,24,84,28],[101,25,84,29,"secure"],[101,31,84,35],[101,34,84,38],[101,39,84,43],[101,42,84,46],[101,46,84,50],[102,6,85,8],[103,6,86,8],[103,10,86,12],[103,11,86,13,"hostname"],[103,19,86,21],[103,22,87,12,"opts"],[103,26,87,16],[103,27,87,17,"hostname"],[103,35,87,25],[103,40,88,17],[103,47,88,24,"location"],[103,55,88,32],[103,60,88,37],[103,71,88,48],[103,74,88,51,"location"],[103,82,88,59],[103,83,88,60,"hostname"],[103,91,88,68],[103,94,88,71],[103,105,88,82],[103,106,88,83],[104,6,89,8],[104,10,89,12],[104,11,89,13,"port"],[104,15,89,17],[104,18,90,12,"opts"],[104,22,90,16],[104,23,90,17,"port"],[104,27,90,21],[104,32,91,17],[104,39,91,24,"location"],[104,47,91,32],[104,52,91,37],[104,63,91,48],[104,67,91,52,"location"],[104,75,91,60],[104,76,91,61,"port"],[104,80,91,65],[104,83,92,22,"location"],[104,91,92,30],[104,92,92,31,"port"],[104,96,92,35],[104,99,93,22],[104,103,93,26],[104,104,93,27,"secure"],[104,110,93,33],[104,113,94,26],[104,118,94,31],[104,121,95,26],[104,125,95,30],[104,126,95,31],[105,6,96,8],[105,10,96,12],[105,11,96,13,"transports"],[105,21,96,23],[105,24,96,26],[105,26,96,28],[106,6,97,8],[106,10,97,12],[106,11,97,13,"_transportsByName"],[106,28,97,30],[106,31,97,33],[106,32,97,34],[106,33,97,35],[107,6,98,8,"opts"],[107,10,98,12],[107,11,98,13,"transports"],[107,21,98,23],[107,22,98,24,"forEach"],[107,29,98,31],[107,30,98,33,"t"],[107,31,98,34],[107,35,98,39],[108,8,99,12],[108,14,99,18,"transportName"],[108,27,99,31],[108,30,99,34,"t"],[108,31,99,35],[108,32,99,36,"prototype"],[108,41,99,45],[108,42,99,46,"name"],[108,46,99,50],[109,8,100,12],[109,12,100,16],[109,13,100,17,"transports"],[109,23,100,27],[109,24,100,28,"push"],[109,28,100,32],[109,29,100,33,"transportName"],[109,42,100,46],[109,43,100,47],[110,8,101,12],[110,12,101,16],[110,13,101,17,"_transportsByName"],[110,30,101,34],[110,31,101,35,"transportName"],[110,44,101,48],[110,45,101,49],[110,48,101,52,"t"],[110,49,101,53],[111,6,102,8],[111,7,102,9],[111,8,102,10],[112,6,103,8],[112,10,103,12],[112,11,103,13,"opts"],[112,15,103,17],[112,18,103,20,"Object"],[112,24,103,26],[112,25,103,27,"assign"],[112,31,103,33],[112,32,103,34],[113,8,104,12,"path"],[113,12,104,16],[113,14,104,18],[113,26,104,30],[114,8,105,12,"agent"],[114,13,105,17],[114,15,105,19],[114,20,105,24],[115,8,106,12,"withCredentials"],[115,23,106,27],[115,25,106,29],[115,30,106,34],[116,8,107,12,"upgrade"],[116,15,107,19],[116,17,107,21],[116,21,107,25],[117,8,108,12,"timestampParam"],[117,22,108,26],[117,24,108,28],[117,27,108,31],[118,8,109,12,"rememberUpgrade"],[118,23,109,27],[118,25,109,29],[118,30,109,34],[119,8,110,12,"addTrailingSlash"],[119,24,110,28],[119,26,110,30],[119,30,110,34],[120,8,111,12,"rejectUnauthorized"],[120,26,111,30],[120,28,111,32],[120,32,111,36],[121,8,112,12,"perMessageDeflate"],[121,25,112,29],[121,27,112,31],[122,10,113,16,"threshold"],[122,19,113,25],[122,21,113,27],[123,8,114,12],[123,9,114,13],[124,8,115,12,"transportOptions"],[124,24,115,28],[124,26,115,30],[124,27,115,31],[124,28,115,32],[125,8,116,12,"closeOnBeforeunload"],[125,27,116,31],[125,29,116,33],[126,6,117,8],[126,7,117,9],[126,9,117,11,"opts"],[126,13,117,15],[126,14,117,16],[127,6,118,8],[127,10,118,12],[127,11,118,13,"opts"],[127,15,118,17],[127,16,118,18,"path"],[127,20,118,22],[127,23,119,12],[127,27,119,16],[127,28,119,17,"opts"],[127,32,119,21],[127,33,119,22,"path"],[127,37,119,26],[127,38,119,27,"replace"],[127,45,119,34],[127,46,119,35],[127,51,119,40],[127,53,119,42],[127,55,119,44],[127,56,119,45],[127,60,120,17],[127,64,120,21],[127,65,120,22,"opts"],[127,69,120,26],[127,70,120,27,"addTrailingSlash"],[127,86,120,43],[127,89,120,46],[127,92,120,49],[127,95,120,52],[127,97,120,54],[127,98,120,55],[128,6,121,8],[128,10,121,12],[128,17,121,19],[128,21,121,23],[128,22,121,24,"opts"],[128,26,121,28],[128,27,121,29,"query"],[128,32,121,34],[128,37,121,39],[128,45,121,47],[128,47,121,49],[129,8,122,12],[129,12,122,16],[129,13,122,17,"opts"],[129,17,122,21],[129,18,122,22,"query"],[129,23,122,27],[129,26,122,30],[129,30,122,30,"decode"],[129,47,122,36],[129,48,122,36,"decode"],[129,54,122,36],[129,56,122,37],[129,60,122,41],[129,61,122,42,"opts"],[129,65,122,46],[129,66,122,47,"query"],[129,71,122,52],[129,72,122,53],[130,6,123,8],[131,6,124,8],[131,10,124,12,"withEventListeners"],[131,28,124,30],[131,30,124,32],[132,8,125,12],[132,12,125,16],[132,16,125,20],[132,17,125,21,"opts"],[132,21,125,25],[132,22,125,26,"closeOnBeforeunload"],[132,41,125,45],[132,43,125,47],[133,10,126,16],[134,10,127,16],[135,10,128,16],[136,10,129,16],[136,14,129,20],[136,15,129,21,"_beforeunloadEventListener"],[136,41,129,47],[136,44,129,50],[136,50,129,56],[137,12,130,20],[137,16,130,24],[137,20,130,28],[137,21,130,29,"transport"],[137,30,130,38],[137,32,130,40],[138,14,131,24],[139,14,132,24],[139,18,132,28],[139,19,132,29,"transport"],[139,28,132,38],[139,29,132,39,"removeAllListeners"],[139,47,132,57],[139,48,132,58],[139,49,132,59],[140,14,133,24],[140,18,133,28],[140,19,133,29,"transport"],[140,28,133,38],[140,29,133,39,"close"],[140,34,133,44],[140,35,133,45],[140,36,133,46],[141,12,134,20],[142,10,135,16],[142,11,135,17],[143,10,136,16,"addEventListener"],[143,26,136,32],[143,27,136,33],[143,41,136,47],[143,43,136,49],[143,47,136,53],[143,48,136,54,"_beforeunloadEventListener"],[143,74,136,80],[143,76,136,82],[143,81,136,87],[143,82,136,88],[144,8,137,12],[145,8,138,12],[145,12,138,16],[145,16,138,20],[145,17,138,21,"hostname"],[145,25,138,29],[145,30,138,34],[145,41,138,45],[145,43,138,47],[146,10,139,16],[146,14,139,20],[146,15,139,21,"_offlineEventListener"],[146,36,139,42],[146,39,139,45],[146,45,139,51],[147,12,140,20],[147,16,140,24],[147,17,140,25,"_onClose"],[147,25,140,33],[147,26,140,34],[147,43,140,51],[147,45,140,53],[148,14,141,24,"description"],[148,25,141,35],[148,27,141,37],[149,12,142,20],[149,13,142,21],[149,14,142,22],[150,10,143,16],[150,11,143,17],[151,10,144,16,"OFFLINE_EVENT_LISTENERS"],[151,33,144,39],[151,34,144,40,"push"],[151,38,144,44],[151,39,144,45],[151,43,144,49],[151,44,144,50,"_offlineEventListener"],[151,65,144,71],[151,66,144,72],[152,8,145,12],[153,6,146,8],[154,6,147,8],[154,10,147,12],[154,14,147,16],[154,15,147,17,"opts"],[154,19,147,21],[154,20,147,22,"withCredentials"],[154,35,147,37],[154,37,147,39],[155,8,148,12],[155,12,148,16],[155,13,148,17,"_cookieJar"],[155,23,148,27],[155,26,148,30],[155,30,148,30,"createCookieJar"],[155,44,148,45],[155,45,148,45,"createCookieJar"],[155,60,148,45],[155,62,148,46],[155,63,148,47],[156,6,149,8],[157,6,150,8],[157,10,150,12],[157,11,150,13,"_open"],[157,16,150,18],[157,17,150,19],[157,18,150,20],[158,4,151,4],[159,4,152,4],[160,0,153,0],[161,0,154,0],[162,0,155,0],[163,0,156,0],[164,0,157,0],[165,0,158,0],[166,4,159,4,"createTransport"],[166,19,159,19,"createTransport"],[166,20,159,20,"name"],[166,24,159,24],[166,26,159,26],[167,6,160,8],[167,12,160,14,"query"],[167,17,160,19],[167,20,160,22,"Object"],[167,26,160,28],[167,27,160,29,"assign"],[167,33,160,35],[167,34,160,36],[167,35,160,37],[167,36,160,38],[167,38,160,40],[167,42,160,44],[167,43,160,45,"opts"],[167,47,160,49],[167,48,160,50,"query"],[167,53,160,55],[167,54,160,56],[168,6,161,8],[169,6,162,8,"query"],[169,11,162,13],[169,12,162,14,"EIO"],[169,15,162,17],[169,18,162,20,"protocol"],[169,33,162,28],[169,34,162,28,"protocol"],[169,42,162,28],[170,6,163,8],[171,6,164,8,"query"],[171,11,164,13],[171,12,164,14,"transport"],[171,21,164,23],[171,24,164,26,"name"],[171,28,164,30],[172,6,165,8],[173,6,166,8],[173,10,166,12],[173,14,166,16],[173,15,166,17,"id"],[173,17,166,19],[173,19,167,12,"query"],[173,24,167,17],[173,25,167,18,"sid"],[173,28,167,21],[173,31,167,24],[173,35,167,28],[173,36,167,29,"id"],[173,38,167,31],[174,6,168,8],[174,12,168,14,"opts"],[174,16,168,18],[174,19,168,21,"Object"],[174,25,168,27],[174,26,168,28,"assign"],[174,32,168,34],[174,33,168,35],[174,34,168,36],[174,35,168,37],[174,37,168,39],[174,41,168,43],[174,42,168,44,"opts"],[174,46,168,48],[174,48,168,50],[175,8,169,12,"query"],[175,13,169,17],[176,8,170,12,"socket"],[176,14,170,18],[176,16,170,20],[176,20,170,24],[177,8,171,12,"hostname"],[177,16,171,20],[177,18,171,22],[177,22,171,26],[177,23,171,27,"hostname"],[177,31,171,35],[178,8,172,12,"secure"],[178,14,172,18],[178,16,172,20],[178,20,172,24],[178,21,172,25,"secure"],[178,27,172,31],[179,8,173,12,"port"],[179,12,173,16],[179,14,173,18],[179,18,173,22],[179,19,173,23,"port"],[180,6,174,8],[180,7,174,9],[180,9,174,11],[180,13,174,15],[180,14,174,16,"opts"],[180,18,174,20],[180,19,174,21,"transportOptions"],[180,35,174,37],[180,36,174,38,"name"],[180,40,174,42],[180,41,174,43],[180,42,174,44],[181,6,175,8],[181,13,175,15],[181,17,175,19],[181,21,175,23],[181,22,175,24,"_transportsByName"],[181,39,175,41],[181,40,175,42,"name"],[181,44,175,46],[181,45,175,47],[181,46,175,48,"opts"],[181,50,175,52],[181,51,175,53],[182,4,176,4],[183,4,177,4],[184,0,178,0],[185,0,179,0],[186,0,180,0],[187,0,181,0],[188,4,182,4,"_open"],[188,9,182,9,"_open"],[188,10,182,9],[188,12,182,12],[189,6,183,8],[189,10,183,12],[189,14,183,16],[189,15,183,17,"transports"],[189,25,183,27],[189,26,183,28,"length"],[189,32,183,34],[189,37,183,39],[189,38,183,40],[189,40,183,42],[190,8,184,12],[191,8,185,12],[191,12,185,16],[191,13,185,17,"setTimeoutFn"],[191,25,185,29],[191,26,185,30],[191,32,185,36],[192,10,186,16],[192,14,186,20],[192,15,186,21,"emitReserved"],[192,27,186,33],[192,28,186,34],[192,35,186,41],[192,37,186,43],[192,62,186,68],[192,63,186,69],[193,8,187,12],[193,9,187,13],[193,11,187,15],[193,12,187,16],[193,13,187,17],[194,8,188,12],[195,6,189,8],[196,6,190,8],[196,12,190,14,"transportName"],[196,25,190,27],[196,28,190,30],[196,32,190,34],[196,33,190,35,"opts"],[196,37,190,39],[196,38,190,40,"rememberUpgrade"],[196,53,190,55],[196,57,191,12,"SocketWithoutUpgrade"],[196,77,191,32],[196,78,191,33,"priorWebsocketSuccess"],[196,99,191,54],[196,103,192,12],[196,107,192,16],[196,108,192,17,"transports"],[196,118,192,27],[196,119,192,28,"indexOf"],[196,126,192,35],[196,127,192,36],[196,138,192,47],[196,139,192,48],[196,144,192,53],[196,145,192,54],[196,146,192,55],[196,149,193,14],[196,160,193,25],[196,163,194,14],[196,167,194,18],[196,168,194,19,"transports"],[196,178,194,29],[196,179,194,30],[196,180,194,31],[196,181,194,32],[197,6,195,8],[197,10,195,12],[197,11,195,13,"readyState"],[197,21,195,23],[197,24,195,26],[197,33,195,35],[198,6,196,8],[198,12,196,14,"transport"],[198,21,196,23],[198,24,196,26],[198,28,196,30],[198,29,196,31,"createTransport"],[198,44,196,46],[198,45,196,47,"transportName"],[198,58,196,60],[198,59,196,61],[199,6,197,8,"transport"],[199,15,197,17],[199,16,197,18,"open"],[199,20,197,22],[199,21,197,23],[199,22,197,24],[200,6,198,8],[200,10,198,12],[200,11,198,13,"setTransport"],[200,23,198,25],[200,24,198,26,"transport"],[200,33,198,35],[200,34,198,36],[201,4,199,4],[202,4,200,4],[203,0,201,0],[204,0,202,0],[205,0,203,0],[206,0,204,0],[207,4,205,4,"setTransport"],[207,16,205,16,"setTransport"],[207,17,205,17,"transport"],[207,26,205,26],[207,28,205,28],[208,6,206,8],[208,10,206,12],[208,14,206,16],[208,15,206,17,"transport"],[208,24,206,26],[208,26,206,28],[209,8,207,12],[209,12,207,16],[209,13,207,17,"transport"],[209,22,207,26],[209,23,207,27,"removeAllListeners"],[209,41,207,45],[209,42,207,46],[209,43,207,47],[210,6,208,8],[211,6,209,8],[212,6,210,8],[212,10,210,12],[212,11,210,13,"transport"],[212,20,210,22],[212,23,210,25,"transport"],[212,32,210,34],[213,6,211,8],[214,6,212,8,"transport"],[214,15,212,17],[214,16,213,13,"on"],[214,18,213,15],[214,19,213,16],[214,26,213,23],[214,28,213,25],[214,32,213,29],[214,33,213,30,"_onDrain"],[214,41,213,38],[214,42,213,39,"bind"],[214,46,213,43],[214,47,213,44],[214,51,213,48],[214,52,213,49],[214,53,213,50],[214,54,214,13,"on"],[214,56,214,15],[214,57,214,16],[214,65,214,24],[214,67,214,26],[214,71,214,30],[214,72,214,31,"_onPacket"],[214,81,214,40],[214,82,214,41,"bind"],[214,86,214,45],[214,87,214,46],[214,91,214,50],[214,92,214,51],[214,93,214,52],[214,94,215,13,"on"],[214,96,215,15],[214,97,215,16],[214,104,215,23],[214,106,215,25],[214,110,215,29],[214,111,215,30,"_onError"],[214,119,215,38],[214,120,215,39,"bind"],[214,124,215,43],[214,125,215,44],[214,129,215,48],[214,130,215,49],[214,131,215,50],[214,132,216,13,"on"],[214,134,216,15],[214,135,216,16],[214,142,216,23],[214,144,216,26,"reason"],[214,150,216,32],[214,154,216,37],[214,158,216,41],[214,159,216,42,"_onClose"],[214,167,216,50],[214,168,216,51],[214,185,216,68],[214,187,216,70,"reason"],[214,193,216,76],[214,194,216,77],[214,195,216,78],[215,4,217,4],[216,4,218,4],[217,0,219,0],[218,0,220,0],[219,0,221,0],[220,0,222,0],[221,4,223,4,"onOpen"],[221,10,223,10,"onOpen"],[221,11,223,10],[221,13,223,13],[222,6,224,8],[222,10,224,12],[222,11,224,13,"readyState"],[222,21,224,23],[222,24,224,26],[222,30,224,32],[223,6,225,8,"SocketWithoutUpgrade"],[223,26,225,28],[223,27,225,29,"priorWebsocketSuccess"],[223,48,225,50],[223,51,226,12],[223,62,226,23],[223,67,226,28],[223,71,226,32],[223,72,226,33,"transport"],[223,81,226,42],[223,82,226,43,"name"],[223,86,226,47],[224,6,227,8],[224,10,227,12],[224,11,227,13,"emitReserved"],[224,23,227,25],[224,24,227,26],[224,30,227,32],[224,31,227,33],[225,6,228,8],[225,10,228,12],[225,11,228,13,"flush"],[225,16,228,18],[225,17,228,19],[225,18,228,20],[226,4,229,4],[227,4,230,4],[228,0,231,0],[229,0,232,0],[230,0,233,0],[231,0,234,0],[232,4,235,4,"_onPacket"],[232,13,235,13,"_onPacket"],[232,14,235,14,"packet"],[232,20,235,20],[232,22,235,22],[233,6,236,8],[233,10,236,12],[233,19,236,21],[233,24,236,26],[233,28,236,30],[233,29,236,31,"readyState"],[233,39,236,41],[233,43,237,12],[233,49,237,18],[233,54,237,23],[233,58,237,27],[233,59,237,28,"readyState"],[233,69,237,38],[233,73,238,12],[233,82,238,21],[233,87,238,26],[233,91,238,30],[233,92,238,31,"readyState"],[233,102,238,41],[233,104,238,43],[234,8,239,12],[234,12,239,16],[234,13,239,17,"emitReserved"],[234,25,239,29],[234,26,239,30],[234,34,239,38],[234,36,239,40,"packet"],[234,42,239,46],[234,43,239,47],[235,8,240,12],[236,8,241,12],[236,12,241,16],[236,13,241,17,"emitReserved"],[236,25,241,29],[236,26,241,30],[236,37,241,41],[236,38,241,42],[237,8,242,12],[237,16,242,20,"packet"],[237,22,242,26],[237,23,242,27,"type"],[237,27,242,31],[238,10,243,16],[238,15,243,21],[238,21,243,27],[239,12,244,20],[239,16,244,24],[239,17,244,25,"onHandshake"],[239,28,244,36],[239,29,244,37,"JSON"],[239,33,244,41],[239,34,244,42,"parse"],[239,39,244,47],[239,40,244,48,"packet"],[239,46,244,54],[239,47,244,55,"data"],[239,51,244,59],[239,52,244,60],[239,53,244,61],[240,12,245,20],[241,10,246,16],[241,15,246,21],[241,21,246,27],[242,12,247,20],[242,16,247,24],[242,17,247,25,"_sendPacket"],[242,28,247,36],[242,29,247,37],[242,35,247,43],[242,36,247,44],[243,12,248,20],[243,16,248,24],[243,17,248,25,"emitReserved"],[243,29,248,37],[243,30,248,38],[243,36,248,44],[243,37,248,45],[244,12,249,20],[244,16,249,24],[244,17,249,25,"emitReserved"],[244,29,249,37],[244,30,249,38],[244,36,249,44],[244,37,249,45],[245,12,250,20],[245,16,250,24],[245,17,250,25,"_resetPingTimeout"],[245,34,250,42],[245,35,250,43],[245,36,250,44],[246,12,251,20],[247,10,252,16],[247,15,252,21],[247,22,252,28],[248,12,253,20],[248,18,253,26,"err"],[248,21,253,29],[248,24,253,32],[248,28,253,36,"Error"],[248,33,253,41],[248,34,253,42],[248,48,253,56],[248,49,253,57],[249,12,254,20],[250,12,255,20,"err"],[250,15,255,23],[250,16,255,24,"code"],[250,20,255,28],[250,23,255,31,"packet"],[250,29,255,37],[250,30,255,38,"data"],[250,34,255,42],[251,12,256,20],[251,16,256,24],[251,17,256,25,"_onError"],[251,25,256,33],[251,26,256,34,"err"],[251,29,256,37],[251,30,256,38],[252,12,257,20],[253,10,258,16],[253,15,258,21],[253,24,258,30],[254,12,259,20],[254,16,259,24],[254,17,259,25,"emitReserved"],[254,29,259,37],[254,30,259,38],[254,36,259,44],[254,38,259,46,"packet"],[254,44,259,52],[254,45,259,53,"data"],[254,49,259,57],[254,50,259,58],[255,12,260,20],[255,16,260,24],[255,17,260,25,"emitReserved"],[255,29,260,37],[255,30,260,38],[255,39,260,47],[255,41,260,49,"packet"],[255,47,260,55],[255,48,260,56,"data"],[255,52,260,60],[255,53,260,61],[256,12,261,20],[257,8,262,12],[258,6,263,8],[258,7,263,9],[258,13,264,13],[258,14,265,8],[259,4,266,4],[260,4,267,4],[261,0,268,0],[262,0,269,0],[263,0,270,0],[264,0,271,0],[265,0,272,0],[266,4,273,4,"onHandshake"],[266,15,273,15,"onHandshake"],[266,16,273,16,"data"],[266,20,273,20],[266,22,273,22],[267,6,274,8],[267,10,274,12],[267,11,274,13,"emitReserved"],[267,23,274,25],[267,24,274,26],[267,35,274,37],[267,37,274,39,"data"],[267,41,274,43],[267,42,274,44],[268,6,275,8],[268,10,275,12],[268,11,275,13,"id"],[268,13,275,15],[268,16,275,18,"data"],[268,20,275,22],[268,21,275,23,"sid"],[268,24,275,26],[269,6,276,8],[269,10,276,12],[269,11,276,13,"transport"],[269,20,276,22],[269,21,276,23,"query"],[269,26,276,28],[269,27,276,29,"sid"],[269,30,276,32],[269,33,276,35,"data"],[269,37,276,39],[269,38,276,40,"sid"],[269,41,276,43],[270,6,277,8],[270,10,277,12],[270,11,277,13,"_pingInterval"],[270,24,277,26],[270,27,277,29,"data"],[270,31,277,33],[270,32,277,34,"pingInterval"],[270,44,277,46],[271,6,278,8],[271,10,278,12],[271,11,278,13,"_pingTimeout"],[271,23,278,25],[271,26,278,28,"data"],[271,30,278,32],[271,31,278,33,"pingTimeout"],[271,42,278,44],[272,6,279,8],[272,10,279,12],[272,11,279,13,"_maxPayload"],[272,22,279,24],[272,25,279,27,"data"],[272,29,279,31],[272,30,279,32,"maxPayload"],[272,40,279,42],[273,6,280,8],[273,10,280,12],[273,11,280,13,"onOpen"],[273,17,280,19],[273,18,280,20],[273,19,280,21],[274,6,281,8],[275,6,282,8],[275,10,282,12],[275,18,282,20],[275,23,282,25],[275,27,282,29],[275,28,282,30,"readyState"],[275,38,282,40],[275,40,283,12],[276,6,284,8],[276,10,284,12],[276,11,284,13,"_resetPingTimeout"],[276,28,284,30],[276,29,284,31],[276,30,284,32],[277,4,285,4],[278,4,286,4],[279,0,287,0],[280,0,288,0],[281,0,289,0],[282,0,290,0],[283,4,291,4,"_resetPingTimeout"],[283,21,291,21,"_resetPingTimeout"],[283,22,291,21],[283,24,291,24],[284,6,292,8],[284,10,292,12],[284,11,292,13,"clearTimeoutFn"],[284,25,292,27],[284,26,292,28],[284,30,292,32],[284,31,292,33,"_pingTimeoutTimer"],[284,48,292,50],[284,49,292,51],[285,6,293,8],[285,12,293,14,"delay"],[285,17,293,19],[285,20,293,22],[285,24,293,26],[285,25,293,27,"_pingInterval"],[285,38,293,40],[285,41,293,43],[285,45,293,47],[285,46,293,48,"_pingTimeout"],[285,58,293,60],[286,6,294,8],[286,10,294,12],[286,11,294,13,"_pingTimeoutTime"],[286,27,294,29],[286,30,294,32,"Date"],[286,34,294,36],[286,35,294,37,"now"],[286,38,294,40],[286,39,294,41],[286,40,294,42],[286,43,294,45,"delay"],[286,48,294,50],[287,6,295,8],[287,10,295,12],[287,11,295,13,"_pingTimeoutTimer"],[287,28,295,30],[287,31,295,33],[287,35,295,37],[287,36,295,38,"setTimeoutFn"],[287,48,295,50],[287,49,295,51],[287,55,295,57],[288,8,296,12],[288,12,296,16],[288,13,296,17,"_onClose"],[288,21,296,25],[288,22,296,26],[288,36,296,40],[288,37,296,41],[289,6,297,8],[289,7,297,9],[289,9,297,11,"delay"],[289,14,297,16],[289,15,297,17],[290,6,298,8],[290,10,298,12],[290,14,298,16],[290,15,298,17,"opts"],[290,19,298,21],[290,20,298,22,"autoUnref"],[290,29,298,31],[290,31,298,33],[291,8,299,12],[291,12,299,16],[291,13,299,17,"_pingTimeoutTimer"],[291,30,299,34],[291,31,299,35,"unref"],[291,36,299,40],[291,37,299,41],[291,38,299,42],[292,6,300,8],[293,4,301,4],[294,4,302,4],[295,0,303,0],[296,0,304,0],[297,0,305,0],[298,0,306,0],[299,4,307,4,"_onDrain"],[299,12,307,12,"_onDrain"],[299,13,307,12],[299,15,307,15],[300,6,308,8],[300,10,308,12],[300,11,308,13,"writeBuffer"],[300,22,308,24],[300,23,308,25,"splice"],[300,29,308,31],[300,30,308,32],[300,31,308,33],[300,33,308,35],[300,37,308,39],[300,38,308,40,"_prevBufferLen"],[300,52,308,54],[300,53,308,55],[301,6,309,8],[302,6,310,8],[303,6,311,8],[304,6,312,8],[304,10,312,12],[304,11,312,13,"_prevBufferLen"],[304,25,312,27],[304,28,312,30],[304,29,312,31],[305,6,313,8],[305,10,313,12],[305,11,313,13],[305,16,313,18],[305,20,313,22],[305,21,313,23,"writeBuffer"],[305,32,313,34],[305,33,313,35,"length"],[305,39,313,41],[305,41,313,43],[306,8,314,12],[306,12,314,16],[306,13,314,17,"emitReserved"],[306,25,314,29],[306,26,314,30],[306,33,314,37],[306,34,314,38],[307,6,315,8],[307,7,315,9],[307,13,316,13],[308,8,317,12],[308,12,317,16],[308,13,317,17,"flush"],[308,18,317,22],[308,19,317,23],[308,20,317,24],[309,6,318,8],[310,4,319,4],[311,4,320,4],[312,0,321,0],[313,0,322,0],[314,0,323,0],[315,0,324,0],[316,4,325,4,"flush"],[316,9,325,9,"flush"],[316,10,325,9],[316,12,325,12],[317,6,326,8],[317,10,326,12],[317,18,326,20],[317,23,326,25],[317,27,326,29],[317,28,326,30,"readyState"],[317,38,326,40],[317,42,327,12],[317,46,327,16],[317,47,327,17,"transport"],[317,56,327,26],[317,57,327,27,"writable"],[317,65,327,35],[317,69,328,12],[317,70,328,13],[317,74,328,17],[317,75,328,18,"upgrading"],[317,84,328,27],[317,88,329,12],[317,92,329,16],[317,93,329,17,"writeBuffer"],[317,104,329,28],[317,105,329,29,"length"],[317,111,329,35],[317,113,329,37],[318,8,330,12],[318,14,330,18,"packets"],[318,21,330,25],[318,24,330,28],[318,28,330,32],[318,29,330,33,"_getWritablePackets"],[318,48,330,52],[318,49,330,53],[318,50,330,54],[319,8,331,12],[319,12,331,16],[319,13,331,17,"transport"],[319,22,331,26],[319,23,331,27,"send"],[319,27,331,31],[319,28,331,32,"packets"],[319,35,331,39],[319,36,331,40],[320,8,332,12],[321,8,333,12],[322,8,334,12],[322,12,334,16],[322,13,334,17,"_prevBufferLen"],[322,27,334,31],[322,30,334,34,"packets"],[322,37,334,41],[322,38,334,42,"length"],[322,44,334,48],[323,8,335,12],[323,12,335,16],[323,13,335,17,"emitReserved"],[323,25,335,29],[323,26,335,30],[323,33,335,37],[323,34,335,38],[324,6,336,8],[325,4,337,4],[326,4,338,4],[327,0,339,0],[328,0,340,0],[329,0,341,0],[330,0,342,0],[331,0,343,0],[332,4,344,4,"_getWritablePackets"],[332,23,344,23,"_getWritablePackets"],[332,24,344,23],[332,26,344,26],[333,6,345,8],[333,12,345,14,"shouldCheckPayloadSize"],[333,34,345,36],[333,37,345,39],[333,41,345,43],[333,42,345,44,"_maxPayload"],[333,53,345,55],[333,57,346,12],[333,61,346,16],[333,62,346,17,"transport"],[333,71,346,26],[333,72,346,27,"name"],[333,76,346,31],[333,81,346,36],[333,90,346,45],[333,94,347,12],[333,98,347,16],[333,99,347,17,"writeBuffer"],[333,110,347,28],[333,111,347,29,"length"],[333,117,347,35],[333,120,347,38],[333,121,347,39],[334,6,348,8],[334,10,348,12],[334,11,348,13,"shouldCheckPayloadSize"],[334,33,348,35],[334,35,348,37],[335,8,349,12],[335,15,349,19],[335,19,349,23],[335,20,349,24,"writeBuffer"],[335,31,349,35],[336,6,350,8],[337,6,351,8],[337,10,351,12,"payloadSize"],[337,21,351,23],[337,24,351,26],[337,25,351,27],[337,26,351,28],[337,27,351,29],[338,6,352,8],[338,11,352,13],[338,15,352,17,"i"],[338,16,352,18],[338,19,352,21],[338,20,352,22],[338,22,352,24,"i"],[338,23,352,25],[338,26,352,28],[338,30,352,32],[338,31,352,33,"writeBuffer"],[338,42,352,44],[338,43,352,45,"length"],[338,49,352,51],[338,51,352,53,"i"],[338,52,352,54],[338,54,352,56],[338,56,352,58],[339,8,353,12],[339,14,353,18,"data"],[339,18,353,22],[339,21,353,25],[339,25,353,29],[339,26,353,30,"writeBuffer"],[339,37,353,41],[339,38,353,42,"i"],[339,39,353,43],[339,40,353,44],[339,41,353,45,"data"],[339,45,353,49],[340,8,354,12],[340,12,354,16,"data"],[340,16,354,20],[340,18,354,22],[341,10,355,16,"payloadSize"],[341,21,355,27],[341,25,355,31],[341,29,355,31,"byteLength"],[341,36,355,41],[341,37,355,41,"byteLength"],[341,47,355,41],[341,49,355,42,"data"],[341,53,355,46],[341,54,355,47],[342,8,356,12],[343,8,357,12],[343,12,357,16,"i"],[343,13,357,17],[343,16,357,20],[343,17,357,21],[343,21,357,25,"payloadSize"],[343,32,357,36],[343,35,357,39],[343,39,357,43],[343,40,357,44,"_maxPayload"],[343,51,357,55],[343,53,357,57],[344,10,358,16],[344,17,358,23],[344,21,358,27],[344,22,358,28,"writeBuffer"],[344,33,358,39],[344,34,358,40,"slice"],[344,39,358,45],[344,40,358,46],[344,41,358,47],[344,43,358,49,"i"],[344,44,358,50],[344,45,358,51],[345,8,359,12],[346,8,360,12,"payloadSize"],[346,19,360,23],[346,23,360,27],[346,24,360,28],[346,25,360,29],[346,26,360,30],[347,6,361,8],[348,6,362,8],[348,13,362,15],[348,17,362,19],[348,18,362,20,"writeBuffer"],[348,29,362,31],[349,4,363,4],[350,4,364,4],[351,0,365,0],[352,0,366,0],[353,0,367,0],[354,0,368,0],[355,0,369,0],[356,0,370,0],[357,0,371,0],[358,0,372,0],[359,4,373,4],[360,4,373,18,"_hasPingExpired"],[360,19,373,33,"_hasPingExpired"],[360,20,373,33],[360,22,373,36],[361,6,374,8],[361,10,374,12],[361,11,374,13],[361,15,374,17],[361,16,374,18,"_pingTimeoutTime"],[361,32,374,34],[361,34,375,12],[361,41,375,19],[361,45,375,23],[362,6,376,8],[362,12,376,14,"hasExpired"],[362,22,376,24],[362,25,376,27,"Date"],[362,29,376,31],[362,30,376,32,"now"],[362,33,376,35],[362,34,376,36],[362,35,376,37],[362,38,376,40],[362,42,376,44],[362,43,376,45,"_pingTimeoutTime"],[362,59,376,61],[363,6,377,8],[363,10,377,12,"hasExpired"],[363,20,377,22],[363,22,377,24],[364,8,378,12],[364,12,378,16],[364,13,378,17,"_pingTimeoutTime"],[364,29,378,33],[364,32,378,36],[364,33,378,37],[365,8,379,12],[365,12,379,12,"nextTick"],[365,26,379,20],[365,27,379,20,"nextTick"],[365,35,379,20],[365,37,379,21],[365,43,379,27],[366,10,380,16],[366,14,380,20],[366,15,380,21,"_onClose"],[366,23,380,29],[366,24,380,30],[366,38,380,44],[366,39,380,45],[367,8,381,12],[367,9,381,13],[367,11,381,15],[367,15,381,19],[367,16,381,20,"setTimeoutFn"],[367,28,381,32],[367,29,381,33],[368,6,382,8],[369,6,383,8],[369,13,383,15,"hasExpired"],[369,23,383,25],[370,4,384,4],[371,4,385,4],[372,0,386,0],[373,0,387,0],[374,0,388,0],[375,0,389,0],[376,0,390,0],[377,0,391,0],[378,0,392,0],[379,4,393,4,"write"],[379,9,393,9,"write"],[379,10,393,10,"msg"],[379,13,393,13],[379,15,393,15,"options"],[379,22,393,22],[379,24,393,24,"fn"],[379,26,393,26],[379,28,393,28],[380,6,394,8],[380,10,394,12],[380,11,394,13,"_sendPacket"],[380,22,394,24],[380,23,394,25],[380,32,394,34],[380,34,394,36,"msg"],[380,37,394,39],[380,39,394,41,"options"],[380,46,394,48],[380,48,394,50,"fn"],[380,50,394,52],[380,51,394,53],[381,6,395,8],[381,13,395,15],[381,17,395,19],[382,4,396,4],[383,4,397,4],[384,0,398,0],[385,0,399,0],[386,0,400,0],[387,0,401,0],[388,0,402,0],[389,0,403,0],[390,0,404,0],[391,4,405,4,"send"],[391,8,405,8,"send"],[391,9,405,9,"msg"],[391,12,405,12],[391,14,405,14,"options"],[391,21,405,21],[391,23,405,23,"fn"],[391,25,405,25],[391,27,405,27],[392,6,406,8],[392,10,406,12],[392,11,406,13,"_sendPacket"],[392,22,406,24],[392,23,406,25],[392,32,406,34],[392,34,406,36,"msg"],[392,37,406,39],[392,39,406,41,"options"],[392,46,406,48],[392,48,406,50,"fn"],[392,50,406,52],[392,51,406,53],[393,6,407,8],[393,13,407,15],[393,17,407,19],[394,4,408,4],[395,4,409,4],[396,0,410,0],[397,0,411,0],[398,0,412,0],[399,0,413,0],[400,0,414,0],[401,0,415,0],[402,0,416,0],[403,0,417,0],[404,4,418,4,"_sendPacket"],[404,15,418,15,"_sendPacket"],[404,16,418,16,"type"],[404,20,418,20],[404,22,418,22,"data"],[404,26,418,26],[404,28,418,28,"options"],[404,35,418,35],[404,37,418,37,"fn"],[404,39,418,39],[404,41,418,41],[405,6,419,8],[405,10,419,12],[405,20,419,22],[405,25,419,27],[405,32,419,34,"data"],[405,36,419,38],[405,38,419,40],[406,8,420,12,"fn"],[406,10,420,14],[406,13,420,17,"data"],[406,17,420,21],[407,8,421,12,"data"],[407,12,421,16],[407,15,421,19,"undefined"],[407,24,421,28],[408,6,422,8],[409,6,423,8],[409,10,423,12],[409,20,423,22],[409,25,423,27],[409,32,423,34,"options"],[409,39,423,41],[409,41,423,43],[410,8,424,12,"fn"],[410,10,424,14],[410,13,424,17,"options"],[410,20,424,24],[411,8,425,12,"options"],[411,15,425,19],[411,18,425,22],[411,22,425,26],[412,6,426,8],[413,6,427,8],[413,10,427,12],[413,19,427,21],[413,24,427,26],[413,28,427,30],[413,29,427,31,"readyState"],[413,39,427,41],[413,43,427,45],[413,51,427,53],[413,56,427,58],[413,60,427,62],[413,61,427,63,"readyState"],[413,71,427,73],[413,73,427,75],[414,8,428,12],[415,6,429,8],[416,6,430,8,"options"],[416,13,430,15],[416,16,430,18,"options"],[416,23,430,25],[416,27,430,29],[416,28,430,30],[416,29,430,31],[417,6,431,8,"options"],[417,13,431,15],[417,14,431,16,"compress"],[417,22,431,24],[417,25,431,27],[417,30,431,32],[417,35,431,37,"options"],[417,42,431,44],[417,43,431,45,"compress"],[417,51,431,53],[418,6,432,8],[418,12,432,14,"packet"],[418,18,432,20],[418,21,432,23],[419,8,433,12,"type"],[419,12,433,16],[419,14,433,18,"type"],[419,18,433,22],[420,8,434,12,"data"],[420,12,434,16],[420,14,434,18,"data"],[420,18,434,22],[421,8,435,12,"options"],[421,15,435,19],[421,17,435,21,"options"],[422,6,436,8],[422,7,436,9],[423,6,437,8],[423,10,437,12],[423,11,437,13,"emitReserved"],[423,23,437,25],[423,24,437,26],[423,38,437,40],[423,40,437,42,"packet"],[423,46,437,48],[423,47,437,49],[424,6,438,8],[424,10,438,12],[424,11,438,13,"writeBuffer"],[424,22,438,24],[424,23,438,25,"push"],[424,27,438,29],[424,28,438,30,"packet"],[424,34,438,36],[424,35,438,37],[425,6,439,8],[425,10,439,12,"fn"],[425,12,439,14],[425,14,440,12],[425,18,440,16],[425,19,440,17,"once"],[425,23,440,21],[425,24,440,22],[425,31,440,29],[425,33,440,31,"fn"],[425,35,440,33],[425,36,440,34],[426,6,441,8],[426,10,441,12],[426,11,441,13,"flush"],[426,16,441,18],[426,17,441,19],[426,18,441,20],[427,4,442,4],[428,4,443,4],[429,0,444,0],[430,0,445,0],[431,4,446,4,"close"],[431,9,446,9,"close"],[431,10,446,9],[431,12,446,12],[432,6,447,8],[432,12,447,14,"close"],[432,17,447,19],[432,20,447,22,"close"],[432,21,447,22],[432,26,447,28],[433,8,448,12],[433,12,448,16],[433,13,448,17,"_onClose"],[433,21,448,25],[433,22,448,26],[433,36,448,40],[433,37,448,41],[434,8,449,12],[434,12,449,16],[434,13,449,17,"transport"],[434,22,449,26],[434,23,449,27,"close"],[434,28,449,32],[434,29,449,33],[434,30,449,34],[435,6,450,8],[435,7,450,9],[436,6,451,8],[436,12,451,14,"cleanupAndClose"],[436,27,451,29],[436,30,451,32,"cleanupAndClose"],[436,31,451,32],[436,36,451,38],[437,8,452,12],[437,12,452,16],[437,13,452,17,"off"],[437,16,452,20],[437,17,452,21],[437,26,452,30],[437,28,452,32,"cleanupAndClose"],[437,43,452,47],[437,44,452,48],[438,8,453,12],[438,12,453,16],[438,13,453,17,"off"],[438,16,453,20],[438,17,453,21],[438,31,453,35],[438,33,453,37,"cleanupAndClose"],[438,48,453,52],[438,49,453,53],[439,8,454,12,"close"],[439,13,454,17],[439,14,454,18],[439,15,454,19],[440,6,455,8],[440,7,455,9],[441,6,456,8],[441,12,456,14,"waitForUpgrade"],[441,26,456,28],[441,29,456,31,"waitForUpgrade"],[441,30,456,31],[441,35,456,37],[442,8,457,12],[443,8,458,12],[443,12,458,16],[443,13,458,17,"once"],[443,17,458,21],[443,18,458,22],[443,27,458,31],[443,29,458,33,"cleanupAndClose"],[443,44,458,48],[443,45,458,49],[444,8,459,12],[444,12,459,16],[444,13,459,17,"once"],[444,17,459,21],[444,18,459,22],[444,32,459,36],[444,34,459,38,"cleanupAndClose"],[444,49,459,53],[444,50,459,54],[445,6,460,8],[445,7,460,9],[446,6,461,8],[446,10,461,12],[446,19,461,21],[446,24,461,26],[446,28,461,30],[446,29,461,31,"readyState"],[446,39,461,41],[446,43,461,45],[446,49,461,51],[446,54,461,56],[446,58,461,60],[446,59,461,61,"readyState"],[446,69,461,71],[446,71,461,73],[447,8,462,12],[447,12,462,16],[447,13,462,17,"readyState"],[447,23,462,27],[447,26,462,30],[447,35,462,39],[448,8,463,12],[448,12,463,16],[448,16,463,20],[448,17,463,21,"writeBuffer"],[448,28,463,32],[448,29,463,33,"length"],[448,35,463,39],[448,37,463,41],[449,10,464,16],[449,14,464,20],[449,15,464,21,"once"],[449,19,464,25],[449,20,464,26],[449,27,464,33],[449,29,464,35],[449,35,464,41],[450,12,465,20],[450,16,465,24],[450,20,465,28],[450,21,465,29,"upgrading"],[450,30,465,38],[450,32,465,40],[451,14,466,24,"waitForUpgrade"],[451,28,466,38],[451,29,466,39],[451,30,466,40],[452,12,467,20],[452,13,467,21],[452,19,468,25],[453,14,469,24,"close"],[453,19,469,29],[453,20,469,30],[453,21,469,31],[454,12,470,20],[455,10,471,16],[455,11,471,17],[455,12,471,18],[456,8,472,12],[456,9,472,13],[456,15,473,17],[456,19,473,21],[456,23,473,25],[456,24,473,26,"upgrading"],[456,33,473,35],[456,35,473,37],[457,10,474,16,"waitForUpgrade"],[457,24,474,30],[457,25,474,31],[457,26,474,32],[458,8,475,12],[458,9,475,13],[458,15,476,17],[459,10,477,16,"close"],[459,15,477,21],[459,16,477,22],[459,17,477,23],[460,8,478,12],[461,6,479,8],[462,6,480,8],[462,13,480,15],[462,17,480,19],[463,4,481,4],[464,4,482,4],[465,0,483,0],[466,0,484,0],[467,0,485,0],[468,0,486,0],[469,4,487,4,"_onError"],[469,12,487,12,"_onError"],[469,13,487,13,"err"],[469,16,487,16],[469,18,487,18],[470,6,488,8,"SocketWithoutUpgrade"],[470,26,488,28],[470,27,488,29,"priorWebsocketSuccess"],[470,48,488,50],[470,51,488,53],[470,56,488,58],[471,6,489,8],[471,10,489,12],[471,14,489,16],[471,15,489,17,"opts"],[471,19,489,21],[471,20,489,22,"tryAllTransports"],[471,36,489,38],[471,40,490,12],[471,44,490,16],[471,45,490,17,"transports"],[471,55,490,27],[471,56,490,28,"length"],[471,62,490,34],[471,65,490,37],[471,66,490,38],[471,70,491,12],[471,74,491,16],[471,75,491,17,"readyState"],[471,85,491,27],[471,90,491,32],[471,99,491,41],[471,101,491,43],[472,8,492,12],[472,12,492,16],[472,13,492,17,"transports"],[472,23,492,27],[472,24,492,28,"shift"],[472,29,492,33],[472,30,492,34],[472,31,492,35],[473,8,493,12],[473,15,493,19],[473,19,493,23],[473,20,493,24,"_open"],[473,25,493,29],[473,26,493,30],[473,27,493,31],[474,6,494,8],[475,6,495,8],[475,10,495,12],[475,11,495,13,"emitReserved"],[475,23,495,25],[475,24,495,26],[475,31,495,33],[475,33,495,35,"err"],[475,36,495,38],[475,37,495,39],[476,6,496,8],[476,10,496,12],[476,11,496,13,"_onClose"],[476,19,496,21],[476,20,496,22],[476,37,496,39],[476,39,496,41,"err"],[476,42,496,44],[476,43,496,45],[477,4,497,4],[478,4,498,4],[479,0,499,0],[480,0,500,0],[481,0,501,0],[482,0,502,0],[483,4,503,4,"_onClose"],[483,12,503,12,"_onClose"],[483,13,503,13,"reason"],[483,19,503,19],[483,21,503,21,"description"],[483,32,503,32],[483,34,503,34],[484,6,504,8],[484,10,504,12],[484,19,504,21],[484,24,504,26],[484,28,504,30],[484,29,504,31,"readyState"],[484,39,504,41],[484,43,505,12],[484,49,505,18],[484,54,505,23],[484,58,505,27],[484,59,505,28,"readyState"],[484,69,505,38],[484,73,506,12],[484,82,506,21],[484,87,506,26],[484,91,506,30],[484,92,506,31,"readyState"],[484,102,506,41],[484,104,506,43],[485,8,507,12],[486,8,508,12],[486,12,508,16],[486,13,508,17,"clearTimeoutFn"],[486,27,508,31],[486,28,508,32],[486,32,508,36],[486,33,508,37,"_pingTimeoutTimer"],[486,50,508,54],[486,51,508,55],[487,8,509,12],[488,8,510,12],[488,12,510,16],[488,13,510,17,"transport"],[488,22,510,26],[488,23,510,27,"removeAllListeners"],[488,41,510,45],[488,42,510,46],[488,49,510,53],[488,50,510,54],[489,8,511,12],[490,8,512,12],[490,12,512,16],[490,13,512,17,"transport"],[490,22,512,26],[490,23,512,27,"close"],[490,28,512,32],[490,29,512,33],[490,30,512,34],[491,8,513,12],[492,8,514,12],[492,12,514,16],[492,13,514,17,"transport"],[492,22,514,26],[492,23,514,27,"removeAllListeners"],[492,41,514,45],[492,42,514,46],[492,43,514,47],[493,8,515,12],[493,12,515,16,"withEventListeners"],[493,30,515,34],[493,32,515,36],[494,10,516,16],[494,14,516,20],[494,18,516,24],[494,19,516,25,"_beforeunloadEventListener"],[494,45,516,51],[494,47,516,53],[495,12,517,20,"removeEventListener"],[495,31,517,39],[495,32,517,40],[495,46,517,54],[495,48,517,56],[495,52,517,60],[495,53,517,61,"_beforeunloadEventListener"],[495,79,517,87],[495,81,517,89],[495,86,517,94],[495,87,517,95],[496,10,518,16],[497,10,519,16],[497,14,519,20],[497,18,519,24],[497,19,519,25,"_offlineEventListener"],[497,40,519,46],[497,42,519,48],[498,12,520,20],[498,18,520,26,"i"],[498,19,520,27],[498,22,520,30,"OFFLINE_EVENT_LISTENERS"],[498,45,520,53],[498,46,520,54,"indexOf"],[498,53,520,61],[498,54,520,62],[498,58,520,66],[498,59,520,67,"_offlineEventListener"],[498,80,520,88],[498,81,520,89],[499,12,521,20],[499,16,521,24,"i"],[499,17,521,25],[499,22,521,30],[499,23,521,31],[499,24,521,32],[499,26,521,34],[500,14,522,24,"OFFLINE_EVENT_LISTENERS"],[500,37,522,47],[500,38,522,48,"splice"],[500,44,522,54],[500,45,522,55,"i"],[500,46,522,56],[500,48,522,58],[500,49,522,59],[500,50,522,60],[501,12,523,20],[502,10,524,16],[503,8,525,12],[504,8,526,12],[505,8,527,12],[505,12,527,16],[505,13,527,17,"readyState"],[505,23,527,27],[505,26,527,30],[505,34,527,38],[506,8,528,12],[507,8,529,12],[507,12,529,16],[507,13,529,17,"id"],[507,15,529,19],[507,18,529,22],[507,22,529,26],[508,8,530,12],[509,8,531,12],[509,12,531,16],[509,13,531,17,"emitReserved"],[509,25,531,29],[509,26,531,30],[509,33,531,37],[509,35,531,39,"reason"],[509,41,531,45],[509,43,531,47,"description"],[509,54,531,58],[509,55,531,59],[510,8,532,12],[511,8,533,12],[512,8,534,12],[512,12,534,16],[512,13,534,17,"writeBuffer"],[512,24,534,28],[512,27,534,31],[512,29,534,33],[513,8,535,12],[513,12,535,16],[513,13,535,17,"_prevBufferLen"],[513,27,535,31],[513,30,535,34],[513,31,535,35],[514,6,536,8],[515,4,537,4],[516,2,538,0],[517,2,539,0,"SocketWithoutUpgrade"],[517,22,539,20],[517,23,539,21,"protocol"],[517,31,539,29],[517,34,539,32,"protocol"],[517,49,539,40],[517,50,539,40,"protocol"],[517,58,539,40],[518,2,540,0],[519,0,541,0],[520,0,542,0],[521,0,543,0],[522,0,544,0],[523,0,545,0],[524,0,546,0],[525,0,547,0],[526,0,548,0],[527,0,549,0],[528,0,550,0],[529,0,551,0],[530,0,552,0],[531,0,553,0],[532,0,554,0],[533,0,555,0],[534,0,556,0],[535,0,557,0],[536,0,558,0],[537,0,559,0],[538,0,560,0],[539,0,561,0],[540,0,562,0],[541,2,563,7],[541,8,563,13,"SocketWithUpgrade"],[541,25,563,30],[541,34,563,39,"SocketWithoutUpgrade"],[541,54,563,59],[541,55,563,60],[542,4,564,4,"constructor"],[542,15,564,15,"constructor"],[542,16,564,15],[542,18,564,18],[543,6,565,8],[543,11,565,13],[543,12,565,14],[543,15,565,17,"arguments"],[543,24,565,26],[543,25,565,27],[544,6,566,8],[544,10,566,12],[544,11,566,13,"_upgrades"],[544,20,566,22],[544,23,566,25],[544,25,566,27],[545,4,567,4],[546,4,568,4,"onOpen"],[546,10,568,10,"onOpen"],[546,11,568,10],[546,13,568,13],[547,6,569,8],[547,11,569,13],[547,12,569,14,"onOpen"],[547,18,569,20],[547,19,569,21],[547,20,569,22],[548,6,570,8],[548,10,570,12],[548,16,570,18],[548,21,570,23],[548,25,570,27],[548,26,570,28,"readyState"],[548,36,570,38],[548,40,570,42],[548,44,570,46],[548,45,570,47,"opts"],[548,49,570,51],[548,50,570,52,"upgrade"],[548,57,570,59],[548,59,570,61],[549,8,571,12],[549,13,571,17],[549,17,571,21,"i"],[549,18,571,22],[549,21,571,25],[549,22,571,26],[549,24,571,28,"i"],[549,25,571,29],[549,28,571,32],[549,32,571,36],[549,33,571,37,"_upgrades"],[549,42,571,46],[549,43,571,47,"length"],[549,49,571,53],[549,51,571,55,"i"],[549,52,571,56],[549,54,571,58],[549,56,571,60],[550,10,572,16],[550,14,572,20],[550,15,572,21,"_probe"],[550,21,572,27],[550,22,572,28],[550,26,572,32],[550,27,572,33,"_upgrades"],[550,36,572,42],[550,37,572,43,"i"],[550,38,572,44],[550,39,572,45],[550,40,572,46],[551,8,573,12],[552,6,574,8],[553,4,575,4],[554,4,576,4],[555,0,577,0],[556,0,578,0],[557,0,579,0],[558,0,580,0],[559,0,581,0],[560,4,582,4,"_probe"],[560,10,582,10,"_probe"],[560,11,582,11,"name"],[560,15,582,15],[560,17,582,17],[561,6,583,8],[561,10,583,12,"transport"],[561,19,583,21],[561,22,583,24],[561,26,583,28],[561,27,583,29,"createTransport"],[561,42,583,44],[561,43,583,45,"name"],[561,47,583,49],[561,48,583,50],[562,6,584,8],[562,10,584,12,"failed"],[562,16,584,18],[562,19,584,21],[562,24,584,26],[563,6,585,8,"SocketWithoutUpgrade"],[563,26,585,28],[563,27,585,29,"priorWebsocketSuccess"],[563,48,585,50],[563,51,585,53],[563,56,585,58],[564,6,586,8],[564,12,586,14,"onTransportOpen"],[564,27,586,29],[564,30,586,32,"onTransportOpen"],[564,31,586,32],[564,36,586,38],[565,8,587,12],[565,12,587,16,"failed"],[565,18,587,22],[565,20,588,16],[566,8,589,12,"transport"],[566,17,589,21],[566,18,589,22,"send"],[566,22,589,26],[566,23,589,27],[566,24,589,28],[567,10,589,30,"type"],[567,14,589,34],[567,16,589,36],[567,22,589,42],[568,10,589,44,"data"],[568,14,589,48],[568,16,589,50],[569,8,589,58],[569,9,589,59],[569,10,589,60],[569,11,589,61],[570,8,590,12,"transport"],[570,17,590,21],[570,18,590,22,"once"],[570,22,590,26],[570,23,590,27],[570,31,590,35],[570,33,590,38,"msg"],[570,36,590,41],[570,40,590,46],[571,10,591,16],[571,14,591,20,"failed"],[571,20,591,26],[571,22,592,20],[572,10,593,16],[572,14,593,20],[572,20,593,26],[572,25,593,31,"msg"],[572,28,593,34],[572,29,593,35,"type"],[572,33,593,39],[572,37,593,43],[572,44,593,50],[572,49,593,55,"msg"],[572,52,593,58],[572,53,593,59,"data"],[572,57,593,63],[572,59,593,65],[573,12,594,20],[573,16,594,24],[573,17,594,25,"upgrading"],[573,26,594,34],[573,29,594,37],[573,33,594,41],[574,12,595,20],[574,16,595,24],[574,17,595,25,"emitReserved"],[574,29,595,37],[574,30,595,38],[574,41,595,49],[574,43,595,51,"transport"],[574,52,595,60],[574,53,595,61],[575,12,596,20],[575,16,596,24],[575,17,596,25,"transport"],[575,26,596,34],[575,28,597,24],[576,12,598,20,"SocketWithoutUpgrade"],[576,32,598,40],[576,33,598,41,"priorWebsocketSuccess"],[576,54,598,62],[576,57,599,24],[576,68,599,35],[576,73,599,40,"transport"],[576,82,599,49],[576,83,599,50,"name"],[576,87,599,54],[577,12,600,20],[577,16,600,24],[577,17,600,25,"transport"],[577,26,600,34],[577,27,600,35,"pause"],[577,32,600,40],[577,33,600,41],[577,39,600,47],[578,14,601,24],[578,18,601,28,"failed"],[578,24,601,34],[578,26,602,28],[579,14,603,24],[579,18,603,28],[579,26,603,36],[579,31,603,41],[579,35,603,45],[579,36,603,46,"readyState"],[579,46,603,56],[579,48,604,28],[580,14,605,24,"cleanup"],[580,21,605,31],[580,22,605,32],[580,23,605,33],[581,14,606,24],[581,18,606,28],[581,19,606,29,"setTransport"],[581,31,606,41],[581,32,606,42,"transport"],[581,41,606,51],[581,42,606,52],[582,14,607,24,"transport"],[582,23,607,33],[582,24,607,34,"send"],[582,28,607,38],[582,29,607,39],[582,30,607,40],[583,16,607,42,"type"],[583,20,607,46],[583,22,607,48],[584,14,607,58],[584,15,607,59],[584,16,607,60],[584,17,607,61],[585,14,608,24],[585,18,608,28],[585,19,608,29,"emitReserved"],[585,31,608,41],[585,32,608,42],[585,41,608,51],[585,43,608,53,"transport"],[585,52,608,62],[585,53,608,63],[586,14,609,24,"transport"],[586,23,609,33],[586,26,609,36],[586,30,609,40],[587,14,610,24],[587,18,610,28],[587,19,610,29,"upgrading"],[587,28,610,38],[587,31,610,41],[587,36,610,46],[588,14,611,24],[588,18,611,28],[588,19,611,29,"flush"],[588,24,611,34],[588,25,611,35],[588,26,611,36],[589,12,612,20],[589,13,612,21],[589,14,612,22],[590,10,613,16],[590,11,613,17],[590,17,614,21],[591,12,615,20],[591,18,615,26,"err"],[591,21,615,29],[591,24,615,32],[591,28,615,36,"Error"],[591,33,615,41],[591,34,615,42],[591,47,615,55],[591,48,615,56],[592,12,616,20],[593,12,617,20,"err"],[593,15,617,23],[593,16,617,24,"transport"],[593,25,617,33],[593,28,617,36,"transport"],[593,37,617,45],[593,38,617,46,"name"],[593,42,617,50],[594,12,618,20],[594,16,618,24],[594,17,618,25,"emitReserved"],[594,29,618,37],[594,30,618,38],[594,44,618,52],[594,46,618,54,"err"],[594,49,618,57],[594,50,618,58],[595,10,619,16],[596,8,620,12],[596,9,620,13],[596,10,620,14],[597,6,621,8],[597,7,621,9],[598,6,622,8],[598,15,622,17,"freezeTransport"],[598,30,622,32,"freezeTransport"],[598,31,622,32],[598,33,622,35],[599,8,623,12],[599,12,623,16,"failed"],[599,18,623,22],[599,20,624,16],[600,8,625,12],[601,8,626,12,"failed"],[601,14,626,18],[601,17,626,21],[601,21,626,25],[602,8,627,12,"cleanup"],[602,15,627,19],[602,16,627,20],[602,17,627,21],[603,8,628,12,"transport"],[603,17,628,21],[603,18,628,22,"close"],[603,23,628,27],[603,24,628,28],[603,25,628,29],[604,8,629,12,"transport"],[604,17,629,21],[604,20,629,24],[604,24,629,28],[605,6,630,8],[606,6,631,8],[607,6,632,8],[607,12,632,14,"onerror"],[607,19,632,21],[607,22,632,25,"err"],[607,25,632,28],[607,29,632,33],[608,8,633,12],[608,14,633,18,"error"],[608,19,633,23],[608,22,633,26],[608,26,633,30,"Error"],[608,31,633,35],[608,32,633,36],[608,47,633,51],[608,50,633,54,"err"],[608,53,633,57],[608,54,633,58],[609,8,634,12],[610,8,635,12,"error"],[610,13,635,17],[610,14,635,18,"transport"],[610,23,635,27],[610,26,635,30,"transport"],[610,35,635,39],[610,36,635,40,"name"],[610,40,635,44],[611,8,636,12,"freezeTransport"],[611,23,636,27],[611,24,636,28],[611,25,636,29],[612,8,637,12],[612,12,637,16],[612,13,637,17,"emitReserved"],[612,25,637,29],[612,26,637,30],[612,40,637,44],[612,42,637,46,"error"],[612,47,637,51],[612,48,637,52],[613,6,638,8],[613,7,638,9],[614,6,639,8],[614,15,639,17,"onTransportClose"],[614,31,639,33,"onTransportClose"],[614,32,639,33],[614,34,639,36],[615,8,640,12,"onerror"],[615,15,640,19],[615,16,640,20],[615,34,640,38],[615,35,640,39],[616,6,641,8],[617,6,642,8],[618,6,643,8],[618,15,643,17,"onclose"],[618,22,643,24,"onclose"],[618,23,643,24],[618,25,643,27],[619,8,644,12,"onerror"],[619,15,644,19],[619,16,644,20],[619,31,644,35],[619,32,644,36],[620,6,645,8],[621,6,646,8],[622,6,647,8],[622,15,647,17,"onupgrade"],[622,24,647,26,"onupgrade"],[622,25,647,27,"to"],[622,27,647,29],[622,29,647,31],[623,8,648,12],[623,12,648,16,"transport"],[623,21,648,25],[623,25,648,29,"to"],[623,27,648,31],[623,28,648,32,"name"],[623,32,648,36],[623,37,648,41,"transport"],[623,46,648,50],[623,47,648,51,"name"],[623,51,648,55],[623,53,648,57],[624,10,649,16,"freezeTransport"],[624,25,649,31],[624,26,649,32],[624,27,649,33],[625,8,650,12],[626,6,651,8],[627,6,652,8],[628,6,653,8],[628,12,653,14,"cleanup"],[628,19,653,21],[628,22,653,24,"cleanup"],[628,23,653,24],[628,28,653,30],[629,8,654,12,"transport"],[629,17,654,21],[629,18,654,22,"removeListener"],[629,32,654,36],[629,33,654,37],[629,39,654,43],[629,41,654,45,"onTransportOpen"],[629,56,654,60],[629,57,654,61],[630,8,655,12,"transport"],[630,17,655,21],[630,18,655,22,"removeListener"],[630,32,655,36],[630,33,655,37],[630,40,655,44],[630,42,655,46,"onerror"],[630,49,655,53],[630,50,655,54],[631,8,656,12,"transport"],[631,17,656,21],[631,18,656,22,"removeListener"],[631,32,656,36],[631,33,656,37],[631,40,656,44],[631,42,656,46,"onTransportClose"],[631,58,656,62],[631,59,656,63],[632,8,657,12],[632,12,657,16],[632,13,657,17,"off"],[632,16,657,20],[632,17,657,21],[632,24,657,28],[632,26,657,30,"onclose"],[632,33,657,37],[632,34,657,38],[633,8,658,12],[633,12,658,16],[633,13,658,17,"off"],[633,16,658,20],[633,17,658,21],[633,28,658,32],[633,30,658,34,"onupgrade"],[633,39,658,43],[633,40,658,44],[634,6,659,8],[634,7,659,9],[635,6,660,8,"transport"],[635,15,660,17],[635,16,660,18,"once"],[635,20,660,22],[635,21,660,23],[635,27,660,29],[635,29,660,31,"onTransportOpen"],[635,44,660,46],[635,45,660,47],[636,6,661,8,"transport"],[636,15,661,17],[636,16,661,18,"once"],[636,20,661,22],[636,21,661,23],[636,28,661,30],[636,30,661,32,"onerror"],[636,37,661,39],[636,38,661,40],[637,6,662,8,"transport"],[637,15,662,17],[637,16,662,18,"once"],[637,20,662,22],[637,21,662,23],[637,28,662,30],[637,30,662,32,"onTransportClose"],[637,46,662,48],[637,47,662,49],[638,6,663,8],[638,10,663,12],[638,11,663,13,"once"],[638,15,663,17],[638,16,663,18],[638,23,663,25],[638,25,663,27,"onclose"],[638,32,663,34],[638,33,663,35],[639,6,664,8],[639,10,664,12],[639,11,664,13,"once"],[639,15,664,17],[639,16,664,18],[639,27,664,29],[639,29,664,31,"onupgrade"],[639,38,664,40],[639,39,664,41],[640,6,665,8],[640,10,665,12],[640,14,665,16],[640,15,665,17,"_upgrades"],[640,24,665,26],[640,25,665,27,"indexOf"],[640,32,665,34],[640,33,665,35],[640,47,665,49],[640,48,665,50],[640,53,665,55],[640,54,665,56],[640,55,665,57],[640,59,666,12,"name"],[640,63,666,16],[640,68,666,21],[640,82,666,35],[640,84,666,37],[641,8,667,12],[642,8,668,12],[642,12,668,16],[642,13,668,17,"setTimeoutFn"],[642,25,668,29],[642,26,668,30],[642,32,668,36],[643,10,669,16],[643,14,669,20],[643,15,669,21,"failed"],[643,21,669,27],[643,23,669,29],[644,12,670,20,"transport"],[644,21,670,29],[644,22,670,30,"open"],[644,26,670,34],[644,27,670,35],[644,28,670,36],[645,10,671,16],[646,8,672,12],[646,9,672,13],[646,11,672,15],[646,14,672,18],[646,15,672,19],[647,6,673,8],[647,7,673,9],[647,13,674,13],[648,8,675,12,"transport"],[648,17,675,21],[648,18,675,22,"open"],[648,22,675,26],[648,23,675,27],[648,24,675,28],[649,6,676,8],[650,4,677,4],[651,4,678,4,"onHandshake"],[651,15,678,15,"onHandshake"],[651,16,678,16,"data"],[651,20,678,20],[651,22,678,22],[652,6,679,8],[652,10,679,12],[652,11,679,13,"_upgrades"],[652,20,679,22],[652,23,679,25],[652,27,679,29],[652,28,679,30,"_filterUpgrades"],[652,43,679,45],[652,44,679,46,"data"],[652,48,679,50],[652,49,679,51,"upgrades"],[652,57,679,59],[652,58,679,60],[653,6,680,8],[653,11,680,13],[653,12,680,14,"onHandshake"],[653,23,680,25],[653,24,680,26,"data"],[653,28,680,30],[653,29,680,31],[654,4,681,4],[655,4,682,4],[656,0,683,0],[657,0,684,0],[658,0,685,0],[659,0,686,0],[660,0,687,0],[661,4,688,4,"_filterUpgrades"],[661,19,688,19,"_filterUpgrades"],[661,20,688,20,"upgrades"],[661,28,688,28],[661,30,688,30],[662,6,689,8],[662,12,689,14,"filteredUpgrades"],[662,28,689,30],[662,31,689,33],[662,33,689,35],[663,6,690,8],[663,11,690,13],[663,15,690,17,"i"],[663,16,690,18],[663,19,690,21],[663,20,690,22],[663,22,690,24,"i"],[663,23,690,25],[663,26,690,28,"upgrades"],[663,34,690,36],[663,35,690,37,"length"],[663,41,690,43],[663,43,690,45,"i"],[663,44,690,46],[663,46,690,48],[663,48,690,50],[664,8,691,12],[664,12,691,16],[664,13,691,17],[664,17,691,21],[664,18,691,22,"transports"],[664,28,691,32],[664,29,691,33,"indexOf"],[664,36,691,40],[664,37,691,41,"upgrades"],[664,45,691,49],[664,46,691,50,"i"],[664,47,691,51],[664,48,691,52],[664,49,691,53],[664,51,692,16,"filteredUpgrades"],[664,67,692,32],[664,68,692,33,"push"],[664,72,692,37],[664,73,692,38,"upgrades"],[664,81,692,46],[664,82,692,47,"i"],[664,83,692,48],[664,84,692,49],[664,85,692,50],[665,6,693,8],[666,6,694,8],[666,13,694,15,"filteredUpgrades"],[666,29,694,31],[667,4,695,4],[668,2,696,0],[669,2,697,0],[670,0,698,0],[671,0,699,0],[672,0,700,0],[673,0,701,0],[674,0,702,0],[675,0,703,0],[676,0,704,0],[677,0,705,0],[678,0,706,0],[679,0,707,0],[680,0,708,0],[681,0,709,0],[682,0,710,0],[683,0,711,0],[684,0,712,0],[685,0,713,0],[686,0,714,0],[687,0,715,0],[688,2,716,7],[688,8,716,13,"Socket"],[688,14,716,19],[688,23,716,28,"SocketWithUpgrade"],[688,40,716,45],[688,41,716,46],[689,4,717,4,"constructor"],[689,15,717,15,"constructor"],[689,16,717,16,"uri"],[689,19,717,19],[689,21,717,21,"opts"],[689,25,717,25],[689,28,717,28],[689,29,717,29],[689,30,717,30],[689,32,717,32],[690,6,718,8],[690,12,718,14,"o"],[690,13,718,15],[690,16,718,18],[690,23,718,25,"uri"],[690,26,718,28],[690,31,718,33],[690,39,718,41],[690,42,718,44,"uri"],[690,45,718,47],[690,48,718,50,"opts"],[690,52,718,54],[691,6,719,8],[691,10,719,12],[691,11,719,13,"o"],[691,12,719,14],[691,13,719,15,"transports"],[691,23,719,25],[691,27,720,13,"o"],[691,28,720,14],[691,29,720,15,"transports"],[691,39,720,25],[691,43,720,29],[691,50,720,36,"o"],[691,51,720,37],[691,52,720,38,"transports"],[691,62,720,48],[691,63,720,49],[691,64,720,50],[691,65,720,51],[691,70,720,56],[691,78,720,65],[691,80,720,67],[692,8,721,12,"o"],[692,9,721,13],[692,10,721,14,"transports"],[692,20,721,24],[692,23,721,27],[692,24,721,28,"o"],[692,25,721,29],[692,26,721,30,"transports"],[692,36,721,40],[692,40,721,44],[692,41,721,45],[692,50,721,54],[692,52,721,56],[692,63,721,67],[692,65,721,69],[692,79,721,83],[692,80,721,84],[692,82,722,17,"map"],[692,85,722,20],[692,86,722,22,"transportName"],[692,99,722,35],[692,103,722,40,"DEFAULT_TRANSPORTS"],[692,121,722,58],[692,122,722,58,"transports"],[692,132,722,58],[692,133,722,59,"transportName"],[692,146,722,72],[692,147,722,73],[692,148,722,74],[692,149,723,17,"filter"],[692,155,723,23],[692,156,723,25,"t"],[692,157,723,26],[692,161,723,31],[692,162,723,32],[692,163,723,33,"t"],[692,164,723,34],[692,165,723,35],[693,6,724,8],[694,6,725,8],[694,11,725,13],[694,12,725,14,"uri"],[694,15,725,17],[694,17,725,19,"o"],[694,18,725,20],[694,19,725,21],[695,4,726,4],[696,2,727,0],[697,0,727,1],[697,3]],"functionMap":{"names":["<global>","addEventListener$argument_1","OFFLINE_EVENT_LISTENERS.forEach$argument_0","SocketWithoutUpgrade","SocketWithoutUpgrade#constructor","opts.transports.forEach$argument_0","_beforeunloadEventListener","_offlineEventListener","SocketWithoutUpgrade#createTransport","SocketWithoutUpgrade#_open","setTimeoutFn$argument_0","SocketWithoutUpgrade#setTransport","transport.on.on.on.on$argument_1","SocketWithoutUpgrade#onOpen","SocketWithoutUpgrade#_onPacket","SocketWithoutUpgrade#onHandshake","SocketWithoutUpgrade#_resetPingTimeout","SocketWithoutUpgrade#_onDrain","SocketWithoutUpgrade#flush","SocketWithoutUpgrade#_getWritablePackets","SocketWithoutUpgrade#_hasPingExpired","nextTick$argument_0","SocketWithoutUpgrade#write","SocketWithoutUpgrade#send","SocketWithoutUpgrade#_sendPacket","SocketWithoutUpgrade#close","close","cleanupAndClose","waitForUpgrade","once$argument_1","SocketWithoutUpgrade#_onError","SocketWithoutUpgrade#_onClose","SocketWithUpgrade","SocketWithUpgrade#constructor","SocketWithUpgrade#onOpen","SocketWithUpgrade#_probe","onTransportOpen","transport.once$argument_1","transport.pause$argument_0","freezeTransport","onerror","onTransportClose","onclose","onupgrade","cleanup","SocketWithUpgrade#onHandshake","SocketWithUpgrade#_filterUpgrades","Socket","Socket#constructor","map$argument_0","map.filter$argument_0"],"mappings":"AAA;gCCa;wCCC,wBD;KDC;OGyB;ICO;gCCkD;SDI;kDE2B;iBFM;6CGI;iBHI;KDQ;IKQ;KLiB;IMM;8BCG;aDE;KNY;IQM;yBCW,oDD;KRC;IUM;KVM;IWM;KX+B;IYO;KZY;IaM;mDNI;SME;KbI;IcM;KdY;IeM;KfY;IgBO;KhBmB;kBiBU;qBCM;aDE;KjBG;ImBS;KnBG;IoBS;KpBG;IqBU;KrBwB;IsBI;sBCC;SDG;gCEC;SFI;+BGC;SHI;mCII;iBJO;KtBU;I2BM;K3BU;I4BM;K5BkC;CHC;OgCyB;ICC;KDG;IEC;KFO;IGO;gCCI;qCCI;yCCU;qBDY;aDQ;SDC;QIC;SJQ;wBKE;SLM;QMC;SNE;QOE;SPE;QQE;SRI;wBSE;STM;8BzBS;ayBI;KHK;IaC;KbG;IcO;KdO;ChCC;O+CoB;ICC;qBCK,oDD;wBEC,UF;KDG;C/CC"},"hasCjsExports":false},"type":"js/module"}]}